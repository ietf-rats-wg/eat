<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="June" day="14"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string and every bit in the byte string contributes to entropy.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, Verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, {#swevidence}, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption.
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT.
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-18.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="14" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-18"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9aXPbWJYo+B2/AiFnRFpVJGUtXvtl1lNKyixl25afJbe7
p6YiAyIhCmUSYAOgZJZf9m+fs99zAVB2dfeLmIgZR0WlCODu5559GY/HSdNm
5ey3bFGV+au0rdd5Uqxq+qtpD548efnkIJlm7au0aWdJMqumZbaED2d1dtOO
i7y9GddZ24zzrB0vsjZv2iS5n79K3x9fXaYfq/pTUc7TX+pqvUoepdOqbPKy
WTev0u83efM9PGrW18uiaYqqbDcr6Pf87OrnZFW8StK0rab6Hf2Y5av2Fp4c
4e+mqts6v2nCF81mGT+YVstVNm3dF+vr8Kys8FF9M81nTbtZ5PpZW7T44+o2
T89K+LFJj1tcVtbCHNOr6lNepo/Pjq92k+z6us7vXqXwI8nqPIPJl21el3mb
fLqH/SrmJS4+c82n11UNi57BRr1KD57sH473nyTZur2t6lfJOC1KmP7rSfp6
Xc6uF9kshxnydr/O1nVeTvPoVVXDRl/m03WN04QZV/Umff36BF7ly6xYvEoX
88X/bOSDlt5PYAd0pF8m6Rs4+022tHF+KepidpvV7gWN8r/W2QJaLtOrfHpb
VotqXuQNrHc6wX2Fk8hhT58+f/40fVPV+W21bvL0tC7ucJpTGBzmmZXpaZHP
K9z1fA678So9yRbFTVWXRUbHtS7bGr78cHkMP1e3BJA7f9xPXzx9kT57up8+
B3DcCYtb8hT/57+3xeTfZX5+eb9O0ovvT6uymt+uw07+mtf5chO/+fYlHjx/
mf6c1SWcY7We36bvq2xmS3QvaD0z3NAP+0fp89eX0QLLos1n6T8DdMyqZVjr
H4+O0v2Dpwfp4bPD/Rcvw0r/Vs1osv2lJmVVLwG27nK8Me9/PjnY338pfz7f
f2p/Pt1/Gv58Jn++eHlkH8Cw4YPn4U/74MWTJ9ps/8B62H9+pH8evtQeXjzb
t2+fH2lnhy9fhGY22ktAMK8S+PvjL5cvqC+461k9x83euW3bVfNqby/P6vZ2
XJQ31aScZ5Nlsdhb3a72ZtV9uYADmMCPP90Ui/yHaVXVs/H9vHlxtMNd8W3+
ePH+9Wn6y9nF6dnV+Ul6+W+XV2dv0v2XL45G6dtfjieXV29PJ0+eHD77bX/y
ZPLkN5oMdaCXE/8eM6C8pbucLdJf8qpZwY9sMcabv1gUc7qjx/ifTfoYet6l
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
MBMmtbIssb+XimedWO0i6Rne7WsiZV88CsTJ876u3ADgYad7tzN3SCZvXVoD
aRGywVROcIOmecs43u7tbXbxD/P3vtMR2jpA58/nTj/o+3twfzazLXNg2OEu
/szozLwbD7azy7Pj87x6l6Trd2lGbs9FDyfoIMMsur5f6gCApdNtoe9PRSNk
VCoa+TuvxPwQR3n27WiLrvfWH5AEDDVkMne/9rDKAlm8b3slo0of79u+SE93
dWPzd1Ms7RpacF/AAoGHCqpkzVU2uSdQDVqt4Z8MU78TqCw7wXzCfQ+1yFfc
GyiFD1EG477tiwzJ/xCg4krjzXkyvidEhW2AqPa/Mpr6B1ky81Pkze7bPs/L
dXblK83PP8bU0c+OEPW7+T8TiUOaV9e99BVVPiA9G+XzZz2pq3vFxw1Rn+ZC
9I0KlvxyN+vlRrxyfqBM9bHU4JQk6PHUiN7u+Cbt9yVVd+DyQajvb8ocnDqj
pl8sVoeunVwD1rhd2ezJnPvZrVyLCdxFR0mlgguuYMYFVcu8iJdToaYqqjPN
LEinyVPhT7Xw+g9YP87qQoWdnSIPC9d4mS444ILL2ukMJxcxV+C+FP01bnlV
pVauToxRF9cx5f9e4dSNovR6JSfKNfm82uvVJkPN2Q9O/YCspp6Abpy6KWxL
Q3C9AQkpcqee489Vzc3orAZc4TtSxaKSsPb+w3Tw3dPG4Ovv57+eK+9ag62n
TadPrHbQeY06PHLktqrA2nR8jjBDj2sVOj9tnsaXCTvgwx/Jm7fmBVbslufA
//71fXD44V14fXJxcXP60/Pj3k92fte4KfxpJZcOXwh3jh/lcaWw6eaZ+FLU
cM9grfkGhaZ6Uq5ZpIDty4j5b8DJzmEv6zCtDXno1QrowPzFv/yc9z2n661W
tddk2yBTxNlGwne2HTAc3vy0QXv36n3vRW6bdZeflHe5d/7118Wjrj7p3EE7
XsXaOuFv8KcYFmJhrABivrxmV4CaK4DU1J1vtFz6J2laEUmQ69a1yNvzdkMa
amdsRDlmx1H/mMG3cOroll445Vp41D67OH5xMTqLzt8+jtLDD8mb952L89br
5eOXFx8ORiejg8uXb757/W48evv421N68/79L4+/Pz58PFvdwL8nBwcfDg6u
3vx19P3kCP4+Pr989uvT98cH8Pt36dvnb169eXv4NDg/704aP7w7e91bf3z1
eHrY/uH9m5dR58f38x8b33W/Xz5efvfq8PDd4Mn7t+frn75/GX1/c/3i9K/t
xuWT7563fxzOnn6EaS6yy4Oo8exq+e2rX19cN366XjR6/fHVk/n7DWzPr6OX
R50g670brfvPx2c/tH+5fjL/eLr55fHsOu4EcfZ17r7Y/XuaLDYf1c2yVjRN
3Ps0NmOpWfikVvJ6qD15+7p4CvHNk1b84yh5kTz57ofg++Tp4ZOL8eMJ/n36
5tfT4HnyZNiEj5aT9jP66Ombk9b08Q+/wv9vTpPrJHp70jp9n358/v7Nx+e/
Tlovjn7qQCfz+Fvo9LIbjB9fZ6eXJ8FfD097p8lpdrp4HvyU4O/Q8fn7687i
5NnF0+WTN5uXP149e/nrd8HjZ+8vbp78El69/fE86AS9H7/Lfr3+3tk+XlUu
vsQ/wQIHfLXzVQcOoiyZUE0qeV5hcz0+PDobaXEW+FRZAQ4yLfvbczmF4odq
3gS8eaM9MzMxb6IjlhM9C6e44WBDLMWF1FEtnFz1UgppoRsXFh4KSI3v9YI9
PxjsyeW6eDAKWkHYe3BL9hP/oVPp7yKOpli8QbjXT59vbxhfLrFk3qLcgTiV
wQTC1kGn1wo7o95Ba9gfHB23Rp0huo60wla71Wl1W71WvzXgKTpR39J+eDA8
CE+6x50+Or2d9KC/w8GoE3T7B91+r31y2OkeHPe7yu0OR902paDoBv1+b3AY
BqOTk4NBpzvq9kYH3W7/GJoP+8rcjlrA6/bbwyDstEf94WGnP+j2wiNo3gvC
YxD2D3thGPRU5B8dhO12f9B/cMuu2N0xFXRwN3729303DvwoXkfA63C5k4PN
YopQdyrVQbCSCAGBqR9bimRy7eIU1cRc2VS7dQICSs3JEs1s1xxDYE1V8Imt
Y+dU4rB1UpghVWP2NDknJyqqHWqHw55ncTwVQOWvtFuNwWrSYiOsMoNcqrK/
Vp/JKyua+k0Il1OORcuWri82mV5QriU+2azKTZvemTjcx84JTVKqQY4PZcIm
wsRUFslvKXs98BhNrteKxyZVCqWQHrDb8SUSbpzFZrFGzoY44CqMMXVBYkwg
4e9Bn/uoamyyRvd5uhYfBbhTnJgJy6+49ZIjnoetwLKKz7Fc5UoD77EKC+GK
Vrj3N/UKPElWmYQUWPRFFXYs3nIFB6nmtsgb4ps+VdYxVbiwHmOSq8nixDaa
oizag9kAOQIujykc+oWEZJJeHc6kptPBOkjag3D/FHGXSdldQqlUUsoW7kH3
pyznP6Q9fDK/0Y/xnjhB54GjoD3q9NrHD+q5rxyPg5MuoLeTk94heRwcaqNe
e3A8KrVyItrc5+gy0Kn7hYfqEVB4LHFnuWctDlEONBw695KyNuXW6Pu8ocgM
FF/gTyPo1StfwJqPu4cnw+7JUdgBVqwfdDq9fic8OuoOjjrto9FxUN3O9/uD
42735Dg8GHbCYTAawn9ag/Dk5BBW1B21Dh6UGv6ce/LZ+euzb6jF0aB9BNi7
A9icCN8Ij6E3GsChDIqHGAxbqjVrARW66/Tw81YYDE9GJ0oO6FG31aF/eydd
+rffatO/nQEspd0Oj9swE3oyUioSwBopHdIgBNI2CFu376I0Ow7u2rTuoAMU
ctg6PGi1B2pc7PX7J6Me0N92vw9D9A8PDjvH8OHw+HA4CHoHx+3wZNTpd/rt
9kHrZKjNDsP+ycHo+Ojg4HA47LUPhocH3ePDw1b7sH3c7h60RyeHrYP+Afza
GXaPjnWSh63hsB+E4fFo0OuftPoHg6Pu8YF4Gxm+FWOxkN83AleVVwXVL2SU
C1ecnCUe2g6KHldStlgc4QhpV/yYDhiD4K2N0EdoUPSPkqPlo6wwgM/0sEP8
lzJLhcGgP+wOugNNwFVulU/JVZ1vq9yq6PNQlV6r3Mrtc1s2rR1alZJnVflZ
3J4r67Pn/7zv+XkDay6/jTnMKupQoAp1nylhJXHIBUJyaXpUyWHlReasJCcM
dvDCNaPyYNIbG1gr4sm5vvxCZuAyKlWx5bf+fImu/sOjqy+u74quxi4qwqpl
YqwMuZcbIP5Y2lliYCRQYjdTAJPZe9oPLh7E3cls2J1Nw84sGgvt2FHzHk6n
3cG0055GMdCWGK5uvKtxc0wkKBISNJtNkATt2DZqje+2Ddypyve2au9uFa2E
r16TMI1gur5Oq6SmrO7XDs+CGrG48FtYY8EHqwNHUsh5LQG4lICI+72g/EHS
mxUvnGxExElbH77yIC+OXjzigsBrHW+y3lDGv7HVc7NamigeVjSW3WCx/295
Nc7/NAXOzwVuwa+NNtMk9a3iio8J9V3xdXp+ejhy/5+ML4ebn8I3sBJ5dvnx
yXet+V9ff3gTvrlMw9c3p9lhMiq0e7L86cfvbZuj4+DZ+5+C50ennRevv//O
/Xb2ffq1oyOrPQaGBYhR9g9O8El2drZ+8vZN9+T5/Mkvzz8Mkqejchs5gjsm
dzCsCcn92VwPJhdHMUKj/4rIVQRQ8+krfN7g559JQXYIchGVfccsLONonMyp
0DuR6kk0R+uT5nCgwplYizxZSAFT24Ip5sR0ls48HCrTaHoKHlhHc3+ZZqzZ
Ei+eZbrUITQhBVcTxS7omySW9BGOOUwacx4KUjBjUAs6iZNYvopjJ0UZWoin
5oPMlI7F0sxYrPa1O6b4T2UeUBvM0ZTBxMgsBleRclOhjL1o8JtIk/EgFwOc
SUSVgWeYQ22OFkIsfSvvSbuXrtimdIOhE0t4Vvdn0QQ3MNEX1+nqAy0XtRmp
ny7qXow7qBNGbtmpqz1nQ+RmPs7Q3VoCGrBE9EV0FXv2y7kW+UYcpTCb5ZNn
4AZLXd4JbDIy1d5lOkbHpOVFuohN6gkqZzw15jjWKGX2ELh6M84ABvWokG3Q
+j+KNmGJ8+mDzD16u+9NR91hjsxbc/o/Qre24jmwaCsYCDvA2uqrKXKXCSme
ptGNKGj0kwZ/YudIjgNypBhdFWU3jXXaSC6jcwRwTLiKVwGVRFbBMI0n0RRn
iV3/somm23rHlK0CNhFV0oajukyIdFwr50kjETqXqr5S/xguFSP+aEK+D1M0
ITMpClotd1gab6oDYmAmNMQ8frSxsP1LTTG4uErnWM3ZW0SLFIZI11qnG9XS
DM51mOMVnCPytNECpjfn7HoppiND8ynW4U4wl9+pZPQmFQ9VlofFYqZJMUfD
vZzfZAmaSO1x4osEoU48Baes3Z7EKxQEKLkt6a8Ibk5f+tF0usKsG1h/mvKS
p2s/B9BwJxasgjZZl9Z4f+h0bugWEPWUrzzKQQIIDO/tGOt41/2rBNPSUFTY
PFl8gCcH8028TlOqUy9XkCpmk6jg4RyID0DbMR7VHDA/xgwlv+LNtLPGCtDe
b/7LOF2KP+FvEtyF/O1LRiy/WfKBT/k9fqhQ9DJd0f1wHp2Jv4v8/Ob91nB+
/rNR+ql41PB3/VDewEqClj8WoPuNwDD3Q+9LP7/RtS88Mnd2L2j9PQj3nZWU
Bqm33IHuMYh7R2ic7r4OgnN3BsEh3GHuMUjxMtJA/X0YxBqTJijoLYWXcxKo
IBAdJKv1BWAqIr0ISNd0IS5FJvUsUTJUcyxNAFCj+TX867d73TqB6gfj12Do
55Kgz6Bt1F7vNJ/RGrjZDzwdzxB145BsHV5IBp9tFqR1LVFWRsBwS5CWokkM
sJJxDbG8Qp7NMFbLpf81yG8NP/77p8aHv4cP98LF/mfnrb+Fd5EPUGJ/nWc5
LMHRj1B2HxGn7b70vk2vES/WzWQJSRKVw0yfm1gRquCwOssZusRV/MsmQVI/
m6cRlm73likgHtiJeMLzRUytigh2b0M6cRXBaeBEE7sp6YrdZc7eIi7CYTwt
h76Enf2YXBr+DDAaoOYz4H0+fdKj5JP8/LmZ21bYTpTfYaUntMA8r/fI3eS7
9li32JByjtSDXyz0jhP2skKO0Nn5l7YR8XdKOxFvbkV3fhAOGtAhc7jw5zB0
/wQp2vkzjxtvQ3Z3/Ondgrb80P8PQAV/bwRd+nMgf7b5z6782e0y+tmOmkxH
rWGuo3CY66gz9BVZbkE/tqP8jML8jDo8I+85MDZ18sMSGLibu59MNithRSk4
7yaOVg8yDy+6k2xOD7SuicCKfGOeFyOOwsPMVnE0vaF0Z7EIBVGOgTTNNCEj
4hecQhPTWZqEWV6JP3QYVOK1iNNw6QGN6fZ3DFK9R8OmWayvNQ812Ubtrk1v
2TJ16aMtWJr02MgLZ+vGhPcAVYLJWrZJTKkxToC3orh6oi64UvIcBM4oXsYL
NApaOyZgnCuKOKEemqgREb7WJB/bLNC2h+hHvjK7Sky8+DgCV5Pwwa5ApIEh
zSHP4mvlvgXh20wDpJ3PnFI0lAuHeDBAoxLcubZR3Pn981yQM2iFPx/H2D+C
HgabXuTpXvEYvahAGI24ILZDR3jkS70m2vPQ39v7AP8NWvtwZZb79q3/GhfC
83dm6VWgTXdNSE4IMyG8ewYRHrnX4B7Yz//j8N/vw4A95qBwrzPhjP4edvRv
+rNj/7wVBw5QWZwuppllsv4e5Ltq57rajgUH/mUyWaXaH3cV5Luyf3re4Rx+
Res1bLLQLONpq4zAAj4BhocUfOR8sKYEr0TvSQ9Bl5ZUHx55KlwmIEhtLhHo
tFu+JgzzizTXGodBRTCNTlIsXstb5MzMSEbxxyXLQsYebmdKqSQ5MaSYRDCf
LAi7FnILuh5xVyL05CN6AhlopN1tllMHH5lEhCBveYDDAMFkcXlfUrOwOnMy
5tYXt8/L55vMXGdmWH6Mcq0L57ihX33lP0/9N5x//c0b4DO8EV8CzetAT4Ez
enVy2AnC8PNndM9AZnVCCHJykaLspedscJiHy4GvYAzsgHlcEuVZ7DSwwrYp
lDlxuHHsQg6lAOXN8/AMcEMJDPCE6/5kdbNcY25fVCk24LQJWaxgWwGNM9Li
cS2HSBieOUfv8OUb5hHVDNNkcdVYZa4jxHRr41cDUnIcL/ywBZIOtsP40Kb3
gok3oFWVSPFdbm6w8PEqWiWC03NpMYExteMfwo7BqcbsDWLOGta1xqTasYRU
Fg4aBXQ8EfKCY42abIIw3bRqNuZghQwONRKikABiv0Y6q/mqOz4f2DSVJJ44
osnQD31XbruX33ZO9A9dAMiOUaWwXDLbIyKT5uQmkLPue3g1kELQDpKNkFcg
J2M/TEioWqQevWeFCPrvAL1V6v4RZkUiHHsfkcYPyDUIWFr1whEU2WwgEIlW
hxjPfXljwDeLQc7EFOPI+owRDKaxkyQhm8QLOOA0E1mUdDZ6Skj7sf6QUdKQ
wxAaclfp3DeKMjd5L27AhmJOFwgpxDmlHmtleBdwYDxWcWdKCNZZ2dfkG7ym
MkUkhiXAbBCKUFCr27J10OAhrOAyWmxmuA3EnwL1JRA1QQ5mMR5jh4V19yRd
F30HN4a3vGLoPNh4lbeVy3iI8LYiXeI0yUl4kah74a1Fd4y8jTyI8hzVRjH3
ilT7aOF6Fc9NunHMkdIctMJmMHrli9u1aJJOp6Io34MHp0f7woSKl5RTaDKL
CY7R1goYgDeAuCPGapiuBzOxnFI3gETdMQGTrnA6XJsGZld3NPUYVpLyMZIU
Sw5jnlfqgTNC426RHpGYsngGtNMwmotiGmKgWOhkF/k1ntUzTpJTwxASu7IL
uPg8bcZnT/V3tNChQn5ad3xhKbURIbUYq3mIa53bvTdy7RBs7ybt9SxeYN7f
c/RpWKOuPaKYFgAYUeySPvciia+YcBB3wF0nGS9WlbwJZ1BRt99t0yf4YOdi
2CLg/cktDtEJq0FNZmDJuZRPc0zaTUCDTTaTYtJi+z3uP88NYGXFzo80HEyc
bEqReDAgyrBKJOhAmAIt/OPkWub+UNvLsThqF+Wz5uxV3sEN45MInT4Q0nlj
stKaaEkUO49yBvpYwmugQgshSFE+dMjUsyTBh2oM2ZxPsvkI70XAbHrPYRyD
9Yjqoa03mRPdQejCakR1Trmqe+pA1xbganq4OJJ41yi00c7SAtVbHMksi5HW
kgX8n9bsKbBIgH7OcVlMIRNW3svQeoNg3LXJYU0aKABUguDMvHfaUCyWWTnv
Eazh5h7wD4L/gqR5yXLA90mg1HiJqMaQlwJAgFsj5bEQYtitFhEwbqKQxYQW
jywqALXC5nlMXjwI7PxZTPwMQybG4ZNrEW+gokaJ/GIekkd8g729xXOAmQAj
KRm6TY2gPGRGZdjEyZdQHG7l4sG66f2A46PXSiQd8QuzxXidK4/Z2RRsA1P+
NqZSDuQ2x9vkmEHsfAjYHWxjMAfjm9xNBzkhvRSi53o7YRbZHAqAQTO3PXmX
Y/CdveGoSsCMctQl9XiM1aKyWBL7L4yPuEYWNq3XxkTFCAUHi0SYByetBWJS
NNZsOWCKVtQCGWLoYRq9r4iP+k/Wqj0nWrUHIHTGNTH0Kx55j7YgknyMZi37
RsVlalG5Y1lLmc3p9h75DJgeUIZtCJKjITNrEoz88zSd4tIi7onPUqWWS6Er
xkCVn0S6MuIN81VChFwvawUFpx3fjG8B00mtFk5XgpWrQW4DvhWPsZrvYH0Q
Dlbn7eRydHRJXcdyqT6DxxrbPgU0JB1f8d6iBcKw4aX9jKp28zVROetjSndm
FS9XMYFiRLU2ZeuoJ6a5Inww88e3jAevGkWnwggehPJ5MkmQ8SRRAFaIPPON
gzwcRA9HCW9lcoIHefWZmEzQuZEKs/FxZaY805gM/lI871JDIiQzjGydBEUU
LzUhUHMPMuVdlUax1AH9iQ4tNXXhWK03g9ldENUlpa4oF5yICztJoopW1mDT
M45hhqwzVzyhYg1cLYLItcblIsJnOQOlK4Kdxy/PfJCwuPyA5xlcZnatCDhy
stU7JntkhQgWq5x+CPdRE4K+qAhiCCQOOCAikyRBtHNTlkvyg5AuMzcKQssC
N8hoY1lnorOHHUKqzC9h2WepquIN2sSJOh2b9V+gq/UiKwCHIli+nATb+fmJ
o8pN3Rsz8BPaJU1G1XAOnCBqlo/GaL9nikygyNKqTKFyYrC2txfogaKUkrgR
LlV4Q/yXOzjzYtYHT8U/YsyAH4vO49J+yPW2XLoGERV4GS9a8BXJ02T1tUHM
RWshRigrtG56L9inBM3+2Au6H3BZJnRQFN2cFIJkcVT0R0K7xxSvWDG+YCRX
nsaFrdgm4MiObH+gKBgJ8sF2rvBp2HHoKV2wR48uR42oTA1GC//HZrc11PJh
xCcJsVJrK7mLCUcD4iT+zd6aLgYmTyfpK3eRXEOOwU7SyGRfuOSoAeiZe7hq
QxvgpzNmJHlC5D7lzipbb2ZIIa4vMNVTLiZhsxA8YKOg5JZXTNE7nfHplN5J
wmYRl2ElLLaJmVg5rGjBl002Z5NZVocbKkNb8qLh15fIlIK8zlaanDRYkPXy
jCDV77Hym6W4zM3hHKx6ei2mFuV7xDIo3YlDTYQaAwUegrwlJ40QntryBMSP
vRRH7on46MaY7QG9HMzzurN9+cIzka96G5sMQvyGGBlaPdQ8mcV5tEoLBPLC
GupUvMVI2WKooC2KOsWo6vSGHBkA4M9UnezOZiFHqz3LFAwDj3NoTG4meJ+v
JGlEWTIw2opLFB5pyknmbAduPJCzBFXtxBcxUhGqmMXxB06jQYPjInBCsn1O
L4IqbK1TGuaa3KQYAZWmhvpJLdZ1D92MCLG7S4rC7RQEchkx11GFSEQXgSQe
fECycOy4FCrUo8LafbkFUdPVR9MObNeDNW8YT8fZysQB220rgo4eZIWtcrvI
cr0Y23nmlrRF+CHwYd3f4dHRU05mKwGw6Cr+6St8/A4ev4PHnxHAXp0cDtpD
NHKg7p+KvmUXpPqfofckdYNvHIWkRtMigHMhYBZXlmhB4+JT2Awxs5p34VPq
SagxPqJ5aUVj1PMzelY7NUOcFhoWno0IE3UkHkomLNcJ7MFFs9M72zbYQwdH
ef7iNaEzKoZ9xSopNUnlNx8nx91QTURajXgoZXSk7q6uYo7GJl5G+7b9ifc9
duL9xQT0gjAxZ0dJ1sRMV9Fs3QD+ftaAw80am8kkQ0OjWdbX4vL+H/6//Zt9
3OBf5Q390XiKJcb85ixmzqZGhA62tyHxclSCrOZ//Q3qaLzPntvqa0TTmL4Q
GnkcctdIVw1g7OAVPfQqhvcfPvza34NlZTwGD4Ej5Lvw929pDeLQ72gdbaa/
ozVIX8XW/48Eh9saLcaz+zdKovX9G03WSbERF+7c97zSpvtPDv+rBk8xqOkb
r7Sr9BqeYgHab7zSttFreAqv2994pX2h1/AUXne+8Uo7QK/hKZZ6/cYrrZWn
Fq3hde8br7Qq5rBePH/603/1v/H9v/jv1wnl3Hr7+pGj26RsTISFCB4puoca
PfkGh3Ag/z3w0DXP9nqIHxw6H0zG6armwbU8QHF8FRt712Q6nfut5qAZDn0p
ZBOrUoQDHJCKeLCeJ3XqNTeLh747pps8VrDAiBAHsHYZyhnIenLN1wienzHm
ORYLzxJZJlazJL8yJUPvQejE8FEaue7GN6JltaqtOIz+pZzWo277WTjRSXVy
LPLHvc5mNTeVRdDT+i+m4KZkjqg1a2K2ZGSPBBgtoevJBZl8lhIQmN0ATf5I
pGwGveQWbXybhMDnhISUXfoNSvZgFxvPZBcZP/nNVXwOAOrX/jZq/DVq/Npq
DN993fj5P/9v864HAAgwmzz/rFtCiiIiB8YCQ+djI5ARYnD10BB6ccgJO19d
sgmO5DgiHAAvzTJgmAKKqAalXRQejBXihza+DLZTWCX1OP8LbZghQU0faLuP
xN24+1ZQJ6F2sJeHdi8zvCbw5+vo/Bzohu7wQ3r4Bg7PfezRtHNbtZacCu+e
WQgXJ2QXRrXlhAsBSEAJrhEGZl5NWnEqD8zSAGN7FVP72v+q1+wFezQqv9PB
93EY4Mo3Mm8aQDz+bacIf7B9XtUKcTec1WSaqMU/FI0LUfCX6kF3hKQ8K3q4
kcp3TlLEjBLiLYzCpuyER9xAptEE1IpCChYNlNeAz17LEYvD9mUs7P5FPF/6
2Et8jawRMPxW64F81GLtKSKdxOIOc2L5D2I9ADk2WoHn/Yc/muJdJ2mGbf/+
ykSIkQpmmnwsdgFM6/QmunS6arkJk2ZRgqZe9pAWOUSYJxYfcpbAaTrZIAdP
zhWwfmAUr1W2t34JEU6ziRM+0wrAnBnQMv5kdKMQHjHWMgKBFug4tVCNZuRw
fvASvYRQu7VkZYC6YpB+Kk3X76zjqeoVZXLFTbF8nd1cuAdOrkHW+nL4Jv2N
tIYjsalLaPAsWSDHuoznc8IGRkE+Sz4CUNJxORo1albHf1aoAENayj3dPrcQ
5/YKwJa03MdvTuH2oYGatBuoNmSLwM0yxg85dE/ERXxLB4dRdfN4cb6+yMhH
ro7Oh+xA1O01LWQpDJHVTOQCF9qYEP0a89lKZTrKQgP3x+aNWXCwWqx5tFQF
eqMTQ46BaZYvLkbyQiPE7NTjSxzracrYiHZWdZCEos3ctxglvTu2t01LAd5/
7YIQba4b+86CHUa6S1C7Aaz/8I+oxrM+T8TChPHqnEAUK4TDryZs4CBN54Af
7pxah6CSr+Tps+PTBnvS8hGzDtCQf7wqQadBZeGZz6bGSLAmOBhqyJZMxXCP
zUvRKoqMxlD/5vDwjBaGd0/yoTkh0WgLcMbRDCB0ErneFA4c8ezKGFCdz3E8
f88o8ODbbN8Ic/BYlLoMSvam3hCZ2BBBIB0QDscqav0QL6C6zIjNhICU/Cbl
vfG102wE9mDRFZhZMtor4oCusXzLnFbVlKQUvMsWVdDteBUTW5yHGVKs2nQJ
fzHIgH0aDJMlqtDxPGYkmsv6SvOr/vL0kjT2eTEd700eHbI/A994+4rqXE9u
dMN0f4ybw0bNQXfBbddAlwAPCD+op8cU4xh4w1tL2wXdrkwGWtidpzqZl8XJ
3D5kz+IBvK7AAGJVA54sngWpmFhnj1pP0tiIZ3d+uez2wRV67F6Zb26dRB/7
OFHo4MRdlihkLiGxgU1oWEDAJ7s68n406HfxDX94DcQF7gDKA2s0ICtw3j6T
gYM5ZDmyGkEbKt28efXU56JuLwDLu0gq8teUE0Nwye3jDRVYzth/Wv4y5ITE
JkIWp6ofZ8ODg7z1kqpV/FirL+AWViR/1s1WbgUvt5ipHfN+ZrwJJlGyxjgR
e9yv4suUtE4JBvO610PVYKgUiiShHfeflQawi7CFSjn+VLwbTRkJi1gILzH2
lPrzyEry4E5B+k0mFfYoyTX7QjivL2P2Ly7d730c43j0vBG0MdWNIDbG3MCz
zdFCtCKvCuHOOOsyiFrXxrcROWVxeyDiInVHFElmIEJesmrzFsAIWjiTb4sY
FhlkrBTGBhoYYLWKyIyO2T1cIMS/XXRsuTHcYbjUZJJMGOvxcZMrbA5hZhYR
0L7nc03r4ynISnrlGw3/CGBijZ4UTznlIUxuhFF7V9EcAziN4GBNR8xsWMTH
Yjp3aDedvVZ134GqugCJvteY+w8wgXg7c86GdJ6e37BU8mr0+gz2a3KRoLKA
vCuEJd+xA1dRqk0z9zYYX3LmzqnIIdpip2iW/wuja5Kc376uc74T+KI8LXEf
I/qFXMcqTlfncEF+NTTpTO48Md/P0iuiRhyTpPJQXXhKnA4NMXKGqLMRa2bk
a3OUJqOLyU+lyS+ZjZPXyJ9yIpiMMjdmdG+ewwzYjsslOokl3SwS4lrmAvjs
A++kcWTvaWDGxJAeKfNDzAitECEeeTHJMJ/TPNCNI2vWJXC40zw/Exl7pjE8
ml4l8sWClAE/7hb6J9WXcgQseFEsP7OuZOZ98yTHgSEnuK+7aTqMxNlj7ir3
ybgI2BF5uDr1U89DhqD510Y7kjOECNdETvEzsh2kJNpjE3Etcq0O6H+DTb99
y2YN/P3sLeGYt/o9ShLIppE24eXx81veakhWzgOccOfHpXpVmHSqBbbIdV4v
sI6IMDEnhf9QDmFOmQtI0YPrI0x6F+ZUeR/nzjfRoCsh7JZxot1EcEIiTr3h
OKhtGraGLQd1svsE+rkwD7lgiSA2+ZURTD9Q9lWNxSD/SfJOoSYudm77e2zr
qgPThTYbEpkvkuW+g0+EOb4U7EwoCB9R/jUeES/YROBY/A5q7OHBqZbEv4Iu
4niVRlOMTMk5qquvKmZo4inVeAqoouSOUdCx/DDtlpBS1nDOI1nnNJmi8dDY
vQyIunLoKlbiQ3CCXg0xubFg8cuZYWcCt00luUoMR4Ip03KLkmS7gsitrnAO
p78hPZ9l+E3fC1dSk54L/ZLnTSoBA+ebJLsgETVjpDONGYk5R1hIH0dnWNxU
hVYSllPMO7JWT0F9pfJFXj4n4CU+68bxYL7rdoQGVJXOAWA/OfyvbxhHAZ4j
H4ElZSExGIf8nnJ4kVcplMl4uxFf0jEce2H/9JKbCh7ijURClXloMPRzUv7o
AQFrkVGgmdiRJYJu6ggKLny40u5KIkcyuGHEehg/HMNhUpgdMzd0mLBowFF6
nNpRzkUuAwZzcmEUPQQJemKo3HM4c9FyCxhIWWtUbhjflDypUeJmn4gZQhM6
286MwZ4zBYk7DB6oA4d5JTlpDUhdQUSHWXW6A2t1YuDhAM9InmvcUmmtgaBm
EZnVA+XQPsGCa4ixen7VbdF6aDpmGUQWnQRNGbnfEwbbO12TAX9Bjp3ivXGT
bjC1znxqNMQ6pD3lBEPKswSRH0d4USMakdYL9JQQL+aTRs2IOjBn/uuDvGyH
Kg+fFEclSY16QmHE4huHAbCEv+4yktjL3lPSIJfZPFdtDOxWMudt1MxVV06B
F8qjh8IqrQOVvVSXWMwRqk1g8dFFXyp4ccd6GfjzzCUOhPbRYmFlNjwSPaQ6
Y4gcZyZ6KqMBAgEgmTKDbLxG4LVLQt8sTPVi0gHgHWfu0yF0eCYaw667s8eh
oFecwkrdG6OMPTLQHRK9aKWV2UCZEDuL4Uf7OVVQHnkbjFwQg1S55VTJ8Uty
EmYfQz8mlIsAZ7FOGLZ1e6P/D+z1sNcDjQIA

-->

</rfc>
