<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="June" day="16"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string and every bit in the byte string contributes to entropy.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, {#swevidence}, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption.
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT.
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-18.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="14" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-18"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9aXPcVpYg+h2/AkE7wmJVZlJctPbYNTRJu+iWRI1Itbtf
TYUDzASTKGUC2QCSVJbG/dvf2e+5AJJidc9EvIg3iooyE8Ddzz37Mh6Pk6bN
ytlv2aIq89dpW6/zpFjV9FfTHjx9+urpQTLN2tdp086SZFZNy2wJH87q7KYd
F3l7M66zthnnWTteZG3etElyP3+dfji+ukx/repPRTlPf66r9Sr5Jp1WZZOX
zbp5nX63yZvv4FGzvl4WTVNUZbtZQb/nZ1c/JavidZKmbTXV7+jHLF+1t/Dk
CH83Vd3W+U0Tvmg2y/jBtFqusmnrvlhfh2dlhY/qm2k+a9rNItfP2qLFH1e3
eXpWwo9NetzisrIW5pheVZ/yMn1ydny1m2TX13V+9zqFH0lW5xlMvmzzuszb
5NM97FcxL3HxmWs+va5qWPQMNup1evB0/3C8/zTJ1u1tVb9OxmlRwvTfTNI3
63J2vchmOcyQt/tNtq7zcppHr6oaNvoyn65rnCbMuKo36Zs3J/AqX2bF4nW6
mC/+eyMftPR+AjugI/08Sd/C2W+ypY3zc1EXs9usdi9olP+xzhbQcple5dPb
slpU8yJvYL3TCe4rnEQOe/rsxYtn6duqzm+rdZOnp3Vxh9OcwuAwz6xMT4t8
XuGu53PYjdfpSbYobqq6LDI6rnXZ1vDlx8tj+Lm6JYDc+eN++vLZy/T5s/30
BYDjTljckqf43/+9LSb/LvPzy/tlkl58d1qV1fx2HXbyl7zOl5v4zeOXePDi
VfpTVpdwjtV6fpt+qLKZLdG9oPXMcEM/7h+lL95cRgssizafpf8M0DGrlmGt
fzw6SvcPnh2kh88P91++Civ9WzWjyfaXmpRVvQTYusvxxnz46eRgf/+V/Pli
/5n9+Wz/Wfjzufz58tWRfQDDhg9ehD/tg5dPn2qz/QPrYf/Fkf55+Ep7ePl8
3759caSdHb56GZrZaK8AwbxO4O9ff758SX3BXc/qOW72zm3brprXe3t5Vre3
46K8qSblPJssi8Xe6na1N6vuywUcwAR+/OmmWOTfT6uqno3v583Lox3uim/z
rxcf3pymP59dnJ5dnZ+kl/92eXX2Nt1/9fJolL77+XhyefXudPL06eHz3/Yn
TydPf6PJUAd6OfHvMQPKO7rL2SL9Oa+aFfzIFmO8+YtFMac7eoz/2aRPoOdd
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
lHxyWowCAA==

-->

</rfc>
