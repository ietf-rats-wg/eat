<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="June" day="30"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where otherwise explicitly stated.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string and every bit in the byte string contributes to entropy.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, {#swevidence}, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption.
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT.
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-18.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="14" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-18"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9aXPbWJYg+h2/AiFnRFpVJGUtXnsya5SSMkvZtuWx5Hb3
q6nIgEiIQpkE2AAomeXJ/u3v7PdcAJRd3TMRL+KNo6JSBHD3c8++jMfjpGmz
cvZbtqjK/FXa1us8KVY1/dW0B0+evHxykEyz9lXatLMkmVXTMlvCh7M6u2nH
Rd7ejOusbcZ51o4XWZs3bZLcz1+l74+vLtOPVf2pKOfpL3W1XiWP0mlVNnnZ
rJtX6febvPkeHjXr62XRNEVVtpsV9Ht+dvVzsipeJWnaVlP9jn7M8lV7C0+O
8HdT1W2d3zThi2azjB9Mq+Uqm7bui/V1eFZW+Ki+meazpt0scv2sLVr8cXWb
p2cl/Nikxy0uK2thjulV9Skv08dnx1e7SXZ9Xed3r1L4kWR1nsHkyzavy7xN
Pt3DfhXzEhefuebT66qGRc9go16lB0/2D8f7T5Js3d5W9atknBYlTP/1JH29
LmfXi2yWwwx5u19n6zovp3n0qqphoy/z6brGacKMq3qTvn59Aq/yZVYsXqWL
+eK/N/JBS+8nsAM60i+T9A2c/SZb2ji/FHUxu81q94JG+R/rbAEtl+lVPr0t
q0U1L/IG1jud4L7CSeSwp0+fP3+avqnq/LZaN3l6Whd3OM0pDA7zzMr0tMjn
Fe56PofdeJWeZIvipqrLIqPjWpdtDV9+uDyGn6tbAsidP+6nL56+SJ893U+f
AzjuhMUteYr//d/bYvLvMj+/vF8n6cX3p1VZzW/XYSd/zet8uYnffPsSD56/
TH/O6hLOsVrPb9P3VTazJboXtJ4ZbuiH/aP0+evLaIFl0eaz9J8BOmbVMqz1
j0dH6f7B04P08Nnh/ouXYaV/q2Y02f5Sk7KqlwBbdznemPc/nxzs77+UP5/v
P7U/n+4/DX8+kz9fvDyyD2DY8MHz8Kd98OLJE222f2A97D8/0j8PX2oPL57t
27fPj7Szw5cvQjMb7SUgmFcJ/P3xl8sX1Bfc9aye42bv3Lbtqnm1t5dndXs7
LsqbalLOs8myWOytbld7s+q+XMABTODHn26KRf7DtKrq2fh+3rw42uGu+DZ/
vHj/+jT95ezi9Ozq/CS9/LfLq7M36f7LF0ej9O0vx5PLq7enkydPDp/9tj95
MnnyG02GOtDLiX+PGVDe0l3OFukvedWs4Ee2GOPNXyyKOd3RY/zPJn0MPe9S
Q7vvR+Mnz8dPXuB6z4/fHk9OPl5NThZZsWzilePCYd339/eTIiuzCYy7lzWI
UZZ52TZ70/vWL+/kp4v36cf8WtETdLubcr/bFoHDu7ndZIsmt2n92plWNK/m
oYn9TSamM/v18uKtn9mvnZlFU+vNrTu5q1u4hb+8ezc5f3N23t8xnNkK6EK2
mBzOVyua3CxvPrXValnN1ou82btc5dPippjSEXZ+nuYt3LZmkjWrz39q/Jvz
2Q/PD176HT+sZ3D8ZV4zXn8HAAo/mttilb6rq7/l0/afGI9AD4s0GoapYXoC
eDJ9m7f3QCNTwGTweb0sAKyaf0rfrpfXeQ3oYZRms1mdwwYjIYGPihlss3W1
7XAPYY9iwHuJ2/fz+enF5Pj9xdkrvxR8mh5DJ9gz9FvV6fFiUd0DhnoPhKsu
poisLla0VpjGWXlX1BWfd/q6aNrBc7gpZlUGNyKDC0EHgRva0OOxUqRxnf/7
ugB0TKBDrzI/j3HG84DvdB7jSucxzt08xguYx/huf3IwvpmND57AivefHExu
2+Vi2x4hgeelyyzdhr2t7nI8gRR7wp07O3473j8chji8C/NmnxeJvFRWz5q9
66xGAtAA7irH69XU7zizCYpFjmtY7iKXQ4fpwWB7H96dpNrFthX8crk/cMgn
1eXH81MYZHw6IfasyabL8bRq7osZvoeDLM9PT6qyBCBFIBxeFexzWcwmwMzI
yfED6Igawn/rfLz/25Owx7I47j+VARjMAakCSYYmcDsZiPIa/sjSJm/T/aGN
f0HYcmDlN+vFggn52wnwFJ+K5brOeu+A9P9UZ7NFvum9ejNJfwVq2/Re/DRJ
Z3n6Jp/lAFb91ycTZG3aYgkLwn08fX1xPLx180V1nS1WwA0Db7MkuLhf4ca1
AKp76xWSrGYP1vd0b/9g75d3J7+dFvMCsNbrHFjF+uLmeLWqq7ts8dsdUqPV
7Mbvr3yb8sdpdZPq58MAvP80wem+O3u7BWHmZUDl8GPvXV5CjwtBMZNVNs/9
+O+Aq4MxkDnO61VdNAa5j2GMXcAZ/74mKUCJCfK84zabNxHWwVdMt67gFbSa
ww2uN1tv2DAZ1K7DX5PPBJDwD9mFmDc62j9QtuPoKPzpuKD9A2Ncjo6eGYty
+JJYFJRpJsf19BbYt2kLDLm7ZSQEZe4dNvipAL5llm1Agsimn6L16ysUD+Dd
4LrhZO6LT8UqnxW8dvy1py1/45aTQSp+dnY2eQEYcP/4fbzt8CK9FCw1Snfo
t3zIogTw7fldAVzMuZCavN5xQ5zmU4WsJy+HeBZDgbAvOaP+m6IEGQtgXt/t
yYhj7IQxCHKAhycTYKleg9jnpwyPFpWQzuN35x1iegBE8WxWGDXkWf6alesM
hCEA/xdbQer+kGZ39X5vHoYYwxB7j4iPBGIMkttvBQL6TSYEYgAPg5S7mAF2
zYnRAcSHsmmxXhK2/XA++WUN7+Il4ZNFAVgoBRhNP8Adgnt89hkQxAxoLcgH
cIfcAYDA+eF8d5Re1POsLP4ulGOxGfrygr5EXuEEZd1ykwI2fnxyfupZ0eP1
HKR73J7ng9szcIiKv2bZcg8fjgOtC3/d59fAlU/XfD3bNRBx4I6BCK4LwmOy
I6+r6tN61QdMwQJy1rTTJICHKz84WxAn8VgmA7O2R3BBxzi71fp6767I7wnq
HtU8YCHkYOgWvT/+1nl+604Ctp6tp4AumrzGm9boAvbgnuSfA0Xdcqnx1uxv
v9XpzwBScImQtQAoeJO3dbWqFkA0YK51ninT2aQXdziB/J6+83ht+Mrk1w2c
Zz7JyqbocDu4Nvo/mB7Orob/ex4xJ/CTONB3l+P9oyfR7E2D8d6xg3QxTurN
qq3mdba6LaZAfomHH5zctKmnkxIOZTKv7vCQF8bjz4itByS0avZg6L0DxEfZ
Vr7QpLvzsoEJrulq6t56MHmTIX55ss9M13IJtPIElgF8exYtj9+l+o4Wdq60
CVVKqm7YhJ04A3K+Diz+EPaaUrdT6VXEHrqo0z1/04FEL/ii4zwvLs8m//oU
kO4p6u8c/QIGMR9/hjf0GdDlyUlet8OfEbEFEReYU2AI4TOgtuPxOM2u8VJM
4edx+RXlWYosCyDBBjCVaMgA8U1JMESuMGlvsxb4sQYWeA1fYRc5YbXpbYZj
wKLheKYNng50kdNooySDNkS9FsUn+J41K6P0vLqSF6O0FJkLgW2FsAbnnjbr
6e0EBcyicbNI4de6gYldA51O6nyxQd51BcLeZpTi7UUGrE7lHqdtBYO0JMbl
6W11ny6h17Ro0/uiuYVFwHvSqqYg48iMJ7xXx1c4VF7AixpmPSjPw0CD0vQ9
tPJKxjEgI+g8nyW8kAl8DX0uEIZgfnMQoYE+LBYwCxhTsTX8ATPESRAVSmBI
2m5UBcjxLosZcNRJ8ggFGMZhCKAJzt6OE5c2y+GGEUmm0wFBBggcbif8ks2l
453CwV3n6TID0pldV+vWnWSa2YE11RKaVzftfVYTDOzhnuNDAIUZPpwkAwdX
A6cCvB8fXhodXnp/W+HBNng4dGpTJN/FDS0ZT44ODfaIiD+AG+8yLg7wU9WG
4ztvYf4bgMoKbgb2VVZt75SpW3wRd1e0A+25rXuFMy6I2uurEeGQ/HO2XIHc
SEIyLg3QAaC6Gr8DFJ3R6cD9KKHleoVdAxAUS+yZjoxOSU6MLjP2ASeEv/1O
lgyOX76IxvD33xkwEBbpIeoZf/99kggU4xkiDKFOH0cdBGbu7fDlge+tC9nc
+9N96j256swL/4P86gynSEsu3DE1ILSlS0CtwDA1y3CNHVyPsCHt7nQNt4Mn
enGNypv0UpX3yF4ClgU6hMt5jAhUZ7//NJp93BJRcLfxr6ExKmShsf79DFdo
OhiFGISWOdEDuF5ImrGXJcJAtrjPNg1eHrl4s0lCghmqHXMbcpcAKJsxf0ww
FDXBLf2Ub+ArIiIL3iU4M+S3aArSF+228t3YzRQYCcTY+A31h6cNvxEwcftX
a5D1ma11qIlgumCQW/NbQkLRHAg1LDNA3x1I3FE6sZMC64WYEj4t07/hhhA6
gLOEU4du8PuSbjbfWH/1AQYYRyFykatQILsxpcXDDjsdFKngROe2UXgIFOjv
+KjAW4golPkNwC05oKnuU0RdPGYzgh6AGRkZ+hpF2I1pEWM0RNBI50oArJu6
WhIgVNNq0TCBu3p9KcAI4irAE+2dm3/ulYYbIVkNjyLMp55JjnYFONkHx7s8
vnzNA6IA/fUBVzAarF5uL2BApQmOK4CxiTaN4FTLOSGhO6KC13WVzdK7DMgZ
nBu0QpCZZk2uCxBmaZHf5QsY48+477SJ6Q0wtYIfm0B1QIj/A7Btn3iSS2Bf
FvhyCcIiyHct4RI0UQJBrOWwBhtkdIBIkGF7YAtB3hs5RAKbiNcgsxkaRaZ2
0OV5pMXlzvOsWTPvq0jYgKJel4SM8NMwLxA0b4r5ug59MJNEE7SvnLYW7tYQ
8xRxTAVw3r+8u0xVHIYefkZOFZoCnxc050Zd+QKBiAJIY71CNrQBDqtphZjA
vXUHwBgRvm8RyzOPj4dKWBtNs4v8M/23Alxu94Wgx7MqRLlxh5jXYt6ZNjED
jC4aYuLh+ciY0hGd+AvpcLye5q9wATwZGCHtF86EMAJOkqzZnpU9QwyKth4c
1r94nzfrRYtzfvRIeWCVs/gWDC8j3WFWYQexVp3fIHZj9MXMvwKFvzm0ixNP
GN1KY+4OwUjPIOa0mAMVPoXJd4y7sLMBTAW7cl2B0N1pbrQ34795b2A1V7wM
B49+trzB7liifgm8plVd582qKmcNMzM7zQZ6XjLAlPDpDg4abUFuJvkgW/2y
qJoG2STGY8TR4CYCIpvrKxpQGSQ7GTxrHdSeNUR7YLcB4IV0EZXNBPnhRlVO
b4Mt7nNgLeG/gCI6SxAsZkOWOeJCggdZ9XCv3WPgdpkTUjLF+NGnMlncKeCJ
F3rnsEHhltKsr3mmI/+D0Uf4STioSnE2jBSAMTWuHCZ/neuc6XyQz1hfi2Vu
RFgjJ/TQuJ7g3HI4Kf6w4ZMythp6uL8tQMbKeJQ0Q8U1yzEEiNo9QgN/CauC
j/KshhGrcMeq1ZjIiG3hDX6JMlH5vbbATrLQJ+zjJXIdns5Qa5gAUZpjVaie
8W2iR1dnZ/TfKWpqqEOVR2u4lnlNL+NHIzzz22zVMJ7MM1iGNif+hr7yU8NO
Sif08u+inBWAtoDMK93i57A6Ji3NErAgScw0i/CTB16iMjGcGCFGpBf6nKGg
4bYGFEXcM5MZnDbi5mUq/OIUUEaddSHzNrvL0fWigrsVyD12AHcTCAhyAnPA
+cAAKoaC8e6yBiiTKNYbk6PoTlOPAJbWHXJhd3h3y4o5XNgdG0pHIaDDvhv8
DEhOsVwvw2fOjClg7rEr0IETFDZ+Fcnj9OwnL/Sv6gI2p1hsFIiZ2e1gaZKh
iTvFPRRacFOJ6Efg9jU5Cz75mpQF81osnPgOd8SbaEfM9iu7cZctihn/JHia
Aaw3o7AtyEoBlWRiDC/I5FM71am758xtwqKIxasBBRMTCLsJ26QMQGSTF0UF
XnQUNKJ3DXL5vAzk2U3+0Q0m9syLJQPdCwlQBVQb86/pDiwZXU52giqjhHkD
ZA1oQOiwRym6vhGEwnUlLuW6WKisd8PahpS1lTxFnRBwCtkcljjNYYiiarbP
F5bK9Kiz+dSd33qc1s26Jex0fDUGESkLCjhh12NfA162ygNpzjiNqJgsDwQf
ksoIEFVbJWrCkQArb+ScPCcWOMk7HANn6AT0EWudXiPHgGoP4mTyFZ12xTjP
5kHAwrQ3Z1gBbo53IBMFj1Cxa4LIli7pZpWDnDyZT0bpm/M3Z/Rgl5pWtIRu
2/aW3b1EaKUVkrUxQgw3xed8FpQOaTatgZ8gXZuJLsOwTOeGNxuty44aEYdH
s6Mrjh4q01smkulP63IGlO0x4JPdEdxi+C/dYEQwJK+39ZpYKbxFQNtniGDg
EESPAMuYaXcB7/CVlL1k0G5ylKtbPAnT8gXNBH6eecWFU1WIMmBJKFhYatFx
DsEIbM3rrGlHAzeITyXsBlF48Q6ZJBc3Xo2DW22MS2jCi7EVwHFF00ZaNqRu
QfEWzi+SVEjZxKKOSeGsr650APotyP/09PWIF6y6oq5Ao5wmiHRTNKj/VJTI
hYpG6X2+AsRq7Phj7Gq3r4/LgO4Bslq12u5tpS1wzF2vrAsKP0KFJd8cRP4C
Cki1mUS9+XB5RUs3zt7a5p+nOQzHCg86onucff4ZvQeKFgCGJNKZqRjCCzk7
EZSF9ZPDYkaRJNPiBhhf3CEdc8I8l8zSdYhXm6Q/WnsjMnWDiLMJfDmuY6hb
1iSJJhSEAPJz2kZ4SG7TozpFN5bTAKyvs3K+Rmz9GM9dj+nZ/hPYdFpsTGCZ
nTWBS6CwhgNvGVViL7glU1w2/FfuD73q3SHaoPNSOCrGVfh2hD4igD6Lz+kZ
PvOTIt2X3qTjQCpr4vGQo5oDN0VS4JcvfwPRQ8gXNOWDd12jxgpo3A1sVUHC
DE5mWTWtIFRuYMsiEx8ugtRceiZ0FLSmjD8jPzugguiHAwLYryf/7ccdtcwo
aCmhnvE8sd1v0P1vQE1MeexUv1124Z5UR2QMRCqU3yAapsHvkcDdAUnOrhcs
7c8K1uUjLOEng9S4ADBak3mLu4nRGW0J/Pce4bKIZFbHsAGsF8uCFEojJoJb
xrDN/Fq/qku/Ij7LgWHKnHNv5xi918T6pOZqzHgteAS+IS0LftoT45Pk422B
8lfLNLJVhnLGlxIxjCpaTHdPvQypcdwZ/4yqrzzdl7V1PXN+/53EuxwhlwaC
CXiFjuP+Rh1VCfxt+roMyH4pU6VJICih2LpEnv3vaEgrg4qD2Rr4Magqgts1
pEBCQuYZf1kl7iuqPqt186DJc0uvxA3SHWGtLir01RSG2nYjhmYAMjsV/bTZ
0Vez9VRwgdHMSc8eEyC+rEpWIRAfxrR7mQPNRASmBPIGaNotIP7GDEfQmGeJ
6I5kgOFtvDK1UmfR8yoXJcm/wF6RO0zAONh3RuwQDHXH72dCTmKrlwmLADDA
Hk0/ISCImPk+JywFg/1LtliLZBiGw80JGzagF1QtRMMj6PF4CAiGNJFAHtgU
0zZ290SHm1eq4ngvVpB3YgCVaZApZtEWaH4Jym/ZkPds6/Qdv1NJj8eMezWN
5tBUMtRK5TNnJFKmOCg4zJYZBF9h+EUlMnKfpOjHUZLE7iyeZs1Pkrc4eeZh
UUVXLGV2dlyEsqIVKK5TplduxJoaGqOP6xDWxQSRh88HMeYjHIsJDpoPrmFF
eV7+Q2rl9Muj2vWB7H65Ed3XVt0vMRWsDCWnSyB/yDXAf0QiNDUgocdiy5TQ
L3xwaVdsYwsrC/r+Tl+6CtirbbjwBvBtxtYKuBdz1AII4uqdnH/wfZO+q4AX
JHV2yr4xBl/M49T9HlB7xc0IM+U1euXwnUdlR7ZAiSJoKkRrhtBCtGr45BjG
inK1bgXfITYg9RxSDVQX4S5s3RuiVsBQTYmSYF+4Ccg33ubZAn09xNSzbvSe
Kin4ObgFjLxFqXcQNls5eAqLqxnLdFGc2FB5dsRckMYV7VIqmCCCJG02MbIg
jDXN3g3wTFvWiHxhaxhuBTJygcyV3VQHPV1kYhMn74xr1IHV91mNWGVdAoUm
rD6M8rbNhbg36YbsuQ1qL0mCkn4ckHVMI3gUCnd9dNjcVuvFjARRNpncDMMs
jvOprO6Zb2PwQ8p7C5sqQMm6P92XVuer18+g2mgX7QWJtYQbGbAHmtPqVctR
hfWJRV18Cuic6zteNFzRKTNmrOAcPks3KTorvA7bzzWCfhQ4TBHGilDHoyg7
h7uDcLtG8IN1LqoKKfV6xSrnGQhmqDTt3Iq2u1t4OjTjiqaYpX/+mF6cvUGv
WYpTemi21xs9HyZIOAWcgClrs/TDGbrfNuzaUJKj/C7O3ryTttxMPlgxaJtu
qTbFOzopOT5HUNMW1tPjocE78FEEBjh+dCQszUujQ9/LWV6T1yeDarSZ5EBm
rxC1otfptGDOkUigxDiRwTYx7xOg67Mm3UFFw86I/5u+vaC/35/9jw/n789O
8e/LPx+/fm1/8BcJ/Lj48Fre41+h5cnFmzdnb0+5MTxNO4/eHP/bDjlKJzsX
767OL94ev94ZNpyyRsIEc8Z2XhpJfjp5l+4fsZCFEZjq2oPxkSwol+yTTd5Y
/BM2b+MtS4tFMs1WGNsBtAfNinDEZYow0DOA1zlzWs78TfpzpOlO0GMvcH2m
QmVCYP0qeZUep6sinxJeKpxDKmDvvKZVsg1C0eEEzVZ8JZou7l9lRS2eiGgX
WDMHYw6NKLrjHSXRowr+IeSMxtfsLUbZ0KTW7NTe5p9bVGKaYVX10UKSaCqT
9Dx4aWbuBQ9501ePyHD/nG9wtCvVoyyzFc1OPaBsisKaW0MiitqUl4p3RiR7
NzHdLP5G1J9oKqPxED3B8tkCRlOk73CYj1d7eJAcJZle5m1votqkEjJFZIMV
YG4LGtavbwL7FFi/bwapSKJH6WlQ2E4SFYL5CGs0JQfShWKnMfSP281KvMjU
92QXjc/ApwW2BH26cLtWqzorhCsFNMEmIQBWUYGRDagNduDI46BozAqCZ4rO
k4Bq2lv03UXH3IwUUiV7fxJTJwYMVlawOohs1Y45ZJFWdROwjYr/3MLZKUqm
zgdCtrKC3ZiG2Ua199n0hePcLkoyWjL/5BhXw8yi393pdewpfn4RLuhOi31P
xb2P+EFg/QugoITLeMAshI8FG5b4o044LAUAaS/yy9tj7xx2yPjrJBlUa/Ai
wsUwjYuCmG2emGENfGiD9Kgm6XZmWNQYCDnOuwpva8xRA/4mExhITyOWsIRr
bjpzl9PSOwzbiWxGPHGb2SgNl4NnQhzpwwcSdBxGi+8qAPA8SD3+eB07jzAS
M/u8w+Krfcf8v+o++IrJQ7SCCZJhzGYiBFGDmjoIEFFSlCKcBXBBwvTedARK
43zSvgiC8BJkeHKHEWmlUJOdhR3hBJCbLsfzqprJfEcgSi6g+84ZwhTKiqKu
7TsUscjWx3ZlRIiNOxUgjuulrrZoxMpFzpPkTUCHATOgM+mtY1nMbwmxkZ1P
zaB40530Te4UFe9gGEcYqGo1fk2mQTbhB8uD9ynI0h2xfSCHk+6QYWVnpKoR
wbZqDaUGfJjjywHXA1XkMffq3VwmOibxbOKUbITIdxriHITnFpufuZcrSXMe
XMz6sP4YdTLYBC7kHK3J3TPHXrkdDWJ2HQMPvkGNOPx2RmH5hWb/dcsmqa5j
c7AjqxfOUiljwmfkDSl6UICrGd0f79TNm6Jzgv1v2IjoSHSPZEdOanir0Tzc
du3DYhhGOLjmJ+iWiedp5t9wTI2yjI0sqInMpgPG3aFeRCg19xRnAlGPR7Vw
qzLbnEJFkVBNP+WmBiE75VpM2X5j422bJOwr1jFh6EQ7dhhxfo3jXN4Gz1Xy
QwtWZjb9eHvKWzJajukeslGlCK6vpg13vrBmjRZhyxsieUVDZkjn5Bkbkfz4
jBKJ/HTW6hSCDZ8cXiloUeb3nd1kF3Vqw3Iy6+zJzSt2BRG/NWe0FQTASnM7
j+Q/4B/OBS/dGO+5TPeH9LvvwqNsPreF7Pk3HwCTuHdJsrXVD3iQ+uwN476H
voY70f062T6wdG9PBwbot8Ahei1wQzrbgmivsy3h0fhnPhydXf8NDgXA25nT
8HcPTAlpCwIOp2YRk6Zc9eAFhUDTcTXuWNOE+TWpOZvNgkKOZdFO5hv1Xwjv
fvXvvNdY4fxn1D8jdtO6Jdc+0peicICaDG/2VRdo5EsQitnGzx4amAFtrjIs
CZ/c7YqNhCpktopzxRETe0wwcBf5afHeN2kzTc/sI2+QzcwwPMdkMGS0//JF
m8Gq0b9Nfo3CjaaP4Yav65L9Z00ihIHrQvQvREdR/N0T8RRkcyJ8YSpBeXFL
UxkQuS0AieNsIvEbxXYaWqm4+PObrwipOVgNzj2QqV8Fb5iM9/vZ3trPJ/SA
mgIyqaAV+i3ZGvnFYzI87rIXI+Fv6pJ8PtUqSZowNAujyLtaWAIGAyw7K1Ne
IBpeoP9YSzoMPyl2nsnqOiPWeuATsc3xJwWbJ6dkn8D4XBB0Fy1ANjqMIAlk
u6QLC2GL3IrxNpI3k3rJx3VWNNM1Zc8jbaO7hmZeJQWjumgc4yx7RvphmZ4t
KaZLmaU7tIM77LQKcnu1bhabANIwW76mJG7TPaK7e8OcxAjYj5YPBJm5iN8V
xz0JQiX7G8eS8P6siAFk2eptZYPLifIU77MYJZ2IjkNaOkh4dpReF626a9fV
Cpl6jBiCw6YXiLzWJXp2LTaCxTjSENhduGyfyfmXe22Kv+cciUhKCAqvFNK5
rOpNcHYQN6vYfMAeV6IJrgVanT7aAwp1KmPjqOxbg5dwJL6p5kxAUOhuMaLD
DS5NVdn+A+TWAROsWzady44w0Jqjs6zyBbUUiPaTwZe4rfwWJ0b3uzMvdyvU
bYelKXGwIFMXXn3zd4jVjKLEQnasTp/zWakZiGCpqXpYQxVJVZmPG7r2tyni
+bweXuL+k4fW+Dys0Uj4d98FxncsIvEe0FqKwWeMNF5k1yCx/fAj78aY3BH3
0r+kB3/wT/66i+n87CeQ9ZP/lrawkHRCE3i8/2QyeX60CzfJPXwxmTw72v0x
ETqODoc8idPgSEL+nCTMRWG0HcbQqIK3tsAm54sb2o7N4AeqNCN1djWFe/KQ
BXnwAzNDMP8eWbiZf4/xHBL5IYUYezFvsy6rEf5DSbcNGAQJzzJLz+N1Xsx2
0y+P0GhDrrRkvXGEL4uiKKLAQdkOzjuQLKtrFFsl/UAG6Kll4Q8VNln6E9Dl
tgKJEPVj2SeN0BEnh3yWBCd6CowgNTepp1QtrSdQ505Mj6JTPDoNzdB5dsS+
TCTjASg0rMhLTKoXnXr2qSjZnSYyXyG+Iem3cAMQZiVcCVMHVqLEkHXYcdzA
gNjWuvULFq85UxbGpzP/IQ7Tbl/rJmEyuGYGZ5K6HlXeiFuHkFUylHNQyihB
4wDzGZn44JfCmaI2AhY2E3UEhbMEySzqLpHuJsB3pHBWqeZyQaUNqX5G7HMG
/XA8I/lNW2/IKK6ZkeW0B4jToJswXLR2uqH+dWIbocZl3nh1zWVrY3EjxiVx
ZuFtpvnbCdjlv8/IuzAvI/1xkWuIp+CPJaNaHC6hLAXAM6mzfN89zZtrq/RT
nq9MZ2QBxok6wERL3o0Mn2p/HohmIDjQ8DC8uPJt/Kk5f/JNJns6jIfqFIRy
ZkcoVg6d9ue5ePWwy2sIkLTm2Dv51aOW5iYwh4Sxia6qM62SKyIYTipygRVI
hC5FWGGvdnKxk/YdBiCASICh0SDgkE5d7cF0fVoJfEJedSG5B+/UECAxbsKq
gLTAGts4XOQmJ9OUhv/A0kl/QJOWlkjiLU9OeswkRaygB5TgQLABLhJdG4nN
WeTlvL2dYBbGXsx8lx8STkm6sS09PJRNJgHu8b47DFz8wdNnxCvsEvNIB8kc
AGtbrLXYj4nbI23b/0qvsKOfsCP5G0UP+DtOQfa/4Msnn5/sw4v3x29P8VuJ
3c/S/YMXo3T/5QGiWpjIGLmwGmZVLVWdGiwBlTp+UZolC+8TKEy9p4YHQ45r
QW+hUnIrloyeDcqIs6OMCusV6XXhvEA0RKgJOl2ZFXPA7F1Fxz5TBsINQmI+
q0CzdBolaQJ58tY8RIxsKabufi1q869sCbOG1wCPEgfPCGZR3OQdZBN2L1xv
NP3joS7hYumhw7HQShl/UGcEh9BBttg05McOsIvAMj4lD0yAXz3oAzhhyrh1
9uFcD9s8H+nFVDKvddRm6m43wahLbOykTHowPgJowf8+e4IAQ38dSWT7jE6P
taUXH85H+H/jw2dM9k/OTz0ucHJYdyo5Br5y2N3SKCcgxbHyewE34fh8W6ub
Ni8DlcmIc2jYOR1h683xiSaqRRJNO0KX0NSg8AUtLsMIjaZCuhgs9LzySfo4
OGzek9bfaAbHn5osKOGxlpmvCdGi9lE0p1Fw3yQJA0OtCBOIXMaLx2iNKMka
qs2/fLEcfg4GDhEG3pydx5f9aDzD7JxuE5lyBRVwmb6QbwifYKJdAY6Tasa3
P0ufyScR20V0YZo5QcjTzZFY59g3xtlXsiYS92AOAun7Ry6cmJGlZG/Csb9v
xG/hMeUzQrP65cn5eS9REH38T+HP9FBGJjMcbtSIWJAnnw8PdyekYqRt4851
kubRY+bX1+vbUjzh1uQicfkvb70dVAl/lBGaz+fLq/QR8gMkRTXjlqkH5mL7
YYfO/EQSTOCu4yk0O7970oTTNa9rFj5q9LJAzRTs/O16iVpxiR4EpqPkwy2T
1kXdmGcDZkxA/y0USlFmqONgrqAT1AxHzgVbvMcIi7VIevUJ6uwSx19Wqwyv
cThjpmiadWrJGUw2aq8qWrZz1ZgGz8IEJ2nXUc48GDXcBVcItyHYd+mWJ4QT
aWLecaYLoh1nVcqvl2dsatgkMpKNcvYGuhNPGj7qKl8WMzxi9jfOGuEEE2Jj
s5pDJIU3IMYEkcIdetzeAJAsxKGFoiz9tEQ3XcIBTbCHt8bYwIS5O6W6nPSo
s1G8CQjrz3kT4GsQ/sP3wR3Qx0P4KUSsVgNgv8xpKlfRFjq+LsZb3kyFbujC
ydZUW0CMj6XwqLIm4i5Lmsok7a7Hzw16wNVjClcGCTT3V6sWkP/f6agKcz7E
29EATplSLgwO6JadwRzPuM/yk9ghyjNBwghx2L2ss+mH92/Z08yIWY/v13d4
39c1meG+rpkhMT/oZAxX7CaJ/c3aFzy4Z0fjdb0Yk1JJ9TAHk8nR0W4aK2Ke
TyaA4340e8qjRzDJZTE2iUOA6fEl/XeXLOKXQPtIsNCcP0IT0RhImnn8llWn
gFzfHP+bni7J5YHiMz4lHY4k87nJxyAMIRFFrRdG2bg8FS0FgPEbzg3DvWKo
7b0ksh+lCAOsxaSMBOS+OL6u1E+6JBhyaSYQcLK5uA+ToDxxCR1w8kSiMW2M
YTLolPcDE4AQLzTiFAdstGUIVZEQu7h2NJ5bTtiyga3YmuEVgHzM2JVLSRai
XyoRR+froiGNBuMIHNX8lJ0FlnvDaRDz4rodRV5POHu5bfgNzRN6UC8SZUfM
iR1QDnxz2ogKcyjQ5IbTMNEMSLNpYeaS6tK4S5qpJGXEFAU0X1PdofKM9835
p1OvFE15M8ApXTIQBt/KGuuSkIcH2p5EWkAXnRYXZM573O2AAzZvoxrmqXvz
Y6Oc/Belgdk7i/SnyVKIAWHjnZ9PL3a+VVtw+Q+oCwIuKr+GjC7/N2CjBj9v
Aj6S34KR3C/ASV9Iq/xH1gp73JX87vHOnzUZCjmyx0LIY6KjqOVkghqbvWIX
24saeDp0jjqzXKlvPN16DP3vKpCHZJwYkyQPW+TPCHa9xzSsFKBQbjO77rYq
YwJOKlhb7LxpUSSfqc5eDSaWPpA/6WoL4HbMOD2mnwXFrmIoFkuckrr+J6LQ
xHRIPFMkkF6H15Gr0/4z4bQeq0Ap6ivaeMLWxAIInUR/bujheiNEuSMNjx+U
hqtalPD3dA/UH5U2QG7qNFeU5UVjlQBhS1SwZlLDmisRgpqsMGExGog5MozM
QYyHxKoUi5LFY1D2xk+ahZVlysWmB0ywJZxmCHlfVBUCYMHOFsyoahpAVV8I
cmLEgiYHkECvAb0gDPM81Rsg7LbEVCLqifQQkrzwz8djVAYRvqrXpM1gIsM+
mbBBphfgsHyN4WLwbm4dxrSkX6KIYv1aC9JVBtjv5bOujZFp+Ir8dMhbVody
32wbVS5KyDPG/nu80WzjbYT2ij/pFHskaUMC/IRGAFhhkgQkXs5Op85HrB4n
iNLLxBwQMEAuSQfdH9Jz9K4NPWXvaNIHiubZpoGQFgnmYuTWRPUakMQ3WpQq
qKSUYJ5IwIBxG5YGxJNRWRtOfGyehqZhodm9OR6/HuH/v6H/vxQbPr07gXWI
CuD9MYoaqKjhBuTJjqkdybVU0t6QHoZE/4MjUu0RG5b4YISboqbsVIsbFpjc
6ic0C9WjLDbS0wvsKWGGjnYg6imIXq4n1ujgasJEE5soK4qQsT98FmYJi3uD
m253CW4PIKuZ6FGArQH+AhaShIRTTY5RDSfMsHK+oWjhlsSJcUWzyjgeMisT
3kS8AihLajYV4taiHeFzoMA3zOHeoGNhqJaQ+GoJogOTWgcwqUhTEzLTckz6
gkoOJJqqm7/lOgQcFGPbEK4zJ+NBfaHfAwTTNIbj9HpRTT81iaiQmxyT7FAj
ngWnc8R+NQUIE4TgR5twlnhhDRvmZ/LPK7olpAr+M3BQGKmATGAnI0w3Gqmn
xTKLHuVRRD0oR8+egAjIFaoYBUxScg1svR9MYl46iCkpBMMUDOpPgNyIGjd8
8kf+nL9Kti+gK1DznWOctXN8Mj49Gx+92GF6lMS+w6q8J1WWuKY/+Xx8MoL/
Pz3D/z96oZ49guaCr+9hWAZb+NmhYhtmHH0FNbL2jrsOjgKMLdERZnvlnAiP
0reIptWLWnyoxsyFKLI0nOrO82u1eb58gf8QuMN/vWpXPduEXUHURgKLeKqq
DpC0W+yWfaUGRsmaTK7xbB+n2Qb/FN41RhC6d047iTLE31ReemIOY8ISBMf7
Q91ROZvRV/tl/umbeHBiq4kfDnw4/1yRTyr/jQUu7AczaQmw6OHDH3D6+oC+
JjVC+D3GBDoj1x3VUvgx6TyAZk6zcJh0OsDXg5qJIx1bOEg3Oj+JxpdHfgbu
UTyH/WdJr5+t0zg4SgalEc4TI74WKi6MyRdhNxJDTK9REB9huR3ZbWHkre6c
IDrjGADnjkFskMsKBpdrJB5GzgBL30m0L1l8VMkYTUcFWrGWIN0T1YGbJus7
2a8ihG61IQaHh4kYnAH3ia5PhOl+OMwGXdAekn+wMwlR4Si2TncTTF9jz1yQ
o9sqmTlvlw0mrG+wAuZuVaID0LkIWw5yTYk9usAjzuTTdSfnTSJLBPZnFRks
d+c1aQo31mPIGBKipEi5ivpE9lAPpoJeJxx2E/og7OViDUL+PT1EWZBTIUU0
MmJLBQaQIhVlcB8ZGedDFoQx8lokqjovY5E7VP/H+fedvcWGdHp5VOnEHbJS
S2JlWOffWrZ8PyVR93QWQg78NcWmEz9HTgPEGY6LcozddcYL1i6fOxsELGck
js3CqrQponyqYpgiFRgtn4BBg4rx5MiG62zWstU4Ikt96OZHtqwQ7+v9+GQE
GPbwQMlJ7IL5sEpBvuNPOt6YX9NMsAGnELXuV4036kfk9HEE4NkKo+zQcp8t
xQM5WHBMGMYbhSoP1NAuWgmWVZOPywxpPK0YjMSHIgqkRuGqKNfsH9oV7jec
AZjO4dspbYz7A8ntPCfFFlCGgccP6uePSD0/4hKyQ/94tarNn0wOD2K9vVGs
fxF0IisIREvwzJg9KXf5+I1OGRbqaqPbcLu9GhrV60CICAF64wsfaDguttvX
bHBUVpwAzQ8iF1AibzElRqNj67TZxsTx53TJuWooBk/RH0gBLbD+Zr2wDCWo
Pca83eibLZ2p0ho9gih1Ko3u1OqKSIj6Lmaqz+9v1zQrzVOEPbCIiu8fij38
yxeuw0rFUsgBSaatHeiymmFP9GvNJWup3kqntdXlUB80RCl1X0108rL/g0Vc
NRffVKQ6vvTXWU1VwdET9as3pXtV9Oj6l0Xf9K6LfwEX5i/UoTx8lZISmS/J
n2Tn4OF3MYgkf43sWZr8n/ygaLJJEvwfEOWMWSuJ4MjoQ9kfTgHRqWyhL12k
aXBgPdbjhStR3OQNZbISUibGFXvjCzYUbFhm3NkhbuShL7IO1hOYtt7fXEya
6eXHh2f2DXgube7HuORwXqSz3x3czgjNJJqT51PehCo5+RZYpzwSnN+24sQ5
loZJv9Sl6K7jzmJd2398e7s7S3tayXjfZuy47wOye6ZGj/tvgd2vgG4awy5i
HKsBwSHUIolYmRbi+WJJxIOGz5T4PSYm4uzdHBCWlyFJoEQUpdABmzam2Urs
96x459pSn/INqeuo5o0rkKKPMIJJU3FzpHaP7+RIKTl4YdeLVUHRwWmtboCZ
3Ttdv4PsguYpEVah7NBdkRkkIetajiXqCFmhRuuRII+h5Xe4aUtga8V7sLqk
5hxQC7Pl7r/OpxkCuEStc6ET3jHtwBq5BNpkiCU1O4fl8Aww8X+1uKMg+5KU
THCLowT+jJKH20jqf8r2YXSpf7KGWlkXE0LHLjhkjbc8/7zKOD4rKpqDjDcI
MEvJGt2tC4lHT8bPuFFBCbtCYi24bjCLlUVe9esgXeL7TrBw5yNV6li3YmXh
82hJk3/1s/kGy0jkAcDK/S0rm/hkYNsHoAwH3zDLe8ufFmg2GYlEmGnF0B3l
xcWzXquyzvXPkElcEEKlhRzFg/oW8eSLxl0I5EQxVTkfuMMSmhZmPx2nH8pQ
uJ4Sa3iHHZSi55JfJkOrWfiW09K4+iPLPBcFnC8imgUz620xR7ytEEA3UZZj
ISCSUjDyL+glOh9xOTXbHJmvToQslDcbIymdcZMDWPX7aM1n6sJJHdq0SCTq
L8uFrF/KvI5wjXQvjsXFKQzgchC7ukINMHXYYHL8/uKMChOq54t6F16dnX0v
4SFEKjRFA3SBTnpyinLJFT7QV18gJV5L4TA94wsy7grKIHgFkpQFx9U9qSGp
dOJ6o0VI0IsDE/4oagGmgxxcYWsPYWtVLnlgYzm4JagyUE3LZVS4KsQa2VZJ
gtIMYLjV7aYhiwAqZNCMUdMvI2nyWYCN/+S2cIfkm04JJmRY5MaIWEYxZijG
8n5g5HH/ON+94dOM6+0o8exccCKeeK5my1VovsdQLNyDqigtWDKXeqSqA+dy
NPBZx6+liKvaYS6xonE5Q+iQtYrWtaQ0rPOmU9mL81ZRggWAUu90o1pILuVB
V0C8RkWCNIosyN0T7IpPJjjuMHl1pUhiTVQfG7NCv1NngSjyyIJKohTKLp9J
yOqIv2tU48k1D4mNBKE7FSI61RAhwT04fX1xbIwPim2zRZU1nNeEn7KTgi9S
6cpVdBMobalm9y2SGQd2pjHX6LjZ+Dnxr7tpkgw9/yFG+3tbNBbf8ImCVpJE
PfI/jiTd8W92Rvxq/8ek97k16H+epgc/mnzphpcG+iZ8nqaHP1pk6iO9oD9V
AJ6e+waGCh6JGkV8GW/QScOQWa7lXlP8kiInSgTa2UQ7leeJy/kmnzA9FRv6
0upsVko8EqttRpHfM3bbh3u+MLX1Vj9mb0sQQ6fzXe7WJTDzwon0P+DKb9Wd
/FxJd2LETkprhcI2lN1e8h29v3gzkl+RexFHXbpSnbMRKyKvi9Kiushn675y
8R3fJtaFQww3AX4tdt3hn+bX6zmGiGHmYjn9GT4bczZjlby0iBuHo+OVucfc
Q14E5yfUGL1UURArzLM18aG4v14d/yJlG7J5WaHbUWDwr9cFJWJuq4RKspKd
3A3PmbhESO+NpkWTUDEMCx8lvQPCTHl1cVcs8jmFp0tPrN5eUBky+pCXwzkD
EsDPK+Z9RhRmKVpeTm4cajGhSCbDWMe0YsDLdbKkaJLgkRrSW3RYVbEWqZ9N
d41atUcuEoaQzoqGf3Ca3Q0qoqcYRkolIUnzZ+85ibA5QONHmICMq7uXFfcr
SZeV26boKC1ujeKijOC/xRJ1nPaOleKuYi+LTKHKhAwi5zenrCxhgATzcNn8
eOoyxrXlmTd4uUGaR8tGcGHfI6U4iXf4Dc65aj3PPuWSswWDOtcYfxqzD8zt
Jxyv0RIfcDOwMNKIilsV5tnG5Lm08RsXxZWQ88wUmRBKRyj+EZnV92G+Irtu
vKclH75jkiQBlK/dgUk5qFAMOdlySug7lxuX58lp7sQOybiSQYLqAfUyrfSZ
lSwqFZFpQvcH2RWePqMSsmxFRs1O4m4lEo1XqGie32yG+fza3MxZIv+St949
SbsrLEqMoSXCrGgZd+nWmSXJ290NIuafrG4Co95fgKWnHxyPO6lNWJqZ6MuK
dS+VhZ4DdFvErmKi7heJhlhyF+yvyyVU0P3z5obSAV8WlFHnlnNyoKxDsKO9
J9a7EhZS8HzfyGgYIbOu0ZjFZacJREbcoA0LSDQymYXSquqYD4sSfhRtJpCs
Jf7IdOkqgHIigzUAT1ERfsSHcRhK6rsl6JXcT77AIzSZrwGHAijmicnJoUhv
GCSVQdAWuVxxmoXwLaVcCNU0cfA1W/1qV2WTuX5X58r8+AU4kgA1uYZGBSOk
r+EFtyyxK2m4vuB0UhTOfpPGFU69QkgVIJbvSiVMxg79PqI96NWcjWM1aSpJ
IDu8ENF9rxbrWvMV9C49S2TIHiahSC4uTwQ2puHZfF7ncwvNcBAjN8YXhLb8
iMQS4PdSh1r5LUqhybAdz3wTXF9NpKSiulouXIrOpxxlQUdzIzk5EykqbhGz
vjQuEgG2DoazEfHVZR5bbBJG0LYroUIEzWOs8+BfErQT0fxN0ACzswymK882
sSsIokSyBgaqwaMp2nBFYhvFEUP3Vd3jzpg8JIS1MftGNCUxhUc8spHkwNY1
I+L+DaMIzZHdc4oJFaRVsjCf5lPBQYlXoAX5I+BJxyBR8FQPiyEjmQi4eNWt
sCLtbW51BTixZTdS3jDLhmuTKQGVRiuqkyhahM22SXSWJfgaha//+gqJFeRw
LszhgeXfjRrIPUdpIJ/tAWjUA5ucvlO2a7F5YDrI5kYn35nZyvVicws3lHhM
CmKo5QICKVsJDLvTmKSowU96spjBiO68F+56feAqEi695Qq4RCT2P72xuJu8
l72d/HmtCXW+vqfbp9OxeHY210PVN1g/vVwXJMLoKWtGkqT/8Id01owV4oc1
HrZbD78e096RXPq1L/1av/IpGk83Y9hv3wgWEiY99E90JPLJzih9kv4YQHb4
n7TRr6DRvmvkV7e9kfsK2h/49n7N29u7r6CDQ9/B4E70Ohj8aucB/5zo31H6
Y9eO+9qSJrAWQZMoYFSb/v07U3bLr8BXFpWQjbCs00jrIWBPfGMoJuBVuhVH
w7ETstRXdH5y+PnHw5P0l7yyvo/fnadfvsDTCTyFWWv9ekxw1gKZH5G/lfyZ
Lfgh+5FjojQMZiRqhdnoya+iwu5+uXxxpD1ZI9YaU4YxKpojBmH7PM0XC+Bn
qmLGDVHLY4NopveayFVBMh272bleud1tnmmZJCpXDZyV6kIKdmIltV2JlRY0
ntSZvWQzs5ojHXx3b7O36eObRUV85ZiV8MDEjbOx1M0Rd6gVBsUKg0IVGjDh
+IJc6qrSzOQ2KGJ8yt8dtgcJQJPDpmrWBTsw400J+U45s7VUekOGlrI+YRZ6
LRJKoQGJ1kXvC/UsCocul0VJuRaphM+6bli1U+dJIJ+LrJFyHtNW3R9/eXeZ
NliEGZA1MAtnoQospcRvYUDoKUGHz1BZxDvFwLmATBsyM8jSeFGTlK6VdZWE
PsiGofn2M1IGUCrVcTjxYmls9NbhTQPbMSiGslfYTcLChERsqfThDKGSynWK
4TbEyeP3+ALrJuIaVPdHEg+HI0ubHWARP+W1q9cuVjB00aOxUbkAF4GFD1xK
oaXc+IVV7MumIA42hcceCkC8c5xzCzU+BhhsztDPrOD6lpBlUhbrx9sjlb9O
iG1Ao8H2RHxtot8WYqwIipJWcto/fq7oqvviTwET9d8omtnaZrz9E0UQvReM
B3qPw32AV/+Bv8ZwgDbgnOa3xjgNoBC2zC7x0xfekoGkN6y/20BfuBZIa21X
ug30RWQrwQa6E70G8sI3OHIjuD2MRxi7lk+hge5obwR54QdIn0ED3um034Be
RJ+n6XNoEM6g08BeuEYvcA3zPI3/6Rrmeaf/NH2ZepMSXtYPK0LJmsWTfokx
aYd/7XhXbK0VrqWqCCNYYh6+9OZknjCh8HGBcHdX5BnQlXjMREHpiAmPsxD0
bWlJaKYuMQkA6W5npWQ5u5hVRMh0wZX81iXr7x3nwS1m329ZcCiU2lsWBmYS
GZNlpZeSp5mFB1VyJi4l4Aqd8hpyX8PMbHjSlapySBvyLVujK/qGzblEWJWN
IXtUAw9gZ5L4iy07oyl7Ms1gwmZFAq9gtmmi0B8hA55VZD2MaCFDlhbqq8mb
JtSfcCpq2W3JLJWRjRrBFHNM7KrSnKdZhMrOrOpXjpTif5C3qSVji0+BF6pf
lxuLZRFFljRphLfiSr2hUFYjiQCz7ckJvi0Rh52AJs3APcHe/wtUzh20sz4W
yGSOkR7vduUHdCZIH5+iUzmQ9dc5mVuwMtcKTQ7ZYtfMk+hkgFIFextQbpCv
tv3yBb8BjpsyG6T/+uZ18F4TzauWK8g6fnQa+CKggNctuCb4BD49/4UoTXbG
s1T/GK5kVDTNml//wuajd0DkSKpgAzN+Y5mqOs6JzHlzp+irZlW9RMHqoLiz
IDKK1b0pdBpV9Twrg/NcbB5yJbFCe1cyi2A+FMSS+iaxo+xwy6IN0bzO93Fg
95lnjh0zS3NMiadMeT+ExMQh5PwtyESm+Wa3Fr4zdIBfm5RNyNlVYmCAydBB
ebjTzLIUm3yTc5EgMZFo8jGJUKf0mQ0rtCJPaEWVWl7DGP1QGMPSkmJ6p/ev
6cLTaOr6TBMzadkBgE2is5UDcb1ab4GzF4ogxC4L7P6Um/vX1a2mTZBn1iEO
/+H9uSm93PjiMlZh9F2nFaBrvTOMZ5wdhHUG9h4ZADmXkFeJ1x85GHgjvamq
KcKsDuMjIqH01DyITSdqrdmWrsj+jFWmuICYHIkeQThuWP+ouyCKXGWF9abf
OQnwFlZEQgqjum8P/SJEGrD0X9I/0iPJgI/hK+Gnuv3jk99s3q80gHO8rovw
XhfyG/X9ikNQhOunD9xq/DcDUQLqTvFGwh/MW0XjIYgk2I84hZLdEx/XyTYl
6VZuurJB6kZ5RYF41qt4cjYth/dHHwdx2joldYx9zOkYjJkJFflYnqXvzHMb
c/dhWL17SpRr095a7VUAv8Y5sFSRa6QBjCaM8yOwmocU8PKYchSjaylFqzgf
FYlvS6uo3hX6MUUZxkUu30RrFEcqm2I/jC4K3sWtDlUQMqucR0GeCzZ4LQnF
oLdg5HvTKQoeX5mhyuMo+6M9MRytGhI5xyhPvaiHJ2+KJl0xZgciRxKicDhv
8UEgskcMWwxEcQP6eNTzOvu+oelkZAENqbCFhZgNJHGz4CAraphpRFG0sOFl
jXDfGZ1RVgk2hQFNk7bakznp8irSyEPUXTvhy42walEzRfA62wcXIuXAKW3F
WOI0eSIj4eT0KU1O46Xg8sQB7erv0A2jCqlHiBE5qY7fpSecu0jKdFn+Cy7j
fPCUSjb7rHxlxe1cjuFOUrpoTTxfzqkYNjO08JH0fKk/o06QPGXICZzo53gK
ADzmP9HrJ5fInGFq7UsiSS5H4oMMLCVjY9gXHnp7L0DfPTVnzSQ38t/4trqR
g5vsEvA7cq8KT88kILhyqQ8BH01rMlaehApN+T0fkUKTigpoyhk8+pH1C6Rq
qv5zLjlzyDujUGYZuf6TnUcVdwg9sO6WnktzOwRJERatTW4hKoH5+mU8v6hy
V+cW+fw4mL48JA7rX1cEV7uyAWsVzC6zCpW1LPZVIKPZ9FM2F6tFVK1JCKyw
Qv3uJZ8aOkZ1CjByehn2/kDXdo4uCt4MgiGiMFN13yc4DLHaEa7aslDYk49K
yUPotUtUhANFEgEqDDYLdN1XvCTST65Fdvj5tzNkNpnAlIVHGlIcP0HG7I/2
lQDrX8NXCr7Kv0l6Nmr7Cn6j7maURq+4xStS+n33nXV0Xc02krNmq7Ww+zkl
r/kR2Lpk8A0sXML/6edayyFOq+a+mPXaUKKbvV6mm2/r/PLD+dVvZyX7HHx7
1826aMecdRxYpLGwaGN19CEN7/7LjvLLuFYrt6QO9vcKG8i1hl/fwLaO4F41
LXmlhRJOvoJyL6CbmMX8M7Ya4G+3cnT9hCqUeaptQmq/DrNnBU46nDE3xCyi
yIlazW6j1feYFKsX8G3zH5hznFzQJjnjAEczCrvkd8M8aLTbbBrLooQLhgoE
6z6ABjq3XZLLxKjhEobU2p8uAYx07oxzknayx8KE8WG/PRlNfxamglbr8r0F
FOsCdYKc9A+IiQFMfZy4PVO81HnEiMk9NNTUe/afR06uq4CeHsBO3e8ZP6WM
oAZffhVFDU1hEJPEKOJNuLlWM00l2/BqLMXhScYNj+Xp713tXGbiuApYgQZy
qNpKMpa4munIFHs0gq5xn1ccKNctmh5poVxGR8ly0EjJIXZTrFLnAslTZj27
GxzV2evplPJm3mTFYo0RefgHNV8DrZlMkBdr1QAsUlE8aa0slgZPPapS7zSj
2LYbEzIK6AEFR/Nj7BTNksR7HMYjo868kj8KCJctQGx2Ly21DY/C3tvRYymW
JloT2IqLy++bLbOzvMuSW4B8Uqpr0nCyRqEbX0fTQB1YNA+eXIhFDuJZLyyl
m7FgwEuHVIgMDxY01T8gxKsamNqBIY7oHoYfTEw8VTghOYghZWCgwDNaSKTs
NhprNHcUeToUHbin/tHSoiMo5y53iiblEkFRtfWCnfr7Wyyg4anbrK+axuQ6
VmBJRPRImUHKqWFFRte7ZaoCZbhuxhNYn3L1QhmpNmIdDJepaiJiUkY4kz5K
6C7K0ga50lGR51EEPrdCrzSFB0IhCcjra7H6YcEsdQ+hEqp4kpQZk0mpfdnZ
E4ra9U4/fhjXacx0SIIMVIZcXEq9p01o311+0FpzCxQjONucmY5GcU1uiU5w
EXSjII7ouWniNgvy6fkyaVRvU9QhJVoH3YpQN8AkUi0CxYLkio5ubcV8XYui
MCgwdWtGiI9Lzu7n8JLoCJNQLyrmHjXTXqA9hIrJbrGIyIICqaJWLE212Aw0
Do0cJaH169ncKWgex0VCHUaSToqmq9wg9ZLT6AxgM3IKxOPF6kAcd0hZfwTf
hzlONIH9PJf8mAQzA126ATGJZt64Cjkej3I6HVcxRmqJf3WVIVk1VS7nyUqc
FJvHqDRZ6KbWSrDUPzfq1/Rgz26sAg5QOXL2QSbWyyEkravAOyAXN5TClSq3
Wqyr6SquuO76xIUnuzsoUN89GILVRspBNq8oI8jYA4/Qlpv1InmFpSY0ytke
fx3SDjpdIgWBzlhqsadkipJ8gzOJheXckfxR7lJhGdrvIdzDzlgUD7guh4eT
l1IKzmJa8rquKLZ6VrDCX90L9JYj60BsFkbCwqBHOGh0CzBksZVBnf3Qf6MT
yO5gOwhP3VS1m+E3pV97zCLAAF8cBBJj+tGKNfQlA/Bf0ct9+2sVRPwXDKKv
XIo2fFuvo/avaNxwe+R5+lcULfqPdRwdvZhx/+me95UYuW9epeFvko9GJLW4
B9Bp2NexA92uB737ijjtB96jyy8mD+1+4veHwSBNkuHR0+Chxg/Nhwx9+Lpz
sX/SBh96p7ODuI3OL2ojD60ZevINTDhqw8/CSOjMF6WHC3rHx0y3SSaTP38X
q5IGp/E9xlv+eaTpZAi9GquC6fWPo8rUIr9V1UzpvMUhcc4YMfXDjS1JGYWx
xaE/vVfLdWkmPPFe+liMfy64uEO+WOAV3Y267vYCOHK8osLu2XpWVEy4gD5V
KKFsrrPpp3hmyryEtBpVXbD/i+tZVNrIknFlxThBjCcBUlLNsYDCDtElJVX3
nAudd2IkjanSbDN8PGK+DRWCl9lqr7r+Wz4VYwyK1Bv2RA+JBa96tZe0u9Bc
VPtUlIrz+idxPmtUm5kYyk4Bmv8fxuOKd1K5WYLBOcV0ovID82CaV8W5YXME
KNNuNkDoV5yBBsgfdJuQnikulc4WOyYHuiRXRZAU/WITQLkmMZuiTKbGg2sK
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
kpMw+xj6MaFcBDiLdcKwrdsb/X+z/iagAI0CAA==

-->

</rfc>
