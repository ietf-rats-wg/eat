<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="June" day="24"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string and every bit in the byte string contributes to entropy.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, {#swevidence}, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption.
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT.
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-18.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="14" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-18"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9a3PbWJYg+B2/AiFnRFpdJGU9/OzJ7FFKyixl25bHkju7
tzbDAZEQhTIJsAFQMsuT/dv3vO+5ACi7umcidmPHUVEpArjvc8/7MR6Pk6bN
ytnHbFGV+au0rdd5Uqxq+qtpD548efnkIJlm7au0aWdJMqumZbaED2d1dtOO
i7y9GddZ24zzrB0vsjZv2iS5n79K3x9fXaa/VfWnopynv9TVepU8SqdV2eRl
s25epd9v8uZ7eNSsr5dF0xRV2W5W0O/52dXPyap4laRpW031O/oxy1ftLTw5
wt9NVbd1ftOEL5rNMn4wrZarbNq6L9bX4VlZ4aP6ZprPmnazyPWztmjxx9Vt
np6V8GOTHre4rKyFOaZX1ae8TB+fHV/tJtn1dZ3fvUrhR5LVeQaTL9u8LvM2
+XQP+1XMS1x85ppPr6saFj2DjXqVHjzZPxzvP0mydXtb1a+ScVqUMP3Xk/T1
upxdL7JZDjPk7X6dreu8nObRq6qGjb7Mp+sapwkzrupN+vr1CbzKl1mxeJUu
5ov/3sgHLb2fwA7oSL9M0jdw9ptsaeP8UtTF7Dar3Qsa5X+sswW0XKZX+fS2
rBbVvMgbWO90gvsKJ5HDnj59/vxp+qaq89tq3eTpaV3c4TSnMDjMMyvT0yKf
V7jr+Rx241V6ki2Km6oui4yOa122NXz54fIYfq5uCSB3/rSfvnj6In32dD99
DuC4Exa35Cn+939vi8m/y/z88n6dpBffn1ZlNb9dh538Na/z5SZ+8+1LPHj+
Mv05q0s4x2o9v03fV9nMluhe0HpmuKEf9o/S568vowWWRZvP0n8G6JhVy7DW
Px0dpfsHTw/Sw2eH+y9ehpX+tZrRZPtLTcqqXgJs3eV4Y97/fHKwv/9S/ny+
/9T+fLr/NPz5TP588fLIPoBhwwfPw5/2wYsnT7TZ/oH1sP/8SP88fKk9vHi2
b98+P9LODl++CM1stJeAYF4l8Pdvv1y+oL7grmf1HDd757ZtV82rvb08q9vb
cVHeVJNynk2WxWJvdbvam1X35QIOYAI//ummWOQ/TKuqno3v582Lox3uim/z
bxfvX5+mv5xdnJ5dnZ+kl/92eXX2Jt1/+eJolL795XhyefX2dPLkyeGzj/uT
J5MnH2ky1IFeTvx7zIDylu5ytkh/yatmBT+yxRhv/mJRzOmOHuN/Nulj6HmX
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
E+yBqJiu2D8RsbvCH1BCJ2mH/NIkZm4aOX8plFjVRFn4LFNsphvVIzmVOACT
O4cSta1yqatSsWPl9z5GTQLHH+xVJukNAAVO8pX9qrLvUFam9y4l0AB+ibf1
RKNXXtemTdPZmelSJqZbb8M8dBcN2Yr0olQGkC92PF1IEL01JX1REl6DGwI7
EWoCKFmP6/7Z89P9qmezygAI11d2twwDGXMeAkWNBDPIwCyWYzIBkEGL0dVZ
DEE38jctxSbts3UTiQ3zIueksrgx33QNuVeGhTROY9MOGpUgla8yWcRIy/QS
Fw7dYLK46ubWfPmaaelGiKBrLmbY1V/WbIoV8K00kwz3xdJmrVbzR9H4Awrc
hn799oWm+gHp+gWqyU3qn4h5Plb8kZY/V/DdUQFQqWG3rGhkCotWMb8m0r3p
esXkxakoyqYqHoOUPTdEj002HNNnYoukOgoRVuvT5U9MHIWjs+4M+6Ty42ts
xsZaLraerCjIjx2TsksxewsV8ShFWy77kdsDW8WzlFXBWOJ+8OblycunT0Sn
Z9rR/CNOYsJJczUCGrHhNl7ZGHU4tZIm0XNKxer+SL4o0ir4Z0dHEg8h+Qud
FCD8hatmJuTBJiwa8z2VsRMWeaQamdnuHTvUSSI6ihUn6EAvjzKTTUrqinqP
fTM+833ai+Qs4Q6c2UE3df+x53Fq9MeCvY8d55eg8cS/fNRv9aa9XqcxCZpR
q9OMH1WlQT7nNDwIO8ETP6zCb6XSdPK1lkXDR2EnfEJaMO3PTcRNn4SdpvS3
vbbaYwQgOwbr1MMuNPvbXZW+7nxJKw8DHHaYDl6TKyey6mjXHtDbbdX28j84
MyAL6wUxOmvgW2b0287NKW+G4CWlC2F0gC27t6miAsZj1CTgV3LN+7st4XEB
C8mSzTWmBQd36cOkPEPdLVMJ9XrEw7jTPLBRzr2fouWYT02Q+9uhj98AkyvN
KGyV6l7pJ/f3AUjxxA+2tN+1Dx9OSGUwvmIIvjotzmeneTRxMfWgvmU1O80D
1vK335rl2TSh8wAk4p06wZ9tnYSfft6xl84T/7e7Ptl1JkF3a0c794E/YesJ
Foa7it+t4vhdsx5/jCsP6ePTHZ/s1McdHezYx9097NDH5SM/6jQanVaz2Qma
YbPVGDeCRtAZ7UC7WkGn2Zl02mGj3Wq1W/Bva9puNuBJsxnGzWCHLuCzViPs
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

-->

</rfc>
