<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="April" day="24"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message or token made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/>.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of an EAT. Many of the claims defined in this document are claims about an entity, which is equivalent to an attesting environment as defined in <xref target="RATS.Architecture"/>. An entity may be the whole device, a subsystem, a subsystem of a subsystem, etc.
Correspondingly, EAT allows claims to be organized using mechanisms like submodules and nested EATs (see <xref target="submods"/>).
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>, except that in the EAT context an "entity" never refers to a person or organization.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Full tokens with security envelopes may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EAT tokens for specific use cases in follow-on documents.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>Base64url Encoding:</dt>
        <dd>
          <t>Base64url encoding is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities. An EAT <bcp14>MUST</bcp14> always contains a Claims-Set.</t>
      <t>Authenticity and integrity protection <bcp14>MUST</bcp14> be provided for EATs. This document relies on CWT or JWT for this purpose.
Extensions to this specification <bcp14>MAY</bcp14> use other methods of protection.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines a new top-level message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.
Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM <bcp14>MAY</bcp14> also use a hash function like SHA-256 <xref target="SHS"/> and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash <bcp14>MAY</bcp14> be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url encoded <xref target="RFC4648"/>.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel-hardware-model-claim">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname-software-name-claim">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme item to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot-oem-authorized-boot-claim">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in ROM, a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>SHOULD</bcp14> always also be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URI for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature <bcp14>SHOULD</bcp14> be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest encoding, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="detached-submodule-digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EAT's may be used in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is a full top-level token.
This top-level token <bcp14>MUST</bcp14> have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It <bcp14>MAY</bcp14> be a CWT, or JWT but <bcp14>MUST NOT</bcp14> be a detached EAT bundle.
It <bcp14>MAY</bcp14> also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each detached Claims-Set <bcp14>MUST</bcp14> be CBOR-encoded and wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each detached Claims-Set <bcp14>MUST</bcp14> be JSON-encoded and base64url encoded.
All the detached Claims-Sets <bcp14>MUST</bcp14> be encoded in the same encoding as the detached EAT bundle.
No mixing of encodings is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, even slight modifications, such as the use of a different means of key identification, are a divergence from this profile and require allocation of a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this section and adding requirements.
Such a profile <bcp14>MUST</bcp14> have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and it's description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEMID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authortised Boot</li>
          <li>Claim Description: Indicate whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicate status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
        <table>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="media-types-registered-by-this-document">
        <name>Media Types Registered by this Document</name>
        <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
        <ul spacing="normal">
          <li>Media Type: application/spdx+json</li>
          <li>Encoding: binary</li>
          <li>ID: TBD</li>
          <li>Reference: <xref target="SPDX"/></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Media Type: vendor/vnd.cyclonedx+xml</li>
          <li>Encoding: binary</li>
          <li>ID: TBD</li>
          <li>Reference: <xref target="CycloneDX"/></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Media Type: vendor/vnd.cyclonedx+json</li>
          <li>Encoding: binary</li>
          <li>ID: TBD</li>
          <li>Reference: <xref target="CycloneDX"/></li>
        </ul>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen">
              <organization/>
            </author>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald">
              <organization/>
            </author>
            <author fullname="A. Farrel" initials="A." surname="Farrel">
              <organization/>
            </author>
            <author fullname="Q. Wu" initials="Q." surname="Wu">
              <organization/>
            </author>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed: , , and  for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson">
              <organization/>
            </author>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes.  It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl">
              <organization/>
            </author>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck">
              <organization/>
            </author>
            <author fullname="T. Howes" initials="T." surname="Howes">
              <organization/>
            </author>
            <author fullname="S. Kille" initials="S." surname="Kille">
              <organization/>
            </author>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/docs/1.4/json/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="SHS" target="https://csrc.nist.gov/publications/detail/fips/180/4/final">
          <front>
            <title>Secure Hash Standard (SHS)</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="August"/>
          </front>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'948f8860d13a463e8e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'948f8860d13a463e',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'948f8860d13a463e',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'948f8860d13a463e',
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardize a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-19">
        <name>From draft-ietf-rats-eat-19</name>
        <ul spacing="normal">
          <li>Prefer the term "encoding" over "format" when referring to CBOR and JSON.</li>
          <li>Separate sections for creating and consuming UEIDs</li>
          <li>Base location on W3C reference directly and WGS84 indirectly</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9a3PkyJEg+B2/AseWWZNSZvJRrOdstcQm2d3sqdcWWeqZ
7W3rATPBJFSZQA6ALBZVqrH9IXtm91vup+wvOX+HB4BkUdLo7M5sy2bUTCAQ
Dw8PD3/7eDxOPjxLHyRJW7SL/Fl6cZ2npyX8uE2P2jZv2qwtqjK9qN7nZbp9
enSxk2SXl3UOH8GPZFZNy2wJ383q7KodF3l7Na6zthnnWTteZNhBMs3aZ2nT
zpJkWpVNXjbr5lna1us8ado6z5bP0rPTi++SYlXT46Y92Nt7uneQZPDyWXqe
T9c1TCe5mT9L3x5dnCfvb6C7Yl4W5TzN3Bynl1WdJKviWZKmbTV9ln59mzdf
849Zvmqv4ckh/m6qGga+akKL5nYZP5hWy1U2bV2L9WV4Vlb4qL6a5rOmvUWw
cTP4l63b66p+lozTooT+XkzSF+tydrnIZjl8wrB6ka3rvJzm0auqnofF4jZU
9W364sUxvMqXWbF4li7miz800qCl9xOYko70/SR9mZWz22xp43xf1MXsOqvd
Cxrlv66zBXy5TC/y6XVZLap5kTfpWTmd4EIBNDks8uHjxw/Tl1WdX1frJk9P
6uIDTnMKg8M8szI9KfJ5hWDI5wD9Z+lxtiiuqrosMoLfumxraPnu/Ah+rq6r
Eia09bv99MnDJ+mjh/vpY9jlrbC4JU/xD//eFpN/l/n55f04SV9/fVKV1fx6
HSD5Y17ny9v4zf2XePD4afpdVpeAN9V6fp2+rbKZLdG9oPXMEKDv9g/Txy/O
owWWRZvP0n8GbJxVy7DW3x0epvsHDw/SB48e7D95Glb6p2pGk9241ONJ+lO2
WGTTsM7jrF64h7TEtzDqDzCLWXpeXbU3cFpGukAZaQpf/aHOZ9fYqpFGNBKe
xLYuLtct4yqP8kNevk+/Ler319XizzrMd3W2Lq+rq7xOz88u4Kke/94LGfUa
eplcSi9/aIp2cmUtJ4DqOtrFdbXMmvS7qmng/OpwR/UyfVEsEaahy5aaTq64
6R+yWuHFPb0s5ut8kX4L8AFikNdV415NrzN49xb/WwMQSjtqgHD5AtDOwJf+
VNXvG4eS0/p3SND+0GjTyTSznt9kAMDp+/QdTLW+Kf70PoyZtdcFrOzbGudb
zwJ8s7IELLxopgiMspjfuehraj1prXVv3W+y9SI9rqubRX6bJGVVLwE6H3Kk
f2+/O378cP+h/Pnk6eHTZ0wf+RXgZWj1VFvtHzzSPw8e2tMHT7Xtk0f7e9DN
bLaQ34/t1YOnT/Tbp3vW+VOg4/rn/qOH/O1qsW742eGjwyfy+oBmBH//9P35
k0N8CGQ7q+d4TLeu23bVPNvdzbO6vR4X5VU1KefZZFksdlfXq91ZdVMu4OhO
4Mfvr4pF/nxaVfVsfDNvnhxucVd8uf30+u2Lk/T709cnpxdnx+n5v55fnL5M
958+ORylr74/mpxfvDqZ7O09ePTr/mRvsvcrTYY6ULKOf495017RrZMt0u/z
qlnBj2wxPivbfLEo5kTdj/A/t+k29LxDH87gPgSqs7d/ON57PN57gus9O3p1
NDn+6WJyvMiKJZx+ejC9ae3lj92Xf3Ivj1+fn06OFvMKLoXr8HnV5Njk4hoI
3fdv3kzOXp6exUBVmK7gLswWkwfz1WoCy9qd5c37tlotq9kaDtPu+SqfFlfF
lNba+XmSt4CozSRrVh9/3/g3Z7Pnjw+eesg/qGcApzKv+ap+AzsJP5rrYpW+
qas/5dP2n5hUQw+LNBom/R6I8Co9hqsofZW3N3BIUziQ0LxeFgD/5p/SV+vl
ZV4DBR6l2WxW501DvAE0KmY5MDPa1aatfAAwinfoKYLvuDr/6ewEYDo+mRBn
02TT5RiAe1PM8P3Ji9dHw1CdL6rLDDA9a+FGXBJgb1ZjJLownd31CtG12YVx
Hu7uH+x+/+b415NiXsBGvMiBoalfXx2tVnX1IVv8+gExcTW78sCUtik3Tqur
VJu7RbyqPuQIFVzNwwSn++b01QYcyMtJkZUZzRN+7L7JS+hxIVCbrLJ57sd/
A7wAjIF8Yl6v6gLYA96BdBvG2IGb6d/XyPgZliLlGbfZvKEjfv7m5F+e+f6M
AL/Jpu9hrPQka7P09COQ7BJ+beMHO4Mzb1azj3CnfBiCLtw8gMCH+wDmg73d
vSe72M04wtPxwfjAgKt7f7BHe387XcA9rjPVqdpjedqZz5Rfw6ToLFXTZnd/
crj7J7h3dvkLHuUK0DZ38AHcHq+yGqg6QFSg9O7sYgKMW3EFoPQ4uC7a8VKe
U8MfzmNoIouYw2XTXKfnLRwCuIIAhj+cD4Nw2tTTSVk07WRefdhdrS8Xdtpn
dMB3r4oVLOPJ3u4h/FlGSHa0ngO/riiGlDm+gw73D/QuOMQ7SO6c/QO7FvYe
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
B3hbLPcoxqJv+pzExRQY2ul7KfvOcX3aCTOHhOgqGUj6IFzqjDWU6oO8Q9F/
WOAWK8Nzkt4goxSyjji7as6u1Qi/TtYdj5iuPbGuWsQMFYjbx+dvUVP8UDAI
ZAb4vzdVI4mCEW5HHXrX2b0NRwLfkGMI4C0WRVtp5yvrPN1+U73Z8Ud5kr6s
2CUVC/UiG5Cl0IbVLmzyYNUsn4vE1bmzsCTlNHsagzGDmoJ9aDbh7DU5VS5F
7UeYXkLcG6C4nuL3RTnrJlsWuAdXOZgHjUO3c3InFmPu0sC98HWNJyqYm3Ht
Hjz3iklS6CChDFdt9FSLx/QfPudbGK6G4SouEZXbHa5U4g/lpjbTpt4wwqpa
JYlOgv5JKIw801gYjNKJZiPN/DOp2BJNSJr5Z1KXBedk/6QZPOtmt4cJ9prB
M9/soSvBMmSURIUgqmY3qHE1AF3TJQTlZ8aVdin9RCSDi0y1WqybIQ1pKknl
FyRhVoL5oiBTe605chNBEWdITdrGttsff7qgD9TLjfQllC4Zs8Jxt6GpdtJw
Q2Oz1fTNclXTia4ZBokPvUR7AdIZjbhktyaiPLQSSskYluO1Xp2nLFuyTgpL
MKK8L4HeXoVKvXZUxxs6VP6BJZwhMwyBQQLuCbAjBRde7d4ZZIOuXD43KKIi
RXyqVE8U3KnEAEVeB2ZiRH7C8ZBKhMyCE+nhXLACcmnAAVSoREWmUOAvRvOw
ActstSsudF0LzZC2PVbRq4mro6kPNd8WtqWWO2fDIfIayBHHhQxMwAygkcKS
8lKg6UuJsbM7fXlkv+H3GDlSh+LI5l0Rshse4bo3gbCbelp99ob0wYNI9Qq4
j+KjGOQsV2GqUTp5yNHZs/AO9keBIl9y9cDyjNk8vfj25NHeQbegj4m5hVhA
S1QNLdKaUBGvxduQuI8TV5mNCXqVPRJ7eZ/SmIMmy8KhBc4IhvcyVuHsIKGm
vQX3mOutakIFY6urGN6RxYoiLmKd4ODOAidOl/gu6haUWmOsfKViLl8UVd0b
z6Ek1U+0zBIcGz+sUBia7SQJ5Wr526yWjSJtV7HxLEhNKtlars8KfHcbsrci
ucWjFQUAsAOQ+m02cM3KE/EhNld9ff5O0yHJG+ui8wHe2F89mgDGbW/4cifZ
8AK+HHAQdV7mztPf4rWB9Jkzvjf1cQi1Aoz1cc0YYf1M6h3hv99xhAqwb8Bl
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
gG/uyjxdwEfe/wGLljyI7WECAA==

-->

</rfc>
