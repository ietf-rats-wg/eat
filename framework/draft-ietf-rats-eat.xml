<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="September" day="20"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>Some of the goals and fundamentals in the security model for attestation are not the same as other security standards such as those aimed at privacy (e.g., TLS) and authentication (e.g. FIDO).
The security model for attestation is not described here.
Instead see <xref target="RATS.Architecture"/>.</t>
      <t>EAT provides the definition of a common set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC9052"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for evidence and attestation results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of an EAT. Many of the claims defined in this document are claims about an entity, which is equivalent to an attesting environment as defined in <xref target="RATS.Architecture"/>. An entity may be the whole device, a subsystem, a subsystem of a subsystem, etc.
Correspondingly, the EAT format allows claims to be organized using mechanisms like submodules and nested EATs (see <xref target="submods"/>).
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
In the EAT context, "entity" never refers to a person or organization. The hardware and software that implement a server or service used by a web site may be an entity, but the organization that runs the web site is not an entity nor is the web site itself. An entity is an implementation in hardware, software or both.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims are defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific token formats for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Full tokens with security envelopes may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization format or security envelope.
That is left for a follow-on document.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EAT tokens for specific use cases in follow-on documents.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an attester generates evidence.
Evidence is a claims set describing various characteristics of an entity.
Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry evidence.
The evidence goes to a verifier where the signature is verified.
Some of the claims may also be checked against reference values.
The verifier then produces attestation results which is also usually a claims set.</t>
        <t>EAT is also designed to carry attestation results.
The attestation results go to the relying party which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the verifier and relying party are not separate and thus there is no need for a protocol to carry attestation results.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results.</t>
          <t>The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow.
They are a matter of configured policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the detatched EAT bundle (<xref target="DEB"/>), a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
Any new format that plugs into this socket MUST be defined in a IETF standards track document.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations MUST be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>All claims in an EAT MUST use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for claim keys.
JSON-encoded tokens MUST use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but MUST NOT be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce MUST have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the "oemid" claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel-hardware-model-claim">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname-software-name-claim">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="secboot-secure-boot-claim">
          <name>secboot (Secure Boot) Claim</name>
          <t>A "secboot" claim with value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
"oemid" claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an attesting environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded detached EAT bundle, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
                  </dd>
                  <dt>"BUNDLE":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded detached EAT bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.
A detached Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set of the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
              <t>The encoding type of the detached claims set is part of the carrying protocol and varies from protocol to protocol.
For example, a detached EAT bundle uses mechanisms defined in this document.
Other use cases may use a content/media type.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, a hash algorithm identifier and a byte string containing the digest.</t>
              <t>The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>.
Either the integer or string identifier may be used.
The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
              <t>When decoding a CBOR format token, the detached digest type is distinguished from the other types by it being an array.
In CBOR encoded tokens none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "BUNDLE", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like an EAT nonce (<xref target="nonce"/>).</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in evidence or attestation results.
When these claims appear in evidence, they SHOULD not be passed through the verifier into attestation results.</t>
        <section anchor="cti-and-jti-token-id-claims">
          <name>cti and jti (Token ID) Claims</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent in EAT and carry a unique token identifier as
they do in JWT and CWT.</t>
        </section>
        <section anchor="iat-timestamp-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EAT's may be used in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="claims-that-include-keys">
        <name>Claims That Include Keys</name>
        <t>This document defines no claims that contain cryptographic keys.
When claims are defined that include cryptographic keys, they SHOULD use COSE_Key <xref target="RFC9052"/> in CBOR-encoded tokens or JSON Web Key <xref target="RFC7517"/> in JSON-encoded tokens.</t>
        <t><xref target="RFC7800"/> defines a proof-of-possion/confirmation claim named "cnf" that can hold a cryptographic key for JWTs.
<xref target="RFC8747"/> does the same for CWTs with claim key 8.
These particular claims are defined for authentication and authorization.
Their semantics don't translate to attestation and they SHOULD NOT be used in an EAT.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a detached EAT bundle.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the detached EAT bundle.
No mixing of encoding formats is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a verifier must implement.
The attester will select one of them.
Since there is no negotiation, the verifier should implement all algorithms listed in the profile.
If detached submodule digests are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations <xref target="sec-con-freshness"/> requires a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver MUST accept ES256, ES384 and ES512; sender MUST send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID MUST be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce MUST be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver MUST not error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and MUST use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition MUST have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the "cti"/"jti" claim and the EAT nonce claim.  The "cti"/"jti" claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The EAT nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modifie detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "eat_nonce"</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: EAT Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Name</li>
            <li>Claim Description: The name of the software running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Version</li>
            <li>Claim Description: The version of software running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Manifests</li>
            <li>Claim Description: Manifests describing the software installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Measurements</li>
            <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "measurements"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Measurement Results</li>
            <li>Claim Description: The results of comparing software measurements to reference values</li>
            <li>JWT Claim Name: "measres"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Count</li>
            <li>Claim Description: The number times the entity or submodule has been booted</li>
            <li>JWT Claim Name: "bootcount"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): uint</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052" target="https://www.rfc-editor.org/info/rfc9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose/">
          <front>
            <title>COSE Algorithms</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-22.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest" target="https://www.ietf.org/archive/id/draft-ietf-suit-manifest-19.txt">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg">
              <organization>Inria</organization>
            </author>
            <date day="9" month="August" year="2022"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-19"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-21.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="16" month="August" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-21"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-04.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'948f8860d13a463e8e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric version /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / secboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /       258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /     259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / hwversion /   260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /       258: 61234, / PEN Format OEM ID / 
            / hwversion /   260: ["4.0", 1] / Multipartnumeric version /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'948f8860d13a463e',
           / secboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / oemid /          258: h'8945ad', / IEEE CID based /
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /        266: {
                            "OS" : {
        / secboot /            262: true,
        / dbgstat /            263: 2, / disabled-since-boot /
        / measurements         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "submods": {
        "Android App Foo" :  {
            "swname": "Foo.app"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "swname": "Android"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  /
/ Note that 602, the tag identifying a detached EAT bundle is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines a message format for proving trustworthiness to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain reference values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-14">
        <name>From draft-ietf-rats-eat-14</name>
        <ul spacing="normal">
          <li>Reference to SUIT manifest</li>
          <li>Clarifications about manifest extensibility</li>
          <li>Removed security level claim</li>
          <li>Changed capitalization throughout the document for various terms</li>
          <li>Eliminated use of DEB acronym for detached EAT bundles</li>
          <li>Replicate claim optionality text from CWT and JWT</li>
          <li>Several edits and clarifications for freshness and nonces</li>
          <li>Correct eat_nonce registration for JSON-encoded tokens</li>
          <li>Add security considerations for freshness</li>
          <li>Change/clarify the input to digest algorithm for detached claims sets</li>
          <li>Removed EAN-13 references and IANA registration</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9+XPjVnYo/Dv+CpTsKkszJLW0es2zJ7Ike+T09lrqOHnz
ubogEqLgJgEGAFut9HT+9nf2ey4ASppMUvW+qnQlYxHA3c89+zIej5OmzcrZ
h2xRlfmLtK3XeVKsavqraQ/29p7vHSTTrH2RNu0sSWbVtMyW8OGszq7acZG3
V+M6a5txnrXjRdbmTZskN/MX6buji/P016r+WJTz9Oe6Wq+Sb9JpVTZ52ayb
F+l3t3nzHTxq1pfLommKqmxvV9Dv2enFT8mqeJGkaVtN9Tv6MctX7TU8OcTf
TVW3dX7VhC+a22X8YFotV9m0dV+sL8OzssJH9dU0nzXt7SLXz9qixR8X13l6
WsKP2/SoxWVlLcwxvag+5mW6fXp0sZNkl5d1/ulFCj+SrM4zmHzZ5nWZt8nH
G9ivYl7i4jPXfHpZ1bDoGWzUi/Rgb//ReH8vydbtdVW/SMZpUcL0X07Sl+ty
drnIZjnMkLf7Zbau83KaR6+qGjb6PJ+ua5wmzLiqb9OXL4/hVb7MisWLdDFf
/GMjH7T0fgI7oCP9PElfwdnfZksb5+eiLmbXWe1e0Cj/e50toOUyvcin12W1
qOZF3sB6pxPcVziJHPb08dOnj9NXVZ1fV+smT0/q4hNOcwqDwzyzMj0p8nmF
u57PYTdepMfZoriq6rLI6LjWZVvDl+/Pj+Dn6poAcuuP++mzx8/SJ4/306cA
jlthcUue4j/+W1tM/k3m55f3yyR9891JVVbz63XYyV/yOl/exm8evsSDp8/T
n7K6hHOs1vPr9F2VzWyJ7gWtZ4Yb+n7/MH368jxaYFm0+Sz9J4COWbUMa/3j
4WG6f/D4IH305NH+s+dhpb9XM5psf6kJXKm2Li7XLUMQr/HPefkx/bGoP15X
i3/X9f1UZ+vyurrK6/T87AKeKvz2Xsio19DL5FJ6+cemaCdX9uUEAFBHu7iu
llmT/lQ1DUC5DndUL9OXxRJXGrps6dPJFX/6j1mtB8Y9vSrm63yR/pgtFnBl
8rpq3KvpdQbv3uF/61lTlXYBAAzyBQBDel5dtTdwEwnvNA5QpvUfEVP9Y6Of
TqaZ9fw2gw2cfkzfw1Trm+L3j2HMrL0uYGU/1jjfehb2NytLgI2LZoqbURbz
Oxd9TV9PWvu6t+632XqRHtfVzSK/TZKyqpewO59yRILvfjo+2N9/Ln8+3X9s
fz7efxz+fCJ/Pnt+aB8AJIUPnoY/7YNne3vabP/Aeth/eqh/PnquPTx7sm/f
Pj3Uzh49f6bNnu/ZaM+BZrxI4O9ffz5/Rn0B+s7qOd6freu2XTUvdnfzrG6v
x0V5VU3KeTZZFovd1fVqd1bdlAu4UxP48aerYpF/P62qeja+mTfPDre4K0bQ
v7559/Ik/fn0zcnpxdlxev6v5xenr9L9588OR+nrn48m5xevTyZ7e4+efNif
7E32PtBkqAPFt/j3mM/tNaHnbJH+nFfNCn5kizEi88WimBPaPcL/3Kbb0PMO
NTQUfjjeezree4brPTt6fTQ5/vVicrzIimUTrxwXDuu+ubmZFFmZTWDc3axB
IrHMy7bZnd60fnnHP755l/6aXyrFgW53Uu530yJweDe3q2zR5DatXzrTiubV
3DWx32ViOrNfzt+89jP7pTOzaGq9uQ1O7vjN+enkaDGvgE5dD23cnROcVk2+
6/duC/tLQ39b/R27c8MurgHZ//z27eTs1enZ8GRWwH5ki8mj+WpF85nlzce2
Wi2r2RpQ1+75Kp8WV8WUwKrz8yRvAS00k6xZff5T49+czb5/evDcr+RRPQOQ
LPOa2Ye3cGngR3NdrNK3dfV7Pm3/gckV9LBIo2GY6UqPgRynr/P2BlBiCugP
Pq+XBYB68w/p6/XyMq+BCo3SbDarc9hT5Ffgo2IGO2tdbQK4R7BH8WV4jtt3
XJ3/enYC2zs+mRCD2GTT5RhO6aaY4fuTl2+Ohnd1vqgus8UK+EjgCpa0sTer
MZI4mM7ueoWYodmFcR7v7h/s/vz2+MNJMS/gIF7mwGTVb66OVqu6+pQtPnzC
S7+aXfnNlG9T/jitrlL93C3idfUpx13B1TxOcLpvT19vgIG8DAAJP3bf5iX0
uJBdm6yyee7Hfwv8EIyBbGVer+oCWCQ+gXQbxthJ3+X/tib+Wa8FcovjNpvr
heBu8BWjhwt4Ba3mBXAnt3/jndGuw1+Tz9ftckGjn789+ZdoTKOsb7PpR1hW
epK1WXr6GWhxCb+2scHO4Aya1ewzMAufhg4SWAq4K4f7cKIHe7t7z3axm3F0
JcYH4wM7RwWzgz0Cs9spyiw6U0Oc+ngYzU35NUwKtyQaaxeOvv5U5De7A5jK
zgTu03iV1UC34RSHTgYufFtnBYyRvjs9v7gC0n5afirqirceUHn17nQH77L0
Ee3b/3oAuotm8AOf2Puziwnw7MUVQBBfPSehNeuiHS/lLXyPZDfmMQ73D5R8
Hx6GPx03sX9gDMDhYaD6j54TqUdxb3JUT6/hSKctyCru+pN8mLl32AC40/Z6
lt2CcAUgFW2jvkLJCd4NghVcvZviY7HKZwXvEP7a1ZYfuOVkkBqenp5Onu0d
TPaP3sWnBy/ScxSGgdUbpVv0Wz5kKQvAPv9UADdwJugxr7fcECf5VFHH3vMh
2t9I5w3sS57TtK+KEsRPvAvybldGHGMnE76RwEk9Op4Aa/ISJGI/ZXi0qATd
H7096xCAA0Dkp7PCMDjP8pesXGcgJwJ+e7YRZ9w8otldvNudhyHGMMTuN8SP
AQGBq/uhQEx2lU3zTRQCGPHFDNB+TgwDXg2gm8V6iWt68/5s8vMa3sVLwieL
AtlrgNH0PSBJQNSnnwFxzOBGgegESNIdAMji7892Rumbeg7w/e/Cxy1uh758
Q18ifTtGNUB5m56dwHU8O/Es3dF6vm5a3J6nwwitf4iK12bZchcfju2b8PXu
TX4J3O10zZe4RYENuMxmN18XhOBkR15W1cf1qg+YgublrGmnSTcREMPgbEHS
xmOZDMzaHsEFHePsVuvLXUR/BHXf1DwgyMAbb9G7o4fO86E7CeR4tp4CumgQ
E0+BOsgCduGe5J/5PtxxqfHW7G++1SCj1ilcImACjgAKXuVtXa2qBXAFMNc6
z5RRatI3QgroO4/Xhq9MftnAeeaTrGyKeHMJIOh/YHo4uxr+52lEzuAnkjPk
gf/lMVz6E0TcDn8ifzv+DG/oMyD8k+O8boc/I2oOokoFl2U8hc8A24/HY5D1
8VCm8POovEevlSJPBJewgZsiyiu4eFNi8NMmb5P2OmtTeD+ti0v4CrvI6Vah
ZA5jAEvZtMW0wYsLXeQ02ijJoA1hz0XxEb5npccoPasu5MUoLYVPBUaoWCFQ
AxZJm/X0eoJMedG4WaTwa93AxC6BTiR1vrhF3hXIIgyVIvQgh1enAkdpW8Eg
LbG+eXpd3aRL6DUt2vSmaK5hEfCeFJ5pe53LjCe8V0cXOFQOggT0mA3LZTDQ
oFR0A628/g/EjgI6z2cJL2QCX0OfCwQnmN8cxA7AT4sFzALGVGwBf8AMcRKE
BRMYkrYbRTo53mUxmy3gJnyDKki+Q4j1k/NqSfgTVzWv4LZQw6s1wCb2jA+K
kt6qljAFESZfEO71ikvk/cqKt6eBtmkGx0tbYg0N5OnE8AO4/IC+YaFwTAAy
K+R/UYjOJ/PJKL14eb5D08H7jVsuZItepz+dnbzZmSQX908NNgZnpgA5S2FW
+SQ5AzYsz2bQOk+/fOnxJ1+/wt7h4Rq049JmORBkopgEvKhCXsLfCG/wW6CP
4H8KkH2Zp8sMaFt2Wa1bB+ppZhDd4AE0yj3DancRKPEharHwIa6xB9k1sBLA
nDF0pxF0pzfXFUJ+g9BLYD1F+lpc0V4iaBNUAxARdYb7yGCIy6vzZdUG+D5r
Yf63cG0rPCfoi064cw2oW3wRd1e0A+25rXuFMy6IHOurEZ1f/jlbrhY5wnp1
g0uDXQaxuMbvAIdmBL4AYSW0BCG2pVuCejU5NDonOTPCdtiHwLnfyZLvK5w/
q8a+fuWbg5eVHqJCDUFBrjmeIV4ytEfgqIO3nXt79PzA99a9+tz7433qncA4
PmECajhgvH645MIdE12wZY7CVdEsA55zF3+EDWl3p2tAHzzRN5eoEUjP1fCA
/F85rW9XfK+QwsjEUFvnZx+3ROrUbfxLaIyaR2isfz/BFR7pHVaIQWiZ062F
C4Z3DntZIgxki5vstsHLI1dvNkneGmqwIXcIgLIZM7AEQ1ET3NKPOSCFDAkO
UHTaJTgzZIhoCtIX7bYyxtjNFCg9kjT8hvrD04bfCJi4/at1vaqY73R4hmC6
YJBbN4JV4Xc0B0INywzoWwcSt5SQbqXAGyHehE/L9HfcEEIHQaCD70u62Xxj
/dUHGGAshchFrkKBjPKUFo942uFS1OuIIudW4SGQ6H/HRwXeQqIEfOFuEHf2
niLq4jGbEfRQrOA/ir5GEXZjYs0YDSkYMgIlANZVXS0JEKppBTSHOADA/3KV
QJ4EeKK9c/PPvSbqVmg6EzDlDvVMcrSJwMneOd750flLHhAl3PsHXMFosHq5
vYABlSrEtIeI9whOtZwTEvpEbMJlXQHt+ZQBvYdzg1YIMtOsyXUBQtIW+ad8
AWP8GfedNjG9Aq5T8GMTqA5I2X9IXyFkYXumhPAShPo1CGAt4RI0rwLHUMth
DTbI6ACRY4HtgS0EgWzkEAlsItFXm6GxLNQOujyLVIPceZ41MAFm2BgJG1DU
65KQEX4a5gWS4FUxX9ehD+YiaYL2lVObwN0a4i4jlrJom/Tnt+epyqvQw0+o
5oCmwAgHdaxRV75AwAQB0livUKULrESOIETEBO6tOwDGiPB9i1iepVM8VMLa
aFZe5J/pvxWqtfS+EPR4Xo4oN+4QM6NoZmSEucwAo1crUfXCpPnImNIRnfgL
MTFekfIbsjnu9EZI+4UzIYxAtBYRJtowiNdywFvnzXrR4hS/+UZlApV7GOiH
Z51uMWewhUiqztFuKNiK5SLh+2GvyL582yHMbkUxm4vgonvd5ahurgvk1+mq
A6lYCIo0CQWPLA/ggtznPTsHkp1yOEhoLhllA3O1yI17y9BloLkFvL2MfjDs
uXd5O50kx1UNW7qqSuRGFjBp7BAhhpVtzOwYpwezhzErVlvANNekfHdUn2Aa
3SPYpsB8GAtj0GmTbjNny180X78Ktyxrgu55zzIeMM1QM81yBF1Q7Rj3R3a3
xY/yrAb0XoUzrVZjwlLaM3CaBcsk5XfaAjvJQp8sOin/iPdranvTMDe3JTtJ
N6aET7dGnUPDwdWhIng5/LwgW+ytYHLi6XDhsL9zfUUjKotowIr7p6Pas4ao
L8Ah7L0Qb4KFTNA/bkTlVEvY4iYH5hr+CwvurIGuo546aYU+A8NrMyhzJA50
Y2QXhgeZkPeJUlhGj4pPaZJGoAlRd2VdE4thppcpYSNdVbhQl2tm8qPFUeeA
sRlErLVIWNYaftUKR+GjtskXV/5aMT8dMxN4sAOsA/R3CeLkRCRWT/6oMwBc
IoBHqog95T7p0cXpKf13ihoeAkTVI9SARfKaXsaPRrjz19mqYfSdZwD+2pzY
LvrKgzR2UjplBf8u4K4DegXuQ8kpP4dbwRSvWQJyJk0HzSL85IGXiB7dHUd8
jWRMnzOANdzWsE8R98yYAqeNJGOZChs7BX6yzvxNRCi4zj7l6M1SAcAbFwJ3
BUga4pg5UCFgSQ32ivJT1gCtFF18Y5Id3THqDJCa9YR84Se8S2XFPDdsTG8U
wlO1gFUKRLBYrpfhsxpRvHATjCQN8FDdgbQKqTbev5+QZ8ZjNVYY2Cd9RpvJ
An3HC8tRcBUMAn82YlgPb+hrpxmYJL9eF4tcNUOXmbLeyF6jXrktLhdyvrHE
xrSZdu4ydwqLTIC77NhdqSm6xSmiwRkL+QAY4L/GyKZA6xObIDMtrLkYUj5J
Q2TDhNrWuUe8xycnL5XNhgN01ImkTFF2QXNDykB58wXwLm43yARPS4c/4NvX
ga8KYhETNTkOYiZWQCXw4JWh0k2t1vCH8FR0G+C6oXtIIJjuOG87Zmz63TlP
psmbgIDhybge9NLZBa5jjXJaUTeRGsydMa7B5AeHG0Tbl3z5Ag35B8gfSqHu
PyoRVZAWzGYs5eIM/Mhkeww6e5DImwEQhPs2DWeODnRZi06DtM38AqEfGORq
zmxJc12tFzOEVxCrqxol7+R9iRiHacidEO9VNdK9AFJVTtH+TWbkALnpS5Ci
1mhf3kYgVFXLk/09JPJAW5dV04oYZUdA4OoUd6oYvhKiwlsFkLuLc1OYdhcM
XiNA7/7SfQ1LfYmotbcmAowIwvFIRDcRREpCiEERgt9WK9NmTFEGImCBARG3
kTZykQGE4zmVIAbCZUDfNFWGpaTPqOZ1tgKGDRCJOriA+IlOJYzoSH2cd769
gstUXBY4EF7BY1wJLmBEwKOr6GjXMpTsBFGqXCSX1QEM3WPkZqYEyGjV6MtB
DMFEL5YgdBSo/Av0jQUgfS6qkhqA+Kc1roaHJPBq+ihHeBs0vdLlQOqIBGMK
7KDNmHljYZ8ZA+jZd74EzpbuAM21JVVrgDXTNYoOOyPY0BlQRzID3Ncd2U+4
tAyvmZwAWyOI6ejgQkB+NCukh6gSanOUyFGbkfXXLvIoqaOB2UTSjSJxMYdl
qtDF40QGnJ5MymgDmVKkx2hSRyQvVk0iQI0pxzoUSkYhIoV22iOic03nmokA
VNX9NQjvjoqU/KoV5cNVhaLSuCptjjDnnwq6NyxWOXUM22iUHqDiSUwgeNLY
91U2xW1Hi7XcjNwmX2Z1Xd3kM4dAGlnI3WwCHnJ/mo1wKG9YjgdAeUVSPB4t
ecRHpkRhJIpWOWxhfWTeOAcV5E03TL0MqQmUmYB5/YSqlTzdx78HTR8k34Ew
Ihw/TMArDBwhGnVEdPjbSFNWE1FmqQkngXCFmpQlcKZAO0bOflinc/Zig41T
fQQgPNVMEOPmtKWyGtw/VKFV6+ZO26LriZgrogCsEURlsEpDqKml2SKiNuOB
2Tjop82IvkIgYlJpOH3S0+XDrV+TtRSOEJuqgYfNY4xBHXW4AqR+DYioMaMD
NOZZwlcghAA5Dlt04Sc1r3KRG0HiY58GVtgSfoI+Mjxe7FLeA7H2FkCZtbHv
cOiAGqYf8TCF8SfhlAYjdod59TAcboLbmL4yKShqaAQ9hixGP8qss5zeXf2g
jgqnMTTevBpWlds8SF8PlGXJdEk0pLIj79gg5i3hb1GOm61r2fy4V+MIh6aS
ofYwnzlLgmKLIG6awSsI0xWLnCKgjtwnKaCkrCQhypnFzCaeJK9x8gTSpMUo
ljI7Oy+E63gFashV8iKgv6aGJpThOgQXqxb9nvNBtPcN7OeCdayoY76EFeUA
L6deAem3+p1s3JdvatfuK4qst6K12qgsrGrTEZHXHZBhFEzgP8IEm1pvLSTZ
rlHHfhyWIOcdVhCElaIcPHLYk9whMWdYB6Cfoy1AsE/vVPyD75oUvVCm5HKg
4oDCDht46n4PSGa5GaGXvEYqyxcazTTZAlXCYsBhS9dUPHxZ52GnwjBTlKt1
K4gKrzcpPxCV38pqN+4BkRAQdqZGYXHhyIde59kCPSBEv79u9N4p3v4p2IJH
3ozQRAcmB0miRs2YoounBAPwjGAQ0X2iAUJlShK0cVWkkYLr0DS7V1mx2LAu
OAs2LhGWAm62ISHHbpuDDNL46WTJ9A6zhdO4yWrEBusSyCOh42FUtWl8YtKk
GzLWoWcFG2qlHwdAHTUbnbjAVB+NBaEuY/Xb1TA84jgfy+oGthN5TAItJI3X
sJECcCzt6160Ol+9TgaxRnRoL25JSYU4jYF2oDmtXjXzlVN5srlUDMZ0tvUn
YTPX5ZS5ItYVDZ+fmxSdFYJ9fJYboXyOmrAZ+++LjcIxEcpL4e4grK4R5GCd
i6pCErtesWAAAlKGapIO9Lfd3cLToRlXNEUgGFtVvixmW4Ia75js5a0eD9MR
nAGOH3RV6ftT9H1kNj0tyQ19BydvnifuAqrAEHlLs1cSkhIc/nJRNHjRSTfM
nsVpbSrNaG2wHmacCTJvxeq5zNQpfyq2wTxAMB8kO4KQrjYGZ5TSyhnIL61i
VofseBaoSMaGfhYE2egwg+DFPvl5ezfCJzonIRRkukvMDwGIN0h5W6/en19s
jfi/6es39Pe70//9/uzd6Qn+ff7no5cv7Q/+IoEfb96/lPf4V2h5/ObVq9PX
J9wYnqadR6+O/nWLfFqTrTdvL87evD56uTVsWmNdqi2U0aGXG5Ifj9+m+4es
dMGgM3XywJAw+Bt4zZLdZ8kvh3+2dITBCLRYJNNshXEWDRl0ANXclOKS1RM7
mZ1yhlCSdJGIO/cZdtjVZ+x3A32R7vJF8gJ1gUU+JSRmfu1kqAHgplWyLVFx
5wQtBXyBmi5xQOWeOO0xXWE/EvX9QzUgXmgSJLymr9X5pK8xno8mtWb/YzQB
ob7dDEwqQKswis0m6VlwaMzcCx7ySv0LVf1gw/1TfoujXYiGC27RimanvjA2
RWHAreE/4+q0qWg20TU7iPQyMd0s/kZsy3jPaTzEZbB8NjrQFOk7HaZJz/O2
N0H9tBJaFukvnJwCzz7lt4F/Cjzeg0EpkrlRNhoUh4HrEjGVj65GG3Cgbyg8
Gre+3d6uxI9IvQ920GrcODmN3Jxwm1arOiuE/QT0wGgHgJQlKXY1a4OpNqDz
nOxrKK1Al8TyoPscoJj2Gt1bxb8SbyD7/xFXd50TnLI6gZ3xSYXruEMWTFV7
ANv4z4IP3cJZ1yxTF3kCKOpMVIeBb1QbvU1Z2MzNwiGjoGCfjNA4zOad/MY4
t9vulGb5KkfzschLfk7Rve9Oiz0OxamLKAEMWwDFIrzFA2YhbCvoesQLccLR
AgA8u9F8d9mzgI3Qv6FUKzvDE499RlX9odBkeyYWLoMU2helUpPAViJHIKoG
o5BCh+EOxswzYOUcmSUQgkYsKAmzjPRrQADTGwobh5xGPFebzCgNoM8zIab0
7q0P+gmjvJ8qAF/PGLiDdFw8QoPy+IStmmhfhe1XvQVfIHkYtl3wlUkOhONr
9lCxsy91+9GKy3yv95uZpGl3JkRPg8hNwogIJnjT6RqaShAHRVajHM+raiZz
HIF0uIDuO+eGivaKwjPtO5SgKNUAe1MjimvcSQCZWy91hUXDylZ2iBPHGZg5
zIDOoSc1LYv5NaGqJYaJ8sGzttIJzmSLrnjXwjgI8OWsqhuau54NIVny5WL7
LeESjDigL/uHH6wjrNBTyAERxDR/2Yr15kgyFfUZiVgsxLeUKLXeFsm9MSFu
rVqNX5IDC/vnBnOTd/DP0i04yiab58hOpVuk/N0aqbJFULzqxKkBk7gxkLiu
v5LpAJmx9m4MEx2TGETxhXXa+9BpiD8I9oVKDBzeEOvdZpjPYrUysebQBPDE
PJ+NemCJvXI7GsRMGwbBYiJVI0Y8CktWNPvYwuWtX+r7SxptTpghrrOelr9h
f9jILMtmQlWhAujP6Fp7X2LeFJ0T7D/Sypjv7fEJkWeQmkdaso+Qth3ECNi5
7S9fTk5//PoVg8X0GfoD4omaPSUcVKMcaiNLaoKaGafkJq1gP9CLCMwsGpGN
1Oya6nunnliNs3uILYsUG9X0Y26qGOziak0K4Xhr442bkLINjY1ipOGpL9Zz
OtiKN1S6Jpi9jJwFMsrY44I/MMzoozuBc/JSw8V8gBE+wDYBS6/70LHdilNn
HODiPAfI760QLap4cLu5fPnymgx8Y7ro7BdWBJdO09Q7H89MNqcVIxSaz64I
SbZuQ8ohQyErVuKIET9+wLZNZ61On9kwYOCdhRZ4DPFhOdcMVhEEi2zHEieO
T87AKRhGvU3kuJP/gH84F7zVY0QkMt3v02+/DY+y+dwWsuvfvAdU5d4lycZW
3+NB6rNXjFzv+vrH969PXp52GySbx5YR7OnAGP0WMkqvEW5LZ3MQu3Y2Jzwa
/8RHpBPsv8HRAIQ70xr+7u5ZIRVDCGKi9+Wb4EWimhnBLyEqD0Gp43DbDZwy
pxLhQbuuJV++dBKaaMRIePeLf9dzQUmOFgt/u0fetwt11GqIxV6JDeSfKzXB
NKNgMFZhKJOu/GhOzQ3QjngWhT/vHsOWC3LOhxWia3Jn59QWJdt3TU5tpMZG
MS0DdBB1J040yEPizdMO86FQMcHUJBUKpZctdwIeLV+EPtIZsLhDRKukF4HC
wSjTahVCUCK9HGBcE2CCVNMY+iSdp5xDL9Ij1qQ5s0FX5e1Cj5AHmCR/BoT8
CTl+VUteNmxsuWL+KT55NA50XZuQX5HBkU8G2aM7OyU/wRMJryr2VqlVI0tl
8/AgV2zCVsVKq6Rf/D1x/ATjinWjiU0TDUuantpHbKTlS0SUllD5HPOrkFfS
ly/aDG5BVVono4D36WNY7LoumayaNiQv6baEWKyus5ncI6eXdAzksHdK/nma
r1oRvoiJukFvq/wzwkPRLm6ZRZ+pGwvRDsKXymMSBYnOSZUa/rOdYc2wM4l3
nbMwZKVi75QbIbkRAXcavvNiWVBEymgAysMYNAKitvv61WA8uKVNHjEd7Oja
51LoDghkmlob2eEAGS7qlCBjQOtn0XAc9BVpAFFz2N/3JpwtaVpNUGKmXIb+
mOO9I3Jyb2s/n9ADQhqptNFlBVDxB3ZgwCjw9DX+KXmdgOLQm68mkfCHPi76
8rYl3agfCekNhg7XGYl3A5+oYZ8/4VBDC8UhhzAA1DkLKKxAcJ6xbMxfiSbr
yC1qlm7RDLcAObmrS8ZwdnVSlxqiIlfMtrNDoyrug6Yqn2a4mRL0wNZznmPw
WaPhYDWv0X4KYigKrjoHnpefCQ6IZBX9ZThmbb5G+wmRLbZfcB+LW2uDZCfq
Ua6FYShZuJ0jmQEi8ED8z7EFSMv4DKX7RGU6hLNSfRhUIaARkbgNvItBWbv1
2q+S9NWFhF6blGI5fej9pANGtOPkbgeXY5FncI2fHKaXRav+/3W1ugU5BdDl
Z3IVD02b4t9zjqYlNSqFCAubvKxq8yUX3qcbjDAhxCoWrzrQFzW7eY9G6lTG
x1HRvMhy+EgRsl0KuQ0M4gzh5uUuE35Gnwj4+37xJa6e3+IYeIRDY7hrpBYy
VgaJTxZdfnObim0dolFHKapOn4a9RsRGc1crNt4AjNPoYRElB1WZj5FRKuEy
IRmG/vTCYJNn8PjShQtZukraYDvb3hapySOCXVzi/h7vjTlRdDfvadi8wM1/
+20QtMfCRu8C2015OLZpU8eL7DJfpN//wHs8JpfG3fQv6cEf/JPfdjBBo/0E
Dv/4f6UtbEo6oRls7+9NJk8PdwCZuIfPJpMnhzs/JMLPA7qVSZwETzfyIiD1
URQv3pEUjeJ4y7PE3rA9degDtQ2Qta6aAkvd9Yixh4NWTxbiIy8dFuIBe03X
lL4XGR/kmof0/tQw994y6jC0zoHr3X5f0gXMFhqGeHYSSA9aqr/ylmzh54pq
2DzUiC3bQgQDcc2i+JwoUla2hTORJMvqEhVmkpAkA1TdstoJ+dks/RFYMWBJ
0ft4lWcfOdjKgowAdwYZhUJuyJpH+nq1vulJ1LlTEEbxcmeOuIRm6Hk7YudK
0i3Bwhu2YSSmTxTTYfaRpYosjWz6SCRI7+apl7o2X+YwdWBXyAUd/fphHwMW
XOuhLFixx8n5MCED8zjZFNOi+n2tm4Tp8pp52knqelRFRNw6xGiT8Mbu4KME
baDiaF7ngSax1OQ9vSlQKqhsou4S6W4CzEwKZ5VqdiHUaBNvPGInWIyloXgT
8ra23lA2WLMsy3k+EGveVG64aO10U/3rxDZCHW5445VdZxeM4kps6MJo8jbT
/O0EDAmArDViJ0xvKityjWkWPLJk/I3DJZSWA1VyrEwd8KP1LiwVsJX5yrTV
FlGfqDNftGTm/zV0XX1yYkmd03ghHExSRiN4ieXb+FNLlUE7U5CPEYyHakSE
cgIjjqGUvIPsoYheOS5C7MiaTykV35r0zxyxi4G54q1OZI61rYEgMmkJihHn
8J7XiAZZI8Au8eS4Iu073EIAkQBDo0HAIXMiy9g5X59W4uooVAzDX9mbhm2g
QkZVfl9lbMKKFCHpVU4WeO/mjopFmrS0RLR5bjrbIyYt4uxxQBk9CBuc0yLR
EkM80SIv5+iH3meNuPPIQMDxyjquD67tBPmyllrE3E0yv/Jkwq0JZmGXoEeP
5OCQAZkk9lO8f4ktado7As8RuxWfSGuGB4E+j8KasO24hiuJJii8MoLA2IOb
ARrnMj4hP2bbuSYNnjw4f+GNSJmsEwS07y4/fzGK/HDna7itgP3UKm/MqjFo
jldFkR8vP9LWv6YXCOQ/IpDL3+iaAn/HOQL/Cl/ufd7bhxfvjl6f4LeSuyNL
9w+ejdL95wdIeQ4ePxkjHwezmYGMInatYCmu1L+X8qDZ0cqlTL0zn7+Vl4Qt
0HG0zCSGn6mVXTrSSVFGFThrNLCF+P9gXJNZERsrfCHdgpnyVW4QUnyyLSrr
BEmBCH9tToRGxZVwdb8WE+s9W8LiyCVcT8mDwfh2UVzlHdwbdi9gOwGeZokZ
0QV64FhopYxOqTO+llmZLW4bkuF6QKkHfQAnTCnxTt+f6WGbUzu9mEpqxI55
Qb2qKcAbGzvhnx6MDwFa8L9P9hBg6K9DyWwxo9NjcfDN+7MR/s/40RPmgo6R
eQuo0Uno3ankmJmAlbxLYySARoyVDQ6oGsdnDF1dtXkZiG5GjFTDuiWErVdH
x5r9OG8EUolAmIYJvqDFweSry6ZCNiH4ZfHKJ+l28MW/IfOrkVAO9DZFgcSh
W+rMJoRl20fRnBxGIJEOI76JwolMy4vHWMkoCyJG+Xz5Ykk2HQw8Qhh4dXoW
X/bD8QzzI7tNZEIeTGVl+ky+IXwC2Fpzjx5XM0kvkj6RTyIulMjkNHOSp2cj
lHVnj0hn6M4aL0jjHATS9w9d3D59Ik5zNDb5DqD6dFsz1h2dH5+d9RKF0cf/
EP5MH8nI5LKBG8Wx4HufHz3aYb0JbRt3rpM0P05zz3m5vi7FWXpNjnHn//za
+8koHxSlGefz+fIi/QbZIxIum3HL2B0zWX6/RWd+LIGVuOt4Cs3WV6U3ykBa
QA3LZzX62KE4Djt/vV6i9VC0vsCDlXy4ZUJIMmuiDDw7JPgDFUK5H0Uo0yBY
8qNgVby4jqNrxMOYsFiLnIg+QTVp4tjtapXhNQ5nHMR7XM2SMxjdquNA0bKO
CtiiRcJ0BJmHtOtLbU7uZFYQbQTchuD/Q7c8IZxIE/Pukl0Q7cQtpJJckEdK
ZCQdJXLT1sOmZ3jI7I2fNcIaJ8SKwNlRCgA+SeaYEC18QlbkCsBEo0Dx8kcT
E3tdCUc0SSjOXjkumDJ3p3SX0551toq3AaH9KW8DfJ2k7vvgNO6j2vwUIt6z
AcAnFd8f0otoEx2jG2Mub9DHGCNh7WuqjCJ+IGUIMdWzykqayiTtrsfPDXrA
1WOWZQYKdAhDPfMS1TLwpLA8WHg/GsAqU8oFw5pY2Zn9JKV9lp/EEFGmFZLO
BPiDUFFYHFgbq3f5OGANgdo55viStHXINMRiokPIhHlYTS1RyhHEihGI5aB4
TspGt5r7LjjCYUu5hHxBMTMuiVpViAs1JqwxtkVvYWq3UN9gNySI9dJlp+/f
vWa/ayPyPfFQ3yEeXNfMUd+ryNsmrGkqPMOhO0lif7OyDsH5yeF4XS/GpM9U
td3BZHJ4uJPGerunkwng/h/MDP8NFqyC/gCHnsOFHpuAyktQpdX2Of8UrRU3
6eqtEKjJbIUecwOdWS/EctHfZGSyk2aCMuqJ9KyhD+ZWtlmykowsHEf/qreM
FEYBGpmyVWXQj13lY8yYn5OipGXvNXmJ3RCkUpKFLAAPTxuz+RJ/ONKVEqDR
nU2SU5fhpzcKZwLjGcL76kZqXowwlLtlvT5q/DkUYXxZaYBUySnBQpYeRAbZ
XOKGSBukqvLL/LYSDXJsTDepsK00nYi3dhtuPReqK530F0GXGqjanOU+RDW8
JnMB1Jh13El1Fhsy6IuOBT+7dFwiz2DC5kg2P3oNPV8GsiaFhJYhLDZGTYXk
TKTzEbMEd4CjErfrehpFDtNVbcgZvznn698LbuLu1POL4VldwTHbb/qmtJN8
q0GnUw1U2/rp5M3Wf+rwkHng0WgGlAuGiFTjApDWmDsb+Z/g/Y1okHdcnllu
CXd2aKK5GmDQz/m6tRbIUWMxKPLwRKO/QA35yqIgb1oOniNbyHjSlp84im7z
EgxCPEpuLwHdQoMgB2AdAdWp3a+jO/8blHQBtZf34fbz/wLkzgg0oHf5LQje
/QIU/4VsOn9km4wnBclXj8aJH0u3/6yJrt6cvuqktgwWCObdBJnHMXhxMM8b
uO3kvH1qCcxfeU5pG0bZ0XsSEkAfhRyJLcoEhNl9bBYsu7pRaOQgoVb1GoBs
CvW0CeCGeUQQ0TK3KTojvSX8SVezBrhpximZ/SwoOyRGdrOWQwrW/Eg8Iazm
7ETCpiMlyGV4Hfk57z8R7n5blRiiQabtJ7pE/ImgS4wcgx4ub4UN7Ghgxndq
YKparvcNoRCNgKENkGs6zVVP5dUxqnWALVFlDmMaVh6L4N1khSkoooFYCsAg
YUSaqIhGQ1vOKkUOE6WMwR818zfrMRa3PWCCLeEccihvIWkHwIKdLRr1COO8
8aIyEyGEsQpyenkJO7xYIIbmeRZ509ltydGAeCfSfUnC3D8fjQ8eP2FkVa9J
g8ZEnONEYINMF0XdWgg5g3dz7QKNLc2iTwVk9v7nT7r2fmZVVuRDS7E6OlTk
EzA8qqJty+zIzvtBcZuSNhI5A4lxmWKPJOFK7gCpUQBghd564rUgxnhzDJa8
ZXiIepmYuwTmUvUDen8IQ/euDT3leCxSyYvxx6aBkBYpg0KWOapeonHSfKNF
kYd2AokxjoRaGFfcPySMQa0/XI3AwgxMq0eze3U0fjnC/31F/3suXj307hjW
IeTm3REKt8ipcgOKncN0whT6Qiyo6P5I3XRwSOpkYjgTH/Z4VdSUf3BxxUK6
W/2EZqGUb3ErPT3DnhJmXWkHop6CuO96Ggl1H5+HiSY2UVZOoij56EmYJSyO
ktnaXYLbA8hqJro74IyAu4OFJMTt0r42OcZPHrMxiu5avPDg70O4olllnI4h
KxPeRLwCKIVprmHi8aId4XOgePw1xWDDToYSOokvoSN6VymAQ4yC0w6qs6dU
/qCQ8fUq0Zyi/C0Xp+HwW9sGl9mr4gSlZer3ICWhN4Lj9HJRTT82iZhImhyD
eKgRz4JzClPupqrWjGZAEEIQDY6/RDQ+kkGQhuefV3RLiE/7MzCfGBuJ+Z/f
xYqrbtxzT3NqRnVKXYu6d2Y2j7Oy4lJ7jAImKbntR35YiTnjIaakoE9Tagm1
IQlT7YuqlQ6f81fJ5gV0VTh85xhnbR0dj09Ox4fPtpgeJXHgkJrGSH0qQWB7
n4+OR/C/J6f4v4fP1KlT0FwI9HkUlsHeNuwAtQkzju5Bjawx5q6D0w5jS3TL
21wvL8Kj9C2iaQ2hElfJMXMhiiwNp7rzvK8i35cv8B8Cd/ivNyeoTkTYFURt
KPNoKjPVO5NEwTFZXtKQAPpMXFRotsGfjHeNEYTundOIowDxu4pce+YXKixB
CAwMNkZ1IbuvX+afHsSQE49NnHBgyvnniuJF+G+semQ/mElLgF8PH36P09cH
9DWpaMLv8e8NenC7B1jg6Iek8wCaOa3No6TTAb4e1Poc6tjCQbrR+Uk0vjzy
M3CP4jnsP0l6/WycxsFh4kWT6xvO6RaEE0oiJ/KIiCHykQoipsMpiJOw/L3s
OzTyri9cliDjEEDnE0WMkNN0wPViARbxsvGm9B0JSydsZ1TFduI5EfUOFBsd
Uj5RObhpspadnZtC6HgbgkN5mIjFGfBh6jomMdm0RPjoOHqXBETZfjmIliPn
O92Rk649cwkV3FbJzHm7bDBhfoPtOXerEhWAzkUYc5BsSuzRhUMzLHSDvXiT
yP6F/VkdIMvPfEna6VvrMaQgC7HbpNBHHTY71AcDVa8T9gMOfRD+coGGIUm8
HqIsyKmeYm9lz5gKDCBNKsrgwzUy3ofsVmPktkhYddEdInlohn2u+uKsfDak
swbBqjodsjJMQmVZx91ajRY/JfHY6CyEXFpqyprDqTpL5Q3HRTnG7jrjBZW+
r9gAIpZzTYidEVSHU0Q5s8UcSu65HGiEwKAJTPDkyHPAeUrIVuOILPeh/y5Z
CEJukQvnVSsjwLCPDpSgxE7TdysV1F2nZQeQyH/6Pt0Emw2LlqnTvSZDdeZz
6jgC8GyFsf/oL5ItJSoh2A1NHMYbhUoP1Kct2jxEpw+aOBp1FcvY6ShO2oLi
VVGuc4mnisX7W07wTufwcFqrCH1MDQPR7TwnPReQ2IHHd1o/Dsn4MeK6t0P/
eLVqK5lMHh3EVpHrG8UjgWr9Mz/p0i35cCtcoayTJcfus1dYo8IfSA+hPG/i
kxpxdkDsH1KzYVvZbwItP4hcuaDZZQ0Tji3zG7OSmLPbcDwh1bXGMCH6g1JS
a9oerPLbSSlFKROks0Zd6MscPe5ldKeAV9RB9HYxexgb1oUNnXkfOvRNDz78
C4CQv1CH8vBFSkpUhoo/idIcHn4b71DyW2QeuyFjwbZVjEa3sxgE+BNnDlPG
nTEWp+fDyzhmjR0em8jLmB+DbzGJTjqGmhGciT45IxWHJNumzOcazSIZwWoP
NGSDa4XVIN86MncWGJKI1ZMJn6kYrgnIMy4fiQIrZTPnqbFJQJ+RMa6YA2nB
kCBFQZ0iScrwBIM4G5CZodjSys1mQvzyxR6B5B7nuSTHhAchFjirMZ5EgBfS
me/Ex2n32k508F433XuN+9d4e7FcH+1PrhdlkCLoQ30rVZpQENAvdXd0u5Cj
u8LE4NKj7gWFMTDdFnOUvZELp4FJhWAEIt+VjPcwS8RN/5a5Z2qRuHnIxbrn
XqWdi5WDlAHcy7ZUQPkRftgRHMEB8HsLNzMBn/a/XucuR6fkaaH+0I+vRPCe
TbS4ijxPXHiyfMIpp0S7trTqNJWmu06sWBLeSjRBcMRPtTB2dqNXjZcxRAUS
G1uiHNdO8DiWEQZcy3SEaLbs8KAJuqW0hlwijDpGDlESobx7AzIQ/4pMDxwU
4UrHzUbMolwWZZwY/aZy/oYPAzE6hDEeQoAx+LXYseihb9LZ5RzNAun2SX65
nqMrd7tu4hspn+juaf0nDrvCym5Ul5vy20gYCj+ZUY+SNL3ITUnsY2Z+uTj6
mbNvFNm8rMgv2mTOy3VB2WLbKqFigaRNc8NzPiFBJr3ROFaIk7zCFoyS3lGR
R3bxqVjkqL+PKyORI5F8yMvhSMAErv6KI6hGFA8hnCBnZg3J7Eu8fjyMdUwr
BkRWJ0vyc3RR9Sb1hrKKln1wvTRtfHeNgo70UmGsB/AC/INzhN4ipZhivAfV
RiJewd5zBlTzFsGPMMaeCzOXFfcrGWM18SkXZpKyq+iCJCP4b7FKEceMM+Mc
1+UtmhBO2cogcn5zipgPAySYqsfmx1OXMS4tubXByxVF15ZSmpAtFGqGT7xn
Qaj1ojq27GMu8fQYkLDGQJFINSpRTwl7ElKGUSyU21sY6T7E+IKJgTGZJ238
rfMvTkjFPpXAayuwEmLkmVy7zAftwD3kBC4+5z9GElMiHrLKczbbTy5TJ8+S
U3WJpoKxJgMEhfLH6hfpWkrZ4jGZBsaKlGieaRqG7lhHtCYoIcjl3M0k+0Zq
j07OYSUXjZfkNOtoNsOcZG1uAq+kYiCL3g2J2CsslokOj6IR0fLC0q1TXEhZ
FxtEBMSsbozKDSzAsmYPjsed1BYjMovcb9Jr2H6YQ8i/xD0H2LbAGsVD3S8S
df3nLtimz6UX0ER8dUXJSc8LhB36rrpB1oXVKtp7Yr0rgaGSi981Mhr6ba5r
FHe5HCqBCOdxYNaIR080gIidlKqqo2AoSvgBXK/AsYSiah0SKx3I8YZrAJ6i
IuyID2PnyNR3S9ArWTl8mS8MNddIF15hWJrWWuRBUhkEtRXLFUdDhm8pMjKU
U8PB16wXqF2ZNdZOumQYFjErwJEEqMnVYTeoKXz6DbhliV1Jw/QFJ/qgqLOr
NC6N6KOja1/5InHqNMYO/T6iPZgMlnYz7zCaShKIDi9E+PHVYl1rWGHv0hOv
TeVSklCrEJfHCjmh4Nl8Xudz8wBzECM3xpfbtPRpxBCklZaoNedkyhEjMU7R
zG+DeVzlAK7RqWVspRhyym5YWm+TCaIUu7VIjgAaEkVJ2oRwNqIkdDlhFrcJ
I2jblZDEnuYx1nnwL3E7jCj+bSiIzOp0TJ6c3cbKYkSJpD3gAwlYS9GGqxLY
KI4Yuq9qQjtl8kDCKAXJRlMSZVnEKxtBDkxdMyI5wDCK0BzZPcLAjJ9U4a8y
hvk9nAgOEvrEXwdJJOBJxx6R+2cPiyEbmQi4hHTuxoi017nlRJeIwk4El2EW
2P68DgRUGgE2aa0u5u2mSXSWJfgahbG/f4XECLJLLYbaYlliowZyz1EqyGe7
ABr1wCanb5XpWtzeMR1kcqOT78xs5XqxuYUbShwmOTrVcgGpkhPDsDuNSfoG
QD3pyWQGI7rzsZjX6wXXkXBhH1dlIiKy/+mtxf3k3eztJdYe46i8+3d183Q6
qp3O9nq4eoDChnofM14IsmH0lPjlnSTpP/w+nTVjhfndQVWv7dbdr8e0dySh
3velX+s9n6JK53YM++0bwULCpIf+cQKOLflka5TupT8EoB3+J230K2i07xr5
1W1u5L6C9ge+vV/z5vbuK+jgke9gcCd6HQx+tXWHDj/6d5hG+nsL5dt+WXXd
X/WdesDqb72wHDrNLGtcFk6AnvjGbopz5RzIY5YdFSRtl7Ok4ee/PjpOf84r
6/vo7Vn65Qs8ncBTmK3k9EoxN0kLZH5EFhn5M1vwQ/Y1wRwn6P2sqfhYv1xh
dz+fPzvUnqwRx9JSIhCq9yFhOfZ5mi8WwM9UxUzibW6qMIhmqK6JXBUk07Eh
zvXK7a7zTCu8FCgZAWelmpCCzdykwCsx/7sGjTtlsWxmVktxPNfd6+x1un21
qIivHK+qoiSPsnE2lpofYj5ZYcEnYVAobzxq5RehsnXnRBHjU4LfsD1IAJoc
NlWjAe3AjDcl1DvlxLdSXAoZWkrOgJm04YOrSvPVJpodsi/SsygculwW5bpl
lT4wcHWjYTVJIJ+LTJMvTls1kP789jxtsMIioGpgFk4LsfnmNBnY1CUydgma
hEOdA1HdqAMQyLQh/kqWxouapMRwW1dJ6APVMpYzPCNlABWPG4cTL5bGRm8c
3nSxciiaHCJU7MFuEhYmxKuzk8wMP2dPXLjLFSYJkfoB+AINIrgG1fyRxMPx
CtJmC1jEj3m9xfQP5ybpzNGkR2OjcgEuAgsfuJRCq03xCysSlk1BHGwKjz0U
gHjnrFKwpQ3FauF5+GysmsMNMQ6kNNaPN4c23E+GbUCjwPZE9P/Rb4tJUARF
OaY4Ow8/V3TVffGngIn6bxTNbGwz3vyJIojeC8YDvcfhPsCr/8BfYzhAG3BO
81ujLxfQCFtml/TpCyB39g8Jb1h/t4G+cC2Q0tqudBvoCz8CUlbbiV4DeeEb
HLoR3B7GI4xdy8fQQHe0N4K88AOkT6AB73Tab0Avos/T9Ck0CGfQaWAvXKNn
uIZ5nsb/dA3zvNN/mj43doCycq0IHW+/p//GZgV+t+UdNTSprRbNIWxgweJS
QltdUBImEt5vGO7tChFaT9ox4wRlTyQczgLQw0JCaaYuKBQA1NtQsCtSGqfb
KL+lx/h3vFj7ZMBazU0FV/HyklCCsbcC9NEmaiUrSM8lhyRLCKrLTFyCnhXa
AxsqOICJQfBAK9XYkNLjIbtAdiSa69070SA88kYAVp319wE/GDLac2EgjSvW
OEs2IhIYBcNMEzkACqqPE8Zx6k9i/kJcKvXV5E0TcsQ7NbRstZVknuY1gSMG
nlmGWp5mESrDsjJfuU7yAkT+pZa40l4aUI5ZvzWPNlFWSZNG+Ce122udikaS
0GSbg5QeFp1nB6ORdHokfwclE+DAXpylsUBGcow0N/IEmAET2aTbJ5gpA+j2
y7xtxf3raIVGhWwRJAb6VsUF+nFX8PMdXcJ4L98cNTsYA53in7Bw/A+w3qQ5
DfGerH3V9N0MBMGyp+5xAip4F7XQ3SSKRY6a9XJmZjwHTfTBFVmKplnz65/Z
gPQWCB1JFmxsxm8shwKHLaTHdYHGwoy5b+4UI8Es+lSUrA7KOwsis1jdm0Kn
UVXPszJUs49NRK6cT2jvyv3QnQglWSZWLKoJt4NaelPMulxggIdDgX6zmU2O
VhK0QWK/x92I50qBgUJj4hgT/hYEIlN7E7zIZaKTG9mK/o5pO4NLDCEwUTo9
V+2HssJRUMNVzqVFxG6ieTIktIVyPTWs4/KrNdyq+eeN+w95zC2HFsbdv+P8
1zSaukbRpEI64QARNonOFg8EBGjqZk61I9IR+zNwgGjO1j/1waV4K3kWEk7A
m/fvzkwP5sYnwZOYgV4rwO96iRgxOeMIKxLsPXIGciZ4mUU4pvVHPgfebm/6
a4KBOoyPSIVSS/IgNp2otcZoX5BJGmvTcGUkORI9gnDcsP5Rd0FcoJW02Lf9
ztOQBEDdXRjtPdxjlNBuQOt/Sf9IjySLLToBhp/qn4RPPti8X6jH3HhdF+G9
LuQD9f2C/fNEFKAP3Gr8N7E7kzmwOceyV/osUJLg5ybUpOcLZ9fFe4WzvUm6
FUSgvJNLkNLkbh6cabRpOTwo+jiI2tYpqWrsYw7nmg4nV5HvXG2LhsJy3FOK
6b1tr61KJEBh41xbKjeZUYAbTYfhR2AVECnn5THl1aMyWZ9i75VQMMPXskFf
pyijiMjst9EaBVnbFPsuuZHrP251r4IBe8+j2H7L5hvENFhIK/LK6dQ6jm/O
UEFl1AugrTEcrRoZOS8WT72ohydvSihdMUYXh0pIOG/xT6DYP2L0YiCKG1iu
9niY7xqaTkbWUYmDvLSkc7OB/BnmzGhF2zL1gIwWNrwsKvLAWI2i0thMBmRN
2mpPFrDNq3BriAmG8PNGd7VgkeJ5ne2dC5Eqx1xTQny+eSIU1fgvr17qU5qc
+nfC5YnDYdQXouv2GUIXibU5ro7epscc+yzFdyx+jktEHDym0hM+pUdZcTuX
hqmT4SJakyblQe4kbGZo4eNw+FJ/Rn0hF43HFRIZBYENJFf+Ez2CYKSaU8cM
EW1fZMEz1gaWkiMm7AsPvbkXIPOeqLPWUgq7uG98W93IwU12OXQd1VdlqOcV
EFw5W7eAj8YvKiRY1H1Y34i0nZQYWGNW8exH1jGQrKm61kVp8+kKs+6Vnktz
2yhJAxCV6JCbgkpcviJZ2i/C0YF0HwOLaTFDcoD+laJaJnqtAmYpmONlFShr
SuyrQOqy6cdsLlYHnDyjyEsjgsK19LuXnAlRcjIrAHgmPofs+I4o0HkjDLif
64VkWAlu9hE+2bBQ2JNfldqGUAsXjMwlCYqIWcxugfGYGe4QycXy2/Nzylvz
5cv5+7OLibIaHfd5ia812OtWGeZb3ERAnv7kUN/x7XQBx3TyLzh3/Vui68/f
0mP8DzzhgJDbSKM/OLzJa86dTyMRPLJTDGzJkZD4LjkGYiDrMdcqCYJBp5/I
SMFI3KEPcxkUZ5I4KRImHpU/G0xDGvAgyy8k/Qh327ClojP6NrCALr32w7le
A6PA+YZHGv0SP0Hu94/2laCZ38JXiniUSZbkGdT2Bf3OVmN9KOg/+pCfvSDl
67fW62U1u+Xw4o0W287HFGX8A7DRydAL2AIJ0qKfa60kN62am2LWbULxyLu9
gOQHdY0X6MNpyV4ff2/HzWr2mRpt6ih8kNifcBZ3djrlmzfe0PXAZ5+Xi00T
uKezgc+ws04rnXH8VWoLwRijMSdrBS59LFLCWP3QyACx/zwSoFzh4HT7lfvl
pCf31AQo9+xOGWqUYsJzcp8MZUKiUbthTHSx88/YqiM/ie5U67liH+jEgL6a
6tQf2ZdJl8shsCjJseO+aH4pZV4IBUDa/alC2Wehzv47d4sz/VhkStvQNiEv
TkfSsQT9nWVxQ0zBhWKYFeE2RpWqrrnYgDzer75A2snM48LeiaaZt0RQ7QxF
u4QNTsMG85YGZy12qw0xDpcg8d/uxERHaFMWxTwadRZG6A7K3CHAEtEdU+tz
GFIpqIu6ls4ddZRsTz3OP4wPJzVAmJkV82lW+koE0rC4mLq/geC4C+Fojn9q
ZKf7UCiPfxyoT//pfxEF+jbq+iFkaKAF06KUiNGm1/dRpA0TGaQewVaFjVBv
6tRGoRutaD+IAqUakUeE8CiKQ1aFl+ouAuuKHBdbpwijhHLryIJ5pIgeqZ9X
XPS6W2890vO6ZEsS8KhFlNk7uEqd5zHPnS+tGzyjiuhTSml1lRWLNda0wT+o
+RrEkMkERahW/S5E4RBPWuvupMFBlgJinTEC23YDsUYBfSB7a+7DnZIykhOH
o+hk1Jm3u3lnXt0CxJVayFHb8CgcNBE9llJCopeErXhz/l2zYXaWErFYFbh0
cgWrLrkoKynrLA2GVHWnaaCWOZoHT86qbTtPz14smJJJrRI14BxHSnqGhw4W
j3PX/soH1Ichgt4N8IM5A6cKJ6RiYEgZGCiIeiHOmXcbAViTOpCDUdGBe+qf
sl7LCCpwa9g1TsplaKAa6AXH0vS3WEDD085Z3yiEyV+s3oZovyI9Iel9h3WE
XacyyzQbrptxONanXL1QVcSn0RvkrVAWitgwkIfoaLqYobc4rTviK4pEjn8R
GGlmaBHJCBpJB2UMAKbwVu8sNLnQiVLyKia79mVnb7L04vTU+9z5YVynMWvD
k6tR3/jmXMqA3Ib23fUH+xC3QC0Ap4Mxq+0oLl4twUEufHUUtAl6fppZxWLs
eq6EWpGoKeqQs6SDdkUnM8D6Ol50xLEm6FVazNe16OKDjUC3ZoR4ueT0Ow4/
iRo+CWVEOtU9JRVOoEGEkslCuIjIgwKrolisWLK4HWgcGjmKMgybR3EpPYeZ
pJOi6eoPSSnglKYDWI1rTMPxYtEIDvqlRACC98McJ5pjdp5LAiuCmYEuo2T5
VHotlE3w+JQj7F0ZAanqe+8qQz5JKumcWl0rM1BTxZrQjdVQpP65UT9ZNwdW
YD1egMqRM80z0V4OIWtdBd4BubihcKTUhNQaLk1XN8wFqaVF9w4K1HcPhmC1
kaJpzYsk2U/HYw88QmOu1ovkBaaG1nQD9vh+SDvodImUBDpj2ciektFXEgLN
JBCdkzvxR/hxjcK0NxH1xnrUGYvCcdfl8HDyUioEWUhZXtcVJTmYSTFp9fzR
W44sBLFbKJnCoIc4aHQLMF64lUG9Qs59oxPIPsF2WC6SMMMHFTvdTrsSy1hO
OgguJgSgvXjoSwbg39JYnum8VkHFf8Eg+sKllCEGfB21f0Hjhtsjz9PfUNDo
P9ZxdPRixv2nu96NaeS+eZGGv0l+GpEM4x5Ap2Ffxw50u+Er7iviuO94jx73
mN2r+4nfHwaDNEmGR0+Dgyg/NBdOdKHtzsX+SRt86H0+D+I2Or+ojTy0ZuhI
OzDhqA0/CyOhL21cPANpNQpvZj/YASFNHn8Vw63GhvI9xlv+eYSsAwkQlD1C
WRXMgHsU1W8VOa6qZkrnLQyQmA91qoEbW5KyDQP7Q396r5br0qzk4lj4azH+
qeD8y/ligVd0J+q62wvgyPGKCixn61lRMeEC+lShpHJ7mU0/xjNT5sXKyY6r
umDXM9ezWKSQJeOCW5Kz5XQhDLyvHcxBFoEFFHaILilZquZcFrgTomxMlfSm
p8YeEqGO5jJb7VaXv+dTsXeijH3LgSChsu1FrzaCdheai2UOTVuSejeJE06i
cs7EUXa/0RS9MB6XQZL6ppKJgXNAJipHMA8modY+CoIDsJl2s/1Qv+KUY0D+
rtGxF3VScUFhKe9E5ECX5IpLkZ1OTHoo3yRmtpfJ1HhwjVYalC/DyORfQhla
rvzTZPApSfkcv2g3i+uDJZIfcSF5N0yXKvkX2AeKMt9pZZNg26OaVEcOMgJh
oRclOgaaxVO9C1hnWFIEVEGVu/ULSm9bcWVvKRA1K6g2Z8Vlx1qOoHHDBLJ2
V3kI2v1Axb5g/QfkruDvsB9fgWaFX9+7UYBevKaljC/o2HbTE5nK2BqMT2im
ThUVbbafcqiqBzOrsKIJylluOIE30iTxOljVkHlhJm6tSmJ3IeNh2WCHyTed
JwgpPcV/U7WfgMDh/pdcG5OunAoKhEnixiHlSqbekdNF1VhbRY58kzp+KGF0
ltk+5qhghsEoxyVWp0cmrVlxOEAVnE25Euinoq7KJblwdjJ2U/fvji7OoyQD
rOjyvLhsblTPVxXBhFK6W8GoT9IsuEQSfSeWkPFUnU+ovWFzLbikR+rfBAu7
1UzK0qt1rWK4HbpLWaFh7K5zAQaf8DQbBg3vYOEV4dZUfvMaCi/oyCAhTZuF
K6i3TRixkPI2gtUVrhwqJz+6WS6jCmLnKmU5u8n75nrL+G6mfDe/fOOv6le5
bRsmQzGynOJ/ZgJDDPVB1PK3Bx37YQdIP2L+z90GmnaQVbIY46m8Sw9gCViP
fEaML1/w2cQ/+/oV1W+6E44eXw1fXL12/dRkl/idSj5DFx4LKYoUhQ75PElc
MJCmBXv8bhiSHaNuVFtWVizxXBb8FQFzC8jzI/pJsFINGRAMm8LNZNbMYwVJ
mcvkW7ZPJdEoVJhSr4C8laHoG5RVSUyHQopojMWgDKyNg/wuyHfwmUvVUUky
se7ZaspfTnOmLouYC6WeNcFVU4ZpOMrHux0qQJE5APPTdByMeBnqevTrBZFU
ufe/wE9O1u6XHECFmUxXmpCvEFKqcJLie0mDnvKg6upiERQxekABOw9oxtPx
eNqNTkzYlKGlWc2seBE6I/lWfLQjPx9Oj5/NQ4QOPL4BuF+pstnVi5WQbPja
FdYBBNRqlG93dNrs3mkYU4K7drnGGkkjIhOhGqZ3XxQYHK5wbpA6cN6q9eJI
JFspxnC/uXCOMBu2zh+Fc28PkcNhF6M8uIETwR54z6iUQ9H4VSAHhhBMw0S8
kiyxpE5zzVb9q0f0I0q6FtXypayTFJXGTpGMyLgESyvltjfuFc/Sd0cwIP2C
eFp9UnOxTx9nezXDiPVl4VgV3e4NM/c79pCZ9++F5QcY02GwopSmEkphYCR6
EzmytnIYvfsTmOLoLL7nzfLPkqT3KP2e1BDUMT0Yn9FlHdOXwgHTJ+FB/xPp
eFMHWg2BTL/ffguXR96yDVi6uHMO37MuxzPcg3iMOvlvx2OD53DRvYkbnGlH
XXUvFxgnBWlVW1ZScX71vSvUSfJw1d33Z2NDh9o7QewDQW4LSMfWC1EzigOu
gGGMHpDEMDIj3ep0WtVC/8VJ+vH+c+BUki3cvTt61JRQhCit+Etwo+VSJ1Jg
Bi+fV3sz4avqe3ExzOPH969PXp4+bG1+2wZ6Y77N4e7IYTI5mrGWF8/IajRf
5taEGUexwjZ4nIPYsO26UQdEMOB1HXIMCWLoVzmIgdCCoOjrgLaQsvCh+fin
IQLCSX1dJ70gPSWxG4baPIw/T8HjcV2gISweAwGRtIb7jrZN0WaXNg7j+zHh
+zO1XbEiX4yqBJxGjJkwbMS5PZooeK3zGamqaYovUrqM6a7sE/4hQEy6ap7/
mOf/Ai/k+FXeNBj/PZRDqY+HA1odbGDKDcTKPzLgoxb8zo76TjlBr4tps/Qy
BZWIKkyMo+7JaBjq/ilbiJE+8yKrU4Tkn6f5iu2xsbrDZBeV1VDBuG5VP2Zw
N9koJHrrWKa6qGU2y4crTppHop+qgGg0MyrNLaE8yiFFUqdNvRvdNDz/WOnj
mLY2qNCwV1VzGmrjdxp1Ybtkw3c2tNc+6BiRex1Q0JFwogHR5kigsQEhZau/
k40Q4miOaouMyjnK0rLFvKpB0CJLOHvJLhzj1qXgbnbd5IlOHw2SK7KQ4y4L
WXH90lTDNBjPRZoWz58NbJW3E5OfCCB7dj3RssZahUnt0/aCM/TS3z03jCF6
RQUPTUl3F/F6Q2cT3HqQdHEJGHFj2V3ms4KVPFq8py6WmB8XPzO1D4vGkuFO
axp1MgGzJopKz7AXDpkoVO4NIVCrdU2VUcrIPQsVidh21G0YhgE68ub8lPSN
ytdxSbX0Kr8xG4AO8ztyIqZqMz+12JWUbiYa5gkA2XYikBkrxUO/jw64dI71
aAEik8S8E80O7DN3hGhhqeJaW93e1g1AeWvp/UhChjheXCzePLlWAshze4LD
3sB9aTU5Nl0BOo7OjjZ+ytiFRHHEWuShlrzf5jiO37HCc8P2RlPWYnXX60Z9
H6WKraSL1nNmSA7A8bauLrEarOb0dTm1VG+JHsHFZ2jIpYv+Fv1ll3lHiAgr
BD4tROKPUqnQ5FBTcD1hja4XUAdRtqaW3thPiF80L0GC+yP7WKsaopsZFkKc
4PuJvSdXZpfYTIP0uPiJEyxwNBcINbl/YiXH2+m8fhmeV5f5VdWG15aMYjwq
OJ/5zmZjkZxWC300UdEGPbuJlVPsynUiH3VolXRFLi7YvhmYea/EJUIBYMF2
IbVPb6r6Y5QnXw2NkrC8IywOUEE/DVvJReV3od+PbUqns5H4qPm8DFEUJwWV
ZcQZq04YmXdiTgFEjCkNfHxHvx6LHURiKOYBlcuYJ84yQ5WbLwp11GNYPLfh
NW+dIiAnpz+iR6WP4eP0GMDeDJHmxmRt3jrVdBf1AD8C447Q4RghfWT58jR1
usTfDdJlqelOIGbF4/6bZhk8BjkqdIBJY4Bi69zITYhnIEhJJHaqe6QOnewI
TtUTKCRfOIs6A7a5jWSijQZTlXwQmYwDEEjeiN1UE8kJ/Ou/F96DJ0od8U36
ukrPQsJrM4ma2Uy5T4makeTYIcOC3ZeAlRNxPkg39dXNGa8sb8gMU9RcR7tR
FzEpCYe8JPk9k2sJnzEr9zlosqRC9NtfvtAfX79aDE4t1wwtMxjAzHnNkTbi
HG7ZbeBTVczUF+6zzwOecJkr9k8k14NPyMuZO6SSPyvTEDwhWdGm7uovuWKA
Bm7zw8j0SeHTaojo7ZxEfzIhw3LEkmknI2srVoVYaIJ5Y5gDtQySRNhNqdPC
aUJ9uv+zVspOoVUKkH0u/hzBjoZjc6JSXgfxG4nykXI6dKtDGyn9oG26lVSU
K84SdMrpdEWypPBROGf8BEUD8Sqi59i/2JLfnO8kJldIijfc92olJihBIZQO
Vo1kkWhFmTZvLcsZOSYx5kAFNVEp4eQ+5lg2gNJQLTauCZ4uAdmiZlWa5eZo
1PGAwEJvAibsiMHF2vJQqdQRD09NyBNItICoVxDOxBd6M/EN734n9tx8ysm+
hyOi2QtmJwgwPWGSoZ2Jiubi2mckoQWL+cJqpCwBpzHPx+4ZASETaqwwBSQ0
luLOgm2smARrnoPXBhdpQFtVRh5XPqwyzoEnDsMaaBdSp/Qbj3gqkkBEqptS
XQykH1xLNNIvcLGcoeHYQw92gIjP7/Dfbdb8nJ1IOBWcLmplWcaUUDr4fktd
oX7pvvzdvbzQMu2J0/oUjALJqQ6FZAABKRksyjvHKmDtE95maEV2UKxj/+uF
zrzAclgXmgwzzl9YhPo73qglnWBnRUiupcpOXAPmns3H1dVYk85GihlxBSnI
z8VluNbjgsUCnV1wMFhM0otGDMvyhomzl1au1MhoqISu/nW+oBAbl0dZ60Fx
KuUkSqUcDcgRrUKfpIF0i7lWuSgELBm439Sy4lEmmSjCjaouZZKWkRDsPFcV
WcK5rtGuX3yWT9trScDMOxWSLnMKnAU5IoR8fBeWD9F521mWU6y52lTTgrTR
yhiFK9JWiT8/NLdz1mGqqslkpzWQsF4nDNrihYcfkNIjTpwdZ+qcEOhiOnZq
lGgjFECjdoRczQsuJKFzzLEH0KJM+uMCosZubl3kmnMzlITWcbNEJBXft6Zr
lYJKrSm+Jyly3E8Ox5dFyIlj2Q8jyGehalVNr8ec1pAyPZNp6Nnzw+dfv7py
nFEksXXH2TDntFV/3B2nj/f2kksQF3CQW0BwFLvHUh4qGXgTOPY73piQE5e0
UlzgAStvcqrQdE4AL6dOrqecoNwYNHUTkYsEh6TYBBp+kBwW6TYe3lv+ESJL
5e2YFviVc1H7vBdGnznQjQxOUZ2dOGmGXP0tN7BBRPBfiNtQQVyW7jkPINkS
0zdUNF1taYykMAcfiWQhDsKlz5zFJNKmdESd4U6RDs2ws8PLukprIz54lAcA
eW6uKCcUH3tr67yjh/W1oKz8E1LyWZgipaTClK2o5iMPeCprFykq45Rjw3u5
oSizW4JFKap7MKVYbfPOScnGiIImu2yqBXk4ATJn3Yhmc58obHDFNYoyUPh4
I0pJPB6nbb4/lkOhz3xeXa4+kKr0F0gHURZXuDWIo7apOi6C/fsm5HcGyPqu
m8/H+HGU1igXgySlNB/GqB4iC1BbPMxW0o10tnSfkthNwBkxEoYaCZ9lqiqa
4RoNX0lkD0n7OQpC/hyMM+VkvVFeRTboMBpOtbA3V2AxzYomow+Lo7PFKsCS
+GgiQU8/4/4WU7Q5y58RU+Uy0caz4MvQiqZV15244nEoOMHFWa9AvkHh1wld
VO6sWeYh7bR3l21FJkxIqyMR6CGSsHCdMyAubse8a25+0C+v8gAW+U4yQeIb
XOkpjlFYuRun8CapmjiBMr9JMWMZKrkFksJkqsTKD5bRfnUyJtZuYMuYmPKp
G2w1ecvF0uIqPGFbLLUiKwEEnDSPM6nl1m00lsaEvcVZIgUh1wm3cC0/pe+V
BQkAo6GJKC/S/Dj3HMF5oucNazH2ShUJXhwLdc0w3gXAnzEjVgWRG2aQgzNS
jVSmbIZAisYGGwBRVbdO/PmKfJ21MqQsWuPUji3ZbZ6eNSBTomLhhXtMBVnW
LZYMoQ3aPj76rtlJo1mFw2hsNOKWCukxTrwc14CFbVllRd2k11UjCcadYJUC
T4Roq5vEK7K+uTWodI5zQ23T9vH5O9S3PJZTB0Yf/u9t1UiycTz8ow6O6uz4
BjDGN1MKsSpRwYaAz52vrPN0+231dsdfv0n6quKEpVg7HEl3lsI3rHBjbxJW
CDEsJ66ep0U5KnvYcwoeswxI0YM0m3BfmpxKNaP1K0wvIY4L9l9v3seCvUL8
imXfyxyD/xukwTARGohIanIn6GEG5MByMI39mN8a6eHF+/15UJSjbg9it0Af
o6daJav/8HsmnYDPh8tVRahpNx38xt+kTd9Mm3rDCKtqlSQ6CfonwXXyTKPr
MO4vmo185p9JaapoQvKZfyYFqHBO9k8+g2fd4hgwwd5n8Mx/9thXl1I9zAWC
25mgu3/Kb5tufj3VHQBH6CM3LJojcsXgKrykIwnitkn3kpmJx+o3jNUmSArQ
bvYBJsU+bs/3MBEo6Qh63qeN+hukv+aXqTV5+nj/KTcZ8CYEwOWPnu3twUe6
0CyN0AIcxi7lD9AEJMzhMCO8NS2vXKGd62ox67mn4OVB+vbLrxcwJItkTw9x
WuQUb0oyylQI3zDx4lGw7TPNiuzzzvc3l0hoXEOZLJ5MBzTb/AXn2M2XWCFp
iseM1hNCZQuSzmM9lKhH7FB87QVLGUzSWfA1QrzM/ksNCGRoC9pgN9L8KJrN
J1hfJEZkLDEiQRUjovVqsW4GfTykyIkuRQrpOhefzMUIEYkSFy7n2M9HRQ2E
jWWdImXxJ5U/dRs+1U4a/tCELc0VwtJ146NHNpnSOGPITQXtOfTDPHDYYEiE
zIJo3Fp8nETnKVtJOFQBKxejzidEfJKV1Rw+B1yUhjoUFpKF3CFvH9uDy1w9
+GWvkLtjB75BC11361CJxo76Y8MirOwlj5gLvTwhJI5dREx8UFJmbgbDMRqN
6RpRFpiYYQWdVsOmu+DYru/AkH0vRNKJq+6AOdiMKHKgdIyWzW3DrYlDMkiN
H/uMbQ6/uK/rOGRhoOuOZyjVSMeZb9qEbhEDtTIIykNlmET9DALEa7gLxWdx
qjVfL02rSqI+BWGYysOPTcsf7JbcuO5zY0aKlM3Tix9PnuwddIvMmZKiEE++
Eue0SNnCh/zRbcgIyxkRzThNvqu/XltY3wCG0BgG0WSEL3BGbex7AF8OumB0
vG4VlTgHqmjbI1M3ZRWJVbqDx3t5y4alXbbxMJbFFCyVKikYwVd1bzwHeFQx
2BIWccqVYXWQtvZx1kmoz85Ns1rOiVSVxUaAF45DTpYLkgO1bIOzFyJKvD+R
WZ09MNT9twF2S55IHIX5Bevz95plT95YF50GyLl982QCALe9oeVOsuEFtBzw
IHYuAM6t2DKBAAIzh2bvGM3JOXTDWJnajHGvX0jZPPz3Rw4FATYeuE1MEjgW
tOMabEhgiAEoA1//QF9/RbfnDf0NeDwnGzqLo1260esJmSNVgdwE1TEmvGDh
lW3WxPZ9MisC4owRYckRsacjcrIaebPVJHlVNSrpNjmT3q4zppTEaCuWSOHS
U1hr0MGbU6ggK/M5JWezrt9LVHurYR/bmA01Lw9MPkUoNx46aEtIt5c207zM
6qJqJDEZKlJVRx66wlxXUhjzXAy1+3v4jefY48Af3mfxv+tW1CJPOUZTsuGA
n3EdImXzvgGaxY/JgSvaeJ3DM5sCB8a4KXQOwmu5sRuQ1WFLQP50k6KuAcks
C9hdVAAQyxPS/JWc1LbNxb0x0Cm2Pmq+C1HwSUpW5IQsgR8OQ/iHEWZGnI6E
trLPMcVVUfqoEdM1d+AKK5FpkgwLpn5BLQGSBnkO8wm7dWi7JbaisFsNqb40
aeLQgcFWxBBKbhou94tNzutogjMF+zZRLjqgw4sRlxKpq+sCrV7mIGyFa3FQ
Lcm2qhbFVJL0akZDSoSvORfrXCriEYcC53C1yD8XkibPJRxpK4r3gX1j4h7f
ycsaM+MO3kxJmEnGLVG0OH8kuEB1dSNoYDMGmK8zjJ/O814Sd3J3S6fXVcV5
jsMy6VLKSIH7HXmTyahrN8eOKFaaHGCEYdo8M5Io0Vsck7wEfkGjN37MMRCb
+GLMSW1pGRFprBvSI6r6N+Saz2azOm8sRP8BZrYy2O/EqvfVZ2m91/YV3xSm
dms+vCP7ZioWAT5A5wMy7JeRCvIhfxvJaMycndCT9ETUJ36QoFLxRX7Fubrs
VolT+3IQpMQpG4neiG46O86R+9AVM5+cKKdaopue6ObC+NgNC1GjuF6PGgxG
UTK60pz20ezGBlms+Oe7IzmtzglVu6bZos6z2a3pJtT3X82izbigPSS2UpTz
HvFR3BFmE7BkklpoBbb7pQCbbvUZAVo3pU4El+QzSlLoL/g/gW6zuwoJsHod
uYKkLlL95Bhs1Q79nkmTcAEi/yJA+O2Wppwh6daC3AMDoY3sfMmDa2MHphgW
p4yaoXZKcVh4T3vSUVeV7KSllnzxLHtruKChwJneoyD9kz4JiUcsVHQiYgw+
yL/RGJRuOwF8jQWK0kAYplmlkXqDd582/FW2ovkckc/0qbR8wP4rrR4LrWbH
8l0Q7ZuRI+UDr//u80L8J+lM3bF1eIa/5dhcLT3nlWPVsJrAlhLTyD6Osrkx
0hcSzlZOpW8jXYslwyT25a4tcltDgu26aHHJ6MkSzu6cfQn/jkNjbcbggcmr
/6bDCvm4eA1/46n9p/dYV7Vpf/32vrUy9ueee3vANpOeolX2VnuJeUCLICeL
d82c5B37eueWhkEASHdFTbJpZCA1GsIwcDjqR07z0iApOopoc0DibjSQ7s69
CE56jnuh+wRd2MJZi8O3q67a3MyBzOO3949DbUGW91oL6TwEEQBrnj579Pwg
NZ+E0Mzr42l+HBn95qqlMlqSr2RdBiZVGV/aIpe6gRwYu1GRzs+J9Eus/swa
r/zHzYX57BJJfWv7kCTHSmPpTZTr0XOZGgTx6uhYZBWR+uCXKtcnCanaJUAS
p0J9vn7/8qXfeu5WFVE+i70hPDRlhRYjGp1uHU1A/qKHaE3RqfiE0EcURWNc
VrjpWOzCKQWI2xCPWF86Cb/jvdt4cTKpAki5CZwMTEl2YJZquIhofYTr7iTL
nEWJUA0Z2c5hqH0hyaG5JoC6pxvrwUjNh1PZtNAjmXfInThUSNNaiwwFK0SM
/7YGSWi99MqLWzZDcc4otxXO0E4GOgLUjMWmB2IkRh4sHw7uqD80vzt874nA
+HhXf1Ch5ajPUAYsIAoCJuUztvP0L1UIHmS/NcZuAvJlunXk3IXemoLlOJLX
t1iYCnoZdg6aFc10zb4PiGS5KCkremgxAwokVpSwOwjLeZMYp5qoI8slRpy0
84QQQk/CbpsnPFEXu6ks2Vt0K6F+nqBLqLJ0+l9zXizzeSXl7Eexr73MKGAD
EnHDjHCqwUwRHCivggI5WM58cG/A+N1FdkwURYhhtjCcRqXAaFCGggHLanrO
GcweTtOHI9W3JVhvR3XgD2GTsjuZpGHD0tXdrBEZUXi1aLuPK4neucisjTkS
b5kJ564Vpme53U/YF8SjaGGHP9lxwdcs5yLSxOvhN53AaYdpB26313LZXknS
OQJZXD+5H0DXxSzSuGVpuV5ecm5+nQMCjk825BflfS5iXakBpDjuazLLWIvX
LSS5ebFsH2ElBMWIlqpSLMpP1YJS4dn2URxFmVMh8g31HVSfIRExqmDHy4OT
4Nqy4XMNp+t8jyVpJ4/3nkcuZddw0zELKYc648nQHWBbmjIFm9EyWatJLxkc
s1vKF0VWWgDYMQKtJj8Oisn+5m2kwx1Ihs2kvtkvnSrquJ1gDMMESAJGRoJK
FsVVjgXspGIFpn3k9MjsYE8u4l0RI4t22cLLHzZTM1a7WjF2CLbxLsuIlMgM
XqPE0wzgR+OwBlaQ0ez7J62YF0kFgcXgQcOZsNd9b1WXuWQKpSSkDznRYHpw
KE3jiNxtp7CjrF+YE6+maXxnivZOy1lVN0yRuuhPLA8EgsgniW3S9CZZ08MI
nTnHkgheqBsKWq/sVBHg8jAHD3AhVewk+TMHXuMua2lBN/HORjl7zUicrLNB
BMMGEo5eTH8CfvC6BDBBTkccFTuGhy9fgPfB4mrjK/0YcKjJRplzB3FMon0r
bi0atil+3xzy67TOEvobEkvyO6o6o92rhlMzBHXyu1zEbJrNQDixfq7ZyPQS
CUp3UGVmIkPnYXp+rk0a1e3TJGG9pSvhuINnZc7CcD01b2Lp4+zKddCtSy4N
AkNNZOEu4snHSLWyOr0I1Ig747tgzmuGdd9er20sPseIbkwx1604rHDGTsg2
SWJEnLJItedtSH+7RmxB5il/nlISQHPpdyxmmDVWIEs0sHBXs2hv6pykctGs
BgfCv3fwiO+zT5z3oRrqCKIe1iclLbgN64nHcAZMjmXgpB09Q4aZC8SUSOoy
FVs6p7vpZCnUfdHkN+zztUlg7pgtw4Vh2gHECKchijpRmm+pvVLtWEKS1PuV
AiIWmH95RqFInWVvrRbr+RxZ6y2etZUApMPvVQN3ooUkjppIPcVuUc3tqKTm
DnRYoZ1ac0t3K0F1qqdtd+um7ez4aecaPyHR6iOerzrJKYcnBcEvTk/fplrz
uwkm6lDi/D6MJ4sfFtJHYVUZyKhLURqomjZ2zjt+c/RWt06UvKStusTII7WP
5bOBKW1CVw4PPEyj8BOz5yMRlliURWuqBClJ5TXLdaNOm6pjuFPXiNtlfTWx
tNdNoy/igvu8GKgt67dC3G7v3QjX5d17gXa+CxoxGAVP2F3gXG37Yv9LLFtk
W0yLVeYCrCgnuqiLqUSNuvhETtN4n6mUHH7hvWDMyn/h8xC4YphskY82AXk7
zKVuHfb9OSL/AVxkz3ZdNNYpxlZdt+2qebG7e3NzM6mvpuN8VrRVPanq+S78
xP+/+PFkC3ftr2wMTf8a7NABMf4VXqMKfJdsj38VuyVqAPWNWWTg7RtvhVDk
RiaeTPO4xhfvwZ2oKWOwcWSx0B42GQScHoE6iLXP2trpN+OqyNQoKNbg+3cK
tuS0KoB7en7w+MkI/vPo2SEt/vT88f7BPyjnT5+SDiOopOCAse8hxc170jF2
3om7KZEaSRdBygxBYA4esNt/9rx+X10CnbvkYizoFTMlTORQoz65PV9W1ZgE
QWKSAidH0g6T+5xRK36IvbbkJUfR3ewzgRM89XLEXyWxgXpaaOq2shoUHWDa
2MVrIrB/pXI2N1raSHw9mPhGa6BsJqSfYJONhpIRWDB9wj4jb69C/GAqVbrh
0iTzx6X8abyEK4LNfUhaM2MGJukRZW+I/JBqTk0YYUSaNx4y57alSnRlh1tD
5xDHrMEyErSZUoJNwOnZR5KgmwXp4DkJlNbFIrkzZMEydAZku9ykzKKbCN/C
9Oa0bvEmdsdmuf05O2Xo1xCVnV/EqilSbEyE5X6FACkeFuufw61kI1nSSp0T
plfHOI54xuYrOiN3xM0kTc6p8p9nEGkZvaIvg+tIvgnYjEwbljeEUu9/+UbN
v1+pGqekPr+Co8vIsr5YBB8YDnXGdpOOPKEuFw0J4eQKjS7pfH1xHIl40iAL
1XfTM9zI/DMCb8PMM1lBhb4SpocvAJykJBBaDHcYFwj9lcYUkCCbAbOWz8m1
GxoYP0JD0KTsZDsFqTteKBMXbEYhBLSP2IHEO6nzZpLQUy2qqKhJhLZOYE6/
9KJwdeyKuiGEzYbtO452GqjEhKLzPI/XVfn4KdJ9ieXZDLDmMnrUiZ0gvhMG
oFh9TCcTlzJXN6UwLcx+Wi1m6sAYZATN1Zn7+Ck9kVAySm1TiGhYZkc0sKnO
t+x18JaSmB0tNaFlVTTigR7Gopdbr4KMhIrKGP01PvA2RImoezeCChPzOVFi
aplOP8GxqxCCeknNNyCX1DbTCgwixwsXQAoe11FOaTU8FKWPbhkIixpJ8okM
Y1mkKpYBI2sRP4WQSZe4np1yHz1Hax3O3rs0FyZNWtBS8o1DWCcIYFZujqgd
0up1SMXBco6Tjnm4J/sYDnm0WgF9Lj6nIKk5njtfsMRKOhdyaHYDAUaM0mkk
lPZoXJSu5NRUM8vlvXw17BMdkvd0EsvEmW9cwo+AcpBuiYXz+R7vESEShVxa
dTZXE8twKClZRAh1Cty8UQV8p+iI5uGgXUB0hxu7VZYT/r/JBJny9yWl1mNf
Xdb/at7+EWYYaUwBRezZuzOaYO9QyDFbkpphA9KKu9l0wnIx88xZFLRiJ0Eh
Jvvb8OdOkrh8jhI13AmvGFEQxQ/wZfxcC4FMQDiGtaVbfzka/59s/O974+cf
vh//9sctCZfmdCfSNwV1wM9R+h/48AcJ8+AP4u62/7I3PvhtZ3v7/5vs7fwV
/vcv++Pnv8HD57/9YWfnD657zK3C3fN8/wMf/IAlW7PVWER6LQT0fbrGLZgA
Lnry+PGjx65wIJ/4WVdZ/+UbnKLo8L9yEQFnO1DIQc5v8PacAgNdEodievgk
eKkyJbXssg6L0DhRXec/cDgLFioWvNMLxYNvKJuX+8aKRzTpa8yUUExPyGzi
S6GpaHvQiZqYQH8MXeOqpn0e7pj9+d7UCLwP7rjTHQEsf/Po+bMn/A0CBnzj
hsr08jE7hVfmJkeTXIN+cJyOeFZhkZTxDOgI+kTD1WI2V1mga/ahTrf2JweT
g8d7k/2tHcEmdB4a5r+FMPXDliERrCOOLioUBNyErDFC5li7wXpBzlhDJIDo
nFVx4jDerJ6vVQYxLu9KI9jVliThp4VjXCTaAsH1JbFmCccaYa5G5tVGSqD+
iSLq6cf4NUfFkYOKVg/nzArifM153SjBWAjr6EbYE/kUZKOT7aFOiS/tpFol
legvxyntJ63GAgN9kr858vhmWtOMZ2HcUCXc/Pm6F5YLZqjFIeQGN/0SKxD0
OJlt4jxkhMF7wR9UEaC97QR+WDVRi2fwgQqU4Zv43khg4Gm/zW4XGE/CT6ij
wEjlgdVDaeK4o8nOZrzXrKtFRB+zX8IkKY/05Qv2/AEW9gFYLpxUnx9dyXSE
HR9ZFsdV1bJD1UKTJofIa7cDgZ+OoV0Djbt6zMHLwbcS7tsP8RWMyGB3LW7v
1uRJS9yDiM/Cy0blXkLAT+P3TWo+DE7MLiPNTafFIpVToMhoyBjHddjEaRLV
hCF1gNrgqdgSfSfi8FB5qzSkJfc1BLvDdIvb9WoL/w8zcD8zsDF/DcWlbpOi
JySv4Z+ERnfTv6QHf/BPfoP9dD9lTrSqBtBPur2/N5k8PdwZSZAqP3w2mTw5
3Pnhjplsr/NiFuZAv3AEGM7+5tG6Z6TjHkwmh4c7aTzw08nk0SMc+I56ztC9
K+csv2Vs9wtG5xjhEB9sM0u+3jECNarypV8f/1xR+Wf+u8jz3H7UcC2qZQIT
CB9+j4RDH9DXtB3h9xjhbOS6G2OE8A9J54HFD9MOPUo6HfQjkeXLQx2bJ+dH
5yfR+PLIz8A9iuew/yTp9bNxGgeHd0CRbLbW8MAsVOigE/a994ZOD/Z58IVF
lMvDFykdPQd//yltptf5MoeH32ojfoJx3ndDg41GsaED0+PnvcmFx3fehUO6
Chti1PEfhv43dnPgjhzceUfS5maMGQjCROkG7Nx1rW76m++e6fW6ech+37Pd
6Z37zVqjMaYPDjOBX4u7Zg9k53I9H2N45NrhhuippvXqP/w+BZSRl6gamm3I
u4XKgAe8HlOVBZr8fV8Cq7jMStZy3vMpJyGCu+YbwULCpIf+SfIt+WRrlO4B
AbJ1DP+TNvoVNNp3jfzqNjdyX0mGscE1b27vvpLcY3fvRK+Dwa+27rhe0T/M
YrYZ0tSfIgCZPZE7Ev02IoTZXtHJggg2aX14Puj2MPjiT+aXMfAG8zth4PnG
NuPNn1znGSmpei+aFdbE7j0OeZTh1X8ox2YDzml+yMEgUbVldk9XX/hEcAhb
Yf3dBvrCtUBgsl3pNtAXfgQEHtuJXgN50U1hN7CH8Qhj1xKT2emO9kaQF36A
9Ak04J1O+w3oRfR5mj6FBuEMOg3shWv0DNcwz9P4n65hnnf6T9Pnd0L8ekVn
Hlg9ZtI3k3RC3Q0sxOHvwNHfhcapJZVPfvBw/5PR8f+RjI73cFAzEO4dZf4L
cOX4SIQUZJrCT+Uq8MkHXV/9wmexDu9Bnm1RkPpAfUvlIEFO9IFLEeq/uZMJ
+VsSaN+zcPNyC52FR8owxk9wA/5oX4mY+Fv4KgiOvE8qT2LbF/S7J2SOog/5
2Qs6y2+t18tqdssywUZK2fmYRIMfaCcHXsAWCN9KP9eaKWpaNTfFrNuEhIjd
gbRKD+j6/P3ZxYfT8lO+qGA//86Om9XsMzXa1FH4ILE/UVVwV6cYGVGV+XhD
1wOffV4uNk3gns4GPsPOOq10xvFXqS0EQ7rHXE61+JSPxet5PMvRoJCXRBX3
n98L/c5L010A/9TuQPehXAP/OFyF/tP/ouvwbdT1Q+7EQAu+GCLobHh93/XY
MJFBUL6DPHaPYSy5Y8Jp2MoQKQ99Oa+r9Sr9LY0PqfPakrm5L5rbps2XL5wQ
jm/rddT+BY0b8kbIcyAKvyVJ/7GOo6MXM+4f0LLjMkbumxdp+JuAYkQH4x5A
p5SNuy5Q89esqYIESBE9ku2+usLwqDvel8DK1Ot+jW2/P+TfBdQqGR49DXwh
PzSai8xAdy72T9rgQ0+kD+I2Or+ojTy0ZsgmDEw4asPPwkgkP92pwKO6XgH+
vqCGjrS3P7iKYV8B2sKv772/w26sTt9NN9YXxIn8dxcf/J88jPLv/7d5GFVD
zhDp/qkKJWs/0BcI5PuoRnHK74Hv8a3dh4PHJPF5rXWvAb+VJgePUeLz+ud+
A3qrQxw8RolvUEUZJNEbesxNDh4/9w06ej9tII+xycETXHRfMxetIZ+KygdH
eEJ6n75SzjWYXc7xlTZ4RMqASLnSWbSFsoyowSFLOo5PHzo3TeM2OnjymM7B
I5/+OdBbnRIeXBKJv/2jprdyEnBPoUVX/I0b4NtGhXxuMCDAugZS0cSP4GWp
/pTorcIGN4jVwb1V3+DLaISeNrjTwMEGN+hKOXGDEP0TGvQZQ9/AR/uM+k26
TExoBS+20pE/Cq9P6B0FvQyz8n445Hpwrl6lbK80yyViT/qASdD3wAWGR4yI
lTi5N4ak+R0SyQ2tvkcbeIcc3PX1IP2I+u+MLSP0KNGdLTaSr9gM/D3vnX/G
7hDj+DPC7uS9QQ/GZ2Rv9vvKzFN40P9EOt7UQYTzN+wfO1Pd0QWRta6L1p2g
ETo00HBjcKLGRo+n/wb3+hc4nfhQhr978JlQ8/hMeo+UFSCm+IUU+95Nt3A7
6A8t+o0fsZeAMQxuwoOqrv45uV0aajDEqiArcGdHA/yAnFv6VrK1HneCuL+R
NK5xcPdXGEhCKkMiu27y9bbOph/ZteKm5FwZ4qHbUraghBxPsNjmqJPoznKu
WMFFDg/nnFc0nzG5mdafMDWdZqlS8bvVcJG4Epp61GJSJ1dG6gZHSjTmExOA
1FJlCKsea0ZbWaJ4gH/XaMA61eZal66oRz6zikfsBBXy457TXxu3GhmdTdt9
xL2QHxYXKCbH8N5mcK1LSS79Ll9QRoa3mLE0x0KbFAJIQS6NpXjEh9fIEJbi
f0UeulFGVjk0idNL1E/8Y8mJc835THJIWqJ7yRipJ+5S0SQMHQVHbq8pSyAH
40lm66Jdy8bQwj8VFaYyapI5ZrMuOXLDcgzX+Xy9kEJQZ5LxpN9Rxl3hKhKJ
4PJZfzRIGE52tsZculRv5LKubhr0uKN9Iuc3GTVRx3CMKwOgrykPLO1RRXnd
JG+BONdlLvT7/7b35d1tHEme/9enqMeeHZEzAIgq3Oqx3wNBUqasy6Jk2e11
6xWAAlkSgEKjAFG0rf3sG2dm1gESbLt7e+YtX7dFAlV5RsaVEb9gcGeuMS2j
ski/a5DUHAs0XArJUBJdlt67934eJoZxWbi45yy+iS0oswX+Xeqy8OmhRASq
tsfhTBjfj2f1xhZCYAfvRmvuSiaqIiGQuz2+MsXuCkwh2xSgAVfbjYf9Z/aE
cC4rrRWF1L65NkSUjjkxzaAq4yVmwsfVUB3uRb5glifAZJpcd0z9SDVEAzHB
kDWUVL5YWVRfBX6SBzyErJ1QjfToah0zBpbv5xPT9YvMlhlOl3MMPxtHS8yX
8ug4rGGSa6JSLvyXGcg2xuadEHS7yRRzhq7rYj8yMZpaTyF3gk0hynUBk9xD
UqG55t4f31JA3Fo4CL5z2yhshsv0Mkmgcx6nDVVi4cI1a6xT7Dljpgj5maY6
OSPLd1xYXuxKeJv3irqakLhAnqzFizmRAb8qlnOzSVD4PbW29OwHuSFXDDI/
x/EtuUgo+YxL1cXTwiPEcjR1P0qMCMztpoWRZGLRFFWDos6nXEA27RkTx1+y
9AzkRuk0Ydx7LGX/zrBYTAXRIL14NtNOyKVmUSGQjMljqcJVWxS0mZo5f96n
JL6xBSmdpdDMda2KixRmhKNUWUH+4F3N0zFt1XaZUCzl3I8m6xSBRaLldhZR
+o+K12cqo3cKVpXiu4TrE1OE2wp8ZAwYtS2YEPoOpxFkKackaSIiMbNkyb5y
hrZUhQZFR1GbmUc3is+ncgtT0lGwmVJIWO1LOZuriHCFc1xqFTtagoBx2ta4
XhyOLTzlnsFwkL5p3ymbCeuM4doJYUXMYklXI4VuRauHkasVNKEnSOfigLMX
gAxI4LuFCDJhvpaPzxhMSZeC5JCUaM9EXuXWhmniBMNwLjGQYCdRqLNhF1EQ
NIfxSFjgnRiWgq59sJyyTykNZuJOgrSBgkCVYckV3ymXiuuQGsXXJPkpTLAp
SJTkS2RyfJgTZ16hANDcX8erOYgtJ8keqUHX4dc/ren7XdNGfZ52O/NDUx7a
wSciPij529SPg+t6SKKSUO8x9MJD/XDJZUzwhQODfnRw9JhrFR/AiwfHBx/g
v4rBIrHcBcgjrY9cfN7ThM5jSoKkqmtJPBd4CRHtCnA1v7XZeBKDjd1IoiZ8
InfXnkgqJWtSYwUYIlkKUodD7/Qy5kVvqBKTjLUCtInS6DzcEc6SMOmgqthp
x+t4AauKOb4KWpXTZ464iyyuML08Km+B6jXn8Uq5Psu16i5KocO0NCkyWUZT
YCIbjh/DzIFbtqRYvyZRzNOdxDUPK1Mre0m5xiuXwkDYnU1iZogZ3zDnmOEf
IzrcSwZGy1ewYqggWmtJBsJcj+1y483Tq2SJU79wilzI4kuhZCpY0VpP6yx6
NzbRxZnnRBPDKqEVsnS7nuTLZkt1eBlH5Yj5ORmwIGnq8zRNJ4OGN5keIfo4
YsU9XcMXuHvRJ4yv57RF3Dut9KsH3qC6OnOyOa303iY5hjMiNc2UAhnlIIv5
hGSezZBTsmNZAFwtmksGRLpOrhBBGeF/2SzcrLexgsuy4JMYasnXFOafrnnV
JC/F42XFafDjBIJGXdwwDA4ZBos41gTQ9RX8KuLFxQsgDlTiPcj6fANFV2L2
Wk13Ynl7tgO3zhj2sKTlUkVOnq+ppRR4hUJGpkoJgQ0sKZfFSaemJKYaqm4r
lSRAAVjAOCVFagTWOELpBqE0XAFBpxZhPnG76EaRouR+Lr3Rc85rWR3IJaaw
QEH4Erewt+e9cmoOm9LbRUtPsKYRM0LhuYXjYtK6V3jcORQIlmohQxzoZqcp
ZkUXS4/UZWVHguPhKomFysnEnwicU7vyzASyGLhGRGxX6hvxlPVJO9XEVXc8
rvgkXL/YN54A6VtZ4SRa0YbRkUZfA9uDXBWJtwMhWxCJO191L9pwAZqq1R/H
nmgQ5ligrlpVo3zXfDwVZ3Y+ggKisFG0cqKRFhuIlvA+8BnYxENQmfhAtLlW
FdX7zCXBHcizB0c1wULwiipvaZTGwNd+coYcMy+PiwSt0xXmssUGIl+q6eDV
DHAUYagMKVNeTFQquKqp5IvzCKnsNlrr0C/rAIeMeoSLfsR2s0MWWCY2otAE
yYV8U5ggnqvn2qX3Or5CVBXcnsJzD1iEmldaNaT4VUTMlh0cbhEgyplexNOE
0usantFM8/N3dbwDbJ1ukDFa8sgpZM6VCziHNjcHJih9EjZBagYTSvgaaHLC
wK+YG0j1coCzeSiWuLKjf72FU4Vie42QL8TNcJpzVI/XZJ6qZWlF2gKIbQHr
CsuzpHpfKR2iKrqSFeReSITb0gYewkHTaV2ASrYmzctyavuanluctiJI57kL
h4thwVHjHWWq0o3kXOWEgVMEQJh0JVBHsY6omAE7XhJ2as45ueeU6GhEKh09
b5hxVfk7ZVzNP8iJSVk5lGMo+UG9364YMZWPkVJIzlhEZKsDWDJFx83LWi8n
KMm0szVUoSN40XgXWJRuiF+Kt2mCqs1q45FvjPWcjaka4UdX6CnciKpAY8An
hM8qXrUs8/jWs3cTxnRgs8wggrMdQNc/uBhmYc0SRZkn4yL3v3PhUCucNO1f
oTPJ875OplcxhiEttkuDFaUZrw6jE62e+oB5DTMCGkU/kNiT3uuz0cvnz89e
nJ6d8mxMvrYZmwhBWbiasbuEec3JnXvlaKkuCiUBlhWMwnz9CxDVnkpuLCph
RS7X1KgmCKs5if0vGgxTxFOiiOF8wyDSKLFc6qQHfB04k4ipNn9mR3f49N3Z
kU0ehm+9Sy1ygV9eHuUhprOa65uyxSd51wiBnEfq5exWqTtnAH9JCS3gIXtU
pQRfwRYIZkGBkKNKrGCib8ShUbrOlXkAfhhNPjIbV0TvT7FTPCLbE+DY4oLv
0pJ5oxjSpsLYrRXQmROGYUxLRUEcvGdar+fqxaTMer1H8xDthaEauR5THhSA
7iCVsCtOFuU8eQS/fZs7SI5jyrkR1LtAp1yXudHznPLk0G1G+EvmWy4C4Lym
VT4Rmm8pujgm3XsOBr++60Lpaq1Ri//Gt6fMSuiMgxaPoontaZJ2mACZs+dV
6KEOiX5fh2mA5pzDO/FzbMdwnYphGhErMU9SMct4BPKmhNYb1ctfrRhEDkqq
KMS8H1bIWRNaNjzr+W2Vq0vjuDkEuz3dMOgIcoMDfkDL1uJ7qF9KQQkywwRJ
oeYLNeBnpsQNaSAeOQ1IYzKwaVzmMHNxi1O5ZczvfUzFYgkR/vBgmt4gfkYc
LexTB0eOJGL56HJORUJF/w9elYzdWjjuvKo2TUdnhovKw/LWqxiHqfmibD5S
xcLUlCJFCE8XChAPwRusyKsD58FGhDkASTbihv/m2eVRzfOMyCZEX7tbRuGO
P1HxUSUN4A1akYCAp/C6kcnVmYzWwamYSmK1JQOsQGqrFzknlc2zZZXYdkWs
XWkcRtUOGn+tgj0a+Gvff4ETh2YQTapW/TYrK2ZYuhGW7TMXFRhNvCiX5dso
qhS3ZazzKgBTieHd4Q/BaILKAjAZVwShS0BnmFRIQhAuCDKJox7gPG+XcoZt
pXc8iwy0REVr/ILEZhmVr2RP2CPb+ZIMKZqzC5dJm4qblmAVl+VtDkvTYlRu
jAPQbiPxoLXt2vjtPA5brjmlnYTaSFQoQpc4+Mi4FRrK6/4S/Sz2zSRayuVp
waNWNEpHXGgtu7YFNjgExqn+sRRpziVEkeBArmwR9xOsI50w8hnaKV6T2G6r
rK5bRc4p5qFY0TgOySFj2uIjK0DP2HS2ncFaJ3QnmCtVjoSNUMHkeLsYvhiW
iIyuIpyK7DmVy+eIpEPHLXZk6wPQiNDEECycEhY0n4PFCvpCkhE3bCqdOYCV
WWqsFvW+lXqpAbHiDBpocvC3BsqPPn/qfF4TOc0VGhCvFsFvaQF0JT3LkRpW
wysAB5Zw7ulKB/Fn6DtS2NdmiFzODnuqaIo4JHAL8tdbC/iOxrxff6X5vB9d
R3hRAMSaIVRmvrYFBZLk1T6y0diTg5ivpkqDaG+5pVUbkLxIttYyA3XnariA
JpLlHY+KeSWWwEGebIQqDiztutBiCsmozlgxbChOzyG9PBncHnhVbbAp3PDo
2hxBQfFwa0lt61Ol81JaZLqwom6ASeOqriRC+2DEkKVwYsCgnc9BTWEg/8vc
suiawUSF3hdymedcpmgQkiJCsX1uR+EM4tv4Vvrhv7+nKygChTzMjrgTbc5p
5paYWq4lxCojzLUofzSLb9YMZuJT51NpypxF21z+kmhT6nBZ0ZZbWYTYQ7SG
YzDMUDIRxWFdzjOCY39sFIRkidFj27Gpx7fJwcebM8QFJN2LHkOinj4dZabk
6TIlzAIuupYrOD/FA7a82mJFH9cqiGm0kRktHvQsrRVOA/qlifE6QxMVUehM
sakLM7H1EQ4Fblt26pjvpY9KA6BbK/FDpnKQgrBpcC1ti/wOtKf4dBzQYE4+
+xHLSy11J5zaLVz9a0NxOxa2V/QssGJYtKMbgc8N1uEqNqtGusXKNfU4cGuY
5vIkl5kDY86HBfosd9sgK3S6jmYbv97skj3Dizc3EQg3LrRiQ8stSj0tnjmW
Y6p6jdFnqeIFqZVa72oqMG6ll3j9Mwcfm2/gMnsUCXya5sbAg7uaIuLFOILt
gi4QTK0tMxwM/bIr95ix381nDnuzX+UX+7GbKmRehCV/TOkFDnnyzXjQPDJP
WUYFfOoxZYYK2CA+UuSlj/2Ls8sn8E01N6Um3r/PkeD7957378txtvpzcZ4Y
nlQ9TdzbtyY86Yw9CvRwaeKU84StuKS2Y95hp/svMXGOHaue+mW8SCx8jK9P
luYtqVt7z7y3c+aLaPUPn/E3kvPlvzx7vmvT3Wd2bDann91B4Wa6/X02muor
MsjmP28FnmM+XPUK0FfFciiaLle1Hppdt8eZDzuDfwnaN+vwPady3UML8pQp
8UE7VbEOmhi2z0p0d7M/quvyjz//7A7CQLrq6V8IQnauGDuFuaE0kzvdKqYg
uZD5VQi74a75whDmcbT8h8/4FDMyEUZ9s93B98yUOW0T5TmlcTqRklUz1mTO
4oxbu2asoLpUbeOfQvEaQ7tb1F2VY2Sr5mryUPci8vb/U4aPprQWqLpzvzPj
w7S18zhxZJeao5m1e61CZ+cqINw2EMFLFkf/2POuAACZ3gjvpgW1LsRNRvdE
5vVqRYBzh/dajt36zx9LFBSSQZkdQ7Vk2Iz0vMOzolUE7754+cbPG1EbJwSz
4VdFWWOiC8kIMkQ4OBJHf7RT36Sc6eqlN9+VFUzOtC4t766FNH7bf5ZmYeKx
dxw0lZzoiCUZQtWSq6ZqIrL3niwByfzDZ3ihuYZvs3u5iZOX6GYlVk1XMtz3
nuw/X3ScPns53CEvR6YGNDkPxSlP13WnyVWCGXzP4s1GrkWG6CEHJlApQilv
f+9V+CepSOlsQ4cb/9zNLSn8V3Y501fW2+XSqU8iURdVrJMBCPae+j9DcJqJ
36kf49xF5aUYur9j6js15n+J2ZuyqDssJVM1VTxCGnppVoLuzOdzm2iwey0s
SsS/2CF47qBR7FgH54niOahJWB2qErPkaivwjRQdgEXh7l8XFwzjX2xpLKE4
BXtfMzjH7iMj6B10m8+IVKheaVPufLmotBbbYy/srjVC6I9/seUhnWBEmR27
eSfnFFA6kRu5g+LN4F9hoC15pFE3qNbJLZzJ/jpSwgP7g9aA1E1Kdnz7+kXh
hmzj3pBRhhZ/i+6z7Xr5xfPofjHJHP2T9p4fK1wWUDHO7ZgrFgmTPTg9+546
vpQvnLszKmIJT3DOTb5O6UEDtTYt19WiskDeb9oKlUg1O1YGqcj/YOlWJVb6
GxrCGfJ3ZVeqdTGVGspXo8OGMmnpt5Jz8o52yw2JVRBRZcSq0Aq6A+AIA1k+
uSMmYC2s3IhXxJXbJf52sgWc8lJYScyEBPvno/NLP1tFGEhl7pykpJpzV8zx
TvlbVMMKaItwDrQeVPntgsrr+LpAcsNSsUf45slptxnCg8QG3GWvCjXROA9d
u+cY4iqV5u6gcq0I7ayQFv0epcNXdN7gMQFzod24fHX6A9/YMCon/DUuFf82
BF/RChA9nAuzcRLaIU/bCtCvzy7fIMLg2fJTsk6XzGoPR+nrsyNE0gCGghqr
c4B+YgJI1zGmncn3PxN0gV2Nx76DtXuM2Kj/Sfik/2GKASp2Hnx0caqsyRyZ
x7DSuAJfvrj81G3/E5XqPf60nDYEtxT6QHDTh3Rh1vaB/Tx4LrmO6vW6P44m
H6mYq4Zh/vonLVX/RSpomdL1EYf6c3IppZLnKk86aWVUtcwtnxSZAkq1yiAo
eGS25VKdbiUlplbukwj5hsJMbXSN9pEU64BKShKOn2LAKZafE+JZz7lmPmCj
rLQKZLIhxzpXaM+uBWvFBFxcYnyGWRJQF9wWGIol43JdmB33bvj6xcWLJ48l
b9S8R+OPuHQu44DpLSLegt5SQJc4C+AME6VzrIeWyNL94uN/Scll/puzM39o
o2s9W4sLqwyv5rmkcA42w1c4Q4rDb/FZ1XpN6pTdS6lzT5ljfN9KqwOtPMqM
uiT1lLxj3/TP4f/aCrVrQ17M6KCZhn/seQzgeOybq0v4nX+C5mP/+tGg3Z/1
+93mNGhF7W4rflSTF8TLbR5HB/djyp3UJ8Qr7D7ReuyHNfxqZ8WMY4uPrS+G
PXjtp7vqN9z5Jc0lDLBbl2X6CI8ypG+rodmLP8dcqHu7oohs0LSSOf229+sU
TSKURnXOeINhE+59VTcXPT11uTYTjEt/vykcF+iqgYAoVwyTxFS1TxtGS0eT
nc+9GsB4vPYaB2kBrsuAK15zcVYMU9+jjV+BNg9aUdguVTPQR+5vA4jisR/s
eH/fNvwABjKcLHgFX14Wx7PXOFo4mUbQ2DGbvcYBc/np11Z5NC1oPACFba9G
8GdXI+GXn/dspQvS765H9h1J0NvZ0N5t4E/YfozlPhbx+00cv2814s/xwUPa
+HLHI3u1cUcDe7Zxdwt7tHH9yI+6zWa33Wp1g1bYajcnzaAZdMd78K520G11
p91O2Oy02502/NuedVpN+KTVCuNWsEcT8Fi7GfbDKAz6waw7Lja5TxPUa9AP
YdhVzewzETN4aiZsdqMgCOD//aDfjbv7TIT768x67W4H/8UV6HZ6/W7n0Z1v
/7zz25+9L/SdIhWKOB8W9QCbyEdM8/KdqKkgxEgbI1ODITawbvyxRwKH+Kwy
+Mt3NUoHcVn2PEFJi09Q8dFE48rwB9uQct0rbYSUhqA16IfhoBV0D1V/eMvh
/DJYFGv4uWXT8hgoYoota88oM2LVK0TEEGat5QVFnlR82m3UZaiq3rBp7LIF
n5nmPsLbolxrS/nRmZ8y73TeXKfz2P5VfBP5tCwQbXW6q2RM4efLXpWt/kkz
CN0tedg07nvoZ91KPRelAXQf56bZaDSInEvPkVzJdccPZ1VLUiU8/pD5fPG+
HDmgss7tNOqGJykWuscDyl6rvJqviUVoMmV6x2YvqE0RYzdXjk5zNNb685Pr
ZFXzx6ablMAN5wJM0ygNF9/++3+OaeSCDucaRqwTl8BmcHT2L3x79Ootx9/K
3cpGW3t52RBsvxvG+cw0M52jX+ntlZtVTQZkeYa7R/77583rTFCM05gxfGxQ
K/NxTvbUyTf07Vfx+jpaZZqgixaxlou6SN9ww9Vz+WNGrqBQ0rdJGCRfD+H2
qOVqp8ZvV0/QxfDBTU41rMqZx+8f+TdSFN0hcJmIc0qAR2EBZSKJ2xVl5vHb
As0Tu+6xXEV5kcGYWOxHTmIxz1scgIz2YJLaCBArmZZPa8MZ+YPN8b41yMk/
nNN7O118pRkM+rNOM2rPZt1Js9PvBhNtodvqx5FpgOI63RbCTh8b6EOnYesR
GtAXZygU3l74UnSHg0SN6S6RkI7F3xlgC532YDqJJ5P+eNDvTXqt3rjdjtvN
WW/SbXUmcf9u3Qlb/gZzyfDCCGmGO2FmXTNdF9SKsAsL9tNB0GiRXRWg9SLJ
19F6QwXogYzNS6pP3BRkQNgzAtFVO0q99VCXAKWj0+hwb7/TTdLC4Ronf10c
Jr4ZqK0JeAi88wjfht0OOmG30w5hx0z/HJgEv4XdgoAcOjdMIDGuUwSpopQo
TrVwhEWynmyTjZwmK88P6IMD/7FfEqh5YhJKGozjWb/X78XjKGjF4aQ/68a9
ybg9DmbtbjBQUrSt5AlKqCmO+81ZJ+p2J8FsPOi1w8FgEPVn02g8aDX7g9Z9
1FSmKp6XLIVLV+5I3B0X4gobzQir7v2MzqECaf0nJRZ+dlYLNLV7Vr+08Hmp
7K48f7Lv0ncDMPmQol6dvfDP82fX32em7UaTyPr+M0QzlcotX0TBIQ1HghFR
DhMHdbynNtL4ZJ6ik7zs03TT7MVxvXIai/xv3vljfDk3GRT92zUm/NbH22Qu
SdY5UISXCmrkIhlyDFumbdDtFdpHruoi+VtLBB2OFB0YKwWJiJvgUbLjKKPj
aEw5eeSlhzqVG4GZXa2jxcKB5aE2GLon8mcgRI4afrsnNcRivJTgqyHKiDns
czS5IJ8EXf6T2sAb2qPf5/r9B0mabjtsk3dYwdfO8DZhtU5AYr7ga/LjP4Kr
3lGEeaccIXuSCiLjEcBrIlJ5ikfhGKvgWqUe8a+O6b+XG0wVy10YlGm8dGPA
2V+E5aRJnvh7Ro0pYeUh8VgdE4gg1oAZ8BZVyAapdG4TFQ0wUGhk0APq6Rqz
oxHN6jN8VLgIxwYcRclAzDlknlxd1xGGYQ4StMYgEnKYVVUkv0J+aAmfKF4x
AvTY9fP7tEUdgcI2kwAsbETFLOhKzjK+Ywb/R5L8d4mY5wh6tU1yt3eW8cv9
Gu0C2y4YdG1xJ3zu0ZgGZn3scpkp0OePsuJ2WpA2wk8Ei9CRL988w8lkqS8j
wJEq0qJixGz2MpX+kF0YGlJH0FWOJnX2gOCSHUx2/IrBh2G8vAsYc+BMV9cM
Qf3pmpCWjVMFnQDnyJ4FBftiDkRxCj5dUrGLLTG3sde3K8RH2YjdoFMwyM9U
wQCvQOkkI3TMFJUMRR+pXNQ/iJR5nJkAUMEyDJfTNSKuIica5qRfuYH/IVeC
9PPTPRd/e17d+Xdc/j2kiR0XgHs1cf2I/Pf9Vq8Lq9pqtdot/L27V+/NSbPZ
DLqDdqsb9OD1Lujd3QH6sJvTbmsvDz758MNm3Aya4sXvgVUHzbR7HTDo2r1w
r0a6g27QnYTNdgCvtWEcUxhRGz6FEaFTfr/phHuo+Ls97uYHGM4Y6ymIhilK
lO6Kv9fGHFckzjOEvT6wTxs++vMlkm8UrcfpMtnQJdVD28B4ZWgjaIQHxQf2
bmPEftvHFQ/s1wb8HFwsp1u8qAbmONxuUnZC3n/tZuzm+POq6Lltg33bBboH
LbFHxkzYDIN60KwHnTdB/3Gn97jT/ovhGYnLZvinKw0EvWa/WWyg+xh00Gbz
L9UDrPfhBDWxKNYsQfgDEBBYOW7no4GPd5fHRkrX68ByEI3mPfLgotHFI/7o
XFAEwhXPRvBPPMf4w4kPOsEngYL5DHrGbcVQoRXX9kN23ep2ex04ct3ZABhH
d9KadYJZBxh3bzxog/n0qDyLY+mK2qnrWPgzOCyv6ljWsqrzz/VJmq5pAHXq
vNuJp1EnCsJOrzcJx1HcD4EL9WZxq9XvNYNon/MeNKMoavU6cTAed8adaRw0
+9O43RpMmv1OJ6iewK0zkhaOJIg7YTwFrtMMgAhmvdkgbjen09lg1moH49Z0
n5FMBuMIBF8068XNSdSD/8WDOJ5Mm81+exoMJgW2pAa/64WRHywviRRyV68H
qJ0dCCFxC5yL7Kqi7jZUiex7hLZ58z7ZbR7cIYvvnAn9/A8SxlYc91qt3p59
djutXqvdHff6rb4I5P6er7ZBvIKEHICFbO7e93y1E7bCMG63SXa3WHbv+Wpw
TiL+zIr47mDfuVYI+X1fNboAiPn7qWovQX+3pN9nx3eKeZSS+zXgyvhTUsfx
dPOX+zcgAv512DgNH6Qg3C3d921gp2S/t4E7t2nnbekXL/cV/u76FKsSUDKB
4sTrMb08LQVnSugr4SBTQbIxI0Oh7YkvyjUoRcVqtKaQi1x9cJ5KLufn8h0D
4siD7EipCtkTK1MQB9HcpbIyFHsL302T6GqZIl4ZdVaI8XSjO5NMRu0MWsBY
rVPF9WZIWIjrOjWBHcYHEjkeCkXawfZB2hxS9B4HhtDlq87d6V8vBNECNkAJ
6iKFno54WOy0MB1JqnXmFqK0HfMrGJJASyVJQpkvF3Z2gASCv5WQllwukSy6
6TFn/f5LRsLecSHXiab2Qm4ExEaFd8ybf7+H1r9DYymGTRR/DkRdcW45SmtT
sT471mjfdeLXc1ttXu+194zw2esh/PkjIomdUf+eiGLbzN8dWSzvW/ZYxa32
jW+OEd8Vz40TYYzeR/l+z1YQNTQ2LJW4DIbx0Cf7t+JyjoepdGAgdiVGstVp
TvbVlcCs6E6deMQwnILuBHYW/DvbV1dzgio5YlI8LSE2vK/+RP23Q1C5WvQb
qF7o6UENbm+tsRdyoGWzhRGS/VbUwhjJXtClCe6t8HZg6B3UW2e9Nvw765lo
yWBfdTCIms12e9xqD5q9ftgMOvCfJrQ1boW9yX7uIphOa9wOBuF4Gk5a8SRs
96NwEIZBJ47G7c5+LjTUaYPxrBeB+h6HnUkAo2n3BoNmh9dm790BLRr2Atai
A7+18Pcw7oEN1W09aE2ak1Z/HNg1mQTtcDyIxtG+jYRghLTH4/6kB7sUdKN2
azIYdIDLD9qTaC+7HH7GYFQPOr1g1ul0B+NxbzoBgp8N+g9bE5A9ZCRMUfMH
CpkAxYRBG6cZ7kv2rWlrbFcj6kaD6WQ6G7f6YJlH+5I9yPd23I6DuB/3uyEs
R38STseTXhMEyd67025Fg6AFx3caD1qt1jju7heQcL8dc/cTuyMOv9hbSY0u
Xha5tYkvVr2LY15e14GL1lGuO/HHqnLxIydYPFXv6Q78Q4KJnSUIoLPlAOSM
6r+Zyg+ZKJAVWfNgnxymEiAmV16RtAzfHWm2vC9X6hKr+NCIZCDwsN25PyY5
pOtinVodZZGAZlOmtXsffXfQslnFPyxs+d54XhvHm9+fe8N5Hx6I/MWMVkkq
N97WPmG5GJO7nw62d+SuE7q7fp+km/dpRtG7xcgeaCDDwhK+X2oAiKXdAR7U
7lS8RPDm5Zf8vWdifkijvPxmuMOteucP6PRGGrKYe9j7MMuCWHzo+ypGVT4+
9P2iPN03fMvfz/Wzb4T8QwkLrE8q+Jg11tnkgUTVbzYH/2Ca+p1EZdUJ1hMe
uqlFveLBRCl6iCoYD32/qJD8NyEqRkBvzJPxAykqbAFFtf6V2dTfqZKZn6Ju
9tD387pce1+90vz8fUod/exJUb9b/zMJJeQbdeMrBZMHfWBUaIB9mK5fFD+u
i2szlztu3KMUj7rdrLYS0sLFm1hV22hdoHhqTG+3f1MJZ0EF4rgCKXrkGzIG
jJRJJluMVzHtYnFtjG2k8iY2ZomcgKoUUhkPE7NENY3EfzhPPsa5UCwbgWlK
pqQStcllSaiiMntwzRjI28gD4UfzYERGWxZldmozpKnQzJJzB7j8to5ych1P
PuJbC/Ev47Jn5aG4AO/x2kCVGwAQRT2S+uHewZv1NsOJfu+U1coONJQuh9KG
5dQnWmtdZpvlsbvMBHKaujqjmbE5iOd4N/7h47T/7bN6/6vv5r9cqRZr8HAx
Vtl6/QxoLH58UOHe09cZbtqnC4uD5O078wWBjvPnoOr+5UMw+vg+vDm/vr69
+PHFWfdHOwBGmKNHKxVyB4jNL7JF0cjNZxKhYFfffaHwqm6IeztRYOxlHvwT
KK3z+YFfQ1RRimQ7KJx88xf/8nM+zppOsl5xcSUQuhG43Cp+6Y4dRHDbizqt
3esP3Ze5ZdZVflpe5e7VV18Vt7p6p3Mb7QTf6tsJP4M/xUQGA7DqGhMHGtc2
XK388zStiIbXvYe5wQONaLWyO+nG4x8IGvQZh076Z0yYhf3E4OrC/h2Ep63L
67OX18PL6OrdkygdfUzefmhfXzXfrJ68uv54Mjwfnixevf32zfvx8N2Tby7o
mw8f/vbku7PRk9n6Fv49Pzn5eHLy6e1fht9NTuHvs6vF81+efTg7gd+/Td+9
ePv67bvRs+DqqjOpf//+8k138/n1k+mo9f2Ht6+i9g8f5j/Uv+18t3qy+vb1
aPS+//TDu6vNj9+9ir67vXl58ZdWffH02xetHwazZ59hmMtscRLVn39affP6
l5c39R9vlvVub/zp6fzDdrKJfxm+Om0HWff9cNN7Mb78vvW3m6fzzxfbvz2Z
3cTtIM6+yp0Eu37PkuX2swYaHhRvCpxt0Ed2bMN2LBXRnx6UogqwoEpx+ePb
p834h2HyMnn67ffBd8mz0dPr8ZMJ/n3x9peL4EXydNCAh1aT1nN66Nnb8+b0
yfe/wP9vL5KbJHp33rz4kH5+8eHt5xe/TJovT39sQyPz+BtodNEJxk9usovF
efCX0UX3IrnILpYvgh8T/B0avvpw016eP79+tnr6dvvqh0/PX/3ybfDk+Yfr
26d/Cz+9++EqaAfdH77Nfrn5zlk3nlUuPcI/R2gbPq15vBkw35MJlReQzytu
M89Gp5dDrTYIj6og50zHcqg5A+kUH9SLQ2CFt9oyqwLzBkYsOSmcGZxuznjD
Wrwo1/TukASKVtLFeCesPBqQE97rBod+0D+UU3X9aBg0g7D76A4IDv/YKfV9
HUdThO0R3fPXL3e/GC9WWDN7WW5Aoq9gAGHzpN1thu1h96Q56PVPz5rD9gBD
M5phs9VsNzvNbrPX7PMQndRjeX9wMjgJzztn7R5Gh513ob1Rf9gOOr2TTq/b
Oh+1OydnvY7qqoNhp0U4CJ2g1+v2R2EwPD8/6bc7w053eNLp9M7g9UFPVdNh
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
UE83/rHn/V98MRbdL2cCAA==

-->

</rfc>
