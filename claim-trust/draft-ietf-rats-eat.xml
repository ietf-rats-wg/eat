<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="September" day="23"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>Some of the goals and fundamentals in the security model for attestation are not the same as other security standards such as those aimed at privacy (e.g., TLS) and authentication (e.g. FIDO).
The security model for attestation is not described here.
Instead see <xref target="RATS.Architecture"/>.</t>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC9052"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for evidence and attestation results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of an EAT. Many of the claims defined in this document are claims about an entity, which is equivalent to an attesting environment as defined in <xref target="RATS.Architecture"/>. An entity may be the whole device, a subsystem, a subsystem of a subsystem, etc.
Correspondingly, the EAT format allows claims to be organized using mechanisms like submodules and nested EATs (see <xref target="submods"/>).
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
In the EAT context, "entity" never refers to a person or organization. The hardware and software that implement a server or service used by a web site may be an entity, but the organization that runs the web site is not an entity nor is the web site itself. An entity is an implementation in hardware, software or both.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-detached-eat-bundle">
        <name>CWT, JWT and Detached EAT Bundle</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "eat_profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle, <xref target="DEB"/></li>
        </ul>
        <t>A detached EAT bundle is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where otherwise explicitly stated.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an attester generates evidence.
Evidence is a claims set describing various characteristics of an entity.
Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry evidence.
The evidence goes to a verifier where the signature is verified.
Some of the claims may also be checked against reference values.
The verifier then produces attestation results which is also usually a claims set.</t>
        <t>EAT is also designed to carry attestation results.
The attestation results go to the relying party which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the verifier and relying party are not separate and thus there is no need for a protocol to carry attestation results.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results.</t>
          <t>The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow.
They are a matter of configured policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the detatched EAT bundle (<xref target="DEB"/>), a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
Any new format that plugs into this socket MUST be defined in a IETF standards track document.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations MUST be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for claim keys.
JSON-encoded tokens MUST use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but MUST NOT be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce MUST have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the "oemid" claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel-hardware-model-claim">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname-software-name-claim">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="secboot-secure-boot-claim">
          <name>secboot (Secure Boot) Claim</name>
          <t>A "secboot" claim with value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
"oemid" claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an attesting environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded detached EAT bundle, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
                  </dd>
                  <dt>"BUNDLE":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded detached EAT bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.
A detached Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set of the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
              <t>The encoding type of the detached claims set is part of the carrying protocol and varies from protocol to protocol.
For example, a detached EAT bundle uses mechanisms defined in this document.
Other use cases may use a content/media type.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, a hash algorithm identifier and a byte string containing the digest.</t>
              <t>The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>.
Either the integer or string identifier may be used.
The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
              <t>When decoding a CBOR format token, the detached digest type is distinguished from the other types by it being an array.
In CBOR encoded tokens none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "BUNDLE", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like an EAT nonce (<xref target="nonce"/>).</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in evidence or attestation results.
When these claims appear in evidence, they SHOULD not be passed through the verifier into attestation results.</t>
        <section anchor="cti-and-jti-token-id-claims">
          <name>cti and jti (Token ID) Claims</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent in EAT and carry a unique token identifier as
they do in JWT and CWT.</t>
        </section>
        <section anchor="iat-timestamp-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EAT's may be used in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="claims-that-include-keys">
        <name>Claims That Include Keys</name>
        <t>This document defines no claims that contain cryptographic keys.
When claims are defined that include cryptographic keys, they SHOULD use COSE_Key <xref target="RFC9052"/> in CBOR-encoded tokens or JSON Web Key <xref target="RFC7517"/> in JSON-encoded tokens.</t>
        <t><xref target="RFC7800"/> defines a proof-of-possion/confirmation claim named "cnf" that can hold a cryptographic key for JWTs.
<xref target="RFC8747"/> does the same for CWTs with claim key 8.
These particular claims are defined for authentication and authorization.
Their semantics don't translate to attestation and they SHOULD NOT be used in an EAT.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a detached EAT bundle.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the detached EAT bundle.
No mixing of encoding formats is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a verifier must implement.
The attester will select one of them.
Since there is no negotiation, the verifier should implement all algorithms listed in the profile.
If detached submodule digests are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations <xref target="sec-con-freshness"/> requires a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver MUST accept ES256, ES384 and ES512; sender MUST send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID MUST be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce MUST be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver MUST not error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and MUST use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition MUST have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the "cti"/"jti" claim and the EAT nonce claim.  The "cti"/"jti" claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The EAT nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modifie detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "eat_nonce"</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: EAT Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Name</li>
            <li>Claim Description: The name of the software running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Version</li>
            <li>Claim Description: The version of software running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Manifests</li>
            <li>Claim Description: Manifests describing the software installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Measurements</li>
            <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "measurements"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Measurement Results</li>
            <li>Claim Description: The results of comparing software measurements to reference values</li>
            <li>JWT Claim Name: "measres"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Count</li>
            <li>Claim Description: The number times the entity or submodule has been booted</li>
            <li>JWT Claim Name: "bootcount"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): uint</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052" target="https://www.rfc-editor.org/info/rfc9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose/">
          <front>
            <title>COSE Algorithms</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-22.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest" target="https://www.ietf.org/archive/id/draft-ietf-suit-manifest-19.txt">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <date day="9" month="August" year="2022"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-19"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-21.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="16" month="August" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-21"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-04.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'948f8860d13a463e8e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric version /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / secboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /       258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /     259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / hwversion /   260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /       258: 61234, / PEN Format OEM ID / 
            / hwversion /   260: ["4.0", 1] / Multipartnumeric version /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'948f8860d13a463e',
           / secboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / oemid /          258: h'8945ad', / IEEE CID based /
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /        266: {
                            "OS" : {
        / secboot /            262: true,
        / dbgstat /            263: 2, / disabled-since-boot /
        / measurements         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "submods": {
        "Android App Foo" :  {
            "swname": "Foo.app"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "swname": "Android"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  /
/ Note that 602, the tag identifying a detached EAT bundle is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines a message format for proving trustworthiness to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain reference values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-14">
        <name>From draft-ietf-rats-eat-14</name>
        <ul spacing="normal">
          <li>Reference to SUIT manifest</li>
          <li>Clarifications about manifest extensibility</li>
          <li>Removed security level claim</li>
          <li>Changed capitalization throughout the document for various terms</li>
          <li>Eliminated use of DEB acronym for detached EAT bundles</li>
          <li>Replicate claim optionality text from CWT and JWT</li>
          <li>Several edits and clarifications for freshness and nonces</li>
          <li>Correct eat_nonce registration for JSON-encoded tokens</li>
          <li>Add security considerations for freshness</li>
          <li>Change/clarify the input to digest algorithm for detached claims sets</li>
          <li>Removed EAN-13 references and IANA registration</li>
          <li>Add section on Claim Trustworthiness to Security Considerations</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9+XPbWHYw+jv+CpS6q0aaISlLlteke6KW1D3qePssOZ28
eV0uiIQotEmAAUDLHI/nb//Ofs8FQMmTSareq4ormRYB3P3csy/j8Thp2qyc
vc8WVZk/T9t6nSfFqqa/mvbwwYNnDw6TadY+T5t2liSzalpmS/hwVmfX7bjI
2+txnbXNOM/a8SJr86ZNktv58/Tt8eVF+ktVfyjKefpTXa1XyTfptCqbvGzW
zfP0d5u8+R08atZXy6JpiqpsNyvo9/zs8sdkVTxP0rStpvod/Zjlq/YGnhzh
76aq2zq/bsIXzWYZP5hWy1U2bd0X66vwrKzwUX09zWdNu1nk+llbtPjj8iZP
z0r4sUmPW1xW1sIc08vqQ16mu2fHl3tJdnVV5x+fp/Ajyeo8g8mXbV6XeZt8
uIX9KuYlLj5zzadXVQ2LnsFGPU8PHxw8HB88SLJ1e1PVz5NxWpQw/ReT9MW6
nF0tslkOM+TtfpGt67yc5tGrqoaNvsin6xqnCTOu6k364sUJvMqXWbF4ni7m
i39p5IOW3k9gB3SknybpSzj7Tba0cX4q6mJ2k9XuBY3yf9bZAlou08t8elNW
i2pe5A2sdzrBfYWTyGFPHz158ih9WdX5TbVu8vS0Lj7iNKcwOMwzK9PTIp9X
uOv5HHbjeXqSLYrrqi6LjI5rXbY1fPnu4hh+rm4IIHf+cJA+ffQ0ffzoIH0C
4LgTFrfkKf7Lf7bF5D9lfn55P0/S1787rcpqfrMOO/lzXufLTfzm65d4+ORZ
+mNWl3CO1Xp+k76tspkt0b2g9cxwQ98dHKVPXlxECyyLNp+l/wrQMauWYa1/
ODpKDw4fHaYPHz88ePosrPS3akaT7S81gSvV1sXVumUI4jX+KS8/pD8U9Yeb
avEXXd+PdbYub6rrvE4vzi/hqcJv74WMegO9TK6kl39pinZybV9OAAB1tMub
apk16Y9V0wCU63DH9TJ9USxxpaHLlj6dXPOn/5LVemDc08tivs4X6Q/ZYgFX
Jq+rxr2a3mTw7i3+t541VWkXAMAgXwAwpBfVdXsLN5HwTuMAZVr/ATHVvzT6
6WSaWc9vMtjA6Yf0HUy1vi1++xDGzNqbAlb2Q43zrWdhf7OyBNi4bKa4GWUx
v3PRN/T1pLWve+t+k60X6Uld3S7yTZKUVb2E3fmYIxJ8++PJ4cHBM/nzycEj
+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
40PfL8rTXcO3/N1cP7tGyD+UsMD6pLKwWWOVTR5IVP1mc/AvpqnfSVRWnWA9
4aGbWtQrHkyUooeogvHQ94sKyX8TomIE9MY8GT+QosIWUFTrz8ymfqNKZn6K
utlD38/rcu1d9Urz89uUOvrZkaJ+t/5nEkrIN+rGVwomD/rAqNAA+zBdvyh+
XBfXZi533LhHKR51s15uJKRFK+gK4jfXBYqnxvR2+zeVcK6oQBxXIEWPfEPG
4JR5Ne1iQVqMbaTyJjZmiZyAqhRSGQ8Ts0Q1jcR/OE8+xrlQLBuBaUqmpBK1
yWVJqO46e3DNGMjbyAPhR/NgREZbFmV2ajOkqdDMgnMHFlM3sooqFONbV+Jf
xmXPykNxAd7jlYEqNwAginqk9an3qMw1TPRbp6xWtqehdDmUtniFqrPU8ZXZ
ZnnsLjOBnKauzmhmbA7iOd6Nf/g47X/9rN7/4pv5zxeqxRo8XIxVtl4/AxqL
H+9VuPf0dYab9unCYi95+858QaDj/Dmouj98CEYf34c3p5eXt2ffvzjpfm8H
wAhz9GilQu4AsflFtigauflMIhTs6rsvFF7VDXFvJwqMvcyDfwSldT7f82uI
KkqRbHuFk2/+4l9+ysdZ00nWKy6uBEI3AucbxS/dsoMIbntWp7V7/aH7MrfM
uspPy6vcvfjii+JWV+90bqOd4Ft9O+Fn8KeYyGAAVl1jYk/j2obLpX+aphXR
8Lr3MDd4oBEtl3Yn3Xj8PUGDPuHQSf+ECbOwnxhcXdi/vfC4dX558vJyeB5d
vHsSpaOPydsP7cuL5pvlk1eXH4+Gp8Ojq1dvv37zfjx89+SrM/rmw4d/Pvnm
ZPRktrqFf0+Pjj4eHV2//WH4zeQY/j65uHr+87MPJ0fw+9fpuxdvX799N3oW
XFx0JvVv35+/6a4/vX4yHbW+/fD2VdT+7sP8u/rXnW+WT5Zfvx6N3veffnh3
sf7+m1fRN7c3L89+aNWvnn79ovXdYPbsEwxzkV0dRfXn18uvXv/88qb+/c2i
3u2Nr5/OP2wm6/jn4avjdpB13w/XvRfj829b/7x5Ov90tvnnk9lN3A7i7Ivc
SbDr9yxZbD5poOFe8abA2QZ9ZMs2bMbZLXD2K//pXimqAAuqFJc/vn3ajL8b
Ji+Tp19/G3yTPBs9vRw/meDfZ29/PgteJE8HDXhoOWk9p4eevT1tTp98+zP8
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
dp5kyGqkZl+qBJh7VE9J57Hn/V/jaJmxq2sCAA==

-->

</rfc>
