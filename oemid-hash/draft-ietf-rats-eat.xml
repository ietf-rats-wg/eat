<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="April" day="25"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message or token made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/>.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of an EAT. Many of the claims defined in this document are claims about an entity, which is equivalent to an attesting environment as defined in <xref target="RATS.Architecture"/>. An entity may be the whole device, a subsystem, a subsystem of a subsystem, etc.
Correspondingly, EAT allows claims to be organized using mechanisms like submodules and nested EATs (see <xref target="submods"/>).
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>, except that in the EAT context an "entity" never refers to a person or organization.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Full tokens with security envelopes may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EAT tokens for specific use cases in follow-on documents.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>Base64url Encoding:</dt>
        <dd>
          <t>Base64url encoding is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities. An EAT <bcp14>MUST</bcp14> always contains a Claims-Set.</t>
      <t>Authenticity and integrity protection <bcp14>MUST</bcp14> be provided for EATs. This document relies on CWT or JWT for this purpose.
Extensions to this specification <bcp14>MAY</bcp14> use other methods of protection.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines a new top-level message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.
Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url encoded <xref target="RFC4648"/>.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel-hardware-model-claim">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname-software-name-claim">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme item to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot-oem-authorized-boot-claim">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in ROM, a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>SHOULD</bcp14> always also be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URI for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature <bcp14>SHOULD</bcp14> be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest encoding, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="detached-submodule-digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EAT's may be used in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is a full top-level token.
This top-level token <bcp14>MUST</bcp14> have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It <bcp14>MAY</bcp14> be a CWT, or JWT but <bcp14>MUST NOT</bcp14> be a detached EAT bundle.
It <bcp14>MAY</bcp14> also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each detached Claims-Set <bcp14>MUST</bcp14> be CBOR-encoded and wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each detached Claims-Set <bcp14>MUST</bcp14> be JSON-encoded and base64url encoded.
All the detached Claims-Sets <bcp14>MUST</bcp14> be encoded in the same encoding as the detached EAT bundle.
No mixing of encodings is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, even slight modifications, such as the use of a different means of key identification, are a divergence from this profile and require allocation of a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this section and adding requirements.
Such a profile <bcp14>MUST</bcp14> have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and it's description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEMID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authortised Boot</li>
          <li>Claim Description: Indicate whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicate status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
        <table>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="media-types-registered-by-this-document">
        <name>Media Types Registered by this Document</name>
        <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
        <ul spacing="normal">
          <li>Media Type: application/spdx+json</li>
          <li>Encoding: binary</li>
          <li>ID: TBD</li>
          <li>Reference: <xref target="SPDX"/></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Media Type: vendor/vnd.cyclonedx+xml</li>
          <li>Encoding: binary</li>
          <li>ID: TBD</li>
          <li>Reference: <xref target="CycloneDX"/></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Media Type: vendor/vnd.cyclonedx+json</li>
          <li>Encoding: binary</li>
          <li>ID: TBD</li>
          <li>Reference: <xref target="CycloneDX"/></li>
        </ul>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen">
              <organization/>
            </author>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald">
              <organization/>
            </author>
            <author fullname="A. Farrel" initials="A." surname="Farrel">
              <organization/>
            </author>
            <author fullname="Q. Wu" initials="Q." surname="Wu">
              <organization/>
            </author>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed: , , and  for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson">
              <organization/>
            </author>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes.  It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl">
              <organization/>
            </author>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck">
              <organization/>
            </author>
            <author fullname="T. Howes" initials="T." surname="Howes">
              <organization/>
            </author>
            <author fullname="S. Kille" initials="S." surname="Kille">
              <organization/>
            </author>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/docs/1.4/json/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'948f8860d13a463e8e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'948f8860d13a463e',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'948f8860d13a463e',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'948f8860d13a463e',
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardize a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-19">
        <name>From draft-ietf-rats-eat-19</name>
        <ul spacing="normal">
          <li>Prefer the term "encoding" over "format" when referring to CBOR and JSON.</li>
          <li>Separate sections for creating and consuming UEIDs</li>
          <li>Base location on W3C reference directly and WGS84 indirectly</li>
          <li>The option for a hash-based OEMID is removed</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9a3Pj2JEg+h2/AlftiJZsknqU6jlbbasldVs99dqSyj2z
vR09IAlRcJEEBwBLRZfLsT9kN2J/y/0p+0tuvk8eAFTJ9vjGvRFTMeMWgYPz
yJMnT75zOBwmH56lD5KkKZp5/iy9usnT8yX82KQnTZPXTdYU5TK9Kt/ny3T3
/ORqL8nG4yqHj+BHMi0ny2wB302r7LoZFnlzPayyph7mWTOcZ9hBMsmaZ2nd
TJNkUi7rfFmv62dpU63zpG6qPFs8Sy/Or75LilVFj+vm6ODg6cFRksHLZ+ll
PllXMJ3kdvYsfXtydZm8v4XuitmyWM7SzM1xMi6rJFkVz5I0bcrJs/TrTV5/
zT+m+aq5gSfH+LsuKxj4ug4t6s0ifjApF6ts0rgW63F4tizxUXU9yad1s0Gw
cTP4l62bm7J6lgzTYgn9vRilL9bL6XieTXP4hGH1IltX+XKSR6/KahYWi9tQ
Vpv0xYtTeJUvsmL+LJ3P5r+rpUFD70cwJR3p+1H6MltON9nCxvm+qIrpTVa5
FzTKf11nc/hykV7lk5tlOS9nRV6nF8vJCBcKoMlhkQ8fP36Yviyr/KZc13l6
VhUfcJoTGBzmmS3TsyKflQiGfAbQf5aeZvPiuqyWRUbwWy+bClq+uzyBn6ub
cgkT2vnNYfrk4ZP00cPD9DHs8k5Y3IKn+Lt/b4rRv8v8/PJ+GKWvvz4rl+Xs
Zh0g+UNe5YtN/Ob+Szx6/DT9LquWgDflenaTvi2zqS3RvaD1TBGg7w6P08cv
LqMFLosmn6b/DNg4LRdhrb85Pk4Pjx4epQ8ePTh88jSs9I/llCa7damno/TH
bD7PJmGdp1k1dw9piW9h1N/DLKbpZXnd3MJpGegCZaQJfPW7Kp/eYKtaGtFI
eBKbqhivG8ZVHuX3+fJ9+m1Rvb8p53/SYb6rsvXyprzOq/Ty4gqe6vHvvJBR
b6CX0Vh6+V1dNKNrazkCVNfRrm7KRVan35V1DedXhzupFumLYoEwDV021HR0
zU1/l1UKL+7pZTFb5/P0W4APEIO8Kmv3anKTwbu3+N8KgLC0owYIl88B7Qx8
6Y9l9b52KDmpfoME7Xe1Nh1NMuv5TQYAnLxP38FUq9vij+/DmFlzU8DKvq1w
vtU0wDdbLgELr+oJAmNZzO5c9A21HjXWurPuN9l6np5W5e083yTJsqwWAJ0P
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
F8EPKf4OTf/knX+4bs1Pnl88Wz55u3n1/dXzV788DR4//3Bx8+Sf4dW778+D
VtD5/mn2y/W3e+7JzWU3+CcIPsMHNo8IA9Z6OiacfPm84jLyeHh0NtBKcPBo
Xa4YpVZ7KVKcoW6KD+q9H1XRlZZZ/s8aGHDkZFhmcGY5IQ0LNaIw06s/LtXO
ooXClc5gVAG53r1OsO8HvX3Zz4sHg6AZhJ0HtyBk+A+dOrAXSYyVoNWL//nL
7S8ml0ssqDovNyDBUzCAsHnY6jTD1qBz2Ox3e0fHzUGrj5EVzbAZNVvNdrPT
7DZ7PEQnM1je7x/2D8OT9nGri8FdJx1ob9gbtIJ297Dd7UQnw1b78LjbVtW0
P2hHBFPQDrrdTm8YBoOTk8Neqz1odwaH7Xb3GF7vd1UTHTRBMe1G/SBsRYNu
f9jq9tqd8Ahe7wThMVjmw04YBh21zweHYRR1e90Ht6yKXR1Trg9X42f/wHdz
hStwygS3DdHgyqhPNXtDw5RUuCGm5Br3FpkSbRpS91qac+LbS6+Toseq0wxz
J0Fz46IEY1v61IFOskBXrFjq1S9XGmOJ53SHLU+TZCLUK/XIpFlNC2rQCsRY
5w61TRWg1iNpalbnLsZNVpGDp6XlUdYXm0xPLUFZkbgpvdrwziR+PHG2bYzp
XKynyYBNwoSBgsovKccIcB+m6HhFATtbh40L44DaNuNRbeZU993RbauYS1Wj
6/gcK/st1nK7D4eOiQaxsyimgFEHSeWtbiK1kFoOXh2+S3yLIAORyTTD/b9r
2NxJusokit7yPaoDaBmeayTwtT3uhTpyMdup4RN8mqkVimV+0xzQlpN9Z5C2
tAUzF9kmUy2PU7g4X5C0eNi3Pbein4lEndtEMUFx53AGqjxn0dkwrCjLxeVo
C5/Nb/RjohJO8Gr/KIgGrU50/KCWe8qJBzhpA188OekMKR5gqC91ot7xoPSW
k4jlfm5u9wsfS1JV7rMmZ7wGmlab+5LQf3LT8X1eO4wiLH6BP/WgU6v8AkMk
jo5POu3whFh4N2ge9U9anc6gNex0Osdhs+9Xv+j7R0fd1kk/7A6C4fEgaoeH
zShoRcdBr9eLeoPD4welF3/OffLF+euLb0TKUS86AhbfApZP0nGAS94Z9GAD
esUNC/pN9YM1QVTdtVP4eDMM+ieDE5UZ9FG72aJ/Oydt+rcLM8F/Wz3YnSgK
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
AgA=

-->

</rfc>
