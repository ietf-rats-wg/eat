<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="October" day="25"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like Trusted Platform Modules or Secure Elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <t>Following is a very simple example.
It is JSON format for easy reading, but could also be CBOR.
Only the Claims-Set, the payload for the JWT, is shown.</t>
      <artwork><![CDATA[
{
    "eat_nonce": "MIDBNH28iioisjPy",
    "ueid":      "AgAEizrK3Q",
    "oemid":     76543, 
    "swname":    "Acme IoT OS",
    "swversion": "3.1.4"
}
]]></artwork>
      <t>This example has a nonce for freshness.
This nonce is the base64url encoding of a 12 byte random binary byte string.
The ueid is effectively a serial number uniquely identifying the device.
This ueid is the base64url encoding of a 48-bit MAC address preceded by the type byte 0x02.
The oemid identifies the manufacturer using a Private Enterprise Number <xref target="PEN"/>.
The software is identified by a simple string name and version.
It could be identified by a full manifest, but this is a minimal example.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A Trusted Execution Environment (TEE)</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An Internet of Things (IoT) device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string between 8 and 64 bytes in length.
In JSON, an EAT nonce is a text string between 8 and 88 bytes in length.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries, as described in <xref target="UEIDCreateRules"/>. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="UEIDCreateRules">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The EAT consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity; changeable MAC addresses that don't meet the permanence requirements in this document <bcp14>MUST NOT</bcp14> be used for the UEID or SUEID) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="CoSWID"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to privileged software that allows system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GNSS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A Software Updates for Internet of Things (SUIT) Manifest <xref target="SUIT.Manifest"/> may be used.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="full-and-partial-profiles">
        <name>Full and Partial Profiles</name>
        <t>For a "full" profile, the receiver will be able to decode and verify every possible EAT sent when a sender and receiver both adhere to it.
For a "partial" profile, there are still some protocol options left undecided.</t>
        <t>For example, a profile that allows the use of signing algorithms by the sender that the receiver is not required to support is a partial profile.
The sender might choose a signing algorithm that some receivers don't support.</t>
        <t>Full profiles <bcp14>MUST</bcp14> be complete such that a complying receiver can decode, verify and check for freshness every EAT created by a complying sender.
A full profile <bcp14>MAY</bcp14> or <bcp14>MAY</bcp14> NOT require the receiver to fully handle every claim in an EAT from a complying sender.
Profile specifications may assume the receiver has access to the necessary verification keys or may go into specific detail on the means to access verification keys.</t>
        <t>The "eat_profile" claim <bcp14>MUST NOT</bcp14> be used to identify partial profiles.</t>
        <t>While fewer profiles are preferrable, sometimes several may be needed for a use case.
One approach to handling variation in devices might be to define several full profiles that are variants of each other.
It is relatively easy and inexpensive to define profiles as they don't have to be standards track and don't have to be registered anywhere.
For example, flexibility for post-quantum algorithms can be handled as follows.
First, define a full profile for a set of non-post-quantum algorithms for current use.
Then, when post-quantum algorithms are settled, define another full profile derived from the first.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, SUIT Manifest and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
        <section anchor="message-type-identification">
          <name>Message Type Identification</name>
          <t>EAT defines only a message format that is carried as a field in some other protocol.
The identification of the message as an EAT is dependent on the carrying protocol and its type system.
Identification may be implicit, by media type, by CBOR tag number or other.</t>
          <t>EAT profiles therefore do not need to specify how an EAT message is identified as that is less a characteristic of EAT and more a characteristic of the carrying protocol.</t>
          <t>That said, there is no prohibition against EAT profiles requiring use of CBOR tags, media types, or even against defining new message type identifiers.</t>
          <t>Note also, there are CBOR tag requirements imposed by CWT and COSE that must be adhered to.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "urn:ietf:rfc:rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence. (It is assumed the receiver has access to a database of trusted verification keys which allows lookup of the verification key ID; the key format and means of distribution are beyond the scope of this profile)</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEM ID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s”ueid:” b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="23" month="October" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-24"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="20" month="October" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-07"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for an IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-submodules">
          <name>JSON-encoded Token with Submodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="cbor-encoded-detached-eat-bundle">
          <name>CBOR-encoded Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "Audio Subsystem" and "Graphics Subsystem".
The JWT at the start of the bundle has detached signature submodules with hashes that cover these two Claims-Sets.
The JWT itself is protected using HMAC with a key of "xxxxxx".</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
    [
        "JWT",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlYXRfbm9uY2UiOiJ5dT\
c2Tk44SXVWNmUiLCJzdWJtb2RzIjp7IkF1ZGlvIFN1YnN5c3RlbSI6WyJESUdFU1QiLF\
siU0hBLTI1NiIsIkZSRW4yVlR3aTk5cWNNRVFzYmxtTVFnM2I1b2ZYUG5OM1BJYW5CME\
5RT3MiXV0sIkdyYXBoaWNzIFN1YnN5c3RlbSI6WyJESUdFU1QiLFsiU0hBLTI1NiIsIk\
52M3NqUVU3Q1Z0RFRka0RTUlhWcFZDNUNMVFBCWmVQWWhTLUhoVlZWMXMiXV19fQ.FYs\
7R-TKhgAk85NyCOPQlbtGGjFM_3chnhBEOuM6qCo"
    ],
    {
        "Audio Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJsSStJWU5FNlJ\
qNk8iLAogICAgInVlaWQiOiAiQWROSlU0b1lYdFVwQStIeDNqQTcvRFEiCiAgICAib2V\
taWQiOiAiaVVXdCIsCiAgICAib2VtYm9vdCI6IHRydWUsIAogICAgInN3bmFtZSI6ICJ\
BdWRpbyBQcm9jZXNzb3IgT1MiCn0K",
        "Graphics Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJZWStJWU5F\
NlJqNk8iLAogICAgInVlaWQiOiAiQWVUTUlRQ1NVMnhWQmtVdGlndHU3bGUiCiAgICAi\
b2VtaWQiOiA3NTAwMCwKICAgICJvZW1ib290IjogdHJ1ZSwgCiAgICAic3duYW1lIjog\
IkdyYXBoaWNzIE9TIgp9Cg"
    }
]

]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC4122"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Add ABNF to define format of device ID URN</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
          <li>Abstract wording improvement</li>
          <li>Clarification of source of verification keys for constrained profile</li>
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
          <li>Define "partial" and "full" profiles</li>
          <li>Better into wording for type 2 and 3 UEIDs</li>
          <li>Correct the JSON detached eat bundle example</li>
          <li>Wording improvements for manifests claim</li>
          <li>Wording improvements for detached EAT bundle</li>
          <li>Clarify purpose of including manufacturer manifest signatures</li>
          <li>Refer to RFC 9334 instead of RATS.Arch and make ref normative</li>
          <li>Require "oemid" claim for "oemboot" claim and debug state of permanently disabled.</li>
          <li>Improve min and max size of JSON UTF-8 nonce</li>
          <li>Clarify what happens to OEM ID when companies merge</li>
          <li>"OEMID" -&gt; "OEM ID"</li>
          <li>Use "urn:ietf..." for constrained device profile ID</li>
          <li>Clarify that varying MAC addresses can be used as UEIDs</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y963Lb2Jko+p9PgaNOVUsJSUuW7LY9uztRS+qOenwbS45n
dnbvHpCESMQkwAFAy4ziqXmNU3VO1XmW8yjzJOe7r28BoOwke/av45pJi8DC
un7ru19Go9Hgw7PkeDBo8maZPUuuF1lyUcCPbXLaNFndpE1eFsl1+T4rkv2L
0+uDQTqZVBl8BD8Gs3JapCv4blalN80oz5qbUZU29ShLm9EyxQ4G07R5ltTN
bDCYlkWdFfWmfpY01SYb1E2VpatnyeXF9Q+DfF3R47p5eHj49PDhIIWXz5Kr
bLqpYDqD2/mz5M3p9dXg/S10l8+LvJgnqZvjdFJWg8E6fzZIkqacPku+3mb1
1/xjlq2bBTw5wd91WcHAN3VoUW9X8YNpuVqn08a12EzCs6LER9XNNJvVzRa3
jZvBv3TTLMrq2WCU5AX093ycPN8Us8kynWXwCe/V83RTZcU0i16V1TwsFo+h
rLbJ8+dn8CpbpfnyWbKcL39XS4OG3o9hSjrSj+PkRVrMtunKxvkxr/LZIq3c
CxrlnzbpEr5cJdfZdFGUy3KeZ3VyWUzHuFDYmgwW+eibbx4lL8oqW5SbOkvO
q/wDTnMKg8M80yI5z7N5iduQzWH3nyVn6TK/KasiT2n/NkVTQcu3V6fwc70o
C5jQ3m+OkiePniSPHx0l38Ap74XFrXiKv/u3Jh//m8zPL++ncfLq6/OyKOeL
TdjJn7IqW23jN1++xIffPE1+SKsC4KbczBfJmzKd2RLdC1rPDDf07dFJ8s3z
q2iBRd5ks+QfARpn5Sqs9TcnJ8nRw0cPk+PHx0dPnoaV/qmc0WR3LvVsnLxL
l8t0GtZ5llZL95CW+AZG/T3MYpZclTfNLdyWoS5QRprCV7+rstkCW9XSiEbC
m9hU+WTTMKzyKL/PivfJ93n1flEu/6zD/FClm2JR3mRVcnV5DU/1+ndeyKgL
6GU8kV5+V+fN+MZajgHUdbTrRblK6+SHsq7h/upwp9UqeZ6vcE9Dlw01Hd9w
09+lle4X9/Qin2+yZfI97A8gg6wqa/dqukjh3Rv8bwWbUNhVA4DLlgB2tn3J
u7J6XzuQnFa/QYT2u1qbjqep9fw6hQ2cvk/ewlSr2/xP78OYabPIYWXfVzjf
ahb2Ny0KgMLreoqbUeTzexe9oNbjxlp31v063SyTs6q8XWbbwaAoqxXszocM
8d+bH86+eXT0SP588vTk6TPGj/wK4DK0eqqtHj6yP4+faoMnj48O4dvZbCm/
v7FXx0+fPJY/nx5aj08BeeufR48f8bfr5abmZyePT57I64dhGk+Pj0+eDeDv
dz9ePTnBh4C202qO13Rv0TTr+tmDB1laNYtRXtyU42Kejlf58sF6sX4wK2+L
JVzdMfz47U2+zL6dlmU1G93O6ycne9wVE7d3r948P09+vHh1fnF9eZZc/cvV
9cWL5Ojpk5Nh8vLH0/HV9cvz8eHh8eNfjsaH48NfaDLUgaJ1/HvEh/aSqE66
TH7MynoNP9Ll6LJosuUynxN2P8X/bJN96PmAPpwBPQSsc3h0Mjr8ZnT4BNd7
efrydHz27np8tkzzFdx+ejC9bezlT+2Xf3Ivz15dXYxPl/MSiMIifF7WGTa5
XgCi+/H16/Hli4vLeFN1T9dAC9Pl+Hi+Xo9hWQ9mWf2+KdercraBy/Tgap1N
85t8Smtt/TzPGgDUepzW64+/rf2by9m33zx86nf+uJrBPhVZxaT6NZwk/KgX
+Tp5XZV/yqbNPzCqhh6WSTRM8iMg4XVyBqQoeZk1t3BJE7iQ0Lxa5bD/9T8k
LzerSVYBBh4m6WxWZXVNvAE0ymcZMDPa1a6jPIY9ik/oKW7fWXn17vIc9nR0
PibOpk6nqxFs7m0+w/fnz1+d9u/qfFlOUgD6tAGKuKKNvV2PEOnCdB5s1giu
9QMY59GDo4cPfnx99st5Ps/hIJ5nwNBUr25O1+uq/JAuf/mAkLie3fjNlLYJ
N07Km0Sbu0W8LD9kuCu4mkcDnO7ri5c7YCArxnlapDRP+PHgdVZAj0vZtfE6
nWd+/NfAC8AYyCdm1brKgT3gE0j2YYwDoEz/tkHGz6AUMc+oSec1XfGrt5fX
Y2BJ8hto5Hd3kzejlTyHj/Gixyjt5OihIowTRGmCwo4eGsI5PH5KYwAVaxaz
dAs8bDp9/8zPXl8h7wjvencENuQ2f5+vs1nOu4K/HuiXv/CXY7fbNwCHdOUu
Ly4uxk8OH46PTt/ASb26HB8djo+ODp8+wDdX1+djOI8n4ycnD4+/eXpCGO/4
bAwo5DlyrPj3m4uz0TwDloV3f3T6+nIE3xwfHT6k9q/eXo5/3ABgR6uiJ8sc
6QvsWvIWzgTg4uIjANwMGAXgUuBMkku5DnhUF28vD4bJq2oOO/5nwWXLbV/L
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
H9ipImR+v6F6WPe265z+IJqqima0q8+Snj0gqYy3dsRb22lGy0Xx7N7l9HkO
/FfekPh4A9Dv3Bqpzh1cUnagrt0dyGaiJX+ULucgUjSLVSKe0g8SjR4VHK//
nnkh2JylXzpoNp2u1WsJ1KYdQ+88d7T0Ye0tTNSMlzUCRB8CO0Skurt7e3Z2
RQH08RS0EApl2QlXdKL+OHSLNYUeMJEzcUule88ymOWukjxGs5kFTCtt5vki
bpmSSMmJj9FncjNfCT3FWfSjZuBhp+9ZQ06Neq40zqT3uvKnKEWRzX+WiXNf
2sF9w4goRmwxkOysWrWgB/PA0u5omZEoxWf0ved8yS4V8ouRYWoolqk0Bu9h
SILdcq00lbO6b+jQt4us0Wj91hTaDHd6D8sdHDctkMT7bsZLpS1znGET/DPl
a4tisXjG//yP/wuw6H/+x/89xD/xxPVvxsPwi+fIqYlGEag3xtygZ08E38PP
r1y9+DWAi/VQzM47zD68F40P+3D20E+Z+u0uXIlL70TvkYFOzfVIugoZimI8
IG6CrOXtLezavghtDo+nxoSdVPyEQLtH3k601bobKIf6WUbD9PHKLPq3AKz1
3X07FDEUO3vosFj4pTcI+C8jHBHdTSo+VWXxQ3UgYgG4f18VAELtaVKX1+uS
5ajPELJ2hK8gXT2Q1qht5kmc1R0+E1MzFwYCLg2/3BTsWJ7eaD0Ev7O3Vbpe
S4xUla3KD73rhf8uyzoSDF13xDLs6ina9FY/neVGjb94ubIUMu/oiHaIUupI
Po4xVQs7YZFN6iS6guWmqa2sspHtG0EOgSIqcYZ+EXtBrwei7PDzcxnZHK4k
9dnn+GRXB5EYXrVzCHaWu4Z3PDhGQzvxRSPzDtDrSuR7iU94dPT00yfokDjn
z/dI+qdu8TGpRCUVzhD0vO0NgAmm0ZY+TXJGZ+MJoVyYhzDuX7Q2Dyznvjdh
uu9hu3AP5er+zUN17/T9A56S3QlvwbLOKFfw0NgrrPYLE2fOymz/NwrlgSog
08UJg14CtBLcRRRBoie0OCATxyabV5HLT6HfUqRRE4mZkrkW3954BVAt5eu/
cm2d0oNusmPuhY8wnzLLRR6pXXbmVqVY+jJjUx1pe2JtIMXNFR/yqixIzT9g
kp83KqRipmEpzTFtgk7NdIlcxcjKQrR1X2NZC7HUXoOYthjA9s7FAfsKBuhj
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

-->

</rfc>
