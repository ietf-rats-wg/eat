<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="August" day="06"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC9052"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>The hardware and software that implement a server or service like a web site may be an entity, but the web site itself or the organization that runs the web site are not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where otherwise explicitly stated.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Evidence.
Evidence is a claims set describing various characteristics of an entity.
Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Evidence.
The Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.</t>
        <t>EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Evidence.</t>
          <t>This specification does not establish any normative rules for the Verifier to follow.
They are a matter of configured policy.
It is up to each Relying Party to understand the processing rules of each Verifier to know how to interpret claims in Attestation Results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of Claims generated by an Attester to be appraised by a Verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an Attester's various capabilities such as Claims collection and Evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
Any new format that plugs into this socket MUST be defined in a IETF standards track document.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for Claim Keys.
JSON-encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a very simple free-form text claim for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the SW for the entity is needed, the manifests claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the design intent of the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>This claim is only to give the recipient a rough idea of the security design the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>While this claim may be forwarded in Attestation Results as described in <xref target="relationship"/>, this claim MUST NOT be used to represent the output of a RATS Verifier.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level may have only minimal SW defenses.
The most secure level may have specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
(Note only Section 4 is referenced. The other sections, in particularly Section 3 do not apply.)
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains broadly interoperable. In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-count-claim-boot-count">
          <name>The Boot Count Claim (boot-count)</name>
          <t>This claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, Verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= spdx-json
$$manifest-body-json /= spdx-json
spdx-json = text

$$manifest-body-cbor /= cyclone-dx-json
$$manifest-body-cbor /= cyclone-dx-xml
$$manifest-body-json /= cyclone-dx-json
$$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, <xref target="swevidence"/>, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, a hash algorithm identifier and a byte string containing the digest.</t>
              <t>The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>.
Either the integer or string identifier may be used.
The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
              <t>When decoding a CBOR format token, the detached digest type is distinguished from the other types by it being an array.
In CBOR encoded tokens none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Evidence or Attestation Results.
When these claims appear in Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are not a substitute for the nonce described in <xref target="nonce"/> and do not guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
floating-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="claims-that-include-keys">
        <name>Claims That Include Keys</name>
        <t>This document defines no claims that contain cryptographic keys.
When claims are defined that include cryptographic keys, they SHOULD use COSE_Key <xref target="RFC9052"/> in CBOR-encoded tokens or JSON Web Key <xref target="RFC7517"/> in JSON-encoded tokens.</t>
        <t><xref target="RFC7800"/> defines a proof-of-possion/confirmation claim named "cnf" that can hold a cryptographic key for JWTs.
<xref target="RFC8747"/> does the same for CWTs with claim key 8.
These particular claims are defined for authentication and authorization.
Their semantics don't translate to attestation and they SHOULD NOT be used in an EAT.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The profile claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A profile should specify whether or not a Detached EAT Bundle <xref target="DEB"/> can be sent.
A profile should specify that a receiver be able to accept a Detached EAT Bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>A nonce is always required by EAT.</t>
          <t>A profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>By default only the nonce claim is required by EAT.
A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the nonce be a certain length or the location claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The manifests and software evidence claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver MUST accept ES256, ES384 and ES512; sender MUST send one of these</td>
            </tr>
            <tr>
              <td align="left">DEB Usage</td>
              <td align="left">DEB may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID MUST be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce must be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims. The general EAT rules apply. The nonce MUST be present and the receiver MUST not error out on any claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and MUST use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition MUST have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= spdx-json
$$manifest-body-json /= spdx-json
spdx-json = text

$$manifest-body-cbor /= cyclone-dx-json
$$manifest-body-cbor /= cyclone-dx-xml
$$manifest-body-json /= cyclone-dx-json
$$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="deb-security-considerations">
        <name>DEB Security Considerations</name>
        <t>A DEB (detached EAT bundle) is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  The attached claims set is vulnerable to
modification in transit.  Although the nested token does contain digests corresponding
to the unsigned claims set (as a submodule), these digests themselves should be protected
from manipulation during transit so that a verifier can detect tampering of the detached claims
set.  A suitable singing and/or encryption method should be sufficinet to protect the nested token if transport
layer cryptographic protection is not feasible.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines a message format for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-13">
        <name>From draft-ietf-rats-eat-13</name>
        <ul spacing="normal">
          <li>UEID length and type clarifications</li>
          <li>Address comments on SUEIDs</li>
          <li>"Attestation Evidence" -&gt; "Evidence"</li>
          <li>Wording clarification for "entity"</li>
          <li>Wording clarifications for DLOAs claim</li>
          <li>CDDL type for CoAP Content Format</li>
          <li>Move Claim Characteristics to an Appendix</li>
          <li>Rename odometer to boot-count</li>
          <li>Correct/clarify section on JSON/CBOR labels (Carl's comment)</li>
          <li>Wording clarifications in Appendix C (Carl's comment)</li>
          <li>xxx encoded -&gt; xxx-encoded</li>
          <li>Clarifications for cti and jti claims</li>
          <li>The 8th bit in a 7 bit text string doesn't contribute to entro</li>
          <li>Improve SW Name Claim description</li>
          <li>Update commentary on UUID vs UEID</li>
          <li>Remove most of section 8.3 on CBOR Serialization, redundant with profiles</li>
          <li>The 8th bit in a 7 bit text string doesn't contribute to entropy</li>
          <li>Improve SW Name description</li>
          <li>Don't capitalize composite device</li>
          <li>Reword encoding exception sentence</li>
          <li>Wording improvements in section 1 related to Attestation Results</li>
          <li>Lots of rewording to make profile issues more prescriptive</li>
          <li>Sync terminology definitions with RATS Architecture, include Endorsement definition</li>
          <li>Plug-ins to the EAT format socket must be an IETF standard</li>
          <li>Link to RFC 9052 instead of 8152</li>
          <li>Improve introduction to profiles</li>
          <li>Improve CDDL for OID in JSON</li>
          <li>Move Endorsements and Verification Keys to a new Appendix</li>
          <li>Move privacy and security considerations to before IANA section</li>
          <li>Clarify that security-level is only the intended design</li>
          <li>Clarify that security-level only references section four of FIDO AROE</li>
          <li>Remove requirement that manifests be a byte string in CBOR-encoded tokens</li>
          <li>Add manifests for SPDX and CycloneDX</li>
          <li>Add a standard constrained device profile</li>
          <li>Added DEB security considerations</li>
        </ul>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose/">
          <front>
            <title>COSE Algorithms</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-22.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-20.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="July" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-20"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-04.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
      </references>
    </references>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9a3PjVnYo+h2/AiW7yq0Zknq0+pnYObIke+T067TU4+TO
dbkgEqIwTQIMAErN6en89rvee20AVCuZnKr74biSaRHY2M+11/sxHo+Tps3K
2e/Zoirzl2lbr/OkWNX0V9Me7u+/2D9Mpln7Mm3aWZLMqmmZLaHhrM6u23GR
t9fjOmubcZ6140XW5k2bJHfzl+n748uL9Neq/liU8/Tnulqvkm/SaVU2edms
m5fpd5u8+Q4eNeurZdE0RVW2mxX0e352+VOyKl4madpWU21HP2b5qr2BJ0f4
u6nqts6vm9Ci2SzjB9NqucqmrWuxvgrPygof1dfTfNa0m0WuzdqixR+XN3l6
VsKPTXrc4rKyFuaYXlYf8zJ9dHZ8uZtkV1d1fvsyhR9JVucZTL5s87rM2+Tj
HexXMS9x8Zn7fHpV1bDoGWzUy/Rw/+Dx+GA/ydbtTVW/TMZpUcL0X03SV+ty
drXIZjnMkLf7Vbau83KaR6+qGjb6Ip+ua5wmzLiqN+mrVyfwKl9mxeJlupgv
/lcjDVp6P4Ed0JF+nqSv4ew32dLG+bmoi9lNVrsXNMr/XmcL+HKZXubTm7Ja
VPMib2C90wnuK5xEDnv65NmzJ+nrqs5vqnWTp6d1cYvTnMLgMM+sTE+LfF7h
rudz2I2X6Um2KK6ruiwyOq512dbQ8sPFMfxc3RBA7vzxIH3+5Hn69MlB+gzA
cScsbslT/F//0RaT/5D5+eX9MknffndaldX8Zh128pe8zpeb+M3Dl3j47EX6
U1aXcI7Ven6Tvq+ymS3RvaD1zHBDPxwcpc9eXUQLLIs2n6X/CtAxq5ZhrX88
OkoPDp8cpo+fPj54/iKs9K/VjCbbX2pSVvUSYOs2xxvz/qeTw4ODF/Lns4Mn
9ueTgyfhz6fy5/MXR9YAhg0NnoU/rcHz/X397ODQejh4dqR/Pn6hPTx/emBt
nx1pZ49fPNfPXuzbaC8AwbxM4O9ff754Tn3BXc/qOW72zk3brpqXe3t5Vrc3
46K8riblPJssi8Xe6ma1N6vuygUcwAR+/Mt1sci/n1ZVPRvfzZvnRzvcFd/m
X9++f3Wa/nz29vTs8vwkvfj3i8uz1+nBi+dHo/TNz8eTi8s3p5P9/cdPfz+Y
7E/2f6fJUAd6OfHvMQPKG7rL2SL9Oa+aFfzIFmO8+YtFMac7eoz/bNJH0PMu
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
pEVrTnY5TjZomreM493e3mYXfzd/73sdoa0DdPZ87vWDfrgH92cz2yIHhh3u
4s+Mzsy78WA7uzw7Ps+rd3Gyfpek5Pac93CCDtL4FwaqXAcALK12HX1/Shoh
o1LSyN95JeaHOMqLbwZbdL13/oAkYKghk7mHtYdV5sjiQ9srGVX6+ND2eXq6
qxubv5tiadfQgocCFgg8yWY1jtLaKh0/EKh69Xr/D4ap3whUlp1gPuGhh5rn
Kx4MlMKHKIPx0PZ5huQ/CVBx9vnaLB49EKKCJkBU818ZTf2DLJn5yfNmD22f
5eVau/KV5ucfY+roZ0eI+s38n4nEIc2r614qdTFQz0aV1VlP6upe8XFV1KeZ
EH2jgiW/3M16uRGvnO+jFeeD5yrEWMQh5IzkLHq746vPWjyfY0rsdYQFFlDf
X5M5oLNPPN6gy43pF2s3oGtnsrm8ctyubPZkzv2MSavF7WoZpkZHOYs/RHlX
MOOCur5aUa/i5fQK5oMaj5cwCykobmZhykik8qkm4+cKF4ZfFnZ2gjws1mdI
FhxwsZi4jmHjq2j8Ab+fi/4atzwtTsJ3Ck5HK1M62ShKtfQIr7bm7b1ebVLU
nPG8pcDTnnoCunHqabRCtjnlIa55namy32bqGf5c1dyMzqjQoNRfBqT1/sOk
9+2zau+r72a/XCrvamu7+UwsRTvovKZCnOjIbVWBplolPt4r0flpc65z65ON
ZC9+89a8oGrH/Bz437++bww/vAtuTq+ubs9+PD/p/GjnxyWd6NNSLt2pguTn
caWw6eaZ+FLs4Z6tsEyE2yDXVE/KNYvksH0RMf8EnOwM9rKCJQ3JQ28vhw7M
X/zLz1nfc7realV7TbYNMkVcbLR44pYDxqqaZ1Xau1fvOy8y26y7/LS4y53L
r77KH3X5SWcO2vEq1tYxf4M/+bAQC2M5EPPltRR/dAWQPXXnGyyX/mmSlEQS
ZLp1LfL2vN2Qhj0pVnvCjqP+CYNv7tTRLT13ynvBcfPi6uTF1eAivHz7JEyG
H+I371tXl/XXyycvrz4cDU4HR/OXb759/W40ePvkmzN68/793598dzJ8Ml3d
wr+nR0cfjo6u3/x18N34GP4+uZw//+XZ+5Mj+P3b5O35m1dv3g6fNS4v2+Pq
9+8uXnfWH189mQyb379/8zJs/fB+9kP12/Z3yyfLb18Nh+96T9+/vVz/+N3L
8Lvbmxdnf21W50+/PW/+0J8++wjTXKTzo7D6/Hr5zatfXtxUf7xZVDvd0fXT
2fsNbM8vg5fHrUbaeTdYd89HF983/37zdPbxbPP3J9ObqNWI0q8y98Xu37N4
sfmobpZ7edPEg09jM0pvgTbM/ad7Ba+HvadvX+dPIbp9Wo9+GMQv4qffft/4
Ln42fHo1ejLGv8/e/HLWOI+f9mvw0XLcfE4fPXtzWp88+f4X+P/tWXwTh29P
62fvk4/n7998PP9lXH9x/GMLOplF30Cn83Zj9OQmPZufNv46POucxWfp2eK8
8WOMv0PHl+9vWovT51fPlk/fbF7+cP385S/fNp48f391+/TvwfXbHy4brUbn
h2/TX26+c7aPV5WJL/FPscABX+1s1YGjMI3HVARdnpfYXE+GxxcDX4uRvn2t
rAAHmRb97bmcQv5DNW8C3rzVnpmZmNXQEcuJnoVT3HCw4XWcxkgd1cJJZElo
FblxXcCsGqTG9zqNfb/R25fLdfVo0Kg3gs6jO7Kf+Ifqzw8Lu4rCCRZvEO71
0+e7G0bz5RoL/RQ7EKcymEBQP2p16kFr0Dmq97u945P6oNVH15F6UG/WW/V2
vVPv1ns8RSfqW9r3j/pHwWn7pNVFp7fTDvQ37A1ajXb3qN3tNE+HrfbRSbet
3G5/0G5SCop2o9vt9IZBY3B6etRrtQftzuCo3e6eQPN+V5nbQR143W6z3wha
zUG3P2x1e+1OcAzNO43gBIT9YScIGh0V+QdHQbPZ7XUf3bErdncQWEIOF/W9
n/0D340D314DCKvZnBwxEDDQ5GzeFMnk2sUpqom5sol26wQEFJqTJZrZrhmG
wAK/xxXj0dlcOD6nEoetk8IMqRqzJ/ElOVFhqglnOOx5GkUTAVT+SrvVGKwa
LTYE3hSLaRr21+ozeWV5U78J4XLKseC95fiVTaoXlCqjENUpNK15F+JwHzkn
NMaAOubxZMImwsRUFsluKXs98BhSqg2PDTYjmk39cbig2aVpNEfCjbPYLNbI
2RAHXIYxJi5IjLgM0j70eYCqxhprdM+TtfgowJ3ixExYfoWPb0rsccjzsBVY
nCpGhH6oihTiinqw/5N6BZ7Gq1RCCiz6wok4eMsVHNjRAPfZNcTXfKqsA7CT
rNYhcikVCvywNVmc2EZTlEV7MBsgR3BzFY+vlEO/kpBM0qvDmezpdNLIuhEI
908Rd1IKm50vEE86hXvQ/SnN+A9pD5/Mb/RjvCdO0XnguNEctDrNk0eVzFeO
x8FpG9Db6WlnSB4HQ23UafZOBoVWTkSb+xxdBloVP/dQPQJyjyXuLPOsziHK
DQ2HzrykrE2ZNfo+bygyA/kX+FNtdCqlL2DNJ+3hab99ehy0gBXrNlqtTrcV
HB+3e8et5vHgpFHezve7vZN2+/QkOOq3gn5j0If/1HvB6ekQVtQe1I8eFRr+
nHny2fnrs2+oxXGveQzYuwXYnAjfAI+hM+jBofTyh9jo11VrVgcqdN/p4ef1
oNE/HZwqOaBH7XqL/u2ctunfbr1J/7Z6sJRmMzhpwkzoyUCpSAPWSOmQegGQ
tl5Qv3sXpdlJ475Na/daQCH79eFRvdlT42Kn2z0ddID+NrtdGKI7PBq2TuDD
/smw32t0jk6awemg1W11m82j+mlfmw2D7unR4OT46GjY73eaR/3hUftkOKw3
h82TZvuoOTgd1o+6R/Brq98+PtFJDuv9frcRBCeDXqd7Wu8e9Y7bJ0fibWT4
VozFQn7fCFxlXhWIfPiKV+GKk7PEoe0g73GVbuI16RC4Khci7ZIf0wFjELy1
IfoI9fL+UXK0fJQlBvCpHnaA/1JmqaDR6/bbvXZPE3AVW2VTcpXn2yq2yvs8
lKXXKrZy+9yWTWuHVoXkWWV+Fnfnyvrs+T8feH7WwJrJb2MOs4w65KhCxWdK
WEocMoGQ0Ot1dIsquRToI3NWkhMGO3jhmlF5MOmNDawl8eTEE4QLmYHLqJTF
lt/58yW6+nePrr66uS+6GrsoCauWibEy5EFugPhjaWeBgZFAid1MAUxmH2g/
uHoUtcfTfns6CVrTcCS0Y0fNezCZtHuTVnMSRkBbIri60a7GzRGRoFBI0HQ6
RhK0Y9uwPrrfNnCvKt/bqr27U7QSvnpNwjSC6fomKZOa0oq/N7xo7BGLC78F
eyz4YJFrKSgKELoygrj0e0X5g6Q3K1442YiIk7Y+fMVBXhy/eEzp+KhfGm+8
3lDGv5HVc7NamigefKLiBIv9P2XVOP/ZFDg/57gFf2+wmcSJbxVXfEyo74pu
ksuz4cD9fzya9zc/Bm9gJfJs/vHpt/XZX19/eBO8mSfB69uzdBgPcu2eLn/8
4Tvb5vik8fz9j43z47PWi9fffet+O/0u+crRke09AYblCuve/mMTfJpeXKyf
vn3TPj2fPf37+Yde/GxQbCNHcM/kjvp7QnJ/NteDycVxhNDov5Lq3pH/6U/4
vMrPP5OCbAhyUUz48+UqGYWjeIbV7lkXNg5naH3SHA5UOBOowzxeSAFT24Ip
5th0lkw9HCrVaHoKHliHM3+ZpKzZEi+eZbLUITQhxUKKj089+iaOJH2EYw6T
xpyHghTMGNSCTuIklq+iyElRhhbiifmAC50Cn4AMAsrxJCuaMcV/KvWA2mCO
phSrIaNZDK4i5aZCGXtR5TehJuNBLgY4EwwZWIVTzKE2QwthWvH0PWn3Eqkr
fouhE0t4VvGn4Rg3MNYXN8nqAy0XtRmJnywqXoQ7qBNGbhnzGFzHE8APPAwg
otkoRXdrCWiYh7eAbq4jz36JtkW2D04QMzHMptnkGbjBqZxkSNXfQ2+ejNAx
aXmVLCKTeiJNgY46ZZZJo5TaQwCEN5vRDGBQjwrZNur/XdEmLHE2eZS6R2/3
veaoO8yReWtO/0fodp5Q/jfMbgK7DQNxwWpAkhPkLmNSPE3CW1HQ6CdV/sTO
kRwH5EgxuipMb6vrpBrPw0sEcEy4ilcBlURWwTCJxuEEZ4ld/30TTrb1jilb
BWxgC2iT4nlMpONGOU8aidC5VPVF/RZfKkb84Zh8HyZoQmZS1KjX3WFpvIkO
iIGZ0BDz+NHGwvYvNcXg4jqZXQPweItwkcAQyZqttBGppRmcKzDHazhH5GnD
BUxvxtn1EkxHhubTaOKNYszldyYZvUnFwwXkkw1mmhRzNNzL2W0ao4nUHie+
iKl4OHsKTli7PY5WKAhQclvSXxHcnL30w8lkhVk3YA4e5SVP1n4GoOFOLFgF
bbIurfH+0Onc0i0g6ilfeZSDBBAY3tvRBuCq4l/HmJaGosJm8eIDPDmabaJ1
gu6a5grWfNXYeTgH4gPQdoxHNQPMjzFD8S94M+2ssQK096v/MkqW4k/4qwR3
IX/7khHLr5Z84FN+L3XW6VBfJiu6H86jC/F3kZ9fvV+rzs+/VQs/JY+q/q4f
yhtYSaPujwTofiUwzPzQ+8LPr3Ttc4/Mnd1v1P/WCA6clRQGqdTdgR4wiHtH
aJz2gQ6Cc3cGwSHcYR4wSP4y0kDdA6pfryreMQp6S+HlnAQqCERH8Wp9BZiK
SC8C0g1diLnIpJ4lSoZqjqQJAGo4u4F//WanXSFQ/WD8Ggz9XBL0GbSN2uud
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
4N6EwaoCAA==

-->

</rfc>
