<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="July" day="02"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string and every bit in the byte string contributes to entropy.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, {#swevidence}, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption.
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT.
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-18.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="14" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-18"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9aXPcVpYg+h2/AkE7wmJVZlJctPbYNTRJu+iWRI1Itbtf
TYUDzASTKGUC2QCSVJbG/dvf2e+5AJJidc9EvIg3iooyE8Ddzz37Mh6Pk6bN
ytlv2aIq89dpW6/zpFjV9FfTHjx9+urpQTLN2tdp086SZFZNy2wJH87q7KYd
F3l7M66zthnnWTteZG3etElyP3+dfji+ukx/repPRTlPf66r9Sr5Jp1WZZOX
zbp5nX63yZvv4FGzvl4WTVNUZbtZQb/nZ1c/JavidZKmbTXV7+jHLF+1t/Dk
CH83Vd3W+U0Tvmg2y/jBtFqusmnrvlhfh2dlhY/qm2k+a9rNItfP2qLFH1e3
eXpWwo9NetzisrIW5pheVZ/yMn1ydny1m2TX13V+9zqFH0lW5xlMvmzzuszb
5NM97FcxL3HxmWs+va5qWPQMNup1evB0/3C8/zTJ1u1tVb9OxmlRwvTfTNI3
63J2vchmOcyQt/tNtq7zcppHr6oaNvoyn65rnCbMuKo36Zs3J/AqX2bF4nW6
mC/+eyMftPR+AjugI/08Sd/C2W+ypY3zc1EXs9usdi9olP+xzhbQcple5dPb
slpU8yJvYL3TCe4rnEQOe/rsxYtn6duqzm+rdZOnp3Vxh9OcwuAwz6xMT4t8
XuGu53PYjdfpSbYobqq6LDI6rnXZ1vDlx8tj+Lm6JYDc+eN++vLZy/T5s/30
BYDjTljckqf43/+9LSb/LvPzy/tlkl58d1qV1fx2HXbyl7zOl5v4zeOXePDi
VfpTVpdwjtV6fpt+qLKZLdG9oPXMcEM/7h+lL95cRgssizafpf8M0DGrlmGt
fzw6SvcPnh2kh88P91++Civ9WzWjyfaXmpRVvQTYusvxxnz46eRgf/+V/Pli
/5n9+Wz/Wfjzufz58tWRfQDDhg9ehD/tg5dPn2qz/QPrYf/Fkf55+Ep7ePl8
3759caSdHb56GZrZaK8AwbxO4O9ff758SX3BXc/qOW72zm3brprXe3t5Vre3
46K8qSblPJssi8Xe6na1N6vuywUcwAR+/OmmWOTfT6uqno3v583Lox3uim/z
rxcf3pymP59dnJ5dnZ+kl/92eXX2Nt1/9fJolL77+XhyefXudPL06eHz3/Yn
TydPf6PJUAd6OfHvMQPKO7rL2SL9Oa+aFfzIFmO8+YtFMac7eoz/2aRPoOdd
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
lVNZWi9cNazIQzUqnKmBXJlemdpPBW5a50ZsLbHLe0giY5OG9iHFiS/2SxOg
0g4rLUXNtzQIWyYXie2R20B/V7ZgonMRJDtteatVRWUDrt9S5tY1ZQe1QrdE
JiJ3M+GkPpqeCVZZ6lYrK9v8RkbmwqNhmMuDXGYujLkfNjlLeVjG9lMs4uQ3
Wj3igHjz5ibT3bUbU2qylyl1pZWjiFDVjDMGSQVaqQYFvAx3g3ej2Ij3P3NE
L9UomatICcNobRxWua0rAl5UfWwuqSqijm2ng2Ghduce+c8RVZpnDnqzr/Kb
/Qj9ONBA5u9tx6j7pkc4i0dk5nLgluDMD1r2K4vBAIE9ctkk/KSIZB/5p8dn
jzEOtxLNUhefPr1YxovTI2gF93d9mGIey7r/7l0OZN+987x/X4yz5V+K+4IF
qqq3BWHhzSKhMMO5f8wB//RxaaPIgo+9uKC5ZTvCbu/P3I+dF36GK8+ql34W
XybWXd/XL0vrFkeEnVfe37ryy2j5p6/4W9UBvDh+tu3Q3W+2HDY7U9wC+Ga5
g10OmiOnKVnKP28HnqF3R/UO0KtihU4TvlSxH+orsgMqCLvDfwnYN/sgeUzv
gAX5yqQTppOq2Af1WthlJ3rbsSJlT/jz7z+ruw7SdF29/NOqkjOkGUTqx3q1
SqQgnj35XQh74bb1whTmcbT401d8RMrMM9KY3rFkUauiGYEagXiJQhxaZStW
rK5JxRW3t61YkyOhYuOfA/FPhXPYTurOY62qZoKoqtZqvKp2AvLOfyvCl+pO
t5+1LemoaWk0GUbV8l0fsZ12oLt1BzAZGwDACyZFf+5dt8m/JLPIdjhQSUQS
FeZzh1UzAewFt9N2bOd9/liAQBnzNVmvRir1qO5r77goQUHb5y9e+3mBa+3k
8G76psgHsuuOAU7MCFT/4kbkjv1bUa6xb1QfgfVJ+DVXDd5ouTk5vKkvQSnR
5Hi2YGP2OCwdz78OcnpDTo7V+2HelZludo3ceV2bhQDCP4vbQtKKRcCnWxCQ
ze4dMV2d3EyqD9E4de68WIoI+dNXeKrK2zfZnVjWKHqd/LaAdauWKy6p/8IQ
e/T0xWgLD2GrSZO9Q/K9UWbNo+Q8WYMs+ZQ0xMRejJZo3InmlWwFOdruvAv/
JLbxLf2ynX6gr6+eL3y82iwWTi5ezptXiajYS3jn5f4zGIizt7dLCLheYfpx
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
SHqGd/uaSNkXjwJx8ryvKzcAeNjp3u3MHZLJW5fWQFqEbDCVE9ygad4yjrd7
e5td/MP8ve90hLYO0PnzudMP+v4e3J/NbMscGHa4iz8zOjPvxoPt7PLs+Dyv
3iXp+l2akdtz0cMJOsgwi67vlzoAYOl0W+j7U9EIGZWKRv7OKzE/xFGefTva
ouu99QckAUMNmczdrz2sskAW79teyajSx/u2L9LTXd3Y/N0US7uGFtwXsEDg
oYIqWXOVTe4JVINWa/gnw9TvBCrLTjCfcN9DLfIV9wZK4UOUwbhv+yJD8j8E
qLjSeHOejO8JUWEbIKr9r4ym/kGWzPwUebP7ts/zcp1d+Urz848xdfSzI0T9
bv7PROKQ5tV1L31FlQ9Iz0b5/FlP6upe8XFD1Ke5EH2jgiW/3M16uRGvnB8o
U30sNTglCXo8NaK3O75J+31J1R24fBDq+5syB6fOqOkXi9WhayfXgDVuVzZ7
Mud+divXYgJ30VFSqeCCK5hxQdUyL+LlVKipiupMMwvSafJU+FMtvP4D1o+z
ulBhZ6fIw8I1XqYLDrjgsnY6w8lFzBW4L0V/jVteVamVqxNj1MV1TPm/Vzh1
oyi9XsmJck0+r/Z6tclQc/aDUz8gq6knoBunbgrb0hBcb0BCityp5/hzVXMz
OqsBV/iOVLGoJKy9/zAdfPe0Mfj6+/mv58q71mDradPpE6sddF6jDo8cua0q
sDYdnyPM0ONahc5Pm6fxZcIO+PBH8uateYEVu+U58L9/fR8cfngXXp9cXNyc
/vT8uPeTnd81bgp/WsmlwxfCneNHeVwpbLp5Jr4UNdwzWGu+QaGpnpRrFilg
+zJi/htwsnPYyzpMa0MeerUCOjB/8S8/533P6XqrVe012TbIFHG2kfCdbQcM
hzc/bdDevXrfe5HbZt3lJ+Vd7p1//XXxqKtPOnfQjlextk74G/wphoVYGCuA
mC+v2RWg5gogNXXnGy2X/kmaVkQS5Lp1LfL2vN2QhtoZG1GO2XHUP2bwLZw6
uqUXTrkWHrXPLo5fXIzOovO3j6P08EPy5n3n4rz1evn45cWHg9HJ6ODy5Zvv
Xr8bj94+/vaU3rx//8vj748PH89WN/DvycHBh4ODqzd/HX0/OYK/j88vn/36
9P3xAfz+Xfr2+ZtXb94ePg3Oz7uTxg/vzl731h9fPZ4etn94/+Zl1Pnx/fzH
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
3d7o/wO2syjh/owCAA==

-->

</rfc>
