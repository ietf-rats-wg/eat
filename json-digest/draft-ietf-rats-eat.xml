<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="September" day="14"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>Some of the goals and fundamentals in the security model for attestation are not the same as other security standards such as those aimed at privacy (e.g., TLS) and authentication (e.g. FIDO).
The security model for attestation is not described here.
Instead see <xref target="RATS.Architecture"/>.</t>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC9052"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for evidence and attestation results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the attesting environment defined in RATS Architecture.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>The hardware and software that implement a server or service like a web site may be an entity, but the web site itself or the organization that runs the web site are not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-detached-eat-bundle">
        <name>CWT, JWT and Detached EAT Bundle</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "eat_profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle, <xref target="DEB"/></li>
        </ul>
        <t>A detached EAT bundle is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where otherwise explicitly stated.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an attester generates evidence.
Evidence is a claims set describing various characteristics of an entity.
Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry evidence.
The evidence goes to a verifier where the signature is verified.
Some of the claims may also be checked against reference values.
The verifier then produces attestation results which is also usually a claims set.</t>
        <t>EAT is also designed to carry attestation results.
The attestation results go to the relying party which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the verifier and relying party are not separate and thus there is no need for a protocol to carry attestation results.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results.</t>
          <t>The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow.
They are a matter of configured policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the detatched EAT bundle (<xref target="DEB"/>), a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
Any new format that plugs into this socket MUST be defined in a IETF standards track document.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations MUST be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for claim keys.
JSON-encoded tokens MUST use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but MUST NOT be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce MUST have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the "oemid" claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel-hardware-model-claim">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname-software-name-claim">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="secboot-secure-boot-claim">
          <name>secboot (Secure Boot) Claim</name>
          <t>A "secboot" claim with value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
"oemid" claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an attesting environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded detached EAT bundle, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
                  </dd>
                  <dt>"BUNDLE":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded detached EAT bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.
A detached Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set of the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
              <t>The encoding type of the detached claims set is part of the carrying protocol and varies from protocol to protocol.
For example, a detached EAT bundle uses mechanisms defined in this document.
Other use cases may use a content/media type.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, a hash algorithm identifier and a byte string containing the digest.</t>
              <t>The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>.
Either the integer or string identifier may be used.
The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
              <t>When decoding a CBOR format token, the detached digest type is distinguished from the other types by it being an array.
In CBOR encoded tokens none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "BUNDLE", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like an EAT nonce (<xref target="nonce"/>).</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in evidence or attestation results.
When these claims appear in evidence, they SHOULD not be passed through the verifier into attestation results.</t>
        <section anchor="cti-and-jti-token-id-claims">
          <name>cti and jti (Token ID) Claims</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent in EAT and carry a unique token identifier as
they do in JWT and CWT.</t>
        </section>
        <section anchor="iat-timestamp-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EAT's may be used in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="claims-that-include-keys">
        <name>Claims That Include Keys</name>
        <t>This document defines no claims that contain cryptographic keys.
When claims are defined that include cryptographic keys, they SHOULD use COSE_Key <xref target="RFC9052"/> in CBOR-encoded tokens or JSON Web Key <xref target="RFC7517"/> in JSON-encoded tokens.</t>
        <t><xref target="RFC7800"/> defines a proof-of-possion/confirmation claim named "cnf" that can hold a cryptographic key for JWTs.
<xref target="RFC8747"/> does the same for CWTs with claim key 8.
These particular claims are defined for authentication and authorization.
Their semantics don't translate to attestation and they SHOULD NOT be used in an EAT.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a detached EAT bundle.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the detached EAT bundle.
No mixing of encoding formats is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a verifier must implement.
The attester will select one of them.
Since there is no negotiation, the verifier should implement all algorithms listed in the profile.
If detached submodule digests are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations <xref target="sec-con-freshness"/> requires a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver MUST accept ES256, ES384 and ES512; sender MUST send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID MUST be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce MUST be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver MUST not error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and MUST use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition MUST have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the "cti"/"jti" claim and the EAT nonce claim.  The "cti"/"jti" claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The EAT nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modifie detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "eat_nonce"</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: EAT Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Name</li>
            <li>Claim Description: The name of the software running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Version</li>
            <li>Claim Description: The version of software running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Manifests</li>
            <li>Claim Description: Manifests describing the software installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Measurements</li>
            <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "measurements"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Measurement Results</li>
            <li>Claim Description: The results of comparing software measurements to reference values</li>
            <li>JWT Claim Name: "measres"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Count</li>
            <li>Claim Description: The number times the entity or submodule has been booted</li>
            <li>JWT Claim Name: "bootcount"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): uint</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052" target="https://www.rfc-editor.org/info/rfc9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose/">
          <front>
            <title>COSE Algorithms</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-22.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest" target="https://www.ietf.org/archive/id/draft-ietf-suit-manifest-19.txt">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg">
              <organization>Inria</organization>
            </author>
            <date day="9" month="August" year="2022"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-19"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-21.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="16" month="August" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-21"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-04.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'948f8860d13a463e8e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric version /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / secboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /       258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /     259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / hwversion /   260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /       258: 61234, / PEN Format OEM ID / 
            / hwversion /   260: ["4.0", 1] / Multipartnumeric version /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'948f8860d13a463e',
           / secboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / oemid /          258: h'8945ad', / IEEE CID based /
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /        266: {
                            "OS" : {
        / secboot /            262: true,
        / dbgstat /            263: 2, / disabled-since-boot /
        / measurements         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "submods": {
        "Android App Foo" :  {
            "swname": "Foo.app"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "swname": "Android"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  /
/ Note that 602, the tag identifying a detached EAT bundle is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines a message format for proving trustworthiness to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain reference values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-14">
        <name>From draft-ietf-rats-eat-14</name>
        <ul spacing="normal">
          <li>Reference to SUIT manifest</li>
          <li>Clarifications about manifest extensibility</li>
          <li>Removed security level claim</li>
          <li>Changed capitalization throughout the document for various terms</li>
          <li>Eliminated use of DEB acronym for detached EAT bundles</li>
          <li>Replicate claim optionality text from CWT and JWT</li>
          <li>Several edits and clarifications for freshness and nonces</li>
          <li>Correct eat_nonce registration for JSON-encoded tokens</li>
          <li>Add security considerations for freshness</li>
          <li>Change/clarify the input to digest algorithm for detached claims sets</li>
          <li>Removed EAN-13 references and IANA registration</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9+XPcVnYw+jv+ChTtqiFnupuLqDWxJzRJe+hIoj6RipM3
z6UCu8EmrG6gB0CL4miUv/07+z0XQJOaTFL1XlVUyZgN4O7nnn0Zj8dJ02bl
7H22qMr8RdrW6zwpVjX91bQHe3vP9w6Sada+SJt2liSzalpmS/hwVmfX7bjI
2+txnbXNOM/a8SJr86ZNktv5i/Tt0eVF+ktVfyjKefpTXa1XyTfptCqbvGzW
zYv0d3d58zt41KyvlkXTFFXZ3q2g37PTyx+TVfEiSdO2mup39GOWr9obeHKI
v5uqbuv8uglfNHfL+MG0Wq6yaeu+WF+FZ2WFj+rraT5r2rtFrp+1RYs/Lm/y
9LSEH3fpUYvLylqYY3pZfcjLdPv06HInya6u6vzjixR+JFmdZzD5ss3rMm+T
D7ewX8W8xMVnrvn0qqph0TPYqBfpwd7+o/H+XpKt25uqfpGM06KE6b+cpC/X
5exqkc1ymCFv98tsXeflNI9eVTVs9EU+Xdc4TZhxVd+lL18ew6t8mRWLF+li
vviXRj5o6f0EdkBH+mmSvoKzv8uWNs5PRV3MbrLavaBR/s86W0DLZXqZT2/K
alHNi7yB9U4nuK9wEjns6eOnTx+nr6o6v6nWTZ6e1MVHnOYUBod5ZmV6UuTz
Cnc9n8NuvEiPs0VxXdVlkdFxrcu2hi/fXRzBz9UNAeTWH/bTZ4+fpU8e76dP
ARy3wuKWPMV/+UtbTP4i8/PL+3mSnv/upCqr+c067OTPeZ0v7+I3X7/Eg6fP
0x+zuoRzrNbzm/Rtlc1sie4FrWeGG/pu/zB9+vIiWmBZtPks/VeAjlm1DGv9
w+Fhun/w+CB99OTR/rPnYaW/VTOabH+pCVypti6u1i1DEK/xT3n5If2hqD/c
VIu/6vp+rLN1eVNd53V6cXYJTxV+ey9k1BvoZXIlvfxLU7STa/tyAgCoo13e
VMusSX+smgagXIc7qpfpy2KJKw1dtvTp5Jo//Zes1gPjnl4V83W+SH/IFgu4
MnldNe7V9CaDd2/xv/WsqUq7AAAG+QKAIb2orttbuImEdxoHKNP6D4ip/qXR
TyfTzHp+k8EGTj+k72Cq9W3x24cwZtbeFLCyH2qcbz0L+5uVJcDGZTPFzSiL
+b2LvqGvJ6193Vv3m2y9SI/r6naR3yVJWdVL2J2POSLBtz8eH+zvP5c/n+4/
tj8f7z8Ofz6RP589P7QPAJLCB0/Dn/bBs709bbZ/YD3sPz3UPx891x6ePdm3
b58eamePnj/TZs/3bLTnQDNeJPD3Lz9dPKO+AH1n9Rzvz9ZN266aF7u7eVa3
N+OivK4m5TybLIvF7upmtTurbssF3KkJ/PjjdbHIv5tWVT0b386bZ4db3BUj
6F/O3748SX86PT85vTw7Ti/+4+Ly9FW6//zZ4Sh9/dPR5OLy9clkb+/Rk/f7
k73J3nuaDHWg+Bb/HvO5vSb0nC3Sn/KqWcGPbDFGZL5YFHNCu0f4n7t0G3re
oYaGwg/He0/He89wvWdHr48mx79cTo4XWbFs4pXjwmHdt7e3kyIrswmMu5s1
SCSWedk2u9Pb1i/v+Ifzt+kv+ZVSHOh2J+V+Ny0Ch3dzu84WTW7T+rkzrWhe
zX0T+00mpjP7+eL8tZ/Zz52ZRVPrzW1wcsfnF6eTo8W8Ajp1M7Rx905wWjX5
rt+7LewvDf1t9Xfs3g27vAFk/9ObN5OzV6dnw5NZAfuRLSaP5qsVzWeWNx/a
arWsZmtAXbsXq3xaXBdTAqvOz5O8BbTQTLJm9emPjX9zNvvu6cFzv5JH9QxA
ssxrZh/ewKWBH81NsUrf1NVv+bT9JyZX0MMijYZhpis9BnKcvs7bW0CJKaA/
+LxeFgDqzT+lr9fLq7wGKjRKs9mszmFPkV+Bj4oZ7Kx1tQngHsEexZfhOW7f
j2cn55Ojt+enL/xS8Gl6BJ1gz9BvVcMJLapbIIRvAdkDCkaaeL6itcI0TsuP
RV3xEQNObdrBc7guZhVQC4CLaU4HgRva0OOxMj7jOv/LugCqT9BCrzI/j3HG
84DvdB7jSucxzt08xguYx/jj/uRgfD0bH+zBivf3DiY37XKxaY+Qj+Slyyzd
hr2uPuZ4Ain2hDt3XF38cnYCgDk+mRBr3WTT5Rjg+7aY4fuTl+dHw/A4X1RX
2WIFHDjwU0vaidvVGJkDmPfueoU4tdmF+T7e3T/Y/enN8fuTYl4ACL/MgT2t
z6+PVqu6+pgt3n9EdLmaXfuzk29T/jitrlP9fHg1+48TnO6b09cbbk9ehqsM
P3bf5CX0uBB4m6yyee7HfwOcJIyBDHler+oCmEuG3XQbxtgBAPrLmiQPRSjI
Z4/bbN5EIIivGLFewitoNYfjrO/+TmyjXYe/Jp8IAnD0izcn/x6NaTzJm2z6
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
tp4VFRMuoE8VSip3V9n0QzwzZV6snOy4qgt2PXM9i0UKWTIuuCU5W04XwsD7
2sEcZBFYQGGH6JKSpWrOZYE7IcrGVElvemrsIRHqaC6z1W519Vs+FXsnyth3
HAgSKtte9mojaHehuVjm0LQlqXeTOOEkKudMHGX3G03RC+NxGSSpbyqZGDgH
ZKJyBPNgEmrtoyA4AJtpN9sP9StOOQbk7wYde1EnFRcUlvJORA50Sa64FNnp
xKSH8k1iZnuZTI0H12ilQfkyjEz+JZSh5do/TQafkpTP8Yt2s7g+WCL5EReS
d8N0qZJ/gX2gKPOdVjYJtj2qSXXkICMQFnpRomOgWTzVu4B1hiVFQBVUuVu/
oPS2FVf2lgJRs4Jqc1ZcdqzlCBo3TCBr95WHoN0PVOwz1n9A7gr+DvvxBWhW
+PWdGwXoxWtayviSjm03PZGpjK3B+IRm6lRR0Wb7KYeqejCzCiuaoJzlhhN4
I00Sr4NVDZkXZuLWqiR2FzIelg12mHzTeYKQ0lP8N1X7CQgc7n/JtTHpyqmg
QJgkbhxSrmTqHTldVI21VeTIN6njhxJGZ5ntQ44KZhiMclxidXpk0poVhwNU
wdmUK4F+LOqqXJILZydjN3X/9ujyIkoywIouz4vL5kb1fFURTCiluxWM+iTN
gksk0XdiCRlP1fmE2hs214JLeqT+TbCwW82kLL1e1yqG26G7lBUaxu46F2Dw
CU+zYdDwDhZeEW5N5TevofCCjgwS0rRZuIJ624QRCylvI1hd4cqhcvKjm+Uy
qiB2rlKWs5u8b663jO9mynfz8zf+qn6R27ZhMhQjyyn+ZyYwxFAfRC1/e9Cx
H3aA9CPm/9xtoGkHWSWLMZ7Ku/QAloD1yGfE+PwZn038sy9fUP2mO+Ho8fXw
xdVr109NdoXfqeQzdOGxkKJIUeiQz5PEBQNpWrDH74Yh2THqVrVlZcUSz1XB
XxEwt4A8P6CfBCvVkAHBsCncTGbNPFaQlLlMvmX7VBKNQoUp9QrIWxmKvkFZ
lcR0KKSIxlgMysDaOMjvgnwHn7lUHZUkE+uerab85TRn6rKIuVDqWRNcNWWY
hqN8vNuhAhSZAzA/TcfBiJehrke/XBJJlXv/M/zkZO1+yQFUmMl0pQn5CiGl
Cicpvpc06CkPqq4uFkERowcUsPOAZjwdj6fd6MSETRlamtXMihehM5JvxUc7
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
q1tBA5sxwHydYfx0nveSuJO7Wzq9qSrOcxyWSZdSRgrc78ibTEZduzl2RLHS
5AAjDNPmmZFEid7imOQl8AsavfFDjoHYxBdjTmpLy4hIY92QHlHVvyHXfDab
1XljIfpfYWYrg/1OrHpffJbWB21f8U1harfmwzuyb6ZiEeADdD4gw34ZqSAf
8reRjMbM2Qk9SU9EfeIHCSoVX+RXnKvLbpU4tS8HQUqcspHojeims+McuQ9d
M/PJiXKqJbrpiW4ujI/dsBA1iuv1qMFgFCWjK81pH81ubJDFin++O5LT6pxQ
tWuaLeo8m92ZbkJ9/9Us2owL2kNiK0U57xEfxR1hNgFLJqmFVmC7Xwqw6Vaf
EaB1U+pEcEk+oySF/oz/E+g2u6uQAKvXkStI6iLVT47BVu3Q75g0CRcg8i8C
hN9uacoZku4syD0wENrIzpc8uDZ2YIphccqoGWqnFIeF97QnHXVVyU5aaskX
z7K3hgsaCpzpPQrSP+mTkHjEQkUnIsbgg/wbjUHpthPA11igKA2EYZpVGqk3
ePdpw19lK5rPEflMn0rLr9h/pdVjodXsWL4Lon0zcqR84PU/fF6I/ySdqTu2
Ds/w9xybq6XnvHKsGlYT2FJiGtnHUTY3RvpCwtnKqfRtpGuxZJjEvty3RW5r
SLBdFy0uGT1ZwtldsC/hP3BorM0YPDB59T90WCEfF6/h7zy1//Ie66o27a/f
3jdWxv7Cc29fsc2kp2iVvdVeYh7QIsjJ4l0zJ3nPvt67pWEQANJdUZNsGhlI
jYYwDByO+pHTvDRIio4i2hyQuBsNpLt3L4KTnuNe6D5BF7Zw1uLw7aqrNjdz
IPP47cPjUFuQ5b3WQjoPQQTAmqfPHj0/SM0nITTz+niaH0dGn1+3VEZL8pWs
y8CkKuNLW+RSN5ADYzcq0vk5kX6J1Z9Z45X/uLkwn10iqW9sH5LkWGksvYly
PXouU4MgXh0di6wiUh/8UuX6JCFVuwRI4lSoz9fvXr70W8/dqiLKZ7E3hIem
rNBiRKPTraMJyF/0EK0pOhWfEPqIomiMywo3HYtdOKUAcRviEetLJ+F3vHcb
L04mVQApN4GTgSnJDsxSDRcRrY9w3b1kmbMoEaohI9sFDLUvJDk01wRQD3Rj
PRipeX8qmxZ6JPMOuROHCmlaa5GhYIWI8S9rkITWS6+8uGMzFOeMclvhDO1k
oCNAzVhs+kqMxMiD5cPBHfWH5neH7z0RGB/v6g8qtBz1GcqABURBwKR8xnae
/qUKwYPst8bYTUC+TLeOnLvQG1OwHEfy+hYLU0Evw85Bs6KZrtn3AZEsFyVl
RQ8tZkCBxIoSdgdhOW8S41QTdWS5xIiTdp4QQuhJ2G3zhCfqYjeVJXuLbiXU
zxN0CVWWTv9rzotlPq+knP0o9rWXGQVsQCJumBFONZgpggPldVAgB8uZD+4N
GL+7yI6JoggxzBaG06gUGA3KUDBgWU0vOIPZ19P04Uj1bQnW21Ed+NewSdm9
TNKwYen6ftaIjCi8WrTdx5VE711k1sYcibfMhHPXCtOz3O4n7AviUbSww5/s
uOBrlnMRaeL18JtO4LTDtAO322u5bK8k6RyBLK6f3A+g62IWadyytFwvrzg3
v84BAccnG/KL8j4Xsa7UAFIc9zWZZazF6xaS3LxYto+wEoJiREtVKRblx2pB
qfBs+yiOosypEPmG+g6qz5CIGFWw4+XBSXBt2fC5htN1vseStJPHe88jl7Ib
uOmYhZRDnfFk6A6wLU2Zgs1omazVpJcMjtkt5YsiKy0A7BiBVpMfB8Vkf/M2
0uEOJMNmUt/sl04VddxOMIZhAiQBIyNBJYviOscCdlKxAtM+cnpkdrAnF/Gu
iJFFu2zh5V83UzNWu1oxdgi28S7LiJTIDF6jxNMM4EfjsAZWkNHs+yetmBdJ
BYHF4EHDmbDXfW9VV7lkCqUkpF9zosH04FCaxhG5205hR1m/MCdeTdP4zhTt
nZazqm6YInXRn1geCASRTxLbpOlNsqaHETpzjiURvFC3FLRe2akiwOVhDh7g
QqrYSfInDrzGXdbSgm7inY1y9pqROFlngwiGDSQcvZj+CPzgTQlggpyOOCp2
DA+fPwPvg8XVxtf6MeBQk40y5w7imET7VtxaNGxT/L455NdpnSX0NySW5HdU
dUa7Vw2nZgjq5He5jNk0m4FwYv1cs5HpJRKU7qHKzESGzsP0/FybNKrbp0nC
ektXwnEPz8qcheF6at7E0sfZteugW5dcGgSGmsjCfcSTj5FqZXV6EagRd8a3
wZzXDOu+vV7bWHyOEd2YYq5bcVjhjJ2QbZLEiDhlkWrP25D+do3YgsxT/jyl
JIDm0u9YzDBrrECWaGDhrmbR3tQ5SeWiWQ0OhP/o4BHfZ58470M11BFEfV2f
lLTgLqwnHsMZMDmWgZN29AwZZi4QUyKpy1Rs6ZzuppOlUPdFk9+yz9cmgblj
tgwXhmkHECOchijqRGm+pfZKtWMJSVLvVwqIWGD+5RmFInWWvbVarOdzZK23
eNZWApAOv1cN3IkWkjhqIvUUu0U1t6OSmjvQYYV2as0t3a0E1amett2tm7az
46eda/yERKuPeL7qJKccnhQEvzw9fZNqze8mmKhDifOHMJ4sflhIH4VVZSCj
LkVpoGra2Dnv+PzojW6dKHlJW3WFkUdqH8tnA1PahK4cHvg6jcKPzJ6PRFhi
URatqRKkJJXXLNeNOm2qjuFeXSNul/XVxNJeN42+iAvu82KgtqzfCnG7fXAj
XJf37wXa+S5pxGAUPGF3gQu17Yv9L7FskW0xLVaZC7CinOiiLqYSNeriEzlN
432mUnL4hfeCMSv/pc9D4IphskU+2gTk7TCXunXY9+eI/AdwkT3bddFYpxhb
ddO2q+bF7u7t7e2kvp6O81nRVvWkque78BP///KHky3ctb+xMTT9W7BDB8T4
N3iNKvBdsj3+TeyWqAHUN2aRgbfn3gqhyI1MPJnmcY0v3ld3oqaMwcaRxUJ7
2GQQcHoE6iDWPmtrp9+MqyJTo6BYg+/fKtiS06oA7unFweMnI/jPo2eHtPjT
i8f7B/+knD99SjqMoJKCA8a+hxQ370jH2Hkn7qZEaiRdBCkzBIE5eMBu/83z
+n11CXTukouxoFfMlDCRQ4365PZ8WVVjEgSJSQqcHEk7TO5zRq34Ifbakpcc
RXezzwRO8NTLEX+TxAbqaaGp28pqUHSAaWMXr4nA/o3K2dxqaSPx9WDiG62B
spmQfoJNNhpKRmDB9An7jLy9CvGDqVTphkuTzB9X8qfxEq4INvchac2MGZik
R5S9IfJDqjk1YYQRad54yJzblirRlR1uDZ1DHLMGy0jQZkoJNgGnZx9Igm4W
pIPnJFBaF4vkzpAFy9AZkO1ykzKLbiJ8C9Ob07rFm9gdm+X25+yUoV9DVHZ+
EaumSLExEZb7FQKkeFisfw63ko1kSSt1TpheHeM44hmbr+iM3BE3kzS5oMp/
nkGkZfSKvgyuI/kmYDMybVjeEEq9//kbNf9+oWqckvr8Go4uI8v6YhF8YDjU
GdtNOvKEulw0JISTKzS6pPP1xXEk4kmDLFTfTc9wI/NPCLwNM89kBRX6Spge
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
2Uw7IZeaRYVAMiaPpQpXbVHQZmrm/HnXSXxjC1I6S6GZ61oVFynMCEepsoL8
wbuYp2Paqs0ioVjKuR9NVikCi0SLzSyi9B8Vr89URm8VrCrFtwnXJ6YItxX4
yBgwalswIfQdTiPIUk5J0kREYmbJgn3lDG2pCg2KjqI2M49uFJ9P5RampKNg
M6WQsNqXcjZXEeEK57jUKna0BAHjtK1wvTgcW3jKPYPhIH3TvlM2E9YZw7UT
woqYxZKuRgrdklYPI1craEJPkM7FAWcvABmQwHcLEWTCfC0fnzGYki4FySEp
0Z6JvMqtDdPEEYbhnGMgwVaiUGfDNqIgaA7jkbDAOzEsBV37YDlln1IazMSd
BGkDBYEqw4IrvlMuFdchNYqvSfJTmGBTkCjJl8jk+DAnzrxCAaC5v46XcxBb
TpI9UoOuw69frOj7bdNGfZ52O/NDUx7awSciPij529SPg+u6T6KSUO8x9MJD
/XDBZUzwhT2DfrR38JhrFe/Bi3uHex/gv4rBIrHcBcgjrY9cfN7ThM5DSoKk
qmtJPBd4CRHtCnA1v7XZeBKDjd1IoiZ8InfXnkgqJWtSYwUYIlkIUodD7/Qy
5kWvqRKTjLUCtInS6DzcEc6SMOmgqthpx6v4ClYVc3wVtCqnzxxwF1lcYXp5
VN4C1WvO45VyfZZr1V2UQodpaVJksoimwETWHD+GmQO3bEmxfk2imKc7iWse
VqZW9pJyjVcuhYGwO+vEzBAzvmHOMcM/RnS4FwyMlq9gxVBBtNaSDIS5HpvF
2punF8kCp37mFLmQxZdCyVSworWa1ln0rm2iizPPiSaGVUIrZOlmNcmXzZbq
8DKOyhHzczJgQdLU52maTgYNbzI9QvRxwIp7uoIvcPeia4yv57RF3Dut9KsH
3qC6OnOyOa303jo5hDMiNc2UAhnlIIv5hGSezZBTsmNZAFwtmksGRLpKLhBB
GeF/2Sxcrzaxgsuy4JMYasnXFOafrnjVJC/F42XFafDjBIJGXdwwDA4ZBldx
rAmgqwv4VcSLixdAHKjEe5D1+QaKrsTstZruxPL2bAtunTHsYUnLpYqcPF9T
SynwCoWMTJUSAhtYUC6Lk05NSUw1VN2WKkmAArCAcUqK1AiscYTSDUJpuAKC
Ti3CfOJ20Y0iRcn9XHqj55zXsjqQS0xhgYLwJW5hb8975dQcNqW3i5aeYE0j
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
ZxJKyDfqxlcKJg/6wKjQAPswXb8oflwX12Yud9y4RykedbNebiSkhYs3saq2
1rpA8dSY3m7/phLOFRWI4wqk6JFvyBgwUiaZbDBexbSLxbUxtpHKm9iYJXIC
qlJIZTxMzBLVNBL/4Tz5GOdCsWwEpimZkkrUJpcloYrK7ME1YyBvIw+EH82D
ERltWZTZqc2QpkIzC84d4PLbOsrJZTz5iG9diX8Zlz0rD8UFeI9XBqrcAIAo
6pHUD/f23qw2GU70O6esVranoXQ5lDYspz7RWusy2yyP3WUmkNPU1RnNjM1B
PMe78Q8fp/1vntX7X347/+VCtViDh4uxytbrZ0Bj8eO9Cveevs5w0z5dWOwl
b9+ZLwh0nD8HVffHD8Ho4/vw5vTy8vbshxcn3R/sABhhjh6tVMgdIDa/yBZF
IzefSYSCXX33hcKruiHu7USBsZd58E+gtM7ne34NUUUpkm2vcPLNX/zLz/k4
azrJesXFlUDoRuB8o/ilW3YQwW3P6rR2rz90X+aWWVf5aXmVuxdfflnc6uqd
zm20E3yrbyf8DP4UExkMwKprTOxpXNtwufRP07QiGl73HuYGDzSi5dLupBuP
vydo0CccOumfMGEW9hODqwv7txcet84vT15eDs+ji3dPonT0MXn7oX150Xyz
fPLq8uPR8HR4dPXq7Tdv3o+H7558fUbffPjwjyffnoyezFa38O/p0dHHo6Pr
tz8Ov50cw98nF1fPf3n24eQIfv8mfffi7eu370bPgouLzqT+3fvzN931p9dP
pqPWdx/evora33+Yf1//pvPt8snym9ej0fv+0w/vLtY/fPsq+vb25uXZj636
1dNvXrS+H8yefYJhLrKro6j+/Hr59etfXt7Uf7hZ1Lu98fXT+YfNZB3/Mnx1
3A6y7vvhuvdifP5d6x83T+efzjb/eDK7idtBnH2ZOwl2/Z4li80nDTTcK94U
ONugj2zZhs1YKqI/3StFFWBBleLyx7dPm/H3w+Rl8vSb74Jvk2ejp5fjJxP8
++ztL2fBi+TpoAEPLSet5/TQs7enzemT736B/9+eJTdJ9O60efYh/fTiw9tP
L36ZNF8e/9CGRubx19DoVScYP7nJzq5Ogx9HZ92z5Cw7W7wIfkjwd2j44sNN
e3H6/PLZ8unbzavvr5+/+uWb4MnzD5e3T/8RXr/7/iJoB93vv8l+ufnWWTee
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

-->

</rfc>
