<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2022" month="December" day="02"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message or token made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/>.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used and other for a particular token and use case.</t>
      <t>The entity side of an EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Other may rely solely on simple SW defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of an EAT. Many of the claims defined in this document are claims about an entity, which is equivalent to an attesting environment as defined in <xref target="RATS.Architecture"/>. An entity may be the whole device, a subsystem, a subsystem of a subsystem, etc.
Correspondingly, the EAT format allows claims to be organized using mechanisms like submodules and nested EATs (see <xref target="submods"/>).
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
In the EAT context, "entity" never refers to a person or organization. The hardware and software that implement a server or service used by a web site may be an entity, but the organization that runs the web site is not an entity nor is the web site itself. An entity is an implementation in hardware, software or both.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims are defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific token formats for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Full tokens with security envelopes may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization format or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EAT tokens for specific use cases in follow-on documents.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>The EAT format follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
        <dt>Socket Group:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities. An EAT <bcp14>MUST</bcp14> always contains a Claims-Set.</t>
      <t>Authenticity and integrity protection <bcp14>MUST</bcp14> be provided for EATs. This document relies on CWT or JWT for this purpose.
Extensions to this specification <bcp14>MAY</bcp14> use other methods of protection.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines a new top-level message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> socket group. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> socket group.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID <bcp14>MUST</bcp14> treat a UEID as a
completely opaque string of bytes and NOT make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the "oemid" claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte <bcp14>MUST</bcp14> be treated as part of the opaque UEID and <bcp14>MUST NOT</bcp14> be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM <bcp14>MAY</bcp14> also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash <bcp14>MAY</bcp14> be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this <bcp14>MUST</bcp14> be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this <bcp14>MUST</bcp14> be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel-hardware-model-claim">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname-software-name-claim">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot-oem-authorized-boot-claim">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in ROM, a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>SHOULD</bcp14> always also be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy <bcp14>MUST</bcp14> conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity <bcp14>MUST</bcp14> still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URI for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature <bcp14>SHOULD</bcp14> be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs attestation results with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standaridized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="detached-submodule-digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
The EAT format, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in evidence or attestation results.
When these claims appear in evidence, they <bcp14>SHOULD NOT</bcp14> be passed through the verifier into attestation results.</t>
        <section anchor="iat-timestamp-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EAT's may be used in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certificate authorities (CA's) may require attestation results (which in a background check model might require receiving evidence to be passed to a certifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is a full top-level token.
This top-level token <bcp14>MUST</bcp14> have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It <bcp14>MAY</bcp14> be a CWT, or JWT but NOT a detached EAT bundle.
It <bcp14>MAY</bcp14> also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each detached Claims-Set <bcp14>MUST</bcp14> be CBOR-encoded and wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each detached Claims-Set <bcp14>MUST</bcp14> be JSON-encoded and base64url encoded.
All the detached Claims-Sets <bcp14>MUST</bcp14> be encoded in the same format as the detached EAT bundle.
No mixing of encoding formats is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations <xref target="sec-con-freshness"/> requires a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and <bcp14>MUST</bcp14> use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements.
Such a definition <bcp14>MUST</bcp14> have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific defintiions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying Parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modifie detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "eat_nonce"</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: EAT Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Name</li>
            <li>Claim Description: The name of the software running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Version</li>
            <li>Claim Description: The version of software running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Manifests</li>
            <li>Claim Description: Manifests describing the software installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Measurements</li>
            <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "measurements"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Measurement Results</li>
            <li>Claim Description: The results of comparing software measurements to reference values</li>
            <li>JWT Claim Name: "measres"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Count</li>
            <li>Claim Description: The number times the entity or submodule has been booted</li>
            <li>JWT Claim Name: "bootcount"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): uint</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen">
              <organization/>
            </author>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald">
              <organization/>
            </author>
            <author fullname="A. Farrel" initials="A." surname="Farrel">
              <organization/>
            </author>
            <author fullname="Q. Wu" initials="Q." surname="Wu">
              <organization/>
            </author>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed: , , and  for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose/">
          <front>
            <title>COSE Algorithms</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="9" month="November" year="2022"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-21"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="11" month="July" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-03"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="19" month="October" year="2022"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-01"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'948f8860d13a463e8e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'948f8860d13a463e',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'948f8860d13a463e',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'948f8860d13a463e',
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardize a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain reference values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-17">
        <name>From draft-ietf-rats-eat-17</name>
        <ul spacing="normal">
          <li>Rename secboot to oemboot and describe it as OEM Authorized Boot</li>
          <li>Replace use of "attestations" in intended use claim</li>
          <li>Be clear about nonce providing freshness and replay protection in privacy considerations section</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y963LcWHog+B9PgWV1RJHdmUmRolSS7Co3i2RVs6zbiFSX
PbUVMpgJJtHKBNIAUlS2Wo55kNmIfZZ9lHmS/e7nOwCSYrvtid0IK+wuJnBw
rt/57pfxeJx8eJY+TJJp1j5Lm3aWTKuyyctm3TxL23qdJ01b59nyWXp+dvlD
ksyqaZkt82fprM6u23GRt9fjOmubcZ6140XW5k2bJLfzZ+mb48uL9Oeqfl+U
8/THulqvkq9S1/fXm7z5Gh4166tl0TRFVbabVS7DrIpnSZq21VTb0Y9Zvmpv
4MkR/m6qGiZ23YQWzWYZP5hWy1U2bV2L9VV4Vlb4qL6e5rOm3SxybdYWLf64
vMnTsxJ+bNLjFpeVtTDH9LJ6n5fp7tnx5V6SXV3VOewe/Egy2CSYfNnmdZm3
yftb2MxiXuLiM/f59KqqYdEz2Khn6eGDg4fjgwdJtm5vqvpZMk6LEqb/fJI+
X5ezq0U2y2GGvN3Ps3Wdl9M8elXVsNEX+XRd4zRhxlW9SZ8/P4FX+TIrFs/S
xXzx+0YatPR+AjugI/04SV9k5WyTLW2cH4u6mN1ktXtBo/y3dbaAL5fpZT69
KatFNS/yBtY7neC+wknksKePvvnmUfqiqvObat3k6WldfMBpTmFwmGdWpqdF
Pq9w1/M57Maz9CRbFNdVXRYZHde6bGto+fbiGH6ubqoSJrTzu4P0yaMn6eNH
B+k3hw8e7ITFLXmKv//Xtpj8q8zPL++nSfrq69OqrOY367CTP+V1vtzEb+6/
xMNvnqY/ZHUJ51it5zfpmyqb2RLdC1rPDDf07cFR+s3zi2iBZdHms/QfATpm
1TKs9XdHR+nB4aPD9OHjhwdPnoaV/qma0WS3LvVkkv6cLRbZNKzzJKsX7iEt
8Q2M+geYxSy9qK7bWwDakS5QRprCV7+v89kNtmqkEY2EiKGti6t1y7DKo/wh
L9+n3xf1+5tq8Wcd5oc6W5c31XVepxfnl/BUb0rvhYx6A71MrqSX3zdFO7m2
lhMAdR3t8qZaZk36Q9U0cJ90uON6mT4vlrinocuWmk6uuenvs1r3i3t6UczX
+SL9HvYHLmdeV417Nb3J4N0b/G8Nm1DaVQOAyxcAdrZ9hOEaB5LT+neIE3/f
aNPJNLOeX2ewgdP36VuYan1b/Ol9GDNrbwpY2fc1zreehf3NyhKg8LKZ4maU
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
RDre1oFmeCa1+G9gFfKS1ePSw51T+JZ53OSukj7ETwW2/hPW7EGRE/4Oh/Z5
zzEHuEfWGzDQ/d3Zj6OOt2JJYfhiAOkBRPdwIy8aOtyCcr1SchwRu/TScU0Z
38MHYAQp73nha01rwCOlzb8hGSpts7nLHsWJjqNqqJoZ8SZfrEzFy7K4pxMw
kOTl3wpztKQLcr6sajiu6PeYar3Cae389PPlDmzuDnZHf3z/9uXp8zP68/T8
x7OLy53ut38kSgcfw7fjF7jaeT4YVN8HxQBagx/YqSJkfr+mqkV3tuudfhJN
VWU02tVn6cAekHjGWzvmre01o+WinHbncobcDv4zb0h8vAHot26NlD8O5dy3
oK7tHchmoml8nC3mIFu0N8tUvLD3U43LFByv/555adgcsV86aDZtqdUUCdQm
C/PtFXivtG6fs91QM17WGBB9iI0Q2erTp7cnJxefP+9NOlPQYh2UFSdc0auN
UCC6xZowD5jImZTboHvPwlindGg2m1lQsdJmni/ilinJlpwJGD1E1/Ol0FOc
xTBqBh52+p51z9Ro4ErjTAavK39qLm6zXLKmZz3cN4qIYsQWzzDgftmBHkwY
R7ujxTCizJ7R957zJYtPyAdGJp+R2HyyGLxHISt0R9drcSDqD6FD397krcbU
d6bQZbizO1ju4IdqYRreFTVeKm2Z4wzbXpCJxYhYTOD/+h//E7Do//of/9cI
/8QT178ZD8MvniOnEhpHoN4ac4OuMhF8j768co0Q0BgoVkgxO+8w++hOND4a
wtkjP2Xqt79wJS6DE71DBjo2Xx7pKmQUUjxQ8O6Iz6K68Rf9Apzdm9Bl8Xhu
TNnJkMUF5Htn3s2M1bkcKIj6aUbDDDHLrAToQFjnu7u2KOIotvbQ47HwS28a
8F9GSCK6nFQhqc7jh+qSwxLw8L4qBIiKn6qe1XB7VhULUl+gZN0wWV+wmeSL
aNQu9yS++Q6hiRWX69cAm4Zfrkt2tc+utUKA39nbOlutJNtJnS+rD4Prhf8u
qiaSDF13xDNs6yna9E4/veVGje+9XFkKGXp0RDtEqcgjH8eoqoOeyvyWO4kQ
VLVuGyt/a3T7WrBDIIlKnaFfRF/Q655oO/z8XAo1hyxJkfYlRnkcvN6J41WL
h6BnuWt4x4NnN7QT7y4y9ADBrkXAl4iNRwdPP3+GDol13t6jpqQjBZSVyIqu
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
x/BNNTelJt6/z5Hg+/ee95+Lcbb8e3GeeK9SPU3c27cmzOeYPQr0cGnilLaF
rbiktmXeYaf7bzFxjsGqnvpZfJlYNBlfnyzNW7LPdp55b+vML6Plnz7jryVt
zX95/HzbprvPbNlszqC7hcLNdPu7bDRVQGQAz79uBZ5jSl/1CtBXxUormvFX
tR6aILjDmQ87g38L2jfr8C1no91BC/KUqR5CO1WxDprbtstKdLezPyoZ8+ef
f3YHYUBa9fRPBX07V+OdwsVQmsmlUhVTiCeUzplfhbAbbpsvDGEeR4s/fcZH
mFSKEO3rzRa+Z6bMmacozykT1Yk4rJqx5qMWZ9zaNmMF7KVCHn8JxWss6nZR
d16ONa2aq0ml3YnI2/9XGT6a0lr76tb9zowP05bl4wSMbWqOJgfvtAqdrauA
UN5ABC9ZHP25510TrjKNv9pOC2pdiJuM7onM69WKAKc/77Qc2/WfP5Yo6E6Y
MiSGasmwGel5+8dFqwjexVJDeSNqTaHueltRFa2MCSMkI8gQ4YhLHP3BVn2T
0r6rl958V1YwOVm8tLzbFtL4bf8qzcLENW85aCo50RFLMoQKGldN1UQ27zxZ
QqD502d4qrl6b7M7uYmT1+dm9VVNV5L0d57sXy86jp69HG6RlyM3JipTpzxd
1x0l58ka7KZn8Xot1yJD9JADE6gUoQQ9sPMq/EUqUjpb0+HGP7dzSwqgll3O
9JXVZrFwap9IzEoV62QMhZ2n/lcITjPxW/XjNxzIqGE0v2XqWzXmf4vZm4qr
WywlU5BVPEIa+2VWgu7M53POLrh9LSzQxb/ZIXjuAGpsWQfnieI5qElcD6oS
s+R8I5iPppD93evi4nn8my2NJRSnFvBrxhfZfmQEgIRu8xnLCtUrbcqdL9er
1jp+7IXdtkaIXvJvtjykE4wwW+MW3snpEAT/6kbuoHgzCAEY6UceadQNqnVy
i8iyu46U8MD+oDUgdZOitN++flG4IVu7N2SU6cTfovtss1p89jy6X0wyR/+k
vefHCpcFVOdzM+aqG8Jk946Ov6WOz+QL5+6MotThCU7nyZdA3Wug1qalwFpU
csj7VVuh6qtmx8pwFfkfrAqrxEp/Q0M4Q/6u7Eq1LqZSQ/lKd9hQJi39WnJO
3tJuuSGxCiKqulgVWkF3ABxhIMsnd8SEDYZVIfGKuHK7xN9OtoBTugqrlJmY
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
Gke7NhKCNdEej/uTHuxS0I3arclg0AGWDtZ9tJOBDT9jsI4HnV4w63S6g/G4
N50Awc8G/futCYgY0vanqMIDhUyAYsKgjdMMdyX71rQ1tqsRdaPBdDKdjVt9
MLGjXckexHU7bsdB3I/73RCWoz8Jp+NJrwkiZOfdabeiQdCC4zuNB61Waxx3
dwki2MUeufOR26MDP9tbRo0GXhSZtokHVj2KQ1Ve14GZ1lGeO/HCqkLxI4dY
qUjv3fb8fUJ2nSWIebPhgOEMUdxPTbGGTBTCikR3sDf2UwnoigpFtM7eHWiC
uy9X5BJbeN8IYqDzsN25O4Y4pOtfnVodRZLgXFNytHO/fEeQsVnFPyzM+M74
Wxt3m9+fO8Nv7x84/NmMVkkqN97WLmG0GEO7mxK2c6StE2q7ep+k6/dpRtG2
xcAcaCDDWhC+X2oAiKXdAVbU7lS8RIjk5Zf8nWdifkipPPt6uMVNeusPaPBG
KLK0u9/7MMuCdLzv+ypNVUze9/2iWN2JafLPLq6cXSPa70tYYE1Secmsscom
9ySqfrM5+JNp6ncSldUqWF2476YW1Yt7E6WoI6pn3Pf9ol7y/whRMWh5Y56M
70lRYQsoqvXvzKZ+o2Zmfooq2n3fz6t07V3VS/Pzm3Q7/tmRou586vZ2nAQQ
8nW68ZICo4M+LaoNwD5J18+JH9fFVZlL9zbuToop3ayXGwlR0aqbAtLNpXzi
qbHA3f5N8ZpLKt/GVQvRw96QMTilIU27WMQSYxWpIomNQSKnniqFVHnDxCBR
GSLxB86Tj3EutMpGVJoqJ6lEYTrF69kja8ZA3kMeCD+axw8y2rIos1Ob0Uy1
YRYc67+YupFSVNUU37oUfzEue1YeiovJHq8MurjB7FCgIq1pu0elcWGi3zqV
sLI9DY3LAatJ0XjuQmab5eG2zARymro6l4mxORjlwLw+fJz2nz6r97/8Zv7z
ueiwe+L423N8fQbhFZHqyk49+2IyxUeSt+/0M0IGR732hw/B6OP78Prk4uLm
9PsXx93vtT8BgKvWvB2MNMv9ROXGvziawCysfcbhlGaV3SsEl1vnuWqJx+5F
83k5EGAv21AQWj4XzDnw+iv9+1M+UprOrl5ScbkO8umfbRRk1MuleV1QDQY8
IlgkWb19XIYIq3j0uIrH1o2en9Zp0V9/6L4s7syT8s50z7/8Utdf0IzvogYn
0lbeTOiJQlqCQUq1Jsaexq4Nl0v/JE33co5qhzzguwZMXBfcyPM9gXI+5qBI
/5g6dgkAQ6bdHdwLj1pnF8cvL4Zn0fm7x1E6+pi8/dC+OG++WT5+dfHxcHgy
PLx89fbpm/fj4bvHX5/SNx8+/OvxNz96x6PHs9XN42+OTw4PPx4eXr39YfjN
5Aj+Pj6/fP7zsw/Hh/D70/Tdi7ev374bPQvOzzuT+rfvz950159eP56OWt9+
ePuj9ypqf/dh/l39aeeb5ePl09ej0fv+kw/vztfff/Mq+ubm+uXpD6365ZOn
L1rfDWbPPsFQF9nlYVR/frX8+vXPL6/r318vfvTq3d746sn8w2ayjn8evjpq
B1n3/XDdezE++7b1r+sn80+nm389nl3H7SDOvtSV+8ms3LNksfmkwYNbF16/
Ly/8Ziy1158UVvzJuze5BY9vnjTj74bJy+TJ02+Db5JnoycX48cT/Pv07c+n
wYvkyaABDy0nref00LO3J83p429/nv7oPf725jS5TqJ3J83TD+mnFx/efnrx
86T58uj7NjQzj7+GZi87wfjxdXZ6eRL8MDrtnian2eniRfB9gr9D0z965x+u
24uT5xfPlk/ebl59d/X81c9Pg8fPP1zcPPlXePXuu/OgHXS/e5r9fP3Nnnty
czkO/glC0PCBzePCgM2eTKgMgHxecSV5PDo6G2pVQHhUpTenI5bjxRnwpvig
3v5RRWVpmeX/vIFhR06eZQZnltPSsGgnCjO9ACQpIqKFgpbOYFQBOeC9brDv
B/192c+LB8OgGYTdB7fgZPgPnZrAF3GEVcHVl//L59tfjC+XWFx3UW5AQqhg
AGHzsN1thu1h97A56PWPjpvD9gDjK5phs9VsNzvNbrPX7PMQnfxgeX9wODgM
TzrH7R6GeJ10ob1Rf9gOOr3DTq/bOhm1O4fHvY4qqINhp0VgBZ2g1+v2R2Ew
PDk57Lc7w053eNjp9I7h9UFP9dFhE9TTXmsQhO3WsDcYtXv9Tjc8gte7QXgM
9vmoG4ZBV6304WHYavX6vQe3rIpdHVO6EVfjJ//AdzOGt8O3IehbGfupZu9p
mJIK98SUYuPeJVO6TUNqoEtzTpR76XVS9Fh1mmMGJWhuXEhhYsvgOgBKFu6K
FUu9AOaqcyzxnO6w5VkcT4V6pTadNKvJQVzEJsKah6htqgC1fklTvzx3PW5y
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
zF9gtIkKStJHuBbeja+l67Vz1sZsuJ6aVqSagUaGQrG4HnK8rXauaUYFbcaT
Cu8FkaxxNci5aC6kCmWFtxveS44fwSt+bAVDDbiiEMYyijkqlQbZ5hMvkQjv
MaU5VvQvHMlYwFhMBia2Ys+/9fzILQPlwEiKD75nWnNrQEJLaD2T1iPT0QtT
lgbDhf9do9McaJkr0pREWOnNKoWGiUIDZiT+zYGdLgemqCZpK3eQ3Osaw53k
JYOzcMnhkNAyt3DVgndAo85YleQBUaiUO6psvZmhhLi+QFCnXJbCZiF8wOZA
ySmvGKJ3OuPdKX0nYMhiJsNM2FyTK2FVsaIFHzZZnE1mVR1+UVXaUsQMf32J
ainY6XwX45qAxUouxhBca51Ox2yzEpfVORyDdUKv5UJF9R65/5PmJHgmQk+B
Eg9RngBEiFZtdQLSx15JdPhEwnljxHTAiAbzec1Zvny9lcg4Ryzkg3iQmBn6
JjhrnsziPFulCYJ4YT90KpFhdNFupKCtuglaDpyDGwpaAII/U6exO5qFbK22
LEMw+juOoT65meB5vhJQiLJhYLwUl2g+0pCTzFkOXHgQZwkaHWzfElMxvrT4
I4NlUOc4CRyQLJ/TirAKW0yTurmmkChmQKWhoRdSa1TdwycjZuzutqJoOwWT
XHrMNVRhEdFBIPMZPyBrOHbCB5Xq0S3tfrmFUdPRxwscWK4Ha14wHo6zlIlD
tttmBA09yApL5TaR5VoxN+SZWzMV6YfIh31+o6OjZ4xeKymyGFX+yxf48Xv4
+D18/BkJDEPDWxgaTh5+qnWWXZCDf4aRktQMfmOvDUy+LRI4V5plc2WJ92Rc
cwlfQ86sl7jwKLUk0hg/onFpyVz2vRJpym00U5xWshWdjQQTNSTRSCZx10n5
wUlrfDwndtbZ2zjFCrJxZuwhbmhld438OrAgg2aHY+X5CoTDeXCYL16+IX5I
5Zqv2JWlN1f53cPZ8TioHiAth4QzZUQT7rasYk74JmVI27btSdA+NuL93WQH
gzUy56hKduZMV9FsXQcDYVYH6sjqm8kkw/tIsy5fSoj8f/n/8R/24zr/Kt/Q
H/VnWJrLb8xiVo32SFLC/tQlBY9Kd+35X36Fbh7vs+e+9SXyeUQ6hJc8zuKr
p6s6aIbwFX3oVXTvP3z4pb8P08q4D+4Ce8g34R/c8jbYU7/j7Wgz/R1vg/lW
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
OXDKiyHOkmk+2lahezZLE0ZbZkvq7xaxY3U6F6+P1kmPI1rjI2dpaLOriABE
z4ovbniGRDf49gu+eszviBOIA2Ku2EuGhASfNfAzJSRak4xBPZVYBdsLFLY1
8WyyBW3/5Ayi0CY3IU7SNHIZBfJO5kTB2epa2qsVVhIQzinEVfQ6QXqdCL3q
WlL0wiE5sohd5SQKS3ES+OWNQwwn8XsKOa3iuplMgVPkQU1ooylGkfNm586j
mehCa728yy8Yp57FyLPLvfh5ieH2r7FUinpinFSkf1YoSwYFaZG6Z4qjVgrq
0qVJqaU8CLwtKHeJiMP5XvHTzUIIngN5L8VjjhiH6OVKIk7B4GAHIIp0bKwQ
Z96ZqSrhfJiYcVpbVS7Ga4JGR99K2IVc+JCAHeUy3bhcxnxu/bgI86UjReog
D4FOqVKnYsvUzJWEvhxuFbqkicL+ri+kXlvFrkg75E1HFwRHnouFKKJcb+mN
rrpZ19NZfcxJoxh6mmSXxmTkIE49YKz1lGjVuhkMKB9deZo4Zn+FNwgF2Yd5
CaRB40TGN/mWhPtFU0yCzNaUtm1cnNukaYH7s/WSOZiSxNGrTYSia71CxFCw
Ot00cA4dUipH62ORZLajCkNw3imaXQ30OIv9JFEfNlOucHCVmkz4UTEqyGcd
xo2DsRdXieh6jkOHsYs5Cji1Brh6EtCXTnLFhoIb/A5GOxUfTtdnx1NRZdea
i6JAiK3vKBASBSspMXRB+EqBjEh6ZBUhGFblx+qEC5tRY8+3U2vRACNR6GWm
OI/UBIE9LuqquUkUjshjtNtIxFzE86WPrcTXKCKy2MnHwaku1p7emxG46ZAE
2yq+ENctdAdkSyfcxuciKCVFdh+/OaErCCCfycd49SBTpXSmgG2qCjLvOakK
IwVFvB70vLr/Ol5woiAVmyNeKADw7D7nI8zYU5SmN+S5o8PxEB6jJsgDpL7J
PUeoYUXFhfXPbjQVDN46xF8RiIarVXI2gs0TdrLK6HYJurhxM5opMBnE+qSY
QKw05nn1ep1TyJPxBtZTbgDxQH80edCWTpwnGdUYV8wXxHpzVefp2j7y/g9p
wwiLjmUCAA==

-->

</rfc>
