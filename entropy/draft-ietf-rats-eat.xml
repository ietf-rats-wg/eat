<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="June" day="30"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, {#swevidence}, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption.
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT.
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-18.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="14" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-18"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9aXPcVpYg+h2/AkE7wmJVZlJctPbYNTRJu+iWRI1Itbtf
TYUDzASTKGUC2QCSVJbG/dvf2e+5AJJidc9EvIg3iooyE8Ddzz37Mh6Pk6bN
ytlv2aIq89dpW6/zpFjV9FfTHjx9+urpQTLN2tdp086SZFZNy2wJH87q7KYd
F3l7M66zthnnWTteZG3etElyP3+dfji+ukx/repPRTlPf66r9Sr5Jp1WZZOX
zbp5nX63yZvv4FGzvl4WTVNUZbtZQb/nZ1c/JavidZKmbTXV7+jHLF+1t/Dk
CH83Vd3W+U0Tvmg2y/jBtFqusmnrvlhfh2dlhY/qm2k+a9rNItfP2qLFH1e3
eXpWwo9NetzisrIW5pheVZ/yMn1ydny1m2TX13V+9zqFH0lW5xlMvmzzuszb
5NM97FcxL3HxmWs+va5qWPQMNup1evB0/3C8/zTJ1u1tVb9OxmlRwvTfTNI3
63J2vchmOcyQt/tNtq7zcppHr6oaNvoyn65rnCbMuKo36Zs3J/AqX2bF4nW6
mC/+eyMftPR+AjugI/08Sd/C2W+ypY3zc1EXs9usdi9olP+xzhbQcple5dPb
slpU8yJvYL3TCe4rnEQOe/rsxYtn6duqzm+rdZOnp3Vxh9OcwuAwz6xMT4t8
XuGu53PYjdfpSbYobqq6LDI6rnXZ1vDlx8tj+Lm6JYDc+eN++vLZy/T5s/30
BYDjTljckqf43/+9LSb/LvPzy/tlkl58d1qV1fx2HXbyl7zOl5v4zeOXePDi
VfpTVpdwjtV6fpt+qLKZLdG9oPXMcEM/7h+lL95cRgssizafpf8M0DGrlmGt
fzw6SvcPnh2kh88P91++Civ9WzWjyfaXmpRVvQTYusvxxnz46eRgf/+V/Pli
/5n9+Wz/Wfjzufz58tWRfQDDhg9ehD/tg5dPn2qz/QPrYf/Fkf55+Ep7ePl8
3759caSdHb56GZrZaK8AwbxO4O9ff758SX3BXc/qOW72zm3brprXe3t5Vre3
46K8qSblPJssi8Xe6na1N6vuywUcwAR+/OmmWOTfT6uqno3v583Lox3uim/z
rxcf3pymP59dnJ5dnZ+kl/92eXX2Nt1/9fJolL77+XhyefXudPL06eHz3/Yn
TydPf6PJUAd6OfHvMQPKO7rL2SL9Oa+aFfzIFmO8+YtFMac7eoz/2aRPoOdd
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
LRK6iigKU3Ei+P2Do8xMrKIWcKrzcXACijHFJO2Z6ih0t6tCKOLy0/0No4C1
+xxxdn+UNKYYUbEvFiIs/fvsLkOJXfjgAWbJHILKyt8prs7RYZc48kOfUGRt
f0j0bo1HxafrklkQ0XpYlhDMCYbgxB5SuWY2iUovhHWHcuTuYWHzDLKq1IkZ
iTcOvWVQaZgzuWCNblSKmYqToSWXrRt0IHE+EyqgoEsa5KlYMrW1EtG3zBRM
dIkThfNtbzfOLhKfivSDUge5HXKAsUiIQsq5yp7jVdctunxc00mZ1tgnmAoX
jLmeHqwGNQNDumavV8UbkFv03+7QPlQfEweNC+mWWxDsl81gC9hTgCppX9y0
FGc5TE072J+ll8aVGiaMPiwixMUKhgZwtQvYloSQyvpBgDnRyHSm4Nr0M4eH
aswuBC1Yxh2sKjSZa2+wdgkmYx6G2G6pdUScX6t1Rb6a508sYTyZAjPIlXlI
5ef8cemt6nCep6x46rLsaq8WBkJkfcdA4HVSX+kmOEdbFR3CFMKti8uicsbz
bC0hG7y6KA0DcYAasOpFnomkqK8LLTphwUXRMHR3UFEgfkLkILWsZpr14R6O
ZcHOFshPOJO/eIwoH1cC9KmHfzyE5FPueg1QD9B7toj6oZWEMJWwJl6Gpa0Q
z2ammuwi7D1JXI7W2Au6E5Mbe6n/HrmaT8VZlDZmW5TUcLQSmVGrlpkUKZPF
/LU6zJ8K3+sHDL4dEr7LIWWVSJmdWukawRA4OMmzwNGrQZ9HCOGGzR2cqbla
XlNqA3LfigsdUjI7RWxSZk3MpqQwky8UmpSpd5XtqYQTcloSPiOL83eqi1TN
A57J8QITYM7yOPUDviH5xYzhI56KwIBmw7DJumxRcbtwz20kIOsYp4OYZcW0
nU/ujcjcemrocNlPDx2J5+RaQCZOEE5GRG3hTyS3xnBWUgyatW62QxqgOpvV
pLljpuwja14Rv4Rc0Ahb8U2Qxhai45M3Spg9Q2FwCcLORtIxsel4JhgA4JQ6
wTP//Gbo+chd7XDdVaFC5xPTU7afsfuM3lksFegyXhlCUqYpTFn2xtkHu8Zo
3GT1J+5Y0zoFenTnmGiZ+ygmBYmy5/D9U01ulBfVvOBXaWR3d6LJ22xFczqm
jAVn0vJxZycaq3zMeU4ks8PeMls1GJ3+wGuFETYMan7MY04oC+0yKcxiiVvJ
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
ltjfS8WzTqx2kfQM7/Y1kbIvHgXi5HlfV24A8LDTvduZOySTty6tgbQI2WAq
J7hB07xlHG/39ja7+If5e9/pCG0doPPnc6cf9P09uD+b2ZY5MOxwF39mdGbe
jQfb2eXZ8XlevUvS9bs0I7fnoocTdJBhFl3fL3UAwNLpttD3p6IRMioVjfyd
V2J+iKM8+3a0Rdd76w9IAoYaMpm7X3tYZYEs3re9klGlj/dtX6Snu7qx+bsp
lnYNLbgvYIHAQwVVsuYqm9wTqAat1vBPhqnfCVSWnWA+4b6HWuQr7g2Uwoco
g3Hf9kWG5H8IUHGl8eY8Gd8TosI2QFT7XxlN/YMsmfkp8mb3bZ/n5Tq78pXm
5x9j6uhnR4j63fyficQhzavrXvqKKh+Qno3y+bOe1NW94uOGqE9zIfpGBUt+
uZv1ciNeOT9QpvpYanBKEvR4akRvd3yT9vuSqjtw+SDU9zdlDk6dUdMvFqtD
106uAWvcrmz2ZM797FauxQTuoqOkUsEFVzDjgqplXsTLqVBTFdWZZhak0+Sp
8KdaeP0HrB9ndaHCzk6Rh4VrvEwXHHDBZe10hpOLmCtwX4r+Gre8qlIrVyfG
qIvrmPJ/r3DqRlF6vZIT5Zp8Xu31apOh5uwHp35AVlNPQDdO3RS2pSG43oCE
FLlTz/HnquZmdFYDrvAdqWJRSVh7/2E6+O5pY/D19/Nfz5V3rcHW06bTJ1Y7
6LxGHR45cltVYG06PkeYoce1Cp2fNk/jy4Qd8OGP5M1b8wIrdstz4H//+j44
/PAuvD65uLg5/en5ce8nO79r3BT+tJJLhy+EO8eP8rhS2HTzTHwparhnsNZ8
g0JTPSnXLFLA9mXE/DfgZOewl3WY1oY89GoFdGD+4l9+zvue0/VWq9prsm2Q
KeJsI+E72w4YDm9+2qC9e/W+9yK3zbrLT8q73Dv/+uviUVefdO6gHa9ibZ3w
N/hTDAuxMFYAMV9esytAzRVAaurON1ou/ZM0rYgkyHXrWuTtebshDbUzNqIc
s+Oof8zgWzh1dEsvnHItPGqfXRy/uBidRedvH0fp4YfkzfvOxXnr9fLxy4sP
B6OT0cHlyzffvX43Hr19/O0pvXn//pfH3x8fPp6tbuDfk4ODDwcHV2/+Ovp+
cgR/H59fPvv16fvjA/j9u/Tt8zev3rw9fBqcn3cnjR/enb3urT++ejw9bP/w
/s3LqPPj+/mPje+63y8fL797dXj4bvDk/dvz9U/fv4y+v7l+cfrXduPyyXfP
2z8OZ08/wjQX2eVB1Hh2tfz21a8vrhs/XS8avf746sn8/Qa259fRy6NOkPXe
jdb95+OzH9q/XD+Zfzzd/PJ4dh13gjj7Ondf7P49TRabj+pmWSuaJu59Gpux
1Cx8Uit5PdSevH1dPIX45kkr/nGUvEiefPdD8H3y9PDJxfjxBP8+ffPrafA8
eTJswkfLSfsZffT0zUlr+viHX+H/N6fJdRK9PWmdvk8/Pn//5uPzXyetF0c/
daCTefwtdHrZDcaPr7PTy5Pgr4envdPkNDtdPA9+SvB36Pj8/XVncfLs4uny
yZvNyx+vnr389bvg8bP3FzdPfgmv3v54HnSC3o/fZb9ef+9sH68qF1/in2CB
A77a+aoDB1GWTKgmlTyvsLkeHx6djbQ4C3yqrAAHmZb97bmcQvFDNW8C3rzR
npmZmDfREcuJnoVT3HCwIZbiQuqoFk6ueimFtNCNCwsPBaTG93rBnh8M9uRy
XTwYBa0g7D24JfuJ/9Cp9HcRR1Ms3iDc66fPtzeML5dYMm9R7kCcymACYeug
02uFnVHvoDXsD46OW6POEF1HWmGr3eq0uq1eq98a8BSdqG9pPzwYHoQn3eNO
H53eTnrQ3+Fg1Am6/YNuv9c+Oex0D477XeV2h6Num1JQdIN+vzc4DIPRycnB
oNMddXujg263fwzNh31lbkct4HX77WEQdtqj/vCw0x90e+ERNO8F4TEI+4e9
MAx6KvKPDsJ2uz/oP7hlV+zumAo6uBs/+/u+Gwd+FK8j4HW43MnBZjFFqDuV
6iBYSYSAwNSPLUUyuXZximpirmyq3ToBAaXmZIlmtmuOIbCmKvjE1rFzKnHY
OinMkKoxe5qckxMV1Q61w2HPszieCqDyV9qtxmA1abERVplBLlXZX6vP5JUV
Tf0mhMspx6JlS9cXm0wvKNcSn2xW5aZN70wc7mPnhCYp1SDHhzJhE2FiKovk
t5S9HniMJtdrxWOTKoVSSA/Y7fgSCTfOYrNYI2dDHHAVxpi6IDEmkPD3oM99
VDU2WaP7PF2LjwLcKU7MhOVX3HrJEc/DVmBZxedYrnKlgfdYhYVwRSvc+5t6
BZ4kq0xCCiz6ogo7Fm+5goNUc1vkDfFNnyrrmCpcWI8xydVkcWIbTVEW7cFs
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
E8pFgLNYJwzbur3R/wdsPf7a8YwCAA==

-->

</rfc>
