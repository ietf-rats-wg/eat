<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="June" day="28"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string and every bit in the byte string contributes to entropy.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, {#swevidence}, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption.
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT.
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>A profile should specify which algorithms the sender can use.
A profile should specify that the receiver be able to accept all the algorithms the sender is allowed to send.</t>
          <t>This specification should be for all uses of algorithms, including those in nested tokens, detached digests and nested signing and encryption and such.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A profile should specify whether or not a Detached EAT Bundle <xref target="DEB"/> can be sent.
A profile should specify that a receiver be able to accept a Detached EAT Bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>A nonce is always required by EAT.</t>
          <t>A profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>By default only the nonce claim is required by EAT.
A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the nonce be a certain length or the location claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The manifests and software evidence claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-18.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="14" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-18"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+S9aXPbWJYg+h2/AiFXRFpdJGUtXnsye5SSMkvZtuWx5M7u
V68iAyIhCmUSYAOgZJYn+7e/s99zAVBWdc18eo6KShHA3c89+zIej5OmzcrZ
b9miKvM3aVuv86RY1fRX0x48e/b62UEyzdo3adPOkmRWTctsCR/O6uymHRd5
ezOus7YZ51k7XmRt3rRJcj9/k348vrpMf63qz0U5T3+uq/UqeZJOq7LJy2bd
vEm/2+TNd/CoWV8vi6YpqrLdrKDf87Orn5JV8SZJ07aa6nf0Y5av2lt4coS/
m6pu6/ymCV80m2X8YFotV9m0dV+sr8OzssJH9c00nzXtZpHrZ23R4o+r2zw9
K+HHJj1ucVlZC3NMr6rPeZk+PTu+2k2y6+s6v3uTwo8kq/MMJl+2eV3mbfL5
HvarmJe4+Mw1n15XNSx6Bhv1Jj14tn843n+WZOv2tqrfJOO0KGH6byfp23U5
u15ksxxmyNv9NlvXeTnNo1dVDRt9mU/XNU4TZlzVm/Tt2xN4lS+zYvEmXcwX
/7ORD1p6P4Ed0JF+nqTv4Ow32dLG+bmoi9ltVrsXNMr/WmcLaLlMr/LpbVkt
qnmRN7De6QT3FU4ihz19/vLl8/RdVee31brJ09O6uMNpTmFwmGdWpqdFPq9w
1/M57Mab9CRbFDdVXRYZHde6bGv48tPlMfxc3RJA7vxxP331/FX64vl++hLA
cScsbslT/J//2RaT/5T5+eX9Mkkvvjutymp+uw47+Ute58tN/ObxSzx4+Tr9
KatLOMdqPb9NP1bZzJboXtB6Zrihn/aP0pdvL6MFlkWbz9J/BeiYVcuw1j8e
HaX7B88P0sMXh/uvXoeV/rWa0WT7S03Kql4CbN3leGM+/nRysL//Wv58uf/c
/ny+/zz8+UL+fPX6yD6AYcMHL8Of9sGrZ8+02f6B9bD/8kj/PHytPbx6sW/f
vjzSzg5fvwrNbLTXgGDeJPD3rz9fvqK+4K5n9Rw3e+e2bVfNm729PKvb23FR
3lSTcp5NlsVib3W72ptV9+UCDmACP/7lpljk30+rqp6N7+fNq6Md7opv868X
H9+epj+fXZyeXZ2fpJf/cXl19i7df/3qaJS+//l4cnn1/nTy7Nnhi9/2J88m
z36jyVAHejnx7zEDynu6y9ki/TmvmhX8yBZjvPmLRTGnO3qM/9mkT6HnXWpo
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
oihMxYng9w+OMjOxilrAqc7HwQkoxhSTtGeqo9DdrgqhiMtP9zeMAtbuc8TZ
/VHSmGJExb5YiLD077O7DCV24YMHmCVzCCorf6e4OkeHXeLID31CkbX9IdG7
NR4Vn65LZkFE62FZQjAnGIITe0jlmtkkKr0Q1h3KkbuHhc0zyKpSJ2Yk3jj0
lkGlYc7kgjW6USlmKk6Glly2btCBxPlMqICCLmmQp2LJ1NZKRN8yUzDRJU4U
zre93Ti7SHwq0g9KHeR2yAHGIiEKKecqe45XXbfo8nFNJ2VaY59gKlww5np6
sBrUDAzpmr1eFW9AbtF/u0P7UH1MHDQupFtuQbBfNoMtYE8BqqR9cdNSnOUw
Ne1gf5ZeGldqmDD6sIgQFysYGsDVLmBbEkIq6wcB5kQj05mCa9PPHB6qMbsQ
tGAZd7Cq0GSuvcHaJZiMeRhiu6XWEXF+rdYV+WaeP7GE8WQKzCBX5iGVn/PH
pbeqw3mRsuKpy7KrvVoYCJH1HQOB10l9pZvgHG1VdAhTCLcuLovKGc+ztYRs
8OqiNAzEAWrAqhd5JpKivi606IQFF0XD0N1BRYH4CZGD1LKaadaHeziWBTtb
ID/hTP7iMaJ8XAnQpx7+8RCST7nrNUA9QO/ZIuqHVhLCVMKaeBmWtkI8m5lq
souw9yRxOVpjL+hOTG7spf575Go+FWdR2phtUVLD0UpkRq1aZlKkTBbz1+ow
fyp8rx8w+HZI+C6HlFUiZXZqpWsEQ+DgJM8CR68GfR4hhBs2d3Cm5mp5TakN
yH0rLnRIyewUsUmZNTGbksJMvlBoUqbeVbanEk7IaUn4jCzO36kuUjUPeCbH
C0yAOcvj1A/4huQXM4aPeCoCA5oNwybrskXF7cI9t5GArGOcDmKWFdN2Prm3
InPrqaHDZT89dCSek2sBmThBOBkRtYU/kdwaw1lJMWjWutkOaYDqbFaT5o6Z
sk+seUX8EnJBI2x5yOkJT7nZYkeMmqSRgQrpZbZ2YORbgodqvgxTSkGExL9n
uus6LjpTXktBsFaBKPgkhRLiau0LpmWiLpigI7aIdYrs6PSZ8JgLaLed3CHV
xka5Tc2TfZVGtnMnXrzLVjSfY8o6cCYtH7H/onLKx5yoRFIz7C2zVYPh5Q+8
/ofPC6VDKc3jjk0G0sX/PcfmqtW76LGgmh5Z1N8J85Z1sFnGREv0gexXrwRl
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
kqVqjGW3wg7Cr8VDcAAk+Ho9H6Mwu3ZYNnqqSe37D79PAfnmJZqjtm0nGiAe
8XpM8f40+W99CbLuMivZsvqNTznDLmAt3wgWEiY99E8OQD6B/X8GNNrWMfxP
2uhX0GjfNfKr297IfSX59QfXvL29+0oy7z+8E70OBr/aeQBRRf+OHmJlnqqP
SgAyeyLYJvpt5ByLMFF4K7I+JIbzfDDUdfDFv4SI2P4bTF6cTTfb24y3f4Jh
+1TooPuiWaEypvc4VC2DV/+l3KsNOKf5rZFrAPbEltk9XX3h8QDCVlh/t4G+
cC0QmGxXug30RYRpsIHuRK+BvOgWcBjYw3iEsWuJpRx0R3sjyAs/QPoCGvBO
p/0G9CL6PE1fQoNwBp0G9sI1eoVrmOdp/E/XMM87/afp6wchfr2iMw9MMwss
25kjQt0NLMTh7yDdPITG/7/2vrS5bStL9Dt+BYo9byzNkBIB7u5JqqjNkWPL
jiXHSeelXSAJSrApgk2QkpXE77e/s957sVCiOumenimrumMJwN3PPfuSTlLK
ibP1YF+qmfyLVDN5gBOdzNLIocs/gXSDj0TYQ+bT/qncGT55r+tbPnVrutn3
INmvUEf5nvp+yiZAQU30gVMex/3mXub5MeXkHli48Sa0ndlHynjnn+AG/Kf5
qsEuUz/br+SJ2SfxXqS2wLbSlan7uVfcguup/9u/mY5G6eROxKmNtLH4OclV
X/P2VbyBhQvXT3+uNfnyOM1uk0mpDclg+xWpirfp/Pzt6cX74zmwzins49Zd
Y+x0Y0LpcpObuCHe5o1JjLb9eE7oPhg8dLDZrXqEupKHeaZHW3jEZ+s8NKdb
evb3n6/TlT3hew64+D0fscg7lS8fPOWqKVQexj2Yne+PrcnbYIugc5PMmhCf
VH15uUzXC/9nRP6bX5sk384XnAPqqSOH49vlOtf+KY1r7Z3yHPDZz55Xfqzj
6OjJhPsHjOKQx7rzzVPf/k7HX6dDcR5Ap5yBOEH1XbammiDA/paojfPVFKOj
7nk/B+q9XM9Ln7j7E40oVNDzqkf3LUPDDw25QDpWnIv5kTb40KUvYb6Nzi/X
Rh6aZkjhKiaca8PP7EjE+N+rw6PK9Bb+fkUlHalgv3Zq3n8GaLN/feU6B+7n
deL7NhO9adA4ophWnMjGlwpKJgDMf+poY1G1TPnhOToWV/bUhTCCoS+J+P9H
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
g04cjdqd7fR6yDEHo2kvAuEgDjvjAGbT7g0GzQ7vzdanAzw6nAXsRQd+a+Hv
YdwDCa3betSeNMet/iiwezIO2uFoEI2ibTsJQcRpj0b9cQ9OKehG7dZ4MOgA
bRi0x9FWygL4GYGkP+j0gmmn0x2MRr3JGAB+Oug/bk+AYpEIMkG5AiBkDBAT
Bm1cZrgt2LcmrZHdjagbDSbjyXTU6vfbk2hbsAceoh234yDux/1uCNvRH4eT
0bjXBEKy9em0W9EgaMH1ncSDVqs1irvbOWY8LCXd/8VmV83P1rKqbtnzIrY2
jtnK27Gz0JsGYNEGcgOO47aydfzJAdYiUlNjzd+hNLrTBPMcr9lzO6P6CivN
d5gJk1pZltjfScWzTqx2kfQM73Y1kbIvHgXi5PlYV24A8LDdediZOySTty6t
gbQI2WAqJ7hG07xlHO/39ja7+If5ez/oCG0doPPn86Af9OM9uD+b2ZY5MOxw
G39mdGbejgfb2uXZ8Xlevk/S1fs0I7fnoocTdJBhFl3fL3UAwNLuNNH3p6IR
MioVjfytV2J+iKM8/2a4Qdd77w9IAoYaMpl7XHtYZYEsPra9klGlj49tX6Sn
27qx+dsplrYNLXgsYIHAQwVVsr1lNn4kUPWbzcE/GKZ+J1BZdoL5hMceapGv
eDRQCh+iDMZj2xcZkv8hQMWVxvdmyeiREBW2AKJa/8po6u9kycxPkTd7bPs8
L9felq80P38fU0c/W0LU7+b/TCQOaV5d99I3VPmA9GyUz5/1pK7uFR83RH2a
C9E3Kljyy12vFmvxyvmeMtXHUoNTkqDHEyN6u+ObtN/XVN2Bywehvn9P5uDU
GTX9YrE6dO3kGrDG7cpmT+bcz27lWkzgLjpKKhVccAUzLqha5kW8nAo1VVGd
aWZBOk2eCn+qhde/x/pxVhcq7OwEeVi4xot0zgEXXNZOZzi+irkC97Xor3HL
qyq1cnVijLq4jSn/9xKnbhSlt0s5Ua7J59UulusMNWffO/UDspp6Arpx6qaw
LQ3B9QYkpMideo4/VzU3o7MacIXvSRWLSsLah4+T/rcvGv2vvpv9cqm8aw22
njadPrHaQec16vDIkduqAmuT0SXCDD2uVej8tHkaXyfsgA9/JG/fmRdYsVue
A//7lw/B4cf34e3J1dXd6Y9nx90f7fxucVP400ouHb4Q7hw/yuNKYdPNM/Gl
qOGewVrzDQpN9aRcs0gB25cR80/Ayc5gL+swrTV56NUK6MD8xb/8nPc9p+ut
VrULsm2QKeJ8LeE7mw4YDm922qC9e/Oh+yq3zbrLz8u73L386qviUVefdO6g
Ha9ibZ3wN/hTDAuxMFYAMV9esytAzRVAaurON1ws/JM0rYgkyHXrWuTtebsh
DbVzNqIcs+Oof8zgWzh1dEsvnHItPGqdXx2/uhqeR5fvnkXp4cfk7Yf21WXz
YvHs9dXHg+HJ8OD69dtvL96Phu+efXNKbz58+Nuz744Pn02Xd/DvycHBx4OD
m7d/GX43PoK/jy+vX/7y4sPxAfz+bfru7O2bt+8OXwSXl51x4/v35xfd1ac3
zyaHre8/vH0dtX/4MPuh8W3nu8WzxbdvDg/f959/eHe5+vG719F3d7evTv/S
alw///as9cNg+uITTHOeXR9EjZc3i2/e/PLqtvHj7bzR7Y1uns8+rGF7fhm+
PmoHWff9cNU7G51/3/rb7fPZp9P1355Nb+N2EGdf5e6L3b8XyXz9Sd0sa0XT
xKNPYz2SmoXPayWvh9rzdxfFU4jvnjfjH4bJq+T5t98H3yUvDp9fjZ6N8e/T
t7+cBmfJ88EefLQYt17SRy/enjQnz77/Bf5/d5rcJtG7k+bph/TT2Ye3n85+
GTdfHf3Yhk5m8TfQ6XUnGD27zU6vT4K/HJ52T5PT7HR+FvyY4O/Q8eWH2/b8
5OXVi8Xzt+vXP9y8fP3Lt8Gzlx+u7p7/Lbx598Nl0A66P3yb/XL7nbN9vKpc
fIl/ggUO+Grnqw4cRFkypppU8rzC5np8eHQ+1OIs8KmyAhxkWva353IKxQ/V
vAl48057ZmZitoeOWE70LJzimoMNsRQXUke1cHLVSymkhW5cWHgoIDW+1w12
/KC/I5fr6skwaAZh98k92U/8fafS31UcTbB4g3Cvv36+v2F8vcCSefNyB+JU
BhMImwftbjNsD7sHzUGvf3TcHLYH6DrSDJutZrvZaXabvWafp+hEfUv7wcHg
IDzpHLd76PR20oX+DvvDdtDpHXR63dbJYbtzcNzrKLc7GHZalIKiE/R63f5h
GAxPTg767c6w0x0edDq9Y2g+6ClzO2wCr9trDYKw3Rr2BoftXr/TDY+geTcI
j0HYP+yGYdBVkX94ELZavX7vyT27YnfHVNDB3fjZ3/XdOPCjeBUBr8PlTg7W
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
yUmYfQz9mFAuApzFOmHY1s2N/j80vtBdtpMCAA==

-->

</rfc>
