<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.10.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2021" month="October" day="21"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides a signed (attested) set of
claims that describe state and characteristics of an entity, typically
a device like a phone or an IoT device.  These claims are used by a
Relying Party to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CWT or JWT with some attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>Remote device attestation is a fundamental service that allows a remote
device such as a mobile phone, an Internet-of-Things (IoT) device, or
other endpoint to prove itself to a Relying Party, a server or a
service.  This allows the Relying Party to know some characteristics
about the device and decide whether it trusts the device.</t>
      <t>The notion of attestation here is large and may include, but is not limited to the following:</t>
      <ul spacing="normal">
        <li>Proof of the make and model of the device hardware (HW)</li>
        <li>Proof of the make and model of the device processor, particularly
for security-oriented chips</li>
        <li>Measurement of the software (SW) running on the device</li>
        <li>Configuration and state of the device</li>
        <li>Environmental characteristics of the device such as its GPS location</li>
      </ul>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular it is a format that can be used for Attestation Evidence or Attestation Results as defined in the RATS architecture.</t>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb" numbered="true" toc="default">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a set of claims about an entity/device based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT), <xref target="RFC8392" format="default"/></li>
          <li>Unprotected CWT Claims Sets (UCCS), <xref target="UCCS.Draft" format="default"/></li>
          <li>JSON Web Token (JWT), <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds two more top-level messages:</t>
        <ul spacing="normal">
          <li>Unprotected JWT Claims Set (UJCS), <xref target="UJCS" format="default"/></li>
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is simple structure to hold a collection of detached claims-sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>An EAT can be encoded in either CBOR or JSON.
The definition of each claim is such that it can be encoded either.
Each token is either entirely CBOR or JSON, with only an exception for nested tokens.</t>
        <t>To implement composite attestation as described in the RATS architecture document, one token has to be nested inside another.
It is also possible to construct composite Attestation Results (see below) which may be expressed as one token nested inside another.
So as to not force each end-end attestation system to be all JSON or all CBOR, nesting of JSON-encoded tokens in CBOR-encoded tokens and vice versa is accommodated by this specification.
This is the only place that CBOR and JSON can be mixed.</t>
        <t>This specification formally uses CDDL, <xref target="RFC8610" format="default"/>, to
define each claim.  The implementor interprets the CDDL to come
to either the CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/>
representation. In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is
followed. Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
        <t>(TODO: The authors are open to modifications to this specification and the UCCS specification to include CDDL for UCCS and UJCS there instead of here.)</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is authored with an orientation around that model.</t>
        <t>To summarize, an Attester on an entity/device generates Attestation Evidence.
Attestation Evidence is a Claims Set describing various characteristics of the entity/device.
Attestation Evidence also is usually signed by a key that proves the entity/device and the evidence it produces are authentic.
The Claims Set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is validated.
Some of the Claims may also be validated against Reference Values.
The Verifier then produces Attestation Results which is also usually a Claims Set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the "Remote Attestaton Procedures", RATS.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing a device on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="use-as-attestation-evidence" numbered="true" toc="default">
          <name>Use as Attestation Evidence</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence.</t>
          <t>Attestation Evidence nearly always has to be signed or otherwise have authenticity and integrity protection because the Attester is remote relative to the Verifier.
Usually, this is by using COSE/JOSE signing where the signing key is an attestation key provisioned into the entity/device by its manufacturer.
The details of how this is achieved are beyond this specification, but see <xref target="keyid" format="default"/>.
If there is already a suitable secure channel between the Attester and Verifier, UCCS may be used.</t>
        </section>
        <section anchor="use-as-attestation-results" numbered="true" toc="default">
          <name>Use as Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Results.</t>
          <t>It is useful to characterize the relationship of claims in Evidence to those in Attestation Results.</t>
          <t>Many claims in Attestation Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the device by the Verifier just through normal verification of the Attester's signature.
The UEID, <xref target="UEID" format="default"/>, and Location, <xref target="location" format="default"/>, are examples of claims that may be passed through.</t>
          <t>Some claims in Attestation Evidence will be verified by the Verifier by comparison to Reference Values.
These claims will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.
For example, the Verifier receives the Software Evidence claim, <xref target="swevidence" format="default"/>, compares it to Reference Values and conveys the results to the Relying Party in a Software Measurement Results Claim, <xref target="swresults" format="default"/>.</t>
          <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.
For example, the data in the Location claim, <xref target="location" format="default"/>, may be modified to have a precision of a few kilometers rather than a few meters.</t>
          <t>When the Verifier is remote from the Relying Party, the Attestation Results must be protected for integrity, authenticity and possibly confidentiality.
Often this will simply be HTTPS as per a normal web service, but COSE or JOSE may also be used.
The details of this protection are beyond the scope of this document.</t>
        </section>
      </section>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>An "entity" can be any device or device subassembly ("submodule") that
can generate its own attestation in the form of an EAT.  The
attestation should be cryptographically verifiable by the EAT
consumer. An EAT at the device-level can be composed of several
submodule EAT's.</t>
        <t>Modern devices such as a mobile phone have many different execution
environments operating with different security levels. For example, it
is common for a mobile phone to have an "apps" environment that runs
an operating system (OS) that hosts a plethora of downloadable
apps. It may also have a TEE (Trusted Execution Environment) that is
distinct, isolated, and hosts security-oriented functionality like
biometric authentication. Additionally, it may have an eSE (embedded
Secure Element) - a high security chip with defenses against HW
attacks that is used to produce attestations.  This device attestation format
allows the attested data to be tagged at a security level from which
it originates.  In general, any discrete execution environment that
has an identifiable security level can be considered an entity.</t>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. No token may contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim may consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the Relying Party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) as fewer are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

]]></sourcecode>
      </section>
      <section anchor="UEID" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>UEID's identify individual manufactured entities / devices such as a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire device or a submodule or
subsystem. It does not identify types, models or classes of
devices. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEID's must be universally and globally unique across manufacturers
and countries. UEIDs must also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the device to keep devices distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID is permanent. It never change for a given
device / entity.</t>
        <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).  The
recommended maximum sent is also 33 bytes.</t>
        <t>When the entity constructs the UEID, the first byte is a type and the
following bytes the ID for that type. Several types are allowed to
accommodate different industries and different manufacturing processes
and to give options to avoid paying fees for certain types of
manufacturer registrations.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256 bit random number generated once and stored in the device. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the device and stored. It may not be smaller than 128 bits.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This makes use of the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-device identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while devices with multiple network interfaces may have multiple MAC addresses, there is only one UEID for a device) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/></td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. <xref target="ThreeGPP.IMEI" format="default"/></td>
            </tr>
          </tbody>
        </table>
        <t>UEID's are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the Relying Party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the device. Instead they
should use the oemid claim that is defined elsewhere. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Device manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa.  The main requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <t>A Device Indentifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)
]]></sourcecode>
      </section>
      <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
        <name>Semi-permanent UEIDs (SUEIDs)</name>
        <t>An SEUID is of the same format as a UEID, but it may change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
A device may have both a UEID and SUEIDs, neither, one or the other.</t>
        <t>There may be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label may name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile may describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
        <t>There are privacy considerations for SUEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

]]></sourcecode>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>Hardware OEM Identification (oemid)</name>
        <t>This claim identifies the OEM of the hardware.
Any of the three forms may be used at the convenience of the attester implementation.
The receiver of this claim MUST be able to handle all three forms.</t>
        <section anchor="random-number-based" numbered="true" toc="default">
          <name>Random Number Based</name>
          <t>This format is always 16 bytes in size (128 bits).</t>
          <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every device they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
          <t>The OEM may also use a hash like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash may be something whose uniqueness is managed by a central registry like a domain name.</t>
          <t>This is to be base64url encoded in JSON.</t>
        </section>
        <section anchor="ieee-based" numbered="true" toc="default">
          <name>IEEE Based</name>
          <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
services <xref target="OUI.Lookup" format="default"/>.</t>
          <t>Companies that have more than one of these IDs or MAC address blocks
should pick one and prefer that for all their devices.</t>
          <t>Commonly, these are expressed in Hexadecimal Representation
<xref target="IEEE.802-2001" format="default"/> also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48. For JSON encoded
tokens, this is further base64url encoded.</t>
          <t>This format is always 3 bytes in size in CBOR.</t>
        </section>
        <section anchor="iana-private-enterprise-number" numbered="true" toc="default">
          <name>IANA Private Enterprise Number</name>
          <t>IANA maintains a simple integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
          <t>PENs are often used to create an OID.
That is not the case here.
They are used only as a simple integer.</t>
          <t>In CBOR this is encoded as a major type 0 integer in CBOR and is typically 3 bytes.
It is encoded as a number in JSON.</t>
          <sourcecode type="CDDL"><![CDATA[
oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16


$$claims-set-claims //= (oemid-label => oemid-random / oemid-ieee / oemid-pen)
]]></sourcecode>
        </section>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version can be claimed at three different levels, the chip, the circuit board and the final device assembly.
An EAT can include any combination these claims.</t>
        <t>The hardware version is a simple text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.</t>
        <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    chip-version-label => hw-version-type
)

$$claims-set-claims //=  (
    board-version-label => hw-version-type
)

$$claims-set-claims //=  (
    device-version-label => hw-version-type
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
      </section>
      <section anchor="software-name-claim" numbered="true" toc="default">
        <name>Software Name Claim</name>
        <t>This is a simple free-form text claim for the name of the software.
A CoSWID manifest or other type of manifest can be used instead if this is too simple.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= ( sw-name-label => tstr )

]]></sourcecode>
      </section>
      <section anchor="software-version-claim" numbered="true" toc="default">
        <name>Software Version Claim</name>
        <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme / As defined by CoSWID /
]


]]></sourcecode>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the device/entity 
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels as described below.</t>
        <t>These claims describe security environment and countermeasures
available on the end-entity/client device where the attestation key
resides and the claims originate.</t>
        <dl>
          <dt>
1 - Unrestricted:  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2 - Restricted:  </dt>
          <dd>
            <t>Entities at this level are not general-purpose
operating environments that host features such as app download
systems, web browsers and complex productivity applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
          </dd>
          <dt>
3 - Secure-Restricted:  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined in section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. Like the FIDO security goal,
security at this level is aimed at defending well against large-scale
network/remote attacks against the device.</t>
          </dd>
          <dt>
4 - Hardware:  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the device itself.
It is assumed any potential attacker has captured the device and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a proper end-device
security certification scheme such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>. The 
claim made here is solely a self-claim made by the Attester.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"
]]></sourcecode>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when base software, the firmware and operating
system, are under control of the entity manufacturer identified in the
OEMID claim described in <xref target="oemid" format="default"/>. This may because the software is
in ROM or because it is cryptographically authenticated or some
combination of the two or other.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (secure-boot-label => bool)
]]></sourcecode>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to system-wide or submodule-wide debug facilities of the
target device / submodule like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-device
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means
it is not reported. A conservative interpretation might assume
the Not Disabled state. It could however be that it is reported
in a proprietary claim.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status to the Relying Party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The Verifier or Relying Party receiving an EAT cannot
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An individual target device / submodule may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the Relying Party can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future, and it may also be
possible that they were enabled in the past after the
target device/sub-system booted/started, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the target device/sub-system booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer cannot enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug capabilities for the target
device/sub-module are permanently disabled.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a pubic key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of posession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected the same as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the device entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the device is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the device velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision should not be used.
It usually does not provide enough precision for a geographic location.
It is not a requirement that the receiver of an EAT implement half-precision, so the receiver may not be able to decode the location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity must still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/> below.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

]]></sourcecode>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim contains a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (uptime-label => uint)
]]></sourcecode>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim is a random value created at system boot time that will allow differentiation of reports from different boot sessions.
This value is usually public and not protected.
It is not the same as a seed for a random number generator which must be kept secret.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (boot-seed-label => bytes)
]]></sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requres the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess device security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance (Certificate Signing Request)  </dt>
          <dd>
            <t>Certifying authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) appication. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has posession
of a key.  This kind of attestation may be neceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

]]></sourcecode>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is encoded in CBOR according to <xref target="CBOR.OID" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not tags.
The OID is always absolute and never relative.
If the claims CBOR type is a text string it is a URI and if a byte string it is an OID.</t>
        <t>Note that this named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (profile-label => ~uri / ~oid)

oid = #6.4000(bstr) ; TODO: Replace with CDDL from OID RFC

]]></sourcecode>
      </section>
      <section anchor="the-dloa-digital-letter-or-approval-claim-dloas" numbered="true" toc="default">
        <name>The DLOA (Digital Letter or Approval) Claim (dloas)</name>
        <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that a device or entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
        <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity, device or submodule has received the certification in the DLOA.</t>
        <t>This claim can contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity, device or submodule received all of the certifications.</t>
        <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
        <t>The first data item is a URI for the registrar.
The second data item is a platform label to indicate the particular platform that was certified.
For platform certifications only these two are needed.</t>
        <t>A DLOA may equally apply to an application.
In that case it has the URI for the registrar, a platform label and additionally an application label.</t>
        <t>The method of combining the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]


]]></sourcecode>
      </section>
      <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
        <name>The Software Manifests Claim (manifests)</name>
        <t>This claim contains descriptions of software that is present on the device.
These manifests are installed on the device when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the device, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is that they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and/or the Relying Party.</t>
        <t>In some cases these will be signed by the software manufacturer independent of any signing for the purpose of EAT attestation.
Manifest claims should include the manufacturer's signature (which will be signed over  by the attestation signature).
In other cases the attestation signature will be the only one.</t>
        <t>This claim allows multiple formats for the manifest.
For example the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
        <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
        <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
        <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it must be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
        <t>It is not possible to describe the above requirements in CDDL so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
        <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests may be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

; Must be a CoSWID payload type
; TODO: signed CoSWIDs
coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

; TODO: make this work too
;$$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged

]]></sourcecode>
      </section>
      <section anchor="swevidence" numbered="true" toc="default">
        <name>The Software Evidence Claim (swevidence)</name>
        <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the device.
The defining characteristic of this claim is that its contents are created by processes on the device that inventory, measure or otherwise characterize the software on the device.
The contents of this claim do not originate from the software manufacturer.</t>
        <t>In most cases the contents of this claim are signed as part of attestation signing, but independent signing in addition to the attestation signing is not ruled out when a particular evidence format supports it.</t>
        <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

; Must be a CoSWID evidence type that is a CBOR tag
; TODO: fix the CDDL so a signed CoSWID is allowed too 
coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 


]]></sourcecode>
      </section>
      <section anchor="swresults" numbered="true" toc="default">
        <name>The SW Measurement Results Claim (swresults)</name>
        <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
        <t>This claim may be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
        <t>This claim can also be generated on the device if the device has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
        <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
        <t>For each software objective, the following can be reported.</t>
        <section anchor="scheme" numbered="true" toc="default">
          <name>Scheme</name>
          <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
        </section>
        <section anchor="objective" numbered="true" toc="default">
          <name>Objective</name>
          <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
          <dl>
            <dt>
1 -- all  </dt>
            <dd>
              <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
            </dd>
            <dt>
2 -- firmware  </dt>
            <dd>
              <t>Indicates all of and only the firmware</t>
            </dd>
            <dt>
3 -- kernel  </dt>
            <dd>
              <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
            </dd>
            <dt>
4 -- privileged  </dt>
            <dd>
              <t>Refers to all of the software used by the root, system or administrative account</t>
            </dd>
            <dt>
5 -- system-libs  </dt>
            <dd>
              <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
            </dd>
            <dt>
6 -- partial  </dt>
            <dd>
              <t>Some other partial set of the software</t>
            </dd>
          </dl>
        </section>
        <section anchor="results" numbered="true" toc="default">
          <name>Results</name>
          <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
          <dl>
            <dt>
1 -- verificaton-not-run  </dt>
            <dd>
              <t>Indicates no attempt was made to run the verification</t>
            </dd>
            <dt>
2 -- verification-indeterminite  </dt>
            <dd>
              <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
            </dd>
            <dt>
3 -- verification-failed  </dt>
            <dd>
              <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
            </dd>
            <dt>
4 -- fully-verified  </dt>
            <dd>
              <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
            </dd>
            <dt>
5 -- partially-verified  </dt>
            <dd>
              <t>The verification ran to completion and some, but not all measurements compared correctly to Reference Values</t>
            </dd>
          </dl>
        </section>
        <section anchor="objective-name" numbered="true" toc="default">
          <name>Objective Name</name>
          <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 


verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"


swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]
]]></sourcecode>
        </section>
      </section>
      <section anchor="submodules-submods" numbered="true" toc="default">
        <name>Submodules (submods)</name>
        <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have one or
more security-oriented subsystems like a TEE or a Secure Element.</t>
        <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
        <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
        <section anchor="submodule-types" numbered="true" toc="default">
          <name>Submodule Types</name>
          <t>The following sections define the three major types of submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
            <li>The digest of a detached Claims-Set</li>
          </ul>
          <t>These are distinguished primarily by their data type which may be a map/object, string or array.</t>
          <section anchor="submodule-claims-set" numbered="true" toc="default">
            <name>Submodule Claims-Set</name>
            <t>This is simply a subordinate Claims-Set containing claims about the submodule.</t>
            <t>The submodule claims-set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment as described in the RATS architecture.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>The encoding of a submodule Claims-Set is always the same as the encoding as the token it is part of.</t>
            <t>This data type for this type of submodule is a map/object as that is the type of a Claims-Set.</t>
          </section>
          <section anchor="nested-token" numbered="true" toc="default">
            <name>Nested Token</name>
            <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/></t>
            <t>In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token does NOT need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.</t>
            <t>Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
            <t>The data type for this type of submodule is either a text or byte string.</t>
            <t>Mechanisms are defined for identifying the encoding and type of the nested token. These mechanisms are different for CBOR and JSON encoding.
The type of a CBOR-encoded nested token is identified using the CBOR tagging mechanism and thus is in common with identification used when any CBOR-encoded token is part of a CBOR-based protocol.
A new simple type mechanism is defined for indication of the type of a JSON-encoded token since there is no JSON equivalent of tagging.</t>
            <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR-Encoded</name>
              <t>If the submodule is a byte string, then the nested token is CBOR-encoded.
The byte string always wraps a token that is a tag.
The tag identifies whether the nested token is a CWT, a UCCS or a CBOR-encoded DEB.</t>
              <t>If the submodule is a text string, then the nested token is JSON-encoded.
The text string contains JSON.
That JSON is the exactly the JSON described in the next section with one exception.
The token can't be CBOR-encoded.</t>
              <sourcecode type="CDDL"><![CDATA[
; This specifies how one fully-formed token is nested inside a
; CBOR-format token.  The fully-formed nested token is any valid
; token, CBOR or JSON (JWT, CWT, UCCS, DEB...)  The mechanism for
; identifying the type of the nested token is specific to the format
; of the surrounding token, CBOR in this case.
;
; A primary reason this is encoding-specific is that JSON does not
; have an equivalent to CBOR tags.
;
; If the data type here is text, then the nested token is JSON
; format, one of a JWT, UJCS or JSON-encoded DEB. The means for
; distinguishing which is in the definition of JSON-encoded
; Nested-Token.  If the data type is bstr, then the nested token
; is CBOR format. It is byte-string wrapped and identified by a
;CBOR tag.

Nested-Token =
    tstr / ; A JSON-encoded Nested-Token (see json-nested-token.cddl)
    bstr .cbor Tagged-CBOR-Token


]]></sourcecode>
            </section>
            <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is JSON-Encoded</name>
              <t>A nested token in a JSON-encoded token is an array of two items.
The first is a string that indicates the type of the second item as follows:</t>
              <dl>
                <dt>
"JWT"  </dt>
                <dd>
                  <t>A JWT formatted according to <xref target="RFC7519" format="default"/></t>
                </dd>
                <dt>
"CBOR"  </dt>
                <dd>
                  <t>Some base64url-encoded CBOR that is a tag that is either a CWT, UCCS or CBOR-encoded DEB</t>
                </dd>
                <dt>
"UJCS"  </dt>
                <dd>
                  <t>A UJCS-Message. (A UJCS-Message is identical to a JSON-encoded Claims-Set)</t>
                </dd>
                <dt>
"DEB"  </dt>
                <dd>
                  <t>A JSON-encoded Detached EAT Bundle.</t>
                </dd>
              </dl>
              <sourcecode type="CDDL"><![CDATA[
; This describes a nested token that occurs inside a JSON-encoded
; token. It uses an array that is made up of a type indicator and the
; actual token.  This is a substitute for the CBOR tag mechanism that
; JSON does not have.

Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]


; This text is a Tagged-CBOR-Token (see cbor-token.cddl) that is
; base64url encoded.  For example, it is a CWT that is a COSE_Sign1
; that is a CBOR tag that has been base64url encoded.

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
            </section>
          </section>
          <section anchor="detached-submodule-digest" numbered="true" toc="default">
            <name>Detached Submodule Digest</name>
            <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
            <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
            <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
            <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
            <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
            <t>The data type for this type of submodule is an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
            <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="cddl-for-submods" numbered="true" toc="default">
          <name>CDDL for submods</name>
          <sourcecode type="CDDL"><![CDATA[
; This is the part of a token that contains all the submodules.  It
; is a peer with the claims in the token, but not a claim, only a
; map/object to hold all the submodules.

$$claims-set-claims //= (submods-label => { + text => Submodule })


; A submodule can be:
; - A simple Claims-Set (encoded in the same format as the token)
; - A digest of a detached Claims-Set (encoded in the same format as
;    the token)
; - A nested token which may be either CBOR or JSON format. Further,
;   the mechanism for identifying and containing the nested token
;   depends on the format of the surrounding token, particularly
;   because JSON doesn't have any equivalent of a CBOR tag so a
;   JSON-specific mechanism is invented. Also, there is the issue
;   that binary data must be B64 encoded when carried in
;   JSON. Nested-Token is defined in the format specific CDDL, not
;   here.

; Note that at nested token can either be a signed token like a CWT
; or JWT, an unsigned token like a UCCS or UJCS, or a DEB (detached
; EAT bundle).  The specific encoding of these is format-specific
; so it doesn't appear here.

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest


; This is for both JSON and CBOR.  JSON uses text label for
; algorithm from JOSE registry. CBOR uses integer label for
; algorithm from COSE registry. In JSON the digest is base64
; encoded.

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]


]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="UJCS" numbered="true" toc="default">
      <name>Unprotected JWT Claims-Sets</name>
      <t>This is simply the JSON equivalent of an Unprotected CWT Claims-Set <xref target="UCCS.Draft" format="default"/>.</t>
      <t>It has no protection of its own so protections must be provided by the protocol carrying it.
These are extensively discussed in <xref target="UCCS.Draft" format="default"/>.
All the security discussion and security considerations in <xref target="UCCS.Draft" format="default"/> apply to UJCS.</t>
      <t>(Note: The EAT author is open to this definition being moved into the UCCS draft, perhaps along with the related CDDL.
It is place here for now so that the current UCCS draft plus this document are complete.
UJCS is needed for the same use cases that a UCCS is needed.
Further, JSON will commonly be used to convey Attestation Results since JSON is common for server to server communications.
Server to server communications will often have established security (e.g., TLS) therefore the signing and encryption from JWS and JWE are unnecssary and burdensome).</t>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached claims-sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
; Top-level definition of a DEB for CBOR and JSON

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]


; text content is a base64url encoded JSON-format Claims-Set

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 


cbor-wrapped-claims-set = bstr .cbor Claims-Set


]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the device and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the device generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-common-cddl" numbered="true" toc="default">
        <name>Collected Common CDDL</name>
        <sourcecode type="JSON"><![CDATA[
; This is the fundamental definition of a Claims-Set for both CBOR
; and JSON. It is a set of label-value pairs each of which is a
; claim.
;
; In CBOR the labels can be integers or strings with a strong
; preference for integers.  For JSON, the labels are always strings.
;
; The values can be anything, with some consideration for types that
; can work in both CBOR and JSON.

Claims-Set = {
    * $$claims-set-claims,
    * Claim-Label .feature "extended-label" => any
}

Claim-Label = int / text

string-or-uri = tstr 

time-int = #6.1(int)

; This is CDDL for the 7 individual claims that are defined in CWT
; and JWT.  This CDDL works for either CBOR format CWT or JSON format
; JWT The integer format CWT Claim Keys (the labels) are defined in
; cwt-labels.cddl.  The string format JWT Claim Names (the labels)
; are defined in jwt-labels.cddl.

; $$claims-set-claims is defined in claims-set.cddl

$$claims-set-claims //= (iss-label => text)
$$claims-set-claims //= (sub-label => text)
$$claims-set-claims //= (aud-label => text)
$$claims-set-claims //= (exp-label => ~time)
$$claims-set-claims //= (nbf-label => ~time)
$$claims-set-claims //= (iat-label => ~time)

; TODO: how does the bstr get handled in JSON validation with the
; cddl tool?  TODO: should this be a text for JSON?
; $$claims-set-claims //= (cti-label : bytes)

$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)


$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)

$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}


oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16


$$claims-set-claims //= (oemid-label => oemid-random / oemid-ieee / oemid-pen)

$$claims-set-claims //=  (
    chip-version-label => hw-version-type
)

$$claims-set-claims //=  (
    board-version-label => hw-version-type
)

$$claims-set-claims //=  (
    device-version-label => hw-version-type
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

$$claims-set-claims //= ( sw-name-label => tstr )


$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

$$claims-set-claims //= (secure-boot-label => bool)

$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"


$$claims-set-claims //= (uptime-label => uint)

$$claims-set-claims //=  (boot-seed-label => bytes)

$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 


$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]



$$claims-set-claims //= (profile-label => ~uri / ~oid)

oid = #6.4000(bstr) ; TODO: Replace with CDDL from OID RFC


$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

; Must be a CoSWID payload type
; TODO: signed CoSWIDs
coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

; TODO: make this work too
;$$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged


$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

; Must be a CoSWID evidence type that is a CBOR tag
; TODO: fix the CDDL so a signed CoSWID is allowed too 
coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 



$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 


verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"


swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]

; This is the part of a token that contains all the submodules.  It
; is a peer with the claims in the token, but not a claim, only a
; map/object to hold all the submodules.

$$claims-set-claims //= (submods-label => { + text => Submodule })


; A submodule can be:
; - A simple Claims-Set (encoded in the same format as the token)
; - A digest of a detached Claims-Set (encoded in the same format as
;    the token)
; - A nested token which may be either CBOR or JSON format. Further,
;   the mechanism for identifying and containing the nested token
;   depends on the format of the surrounding token, particularly
;   because JSON doesn't have any equivalent of a CBOR tag so a
;   JSON-specific mechanism is invented. Also, there is the issue
;   that binary data must be B64 encoded when carried in
;   JSON. Nested-Token is defined in the format specific CDDL, not
;   here.

; Note that at nested token can either be a signed token like a CWT
; or JWT, an unsigned token like a UCCS or UJCS, or a DEB (detached
; EAT bundle).  The specific encoding of these is format-specific
; so it doesn't appear here.

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest


; This is for both JSON and CBOR.  JSON uses text label for
; algorithm from JOSE registry. CBOR uses integer label for
; algorithm from COSE registry. In JSON the digest is base64
; encoded.

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]



; Top-level definition of a DEB for CBOR and JSON

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]


; text content is a base64url encoded JSON-format Claims-Set

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 


cbor-wrapped-claims-set = bstr .cbor Claims-Set



]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-cbor" numbered="true" toc="default">
        <name>Collected CDDL for CBOR</name>
        <sourcecode type="CDDL"><![CDATA[
; The top-level definition of a CBOR-encoded token.

CBOR-Token = Tagged-CBOR-Token / Untagged-CBOR-Token

    
; All forms of a CBOR-encoded token that are a CBOR tag.

Tagged-CBOR-Token  = CWT-Tagged-Message
Tagged-CBOR-Token /= UCCS-Tagged-Message
Tagged-CBOR-Token /= DEB-Tagged-Message


; All forms of a CBOR-encoded token that are not a CBOR tag.

Untagged-CBOR-Token  = CWT-Untagged-Message
Untagged-CBOR-Token /= UCCS-Untagged-Message
Untagged-CBOR-Token /= DEB-Untagged-Message


; The payload of the COSE message is always a Claims-Set

CWT-Tagged-Message = COSE_Tagged_Message
CWT-Untagged-Message = COSE_Untagged_Message


UCCS-Message = UCCS-Tagged-Message / UCCS-Untagged-Message

UCCS-Tagged-Message = #6.601(UCCS-Untagged-Message)

UCCS-Untagged-Message = Claims-Set


DEB-Tagged-Message = #6.602(DEB-Untagged-Message)

DEB-Untagged-Message = Detached-EAT-Bundle



; This specifies how one fully-formed token is nested inside a
; CBOR-format token.  The fully-formed nested token is any valid
; token, CBOR or JSON (JWT, CWT, UCCS, DEB...)  The mechanism for
; identifying the type of the nested token is specific to the format
; of the surrounding token, CBOR in this case.
;
; A primary reason this is encoding-specific is that JSON does not
; have an equivalent to CBOR tags.
;
; If the data type here is text, then the nested token is JSON
; format, one of a JWT, UJCS or JSON-encoded DEB. The means for
; distinguishing which is in the definition of JSON-encoded
; Nested-Token.  If the data type is bstr, then the nested token
; is CBOR format. It is byte-string wrapped and identified by a
;CBOR tag.

Nested-Token =
    tstr / ; A JSON-encoded Nested-Token (see json-nested-token.cddl)
    bstr .cbor Tagged-CBOR-Token



; This is the CDDL definition of the labels for a CBOR format web
; token, a CWT.  The CDDL for the claims is in web-token-claims.cddl

iss-label = 1
sub-label = 2
aud-label = 3
exp-label = 4
nbf-label = 5
iat-label = 6
cti-label = 7
; The following Claim Keys (labels) are pre-assigned by IANA.
; They are for CBOR-based tokens (CWT and UCCS).
; They are not expected to change in the final publication as an RFC.

nonce-label = 10
ueid-label = 11
oemid-label = 13
security-level-label = 14
secure-boot-label = 15
debug-status-label = 16
location-label = 17
profile-label = 18
submods-label = 20


; These are not yet assigned in any way and may change.
; These are intentionally above 24 so as to not use up
; single-byte labels.

sueids-label = <TBD25>
chip-version-label = <TBD26>
board-version-label = <TBD27>
device-version-label = <TBD28>
sw-name-label = <TBD29>
sw-version-label = <TBD30>
uptime-label = <TBD31>
boot-seed-label = <TBD32>
intended-use-label = <TBD33>
dloas-label = <TBD34>
manifests-label = <TBD35>
swevidence-label = <TBD36>
swresults-label = <TBD37>

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-json" numbered="true" toc="default">
        <name>Collected CDDL for JSON</name>
        <sourcecode type="JSON"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp [A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+


; This defines the JSON equivalent of a UCCS message, a token with
; no integrity or authenticity protection.

UJCS-Message = Claims-Set


; This describes a nested token that occurs inside a JSON-encoded
; token. It uses an array that is made up of a type indicator and the
; actual token.  This is a substitute for the CBOR tag mechanism that
; JSON does not have.

Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]


; This text is a Tagged-CBOR-Token (see cbor-token.cddl) that is
; base64url encoded.  For example, it is a CWT that is a COSE_Sign1
; that is a CBOR tag that has been base64url encoded.

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"

; This is the CDDL definition of the labels for a JSON format web
; token, a JWT.  The CDDL for the claims is in web-token-claims.cddl

iss-label = "iss"
sub-label = "sub"
aud-label = "aud"
exp-label = "exp"
nbf-label = "nbf"
iat-label = "iat"
cti-label = "cti"
; The following are claim names for JSON encoded tokens.

ueid-label /= "ueid"
sueids-label /= "sueids"
nonce-label /= "nonce"
oemid-label /= "oemid"
security-level-label /= "seclevel"
secure-boot-label /= "secboot"
debug-status-label /= "dbgstat"
location-label /= "location"
uptime-label /= "uptime"
profile-label /= "eat-profile"
intended-use-label /= "intuse"
boot-seed-label /= "bootseed"
submods-label /= "submods"
timestamp /= "timestamp"
manifests-label /= "manifests"
swevidence-label /= "swevidence"
dloas-label /= "dloas"
swresults-label /= "swresults"
sw-name-label /= "swname"
sw-version-label /= "swversion"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: 10</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: 11</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: OEMID</li>
            <li>Claim Description: IEEE-based OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: 13</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: 14</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 15</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 16</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: 17</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: 18</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules (not actually a claim)</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: 20</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>TODO: add the rest of the claims in here</t>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a single device will be
able to know the tokens are all from the same device and be able to
track the device. Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The device obtains explicit permission from the user of the device
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The device authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the device, then
the device generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main device UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per device. Each UEID/SUEID is used in a
different context, use case or system on the device. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the device generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-01.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="July" year="2021"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-01"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-19.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="October" year="2021"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-19"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="CBOR.OID" target="https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="21" month="May" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.

 This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cbor-tags-oid-08"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-12.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="23" month="April" year="2021"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-12"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="ECMAScript" target="http://www.ecma-international.org/ecma-262/5.1/ECMA-262.pdf">
          <front>
            <title>Ecma International, "ECMAScript Language Specification, 5.1 Edition", ECMA Standard 262</title>
            <author>
              <organization/>
            </author>
            <date year="2011" month="June"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-02.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="12" month="July" year="2021"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-02"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>These examples are either UCCS, shown as CBOR diagnostic, or UJCS messages.
Full CWT and JWT examples with signing and encryption are not given.</t>
      <t>All UCCS examples can be the payload of a CWT.
To do so, they must be converted from the UCCS message to a Claims-Set, which is achieve by "removing" the tag.</t>
      <t>UJCS messages can be directly used as the payload of a JWT.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="simple-tee-attestation" numbered="true" toc="default">
        <name>Simple TEE Attestation</name>
        <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / secure-boot /     15: true,
    / debug-status /    16: 2, / disabled-since-boot /
    / manfests /        35: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
})
    

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
      </section>
      <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
        <name>EAT Produced by Attestation Hardware Block</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /           13: 64242, / Private Enterprise Number /
    / security-level /  14: 4, / hardware level security /
    / secure-boot /     15: true,
    / debug-status /    16: 3, / disabled-permanently /
    / chip-version /    26: [ "3.1", 1 ] / Type is multipartnumeric /
})

]]></artwork>
      </section>
      <section anchor="detached-eat-bundle" numbered="true" toc="default">
        <name>Detached EAT Bundle</name>
        <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
        <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
        <t>The DEB itself can be assembled by untrusted SW.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e0b500198f50a4ff6c058
      61c8860d13a638ea0d19faf20e040ff51003181a8263332e
      310114a163544545822f5820e5cf95fd24fab71446742dd5
      8d43dae178e55fe2b94291a9291082ffc2635a0b',
      
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e0e030ff51002182381
                 585dda53574944a60064336132340c01016b4163
                 6d6520544545204f530d65332e312e340282a218
                 1f6b41636d6520544545204f53182101a2181f6b
                 41636d6520544545204f5318210206a111a11818
                 6e61636d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /           13: 64242, / Private Enterprise Number /
    / security-level /  14: 4, / hardware level security /
    / secure-boot /     15: true,
    / debug-status /    16: 3, / disabled-permanently /
    / chip-version /    26: [ "3.1", 1 ], / multipartnumeric /
    / submods/          20: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
})

]]></artwork>
      </section>
      <section anchor="key-key-store-attestation" numbered="true" toc="default">
        <name>Key / Key Store Attestation</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / debug-status /    16: 2, / disabled-since-boot /
    / secure-boot /     15: true,
    / manifests /       35: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        20 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level /  14: 1, / unrestricted /
           / secure-boot /     15: true,
           / manifests /       35: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
})
           
   
]]></artwork>
      </section>
      <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
        <name>SW Measurements of an IoT Device</name>
        <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / secure-boot /     15: true,
    / debug-status /    16: 2, / disabled-since-boot /
    / OEMID /           13: h'8945ad', / IEEE CID based /
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /          20: {
                            "OS" : {
        / security-level /      14: 2, / restricted /
        / secure-boot /         15: true,
        / debug-status /        16: 2, / disabled-since-boot /
        / swevidence /          36: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
})

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
      </section>
      <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
        <name>Attestation Results in JSON format</name>
        <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
        <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
        <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
    
]]></artwork>
      </section>
    </section>
    <section anchor="ueid-design-rationale" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p  Collision Probability
    n  Total population based on number of bits in UEID
    k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAFHncGEAA9y9a3Pb2LUo+B2/AqVOTUsJSUm2/FJP31y1pO7Ix7Z8LTl9
7qRSXSAJUohJgAFIy4yvU/kbp2rm6/yw/JJZ7702ANrukzPzYVKptghs7Ofa
6/0YDodJs87K6S/Zoirz03Rdb/KkWNX0V7N+cHT07OhBMsnWp2mznibJtJqU
2RIaTutsth4W+Xo2rLN1M8yz9XCRrfNmnST389P0zdntTfpzVb8rynn6U11t
Vsk36aQqm7xsNs1p+u02b76FR81mvCyapqjK9XYF/V5d3v6YrIrTJE3X1UTb
0Y9pvlrfwZMT/N1U9brOZ01o0WyX8YNJtVxlk7VrsRmHZ2WFj+rZJJ826+0i
12brYo0/bu/y9LKEH9v0bI3LytYwx/S2epeX6f7l2e1Bko3Hdf7+NIUfSVbn
GUy+XOd1ma+Td/ewX8W8xMVn7vPJuKph0VPYqNP0wdHxw+HxUZJt1ndVfZoM
06KE6b8YpS825XS8yKY5zJC3+0W2qfNykkevqho2+iafbGqcJsy4qrfpixfn
8CpfZsXiNF3MF/+9kQZrej+CHdCRfhqlL+Hst9nSxvmpqIvpXVa7FzTK/9hk
C/hymd7mk7uyWlTzIm9gvZMR7iucRA57+ujJk0fpy6rO76pNk6cXdfEepzmB
wWGeWZleFPm8wl3P57Abp+l5tihmVV0WGR3XplzX0PLtzRn8XN0RQO797jh9
+uhp+vjRcfoEwHEvLG7JU/zvf10Xo7/K/Pzyno/S628vqrKa323CTj7P63y5
jd98/RIfPHmW/pjVJZxjtZnfpW+qbGpLdC9oPVPc0LfHJ+mTFzfRAstinU/T
fwPomFbLsNbfnZykxw8ePUgfPn54/PRZWOlfqilNtrvUpKzqJcDW+xxvzJsf
zx8cHz+TP588On4kfz59duKePgl/2tOnR0fa9vjBY/vzyYn9+eiB/vnwmf35
+Ng+e3Ki/T589pR6wP/BPz//dPP0hH+vs3qO27h3t16vmtPDwzyr13fDopxV
o3KejZbF4nB1tzqcVvflArZ2BD9+PysW+feTqqqnw/t58/Rkj7vie/rz9ZsX
F+lPl9cXl7dX5+nN/7y5vXyZHj97ejJIX/10Nrq5fXUxOjp6+PiX49HR6OgX
mgx1oNcO/x4yCLyiW5ot0p/yqlnBj2wxxDu9WBRzun1n+M823YeeD+hDu8kn
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

-->

</rfc>
