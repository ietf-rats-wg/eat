<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="July" day="08"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
Any new format that plugs into this socket MUST be defined in a IETF standards track document.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string and every bit in the byte string contributes to entropy.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, {#swevidence}, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption.
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT.
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwvers",     260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-18.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="14" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-18"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9aXPbWJYg+h2/AiFnRFpVJGUtXnsya5SSMkvZtuWx5Hb3
q6nIgEiIQpkE2AAomeXJ/u3v7PdcAJRd3TMRL+KNo6JSBHD3c8++jMfjpGmz
cvZbtqjK/FXa1us8KVY1/dW0B0+evHxykEyz9lXatLMkmVXTMlvCh7M6u2nH
Rd7ejOusbcZ51o4XWZs3bZLcz1+l74+vLtOPVf2pKOfpL3W1XiWP0mlVNnnZ
rJtX6febvPkeHjXr62XRNEVVtpsV9Ht+dvVzsipeJWnaVlP9jn7M8lV7C0+O
8HdT1W2d3zThi2azjB9Mq+Uqm7bui/V1eFZW+Ki+meazpt0scv2sLVr8cXWb
p2cl/Nikxy0uK2thjulV9Skv08dnx1e7SXZ9Xed3r1L4kWR1nsHkyzavy7xN
Pt3DfhXzEhefuebT66qGRc9go16lB0/2D8f7T5Js3d5W9atknBYlTP/1JH29
LmfXi2yWwwx5u19n6zovp3n0qqphoy/z6brGacKMq3qTvn59Aq/yZVYsXqWL
+eK/N/JBS+8nsAM60i+T9A2c/SZb2ji/FHUxu81q94JG+R/rbAEtl+lVPr0t
q0U1L/IG1jud4L7CSeSwp0+fP3+avqnq/LZaN3l6Whd3OM0pDA7zzMr0tMjn
Fe56PofdeJWeZIvipqrLIqPjWpdtDV9+uDyGn6tbAsidP+6nL56+SJ893U+f
AzjuhMUteYr//d/bYvLvMj+/vF8n6cX3p1VZzW/XYSd/zet8uYnffPsSD56/
TH/O6hLOsVrPb9P3VTazJboXtJ4ZbuiH/aP0+evLaIFl0eaz9J8BOmbVMqz1
j0dH6f7B04P08Nnh/ouXYaV/q2Y02f5Sk7KqlwBbdznemPc/nxzs77+UP5/v
P7U/n+4/DX8+kz9fvDyyD2DY8MHz8Kd98OLJE222f2A97D8/0j8PX2oPL57t
27fPj7Szw5cvQjMb7SUgmFcJ/P3xl8sX1Bfc9aye42bv3Lbtqnm1t5dndXs7
LsqbalLOs8myWOytbld7s+q+XMABTODHn26KRf7DtKrq2fh+3rw42uGu+DZ/
vHj/+jT95ezi9Ozq/CS9/LfLq7M36f7LF0ej9O0vx5PLq7enkydPDp/9tj95
MnnyG02GOtDLiX+PGVDe0l3OFukvedWs4Ee2GOPNXyyKOd3RY/zPJn0MPe9S
Q7vvR+Mnz8dPXuB6z4/fHk9OPl5NThZZsWzilePCYd339/eTIiuzCYy7lzWI
UZZ52TZ70/vWL+/kp4v36cf8WtETdLubcr/bFoHDu7ndZIsmt2n92plWNK/m
oYn9TSamM/v18uKtn9mvnZlFU+vNrTu5q1u4hb+8ezc5f3N23t8xnNkK6EK2
mBzOVyua3CxvPrXValnN1ou82btc5dPippjSEXZ+nuYt3LZmkjWrz39q/Jvz
2Q/PD176HT+sZ3D8ZV4zXn8HAAo/mttilb6rq7/l0/afGI9AD4s0GoapYXoC
eDJ9m7f3QCNTwGTweb0sAKyaf0rfrpfXeQ3oYZRms1mdwwYjIYGPihlss3W1
7XAPYY9iwHuJ2/fz+enF5Pj9xdkrvxR8mh5DJ9gz9FvV6fFiUd0DhnoPhKsu
poisLla0VpjGWXlX1BWfd/q6aNrBc7gpZlUGNyKDC0EHgRva0OOxUqRxnf/7
ugB0TKBDrzI/j3HG84DvdB7jSucxzt08xguYx/huf3IwvpmND57AivefHExu
2+Vi2x4hgeelyyzdhr2t7nI8gRR7wp07O3473j8chji8C/NmnxeJvFRWz5q9
66xGAtAA7irH69XU7zizCYpFjmtY7iKXQ4fpwWB7H96dpNrFthX8crk/cMgn
1eXH81MYZHw6IfasyabL8bRq7osZvoeDLM9PT6qyBCBFIBxeFexzWcwmwMzI
yfED6Igawn/rfLz/25Owx7I47j+VARjMAakCSYYmcDsZiPIa/sjSJm/T/aGN
f0HYcmDlN+vFggn52wnwFJ+K5brOeu+A9P9UZ7NFvum9ejNJfwVq2/Re/DRJ
Z3n6Jp/lAFb91ycTZG3aYgkLwn08fX1xPLx180V1nS1WwA0Db7MkuLhf4ca1
AKp76xWSrGYP1vd0b/9g75d3J7+dFvMCsNbrHFjF+uLmeLWqq7ts8dsdUqPV
7Mbvr3yb8sdpdZPq58MAvP80wem+O3u7BWHmZUDl8GPvXV5CjwtBMZNVNs/9
+O+Aq4MxkDnO61VdNAa5j2GMXcAZ/74mKUCJCfK84zabNxHWwVdMt67gFbSa
ww2uN1tv2DAZ1K7DX5PPBJDwD9mFmDc62j9QtuPoKPzpuKD9A2Ncjo6eGYty
+JJYFJRpJsf19BbYt2kLDLm7ZSQEZe4dNvipAL5llm1Agsimn6L16ysUD+Dd
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
IHBOAyoRy24NTstKcHJaVbTk4N/TryMrZ9r88BR05BRMcAv7GsyAGaVptpGZ
LSqnsrReuGpYkYdqVDhTA7kyvTa1nwrctM6N2Fpil/eQRMYmDe0BxYkv9ksT
oNIOKy1Fzbc0CFsmF4ntkdtAf9e2YKJzESQ7bXmrVUVlA67fUebWNWUHtUK3
RCYidzPhpD6anglWWepWKyvb/EZG5sKjYZjLg1xmLoy5HzY5S3lYxvZTLOLk
N1o94oB48+Ym092NG1NqspcpdaWVo4hQ1YwzBkkFWqkGBbwMd4N3o9iI9z9z
RC/VKJmrSAnDaG0cVrmtKwJeVH1srqgqoo5tp4NhoXbnHvsvEFWaZw56s6/y
m/0Y/TjQQObvbceo+6ZHOIvHZOZy4JbgzA9a9iuLwQCBPXbZJPykiGQf+2cn
508wDrcSzVIXv/76chkvzo6hFdzf9VGKeSzr/vv3OZB9/97z/u9inC3/WtwX
LFBVvS0IC28XCYUZzv0TDvinj0sbRRZ87MUFzS3bEXZ7f+Z+7Lzwc1x5Vr30
8/gqse76vn5ZWrc4Iuy88v7WlV9Fyz99xd+oDuDlyfNth+5+s+Ww2ZniDsA3
yx3sctAcOU3JUv51O/AcvTuqd4BeFSt0mvCliv1QX5EdUEHYHf5bwL7ZB8lj
eg8syFcmnTCdVMU+qNfCLjvR244VKXvCn3//Wd11mKbr6uWfVZWcIc0gUj/W
q1UiBfHsye9C2Au3rRemMI+jxZ++4mNSZp6TxvSeJYtaFc0I1AjESxTi0Cpb
sWJ1TSquuL1txZocCRUb/xqIfyacw3ZSdxFrVTUTRFW1VuNVtROQd/5bEb5U
d7r7rG1JR01Lo8kwqpbv+ojttAPdrTuAydgAAF4yKfpz77pN/iWZRbbDgUoi
kqgwnzusmglgL7idtmM77/PHAgTKmG/IejVSqUd1X3snRQkK2r54+cbPC1xr
J4d30zdFPpBddwxwYkag+he3Infs34lyjX2j+gisT8IvuWrwRsvNyeFNfQlK
iSbHswUbs8dh6Xj+fZDTW3JyrN4P867MdLNr5M7r2iwEEP5V3BaSViwCPt2C
gGx274jp6uR2Un2Ixqlz58VSRMifvsIzVd6+ze7FskbR6+S3BaxbtVxxSf03
htjjZy9HW3gIW02a7B2S740yax4nF8kaZMlnpCEm9mK0RONONK9kK8jRdudd
+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
5+qUeaN5go0llnhSbL10le8kbpZXuH3mv3/dvM/kQzuN2RujmDWbdai6+Ka2
fhWvLqOlZnAm05bm9T9L33DH1Wv5Y2aurj0yttHDUTZv8sBQOdcujVtXL9D1
xpAM2GvdoKYz9u+b+Tcx51NwAFwW4twSwFGLR+JWcbskhRe3FicLNxGw7yZ4
Uxr8evTm3CdlGZptUP9C65YgFjYKGl0RuTYl0/JtbTozf7DwPrDiOzmI5vje
bg+btILhYNZtRZ3ZrDdpdQe9YKI99NqDODIdfPNO0lVpL2F3gB0MYNCw/QgF
6LMTJApvzzRXr35ve+C8T9pH2B1iD93OcDqJJ5PBeDjoT/rt/rjTiTutWX/S
a3cn8eBu3ol6jjIqckEwQ4mimLU5cCb/fY6vCHuwYX+vBc02yVUBSi9i04hW
6wWqAAGMDdsg3Uhcut3HsG8IosN2nJdG6yMvAUxHt9nl0X6nmqSN0zVRXg1R
mPhmorZ69B7gzn1sCKcddMNetxPCiT1MqfPy3Op1OA8LfVmgqCMLtUhiLlP0
T6IoCtbEO9QlWU02yVqun2UAavSg5j/2SxQ4D30CesNxPBv0B/14HAXtOJwM
Zr24Pxl3xsGs0wuGCru5XhwIFPCL40Fr1o16vUkwGw/7nXA4HEaD2TQaD9ut
wbB9H/iVwZDXJVvhAmJuJg6ICDSGzVaEJZ1/Qm1SARb/M9vMZsknZ7eAtbtn
90sbnyfj7s7zk123vheAjIhA8urkhWQ6t9/sstJOC3vo0n96WFMdlywhtoI8
9saAO+Gw9t0lS+3Fz1ocCXkj1H6+YgpOuNfR0trsaofzFJXvZd1prqIAK8iX
TmcRzn+MjXOrQqaBy700xptkLlaPnJXypXrNuN6snLsn0z7IYwIlK5fpESPx
AuNMhF1ZUVVPIY4TvFN2HmX3C1OGADX/MkKD6v9pqQrH74P6YN+QyJ8B+dlv
+p2+FPvlVOlkrqGsoXsDzqAnpvWgx39SH0hg9n+fivl30yjKuej2wNDaCTuE
0tS77wStFssV5saXqPGDO/EhYVuzq/zKGKV+r8a7ndN4G5w+v3Xp5nUF8SIh
FqmJj5cHUxMQn1WkYQdwW0wtsb+I1+MB/fd8jdb5nFXji3Hhi3Eh3/SLcSHf
xxfjQnEeX4wLlX3gzxfjwhfjAi/ki3Hhi3HB/fliXPhiXLAffzEufDEu/Enr
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
27q90f8PC3/WC1aNAgA=

-->

</rfc>
