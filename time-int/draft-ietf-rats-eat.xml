<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2022" month="December" day="12"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message or token made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/>.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used and other for a particular token and use case.</t>
      <t>The entity side of an EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Other may rely solely on simple SW defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of an EAT. Many of the claims defined in this document are claims about an entity, which is equivalent to an attesting environment as defined in <xref target="RATS.Architecture"/>. An entity may be the whole device, a subsystem, a subsystem of a subsystem, etc.
Correspondingly, the EAT format allows claims to be organized using mechanisms like submodules and nested EATs (see <xref target="submods"/>).
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
In the EAT context, "entity" never refers to a person or organization. The hardware and software that implement a server or service used by a web site may be an entity, but the organization that runs the web site is not an entity nor is the web site itself. An entity is an implementation in hardware, software or both.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims are defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific token formats for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Full tokens with security envelopes may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization format or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EAT tokens for specific use cases in follow-on documents.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>The EAT format follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
        <dt>Socket Group:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities. An EAT <bcp14>MUST</bcp14> always contains a Claims-Set.</t>
      <t>Authenticity and integrity protection <bcp14>MUST</bcp14> be provided for EATs. This document relies on CWT or JWT for this purpose.
Extensions to this specification <bcp14>MAY</bcp14> use other methods of protection.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines a new top-level message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> socket group. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> socket group.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID <bcp14>MUST</bcp14> treat a UEID as a
completely opaque string of bytes and NOT make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the "oemid" claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte <bcp14>MUST</bcp14> be treated as part of the opaque UEID and <bcp14>MUST NOT</bcp14> be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM <bcp14>MAY</bcp14> also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash <bcp14>MAY</bcp14> be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this <bcp14>MUST</bcp14> be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this <bcp14>MUST</bcp14> be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel-hardware-model-claim">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname-software-name-claim">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot-oem-authorized-boot-claim">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in ROM, a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>SHOULD</bcp14> always also be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy <bcp14>MUST</bcp14> conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity <bcp14>MUST</bcp14> still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URI for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature <bcp14>SHOULD</bcp14> be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs attestation results with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standaridized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="detached-submodule-digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
The EAT format, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in evidence or attestation results.
When these claims appear in evidence, they <bcp14>SHOULD NOT</bcp14> be passed through the verifier into attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EAT's may be used in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certificate authorities (CA's) may require attestation results (which in a background check model might require receiving evidence to be passed to a certifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is a full top-level token.
This top-level token <bcp14>MUST</bcp14> have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It <bcp14>MAY</bcp14> be a CWT, or JWT but NOT a detached EAT bundle.
It <bcp14>MAY</bcp14> also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each detached Claims-Set <bcp14>MUST</bcp14> be CBOR-encoded and wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each detached Claims-Set <bcp14>MUST</bcp14> be JSON-encoded and base64url encoded.
All the detached Claims-Sets <bcp14>MUST</bcp14> be encoded in the same format as the detached EAT bundle.
No mixing of encoding formats is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations <xref target="sec-con-freshness"/> requires a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and <bcp14>MUST</bcp14> use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements.
Such a definition <bcp14>MUST</bcp14> have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific defintiions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying Parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modifie detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "eat_nonce"</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: EAT Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Name</li>
            <li>Claim Description: The name of the software running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Version</li>
            <li>Claim Description: The version of software running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Manifests</li>
            <li>Claim Description: Manifests describing the software installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Measurements</li>
            <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "measurements"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Measurement Results</li>
            <li>Claim Description: The results of comparing software measurements to reference values</li>
            <li>JWT Claim Name: "measres"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Count</li>
            <li>Claim Description: The number times the entity or submodule has been booted</li>
            <li>JWT Claim Name: "bootcount"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): uint</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen">
              <organization/>
            </author>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald">
              <organization/>
            </author>
            <author fullname="A. Farrel" initials="A." surname="Farrel">
              <organization/>
            </author>
            <author fullname="Q. Wu" initials="Q." surname="Wu">
              <organization/>
            </author>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed: , , and  for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose/">
          <front>
            <title>COSE Algorithms</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="9" month="November" year="2022"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-21"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="11" month="July" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-03"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="19" month="October" year="2022"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-01"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'948f8860d13a463e8e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'948f8860d13a463e',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'948f8860d13a463e',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'948f8860d13a463e',
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardize a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain reference values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-18">
        <name>From draft-ietf-rats-eat-18</name>
        <ul spacing="normal">
          <li>Add paragraph to appendix D noting that the "iat" claim is ~time-int</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y963LcWHog+B9PgWV1RJHdmUmRolSS7Co3i2RVs6zbiFSX
PbUVMpgJJtHKBNIAUlS2Wo55kNmIfZZ9lHmS/e7nOwCSYrvtid0IK+wuJnBw
rt/57pfxeJx8eJY+TJJp1j5Lm3aWTKuyyctm3TxL23qdJ01b59nyWXp+dvlD
ksyqaZkt82fprM6u23GRt9fjOmubcZ6140XW5k2bJLfzZ+mb48uL9Oeqfl+U
8/THulqvkq9S1/fXm7z5Gh4166tl0TRFVbabVS7DrIpnSZq21VTb0Y9Zvmpv
4MkR/m6qGiZ23YQWzWYZP5hWy1U2bV2L9VV4Vlb4qL6e5rOm3SxybdYWLf64
vMnTsxJ+bNLjFpeVtTDH9LJ6n5fp7tnx5V6SXV3VOewe/Egy2CSYfNnmdZm3
yftb2MxiXuLiM/f59KqqYdEz2Khn6eGDg4fjgwdJtm5vqvpZMk6LEqb/fJI+
X5ezq0U2y2GGvN3Ps3Wdl9M8elXVsNEX+XRd4zRhxlW9SZ8/P4FX+TIrFs/S
xXzx+0YatPR+AjugI/04SV9k5WyTLW2cH4u6mN1ktXtBo/y3dbaAL5fpZT69
KatFNS/yBtY7neC+wknksKePvvnmUfqiqvObat3k6WldfMBpTmFwmGdWpqdF
Pq9w1/M57Maz9CRbFNdVXRYZHde6bGto+fbiGH6ubqoSJrTzu4P0yaMn6eNH
B+k3hw8e7ITFLXmKv//Xtpj8q8zPL++nSfrq69OqrOY367CTP+V1vtzEb+6/
xMNvnqY/ZHUJ51it5zfpmyqb2RLdC1rPDDf07cFR+s3zi2iBZdHms/QfATpm
1TKs9XdHR+nB4aPD9OHjhwdPnoaV/qma0WS3LvVkkv6cLRbZNKzzJKsX7iEt
8Q2M+geYxSy9qK7bWwDakS5QRprCV7+v89kNtmqkEY2EiKGti6t1y7DKo/wh
L9+n3xf1+5tq8Wcd5oc6W5c31XVepxfnl/BUb0rvhYx6A71MrqSX3zdFO7m2
lhMAdR3t8qZaZk36Q9U0cJ90uON6mT4vlrinocuWmk6uuenvs1r3i3t6UczX
+SL9HvYHLmdeV417Nb3J4N0b/G8Nm1DaVQOAyxcAdrZ9hOEaB5LT+neIE3/f
aNPJNLOeX2ewgdP36VuYan1b/Ol9GDNrbwpY2fc1zreehf3NyhKg8LKZ4maU
xfzORd9Q60lrrXvrfp2tF+lJXd0u8k2SlFW9hN35kCO6ffPDyTePDh7Jn0+e
Hj19xviKXwFchlZPtdXB4WP98/CRPX34VNs+eXzwALqZzRby+xt79fDpE/32
6QPr/OmDpw/0z4PHj/jb1WLdJPDw5x8vnhzhW6AHWT3HC7lz07ar5tn+fp7V
7c24KK+rSTnPJstisb+6We3PqttyAZd0Aj/+4bpY5N9Oq6qejW/nzZOjHe6K
Mf7Pr948P01/PHt1enZ5fpJe/PPF5dmL9ODpk6NR+vLH48nF5cvTyYMHDx+/
O5g8mDx4R5OhDhSB499jPp6XhO+zRfpjXjUr+JEtxkgdFotiTnj8GP+zSXeh
5z360GjC0fjBN+MHT3C958cvjycnP19OThZZsWzilePCYd23t7eTIiuzCYy7
nzVIdZZ52Tb709vWL+/k+1dv0p/zKyVh0O1eyv1uWwQO7+Z2nS2a3Kb1U2da
0byauyb2J5mYzuyni1cv/cx+6swsmlpvboOTO3l1cTY5XswrIHw3Qxt35wSn
VZPv+73bwf7S0N/OX7tjlzdAPn58/Xpy/uLsfHg2K2BossXk4Xy1ognN8uZ9
W62W1WwNKGr/YpVPi+tiSnDV+Xmat3D9m0nWrD7+Q+PfnM++/ebwqV/Kw3oG
MFnmNTMkr+HWwI/mplilr+vqT/m0/TsmgNDDIo2GYTYuPQECn77M21tAfSmg
OWheLwuA9ebv0pfr5VVeA10bpdlsVuewqcgBQaNiBltrXW3bv4ewR/FteIrb
d1Jd/Hx+Cts7Pp0Qy9lk0+UYjum2mOH70+evjod3db6orjLAH1kLfMaSNvZ2
NUZSBtPZX68QNTT7MM6j/YPD/R9fn7w7LeYFHMTzHNi2+tX18WpVVx+yxbsP
eOtXs2u/mdI25cZpdZ1qc7eIl9WHHHcFV/Mowem+Pnu5BQbyMkAk/Nh/nZfQ
40J2bbLK5rkf/zVwWDAGMqp5vaoLYLr4BNJdGGMP6P2/rokj13uB+HzcZnO9
EdwNvmL8cAmv4Kt5AfzO5q+8NNp1+Gvy8aZdLmj0i9en/xSNaRT0dTZ9D8tK
T7M2S88+As0t4dcufrA3OINmNfsITMGHoYME1gHuytEBnOjhg/0HT/axm3F0
JcaH40M7RwWzwwcEZpvpAhgxnalhTn08jOem/BomhVsSjbUPR19/KPLb/QFU
ZWcC92m8ymqgz3CKQycDF76tswLGSN+cXVxeAwk/Kz8UdcVbD7i8enO2h3dZ
+oj27e/vge+iGXzHJ/b2/HICUkBxDRDkr966aMdLeQ4tkeLGXMTRwaFS8yPk
IoRrODg0wv7gITzFv0FInBzX0xs4tmkLEo4bh6TKzL3DD4DTbG9m2QZEMgCb
aKv0Fcpb8G4QdOB63Rbvi1U+K3gX8Ne+fvmOv5wMkryzs7PJkweHk4PjN/EJ
wYv0ogUUB2zbKN2h39KQZTMA7fxDAST/XFBgXu+4IU7zqaKHB0+HCHwjnTew
L3lO074ugDlvEd7l3b6MOMZOJnzrgF16eDIB/uM5yNF+yvBoUQlKP3593kHy
h4Csz2aFYWme5U9Zuc5AugQc9mQrXrh9SLO7fLM/D0OMYYj9r4jpAiIB1/Nd
gdjqmsWSQSoATPViBqg9J64AwR9oY7Fe4ppevT2f/LiGd/GS8MmiQFYZoDF9
C4gQkPHZR0AOM7g1IHABInQHABL82/O9UfqqngMk/1mYtcVmqOUraok07ASV
B+UmPT+FK3d+6vm24/V83bS4Pd8MI63+ISrummXLfXw4tjah9f5tfgUs7HTN
F7VF4QtYyWY/XxeExGRHnlfV+/WqD5iCyuWsaadJoxEu/+BsQT7HY5kMzNoe
wQUd4+xW66t9RHEEdV/VPCBIzltv0Zvj+87zvjsJJHe2ngK6aBDbToECyAL2
4Z7kH/k+3HGp8dYcbL/VIG/WKVwiIPTHAAUv8rauVtUCKD/Mtc4zZYaa9JWg
e2rn8drwlcmvGjjPfJKVTRFvLgEE/Q9MD2dXw/98E5Es+IkkCxndf3oEl/4U
FXIOfyITO/4Ib6gZEPfJSV63w82IYoM8UsFlGU+hGX7z9uTkoouP19MpCWI/
XR7/eMeG4R18k8OZQHevi5Iuz1kJlB0f/LAup3zfSGsFVCQ9nsKhNelruObU
9nvUPgC6GV9MaY+/sJG4Tx+BA4CtNJjQS7P/CMjRk8eP3d79kF/VisyI7p8d
X06WSBPGqINsuotG1WZ4nSTj8TjNrhBcp7BRx+UX9IQpcoSAnhpYmigDASVN
Sb5Jm7xN2pusTeH9tC6uoBV2kdM2oP4BxgCGummLaYMoDbrIabRRksE3RFcW
xXtonzZL4OVJkzRKz6tLeTtKS2HVgRcsVrglgGTTZj29maBcUjRuKin8Wjcw
uysgo0mdLzbIvgNnAOOleLmQya1TuWZpW8EgLXH/eXpT3aZL6DUt2vS2aG5g
JfC+rREttje5THvCG3Z8iUPlIExBj9mwbAoDDUqGt/CVV6qOAVdA5/ks4YVM
+ISWxWy2gNP6CrWyjCCQpN3jvGBmWboEgES2FGbR0rtlBvQIxB84BNmw7Kpa
t+FEJtg1/wmNN+kVHooeQlMtYYvgbhDPi3uID0zBlqC6WbuFButFWwBPBQcQ
ziONziO9vcHdnxJgFdcEL3gEtPuLRUpEFoCHt8sfAA4Vd4Wznd5UgAnsyABs
qlZOD2aL7QoikP0DReyYf8yWqwWsUxpKM92GxaK6JUEwXQJ4tnj34PaUIMXR
5lclrnOFg2cAzcuihTPEaarqGj4D8k5rnFfQO+IXr1anLWPKjW3wJ00fuwCm
Ns2YLagI3KxTw7Z8g4DowAZcC3wjXAIFwUUyHzPCk+g+pOGoQzgkBhlYp+4x
QExN0NQ0gItmuD7YjetsWSyKrA4ng2tqQldhwb11NoYnQKIu00+fehz058+0
dzCqYkD45Jo4IwI51ByjIYJhjVAPbteqQl6Ejxgg/KoGcQoXPEnwroIsXxiL
RKfZIFYDiZMPUyG3ZNR/va5pp3UQWrbudvHnfDZJ/pDDoDgwTUrAB2Sf5Lfp
i+w9HyPvAcwGpI018Ist7TLakGBdtVytwQ8yAOdiRYBbV0haqlpAc7peZDUs
gnbWtttQCH0HXZ5H2gruPM8amAAj0GuGLZVh63VJph5sGuYFjOt1MV/XDlII
tdMErZWT5ACyh1B+hOcLkPd+fH2RKnsNPfyA8hd8CnQ7aIgA/KY5yGSzJBFs
OyUxEtAgQ2KzXq2I3qbEadckdsNwaLmZZk2OePQlNIN1LXIiDgHzIVXOpgRK
MyJWgHDsO9iWdGDIDLHqNcqYRI3wAAgwcd9UaI6AndAuX1x77yZ3XroTHdGI
gdDin6jshVNDhULRLAUKs6sFIbnpIic44J43dJyyuDLPgQ0a8aN6s2qreZ2t
bnB2pgDki9PcVOvFDLslJI0nzCiGoStMT0gINtAVCIYTetHgETB5p63D20AQ
QTsxZ30dUlRHJqAz4EdQTYfrAH6eXi+FPpbRXr7PAVGfE32v82YFx1LgRlzz
DUHUgceAvfe+usAL2p9Uw2SGlgNiEaB11ETQ2IA7N+lNMb/BsQq898wrsHjN
YHz5+kXDrARJyDn3DMf6ijYQCQfSKIClBf4HJtPQ+OnFzwg2ABgMoDBXunjX
Ci7ENxlD0xD6DZDK+IkmjKoiuVlynDfZBwAYJL04ULO+ajbAqhFDITyL0DPh
lBEDCwtDjApgYzaDfP6MSyOmhp89PcJnmcIWTSLPgFcK0CA35mpdLFpc7iBL
xL09fHqIvcFCB/kjaoQ2GmlUlDBDRBt4S2G2Rd3DMgRL9CYQIL04uPzkq6+U
aVIRh8HXaMy6EehEdjDdYbDewVOvczT3IV+Bb4lzD5BOBuiN4lM5N6ZXtL1t
RMgQ1Q7zXiNghwrkPRticz9kC2yPMKf3AKEkD6iWSamN8wvRUa9t+nWS9tg5
nCOwXYvc2LosgEn0g/G2e5e300lyUtV8+2aIVDeMYvDgWYOmlDUimxVrKHLE
HLiGcC58kdB/gk0EdIolSxfQaZPuNnkO0MAtms+f9yYe5UD3vGcZD5hmqGjO
6cYQcdOOcX9kd1tsBIizGTFfzGdarcaL/ANQXukZuFFoOavypvxav8BOstAn
XylpD8wPIGTbm4b5wB3ZScMuO6POoeHg6nER3CB+XJAJdcP34IiuHi4c9neu
r2hEZYsMWHH/dFR7xmwTwCHhxyzwtOkqrxtkXms9I+PRbnO4aUTvumsgsqWn
Tgqgj8Bq2wzKHPlOujGyC8ODTMg9xcQJYi2UF6FJGq4mJqcrtwWR4hZwByFC
XVW4UFdrZqCjxVHnwO0wiNjXADLIb9vX8KtWOAqN2iZfXPtrVZBI3CF2cLC6
sFFYFfR3BbQV4ObCM4x4z6izQpjHY9W5nnGf9Ojy7Iz+q5LwFHUUBJA1YJG8
ppf85wh3/CZbCSkjJN39DFfFrT1IYyelE7z5dwF3HXiSNfBnworyc7gVzC0G
qZ1mEX7yBJaIHt0dR8qBuFyfC4nibw37FHHPKt/kxCEv6e4iugVerM6SjthK
VBC4tgr5Mr1USnLTbJ4VwNMF2CvKD1kDfKZQ94bYDOyH7hh1BkjNehrhI7xL
ZcW8F2xMbxTCU7WAFQjyZbFcL0OzGlG8cOLC1QUZnGkVyix4/35QftO44K08
6L1ZTxaNs/CGmTvuiG5n8vMN8p5K0jO8biIBkP9ZS8wXnS+QdabkP1+OEGsS
Z407d5U7US8T4C47ZlRlAnNFNMTdMPkoVMgbIx8EX5/aBOnaiCA4pEiRD1GE
CSoJh3hPTk+fi7iK2mhHnYhrEcUNfG5IGShvvqhWudsNMqnT0uEPaOtYOc+/
0Qr5OIiZWAGVwIPHjVzkH21TyatJ2Dm6DX0JIBznpmOV3kRCCJ8n0+RtQMDw
ZFwPOtfsA9exBkk6K+omUj24M8Y16JgeN6jm6tMn+JB/APemFOrLRxUEeRDV
Wb7DGfiRyZQY1POT5LgZAMGy8moo9LDLWvQqdGw1Qj8Il9Wc2ZIgBIEIUtUo
3CdvS8Q4TEPuhHjcRFsldy+AVJVTNGeTVThAbvocxNQ16uV2EQiVI3588ACJ
PNDWZdW0IobaERC4hutpSs5rISq8VQC5+zg3hWl3weA1AvT+T93XsNTniFp7
ayLAiCAcj0Tk06BDIoSImro53RISIFemaJmi/mDGahnCbSTjoj8f4cUyv0UB
C13K5FKXW+XVEbRsM0F0LAZ02l7DZSquCtLJwxU8wZXgAkYEPLqKCcO9Hhmq
STNBlKXc3y1yGHIzTmPwV4pgrIHR56JErwGIf1jjanhIAq+mj3JUalsCKhWx
jQjGFNhBmzHzxsI+B3GdFZ1RS+Bs6Q7QXGFZiBMM1kg0xKa7+WQ+QZkAYSPI
jdCRzAD3dU/2Ey4tw2smJ8CadWQ+urgQkN+M5fwmR5M96Yiv62rp1Fm2dhIE
eGeR2UTSjeqkYo5GFxG6eJzIItHTIDLaQKYU6TGaQlISo8mASQSIYQD761Ao
GYWIFJpkj4nONZ1rJgJQVffXwAfjri/uQu3thdytzIsng4Se/Y9UUdqx8ZCa
9IeCLhrLYXCk0pkoYZSAFEhL2YKAoIGbeZ1N8ZyCSqbObSplVtfVbT5zU250
infyFTjP6wpFwHFV2t6r+P1qRS5bAFkvTBdOPvaRdYz2ykmU3B9PslqJ0xfQ
G9aURrrkH1BVmacH2/XK6SVqDZfAVgLiHzlrVu00VDliOFT4CKOMExGVbDAz
ycC4mg/QW7Vu7rR1AeazXhF3r03lpXLM+3zDJ4MoVg7FJmf32DqhdnieTOYM
H0d2GLKHwY1ds0axrPBTtdywno+xH6K2BnXDcA/z5gZwCKmMUA/GLgSEyGvC
YsoUAq9Q0Nyp0Ua1b7imDLebEV6G71tR3HvySCIirYWYDuaYw4C4HLdEx9nC
BAGLNqovMUb9Kg+8lShrWUFDHQ/0wFYDJmjGb3QshqaTwXdq0goKfEENb/Jl
BY+9Ne41ikqztRrGYmuVMV2Ds4p0bIho9H4FyS6Yo0qnDMnYBp2puDfyZiu4
yVk5ZcOWs1uJHRUZDz4jlg9afxaMrvwC1Dw1Q1Avp61JsBO86V/BhixYxYo2
jCuYTQ6naTcA+/N79UZW/umr2n33GcU6McxsV6hVtelRyNEMSBUy7/AfQbCm
+loLIrU71LFMyf6zYsJPxPHzRTl4ZLD3ubve12j6Z2sIXPI5etDJNe9tq3/w
dZOiT8aULMzKMevZU79Cn6IeEED4M+LP8prQFZBDkGRH8OkC1feMwrG5iPB4
lKwesENhiCzK1boVTg/vHukHEGFuZLVb94CUNiAPTI2m4MKRVbvJswUp9Nl8
tG703gzaX52VqonOS86RuPGab2wXicgV5hnBIKIerPuoQZXxK8B7+9dZsdiy
LjgLNjoQjgGGj80ObDxxSE2A0GCcTAtXRDxusxpv87oEkoXnNoxrto5PfIx0
g63hF3CV6Oas/TgA6mii6MQFpvpoKMg9GWuorofhEcd5X1a3sJ3IhhFoIQW6
gY0UgGOBWPei1fk2YiMyiMUzpG3YDDQesVVBAQEFTacEXKGnMEyGzrH+IFyX
98SZpMNH5canY0EIj49tK0DPUS80Y+d00dgHwBWY541AsFwjdMESFhVwSTP0
ByA2GcSF7IpMJBGgt92Ncca9FZsGdqp8Wcx2BAneMVnALXISjO1xBjh+0Nyk
b8/Q6Y+Z1rQkH+s9nLxaWf1dU/Y5cgUmfTihfRz+alE0eKdJU8rOs2ltCr5o
bbAe5uJGgmUaNpyD7JWp1/mCnNMUVvkc2Z+CFJgx4KLIUs6AmW8Vhzq0xpNA
rSp+6CdBMIweJghZ7G+et3ejdmJdJTwA4+k2DM/IrAGFBZFn58Xbi8udEf83
ffmK/n5z9t/enr85O8W/L/5w/Py5/ZFIi4s/vHr7/DT8Fb48efXixdnLU/4Y
nqbRo2TnxfE/77Av586r15fnr14eP98ZtjOxYtEWSogviRjm709e/z//98ER
MMv/x5sfTg4PyODGP54cfHMEP26BDePRyMOFf8KGbxJnFIErNc1WGEbQ0AkD
XrktU9R/wvb99hfcmV+fpX9/NV0dHH0nD3DB0UPds+gh7Vn/Se9j3sSBRwPD
2G5Gzzs7Hc/3+J+j37rv7mHCVhF3BHy/2XdgzcgV8UAabpXTRH76NMYgMdr9
sYaLiR+MMxWQXKO/oDEyB6SvBKFwXlYoduD9lNsaWKZPny5y5vee4DzIWVJM
q58+HcNBAtn+mP7I72geA/IzM63hJrDIjpxW11x7os/YzvssSUgJ+yx5hkrN
Ip/SbpjXPVmcAC8RhLJRVCncBD4Q3Nd0SThqKcVTgKk/jW0OeajPRFxMcpVX
WaJugOaTvsR4QpqUeF6hLQuPzCxlqgnwfgtKZdhhwr3gIa/V6U/1KDbcP+Yb
HO1SVHWA/FY0O+rITzHTgXYvzRxtXewgpUEsi7uPgXXpZQx2ZClhvVfHpL3I
rvJFbNH2E2Ex8ENVkIfS9Roj2nmDYz0bNp3s6ar+iFuv6xL9Mfq6B8WJLEZP
ktuglYDMHhuBYLobLZt2aP+onW5ek17kbW/3tGkl7FCkJXLmeHj2Id8EFjxI
CfeG80hRgfd5UMEAoH4sMjsDVo2m9sAjoaRvEttu8H1RB6k9NM43Ts5fog8i
7tNqVWeFSDBAePj04AqxqAwoohVbErO8kfZA3JigS2Kb0a8RiFd7gx6x6O6K
9t4bsv9MC2Ix4RfdooLZKXZm/zNDqUoYrENQhQzs4x+F0rqFs0pfps4nQloD
0dAG2UNdISKFx13SvxC3LZ6lMJs38hujAzfdKc1yRHmkbu7OKcJK3Wkxg7pa
18BcMo8BwxbACm3I9YBtMiHYzTmFsX57wvEXAD370Xz32YGDbf2/okZVdoYn
HnuuqaJKocn2TAyJBim0L8r/TIJogqymaIVYr2MOfngJYwEMqBg5NoEcPWJZ
WwQu0g/1ZXi9orBxyMLGc7XJjJzbF8+EBJu7t/6WDKoRY/mhAvD1HKc7SCcJ
IjSonEjoqon2VURHtQvzBZKHscOglz6JAtXsCGRnX+r2Gy/LIo2y1WnanYl5
kLYFYnVCzCLc4k2na2iKVBwUmdhyPK+qmcxxlM6rxQzdu6NzQ3tGRUGt1g6l
cEr5wH7CiOMadxLs4ysrLBrWaaMzEglXcgAwAzqHnuS9LOY3hKqWGFzLB886
Xqd7IZN/xbsWxkGAL2dV3dDc9WwIy5K7KZvJCZeg5zu17B9+MEKx4lUh5+sm
aGizFZsnkKAr6jMasVgIk0R8hN4WyYFCbhvT9wAxFEKMkwxOLuSXYEbaq425
JQ3Y7XKJ6Br1XKF/ETvgrzSBXyR9wK8kgFSr8XNyUGI3uWBO9MEIWbojPv8o
IaQ7pKvfGamST2iL2jzoAyauYyCuXX800xOzqOjdVMgBBsckRj5b3Gabxltn
QqeIJJylUJz59JzUbxM2hnq6cupYPFV0AeuwN4Rwc8LcTtXHIADNBDVPEoqb
a0jrRefTk2WBpyf2WbXgcCVmdN3DpIT77luDyDe3rQBi1OszaJsje4XeAuI/
SlbCmd0W5t+oyRV9TuJhOiTKBpxmdW26dtJuR5pbJNmiSrjaOHuSGvNIH/GH
y8vXaJ5GMBhf4lvApovZHvXFG9LtrL3hZDFrDkskDozioyM/l+viIwUR6E3I
ppgMJPat7nFckSdbRjbh4I8n8DyK7Xy4z1frcgb0XDwET8++//x5T/X1N4AQ
sS93p1H86psJ+QDk5Mz6wgEpkU3b27s93AryWU6S0/7kjGiIUOJdS9QDV4CM
oYbcBgxlKO9um/Evv4G+x9jL+DKbz/PZmLDBv4z8m7dwDd07mj2/xmH56fgH
9gz5F4AcxGnmaKli4sPJUycMwr7mJSp8YHrXa5JmYweTVpx9SOCckNoej1Es
eLyvi/WcNrVK0Z0LdoHoBBPqJreJKCJQ6ZV5HEyp5YJdMrmfr669hzqCmLk2
8gQJ9ONzBTCdFTWKC9GZEm8zgJjwgLFjjnRBywlKN413YmWWMvhGkCk2R3UU
as1DrI5EdsI2Y1wiydjOY4j8XQsx7YgrfiTCvyTDPh8g+4OSWVese62Y/qU3
D9IFW8yviWC37lTKjm+AGcscxYK+/MCB7vOQDlqDcaZR/PkzShV8oT24OF+s
kdBOdcHoIFtCV5FHg5CcJoa45N/gH84lCTeEmn+bDt+ZdD/ddmWSZNsn3yLO
1mcvGDPd0fj7ty9Pn5912yfbxtX+7Wl/hP4HMkbvG9yPzq6E66+70kcIMrv+
CxwL6FQ8p+Fmd08JmRmEG0bBn74KzmKqcpaLF6JJEYA6fvXdqDLzHRMZqOtB
9ulTJw+RRh+Edz/5dz1Ps+R4sfDuECPvwol2NnWfwF5JDOGfKzUDN6OACVQY
z6QrP5oz1TWIKk3PY/MlDoBsa7hCurPxzglB1e27Id9VMsUh85kBCoi6E185
lGHwvmmH3YAp47/RTwW1EsLwyZY7BQM7BrDSgTRqzMsQrS/pBTCajWLKZlqt
hA50mbRJcmECdJCqG8OWZMyRc+jF9sQ2Amf67JrtHAVBRnaS/AHw7weUONXe
ctWwvfia2ej45En73fFgRBuJDI5yGtCw7uyUzAWHQ7yn2Fulltkslc3Dg1xx
/KaqHVvlmNjIQeMnmClAN5q4ddE/pumZNcIe9BKRGZQQ+BxFGuL+Pn3SzzAC
qLRORgHbU2NY7LoumZ6bOi4v6baEuJ6uTykKemEqW2367PoUbvC//OY3QaQY
85/KusjcFaE4tkFCZaOkUzH5+GsHYSzg7EVOChp2ocs/TvNVK6oLmtAtuoRi
qD+yHYsNC7iziD0nVK8BWkT1IihTlaBvtjdssHO+P11JFGNSK3ahuxUmIeI2
THsPl7BYFhRyOhoSpGwMGuGaGLu7+2VLAXEajec1mDGgVtjXO+jrHWAqQdV6
r8za2AUmlaRvCK4HNPomfJLONNbuo1Wgv+9NOFsyf5maQQIkeWjShydEDL/4
tZ9P6AHvCZka0U0OCMk79tTCWP70Jf4pyeSAXtKbzyb1c0OfiOBq03LIvxsJ
qSWGmNcZh0b3m4j7lTRZsfaSw2sb9loFQJ2zYx6r35z7PrtDrURmPnaLmqU7
NMMdQK0O8Zj7I9ELwnZEA69Znmeva7USBj1vPs1wMyUyi6BBQ4DNsZaGg9W8
RH48/0BqH50Dz8vPRORwWHwlvkzzNZq1ieiy3M19LDb2DRLNqEe5FoZfZeF2
jmSejcBDFRvMnPAZSveJitMIZ6VqQlSRIPoNginexWDr2HnpV0m2KNRn5tks
CASWR4zeTzpgRDtOPsFwORZ5Btf48VF6VbQapFRXK8wRAcj+I8WzhE+b4s80
a+QZAKFSBgRh7ZdVbQEvwrl1I6YmhFjFEaEO1FG9IbzbNXUq4+OoEzK94t0d
KUK2SyG3gUGcIdxCcWTCT6iJgL/vF1/i6vktjoFHODSGu0bquWDpEhDN0OU3
59DYjikGKRT56vSbsNeI2Gju6keENwCDyXpYRMkBSNVjZPNKuEzIREB/emHw
kyfw+MrFNFoqXNpgO9veFqk5M4JdXOLBA94bc2Prbt43YfOCIDJAZNN9EBoo
t80ubeqYzJTpt9/xHpOzM4hrv6SHv/VPft3D5K/2E8STk79PW9iUdEIz2D14
MJl8c7QHyMQ9fDKZPD7a+y4RaQTQrUziNPjzkmaNdKCJd6btSLdGcbxDkAQI
4mebwQZqWUMXirSagkDQdUm0h4PeKBekponcJD9zEFjRTNeUhBzZNuT5h6xm
9GHu/RXZN/urdJ0Dz777tqQLmC00Vvr8NJAedCD6zFuyg80V1bB1tREXI/OZ
DcQ1i4IIo1QYsi2c/ydZVlfori4ZgDJA1S0rZ5Ebz9LvgZEEhhpDJFZ59p4j
Qs3bFXBnkLAoLpAs9WTtUsu6nkSdOy13FNR77ohL+Az97Ufsck4x/7Dwhi2A
SVCKy9V/zzJRlkauVkgkSIPqqZfGX1zlMHVgVyhOBoOPYB8DFlzroSxYF8kJ
QTHfjOSLYS2r29e6SZgur5kjn6SuR+V+469VwSyiJ8esjBL0b5BomDoPNIll
Ph+OQtGcQckUdZdoFgJgZlI4q1SznaE9iHjjUYqYiwL+KCiOQkKsN5Rs1iyJ
cw4jxJq3lRsuWjvdVP86sY1Ql0feeGXX2TOuuOZbqYwmbzPN307AkABIiiP2
UfeG5iLXpCWCR5aMv3G4hPISYfYI0bD3owW8Z2EFbGW+MpOLeVon6k0dLZn5
f01Io56SsZ6B0woiHExSRiN4iaVt3NQ8j2hnCvLyhPEw+huhnMCIA70l1yln
C0FnSRfGemyf+yQqnFaAU7IQ5iYyx/rvQBCZtAS1jrPD5DWiQdZncKgM+RLK
9x1uIYBIgKHRIOCQMZ41BDlfn1aCfymeFWP02clR1L1MRlX7sMrYAByH9Vzn
5MDiQ2tQGUqTli8RbV6YYvuYSQuLXweHj+kgcBcvaJFoxySeaJGXc9RH91kj
7lx5VQYJSqqg4/oMAJ1MBKzbFzF3m8ZCeTLh1gSzsKvmw4dycMiATBL7KfET
xJY07XbBn7Bb8YF0fqo/F9ZEE71ckQGXPN0YgXGsCgM0zmUMlLyYl7ZzTRo8
AXH+whuR+lsnCGjfXX5uQdfbLFvzNdxWwH7q02LMqjFojldFkZ+NQknyl5QM
bN8jkMvf6HYGf8c5S/8CLR98fHAAL94cvzzFtqTfR/g4OHwySg+eHiLlOXz0
eIx8HMxmBjKKGGeDn0WlARaUl9GOVi4ld2qO9OFWXhG2QNf9MpNEI0yt7NKR
Rm2JeargrNFKHJKUBAuxzIrYWOEL6RbMlK9yg5Dalq2KWcfDDET4G3PtNipu
aptOa3FQ+MKWsDhyBddTEl0xvl0U13kH94bdC9hOgKdZYrUFgR44Flopo1Pq
jK9lVmaLTVOIv2YMlHrQh3DClHHy7O25Hra569GLqaRq7ZhENKyFjfDwsRP+
6cH4CKAF//v4AQIM/XUkwViW/w+avnp7PsL/GT98zFzQCTJvATU6Cb07lRzT
p7CKemmMBNCIsbLBAVXj+Iyhq+s2LwPRzTh5EuuWELZeHJ9YxKOa/YlAmIYJ
WtDiYPLVFaZVavPgc8krn6S7L6tWbukt5TAwEsrZKExRICkxLJVvE3JHWKNo
Tg4jkEiHdkyicCLT8uIxoDvKyvr58wgeWdJfBwMPEQZenJ3Hl/1oPMOc7G4T
mZB7294TaUP4BLC15kI+qWaSPzB9LE0iLpTI5DRzkqdnI5R1Zx9rlyUqa7wg
Te76DOkHRy7JCDURh1gamzxvUPm7q6kMjy9Ozs+DelTjd7Hx34U/04cyMjk8
4UZxwooHHx8+3GO9CW0bd66TNM9wc257vr4pJVxlTX6lF3986b3MlA+KShvw
+Xx6ln6F7BGH2o5bxu6YKPbbHTrzE4n+xl3HU2h2Piu9seC4XOI7WT4jmzOK
47DzN+slWjxF6ws8WMmHWyaEJLMmSrG3R4I/UCGU+1GEMg1Cpl5FwRJ6eRPH
J0rgB2ExrIPV6hNUkyaO3a5WGV7jcMZBvMdNXXKKwo26gBQt66iALVok5uY+
SbshLhZmREYR0UbAbQjec3TLE8KJNDHvCt0F0U7kWHrOGi6JSZCRdJQoekYP
m55RKDA5CGaNsMYJsSJwdpSnhE+SOSaKYUVW5BrAREPV8fJHExMzQglHhFEP
6UvjuGDK3J3SXTwFJC7RVomfDmzDN7wN0DpJXfsQy+PDd/0UIt6zAcAnFd9v
08toEx2jG2Mu732A+QWFta+pvhMH7eKqNQ5ezyoraSqTtLsePzfoAVePWd8Z
KNAzBvXMS1TLtJS4TScF96MBrDKlhFWsiZWdOUhS2mf5SQwRpYMi6UyAPwgV
hUXStrF6l48DXYKM2jnm+Iq0dcg0xGKiQ8iEeVhNLakUIogVI1BIVhvmpGx0
K4fq3EjxS7mEfEExU3dXCW5MWGNsi97CONikFfGNBLFe+v707ZuXHFNhRL4n
Huo7xIPrmjnqLyrydglrmgrPcOhektjfrKxDcH58NF7XizHpM1VtdziZHB3t
pbHe7pvJBHD/d+ZE8BWW3YP+AIdewIUem4DKS1Cl1e4F/xStFX/S1Vt5f6Rm
oDPrhVgu+puMTHbSTFBGgzkJvbGYLa6sJCMLx/E/6y0jhVGARqZsVRn0Y9f5
GKt05KQoQU1gSHmF3RCkUiaYLAAPTxvTZxN/ONKVEqDRnU2SM5eGrDcKpyu8
0byq1a3U2Rlh+oiW9fqo8ef4sPFVpSGqJectDKnEEBlkc/aVZG2Qqsqv8k0l
GuTYFcCkwrayHKc+H6ni1guhutJJfxF0qYGqzVnuk+yRsKaJmj80TwbuZPDi
6rsjiI4Fm105LpFnMGFzJJsfvYaeLwNZk8R8Y5HJRdNFTRgOS/QFz0fMEtwB
jkrcrutpFIUbVLUhZ2xzwde/F3PK3anbNMOzBlL80z//9/RVaQf52txOibC2
N2s8sHQHmu38uw4QGQgekWZBSauIUDWiNKc82BrzHuInEBXyrkfBc3GeEzTT
XA8w6Rd85VoL1Kqx2By5KqPbgkAOeZujMG+aDp4jW8l40uZFGMUdeymGnBVB
ensOKBc+CLIA1jZRvdqX9XQXf4WiLqD38kv4/eI/AMEzEg0oXn4Lkne/AM1/
IrvO79gu48lB8tmjcuLJ0t0/aEa+V2cvOvmrgxWC+TdB6HF4dBys9wpuPIU/
nFnVgBeeW9qFUfb0rmgyQHZe1Yw/KBcQdvee+rDs6lahkYMAW9VtAMIp1Fco
gBsmPEJkyxyn6I30lnCTrnYN8BN6N3OiK5sFZ9f4Kn3Dmg4plPU98YWwmvNT
3pZYEXIVXkcO+zDawWNh8ndVl7EnqjvqB4+BaBTxKoI6MbQXerraCEvY0caM
79TGVLVc81vCJxpLRhsh1zXk3fGqGdVAwNaoYocxDiuSRQhvssKUFdFALBFg
ygZEoKiURqNbzupFjuTPN8RYiV8t6zQWmx5QwZZw0kuUvZDMA4DBDheN+rYt
MD+wqs9EIGHsglxfXsI2LxaIrXmeRd50dpvUXGTgj/VgbCQDKXd8+OgxI616
Tdo0JugccQUbZHopDl/QhB4M5s2NS/tgeWF97jKz/T993LX9M9uyIh9ginrT
oSL/gOFRFX1bKlqORglK3JQ0k8glSLTYFHskaVcSuUiVEAAr9DsUDwYxzJtb
syRaxEPUS8WcJjCazume7hFh6t71oacc2UjqeTEE2TQQ0iLFkGVw5MpKmrOD
b7Yo9dBmIGkgIgEXxhVXEInLUUsQlwKxvGum4aPZvTgePx/h/76g/70QDx96
dwLrELLz5hgFXeRa+QOKQsWc8RREJkErpAck1dPhEamWiflMfHjzdVFTwtTF
NQvsbvUTmoVSwMVGenqCPSXMxtIORD0F0d/1NBIqP74IE01soqyoRLHy4eMw
S1gcZd+2uwS3B4tWiB4PuCTg9GAhCXG+EmuAocgnbJiiuxYvPPj+EK5oVhkn
x8nKhDcRrwBKfBoZQPxetCN8DpQdZU1pMmAnQ3mvxJf3Eh2sFOcihsFpCtVt
VUsCLKhGVqJJkLktF84i4n1i2+BSEVacUblM/R6kJABHcJxeLarp+yYRc0mT
Y+gMfcSz4JBxyh1X1S4Tu0v9dEI5iyQdnST5yD+uQhK7PwAjilHGWOzhTazE
6kTDJT0tapTdBSMWc2Y6T7Ky4lKfjAImKYUdRD5ZiTnmIaak8GlTcAm1IWlT
bY2qoQ7NuVWyfQFddQ7fOcZZO8cn49Oz8dGTHaZHSZyBX81kXHqAwykffDw+
GcH/np7h/x49UQdPQXO0D0TGH4ZlsOcNO0Ntw4yjL6BG1h5z18GBh7Eluuht
r9cZ4VFqi2haYwIj7Lm1k0aqfn76BP/BIz/GSqOaZXuL7yYrsLQjzTp3JSgM
NVlq6GLLAeUKcMqc3Vfo5cI+NeyP0UYRWa9QnK6nqQbTOCKFy3yWwsNq92Av
9Dkb+5Tjuw/3gGbNdh/viaomb7H1ijdh92jPTR9eYFZHDn60SPNR3/1UMl40
IYUgbbnArGwarCn/kJVaColMvHBvcUGaXUF85xgquFOFDaf9R0HpTypePrBJ
CMsTQoiDPVXd5b7UL/OH9xI8SJYgjj8IH/xzRQE9/DeWT7MfzIQmIJeEht/i
9PUBtSZ1VPg9/lODvvbuAeZL+S7pPIDPnIbqYdLpAF8PariOdGzhkN3o/CQa
Xx75GbhH8RwOHie9frZO4/Ao8SLYzS0n1AxCGCXpFLlLxC1ppAKX6asK4pQs
oTr7SY28m8+MfRfKNvJTEkbPaXUAfbCgjnQn3CdsR0LhKdtUVYmfqH02+DMh
EiU3evZG4a8mahZxxmeRLKRbSqhk66O0X8b5OVzB0b9hvrJEYeFBBirxsUtB
wLvaDWtrQv0UHL/VOmiWev4q5xo02mNI/RjyJZAZADXf7IYfzFq9Tth7OPRB
2ERy9XFSYA0x1SObDJ+4TJy8sMuOz5jyRGTbin3CL29UScqx9ZH9z8i0sxPB
zKmbMTJzKhOji2O1rtENPURuE2fj5yK+HN4hW8NTa0pzxpmGS+UUx0U5xu46
44Uzt6T2V1QlyzktxG4KqtmJU/6LoZQcdzmACg9c0xbh6ZBPgfOhEC9DHJGl
QPTsJdtByCh06fxtZQQY9uGhot/YnfpuVYM68rTsGhJ5Vn9JY8EGxYLj39Mv
GhPVzc8p6QiIsxXm1EBPkmwp8QrBomjCMQIfqkJQy7Zo85D1YdD40agTWcbu
SHGqJhS2inKdS5xYLOxvuD4FncP9KZOivzF9GEhU5zlpv4AgDTy+0y5yRGaR
EVfhHvrHq1UrymTy8DC2l9zcKq4IOP6P/KSL5aWhu/VZJzeW3WevykZTACBq
Qmve+MdHGA6IPUdqNnkrM06g5QeRKxf0vaxvwrFlfmNWHXPaKI6TrC5+JiGK
/xAKwa41WHO8kwSQUpFIZ40615f5LSVAoNGdal5RB1Gnxex+TEsXNnTmfejQ
Nz348C8AQn6hDuUh8J6oWmWo+AdRpcPD38Q7lPwaGc5uyYywa/Xr0SEtBgFu
4gxlysYzxuLUqXgZx6y/w2MT6RnzzvAtJkFKx1ADgzPeJ+ek8CgqSWFeVhbn
Ijkcaw80ZJ1rRbdCXndkCC0w1BIrumdaDi6kI2cvIDSrgKRGxRh4amwo0Gdk
pivmQFowWEhRUKc+oppLgqncF9nb0WryZlz89MkegRwfpyAml4V7IRY4qzGe
RIAX0qTvxcdp99pOdPBeN917jfvXeEuyXB/tT64XpWbjTAqVckYCAtpSdydU
gz1mUUN61L2gAAem22Kosjdy4TRkqRCMQOS7kvHuZ5+47d8y90ztFLf3uVhf
uFdpfLGAK72qgHtBy4KWAMesad/DQzuKY87qig0tIs3kfjqIep13EikL0OE3
Gi9ngOmysw24dHVdGxvr2ZrHRpROcVbPaMdzwnTwVrqrstT+UsWHrsyagxRm
7MHW1tXCM90qqAu/V+dUF8QhiRmXq6X8Wbm5saqcz6FVtxL8xlZmYYwomwRl
mOJBQ0KcTnGRuBBu58qPdCa21Vc5G7fTN69ejJjfuSpiaQLjDhTGBzhRLf3T
33fRuonmRV1dpf294B66GyOEBKiHX4sIVcyu5mi3SHdP86v1HP3O23UTIwlp
otPSinocI4Z1ZqnUKmWUkpgZfjKjHqWqRJGbFtsH+Hz6hEXXRa3pUpaa4Mil
I9F7IMEqthxT46bA6cPkNHojcnAT5wWHfRglPagkF/LiQ7HIUX8T15sjzydp
yEvi0MUEMNKKQ75GFMAhDCon8w6gUyJW4GGsY1o1AnGyJMdMl8RA9XnBZ8SK
76HrnpoMumvUhEKYjoeVdQmwKPyDc01vkIBNMUCFKs4RC2PvidsO7i0UxYI5
DbiAe1mFPD8IrJJBm+vdsWKTnKZkCN8Wi79xlDsz9PHNKizcYcaQRLSaFkfF
pt0ACabgsgny3GWMK6tlYABzLZIoV0tmO4o6DSTeFyLkpCo49KrN3ueSvwBD
KNYY2hIpcCVOK8HGkqYaa5T3FkYaDFEUYDJ5TAtNO79xHtEJGQIkdWpidatC
VD+zES7TRDtwGRmxcVJOLmGFsc+UcYnkbc6K/sHlfOZZcmo+Se/HaJQhgpIP
GCRa/DJm+Ob8aXhMaCFpotpPWpuAhqFLxsdpiSo42xaCLuf7J0wY6U06eerV
q6Hx+FLzV2czzEHY5iaIS+oLsjvelv0y3qYA0W6d0kSqZdkgIrhmdWNEd2AB
VmlhcDzupLaollnkMER1hGEOpGBpQs8Bti0USBFRt0WiwQrcBXsgFC1vT5pf
X1Oq5IuCqhTfcDhx03Jz6z2x3pVWUSXbrxsZDT1N1zWK4RR7x0iDM08wy8aj
JxryxG5VVdVRfEit3kzgWIJntbyTVWTlCMk1AE9REXrEh7E7Z+q7JeiVLCi+
eiIGx2tsDq8wLE1izWSQVAZBLcpyxfGboS3FcoYqlTj4mvUVtateydHWLn2H
xfgKcCQBanJ1MQ7qE58w5OWry8SupKH6ghOrUJzcdRpXnPXx3LXEnlvmF1Xl
MXbo9xHtwWSwYqb5s9FUkkB1eCEiJ6wW61oDIXuXntglKiqV+OyYmVogmIRn
83mdz81nzUGM3BhfxZjS7lDGHuQIUqp3yXnUhK2jnDwSlRXNfBOM+CqfcOnj
KRV10Y6AyeCJS9EpJohMUULsSQANifskLUc4G1Feuhw8i03CCNp2JRQ+oXmM
dR78SxwlI5K/0TRvYoqkHPwZs6UGWIgSSavBBxKwlqINV3y1URwxdF/V0HfG
5IGEZArrjaYkSrxIyjCCHLi6Bp0KkoBRhObI7hEGlhSPksDABBOdxqngIKFP
3DoIIQFPOv6IHFZ7WAz5yETAJdQFMUakvcmtuIbEQHZizgyzwPbndSCg8hFg
k9bKDW+2TaKzLMHXKBz+7SskTpCdgDE4uKnCScfS4z6ARj2wyelrZboWmzum
g1xudPKdma1cLza3cEOJwwxy3SznAnkMw+40JukrAPWkJ80G4VV2Phaier3g
OhI6Qy+8RkT23721uJ+8m729/GGtsfpf3tXt0+monDrb6+HqHook6n3MeCFI
iNFT4pf3kqT/8Nt01owV5vcHVdC2W3e/HtPekZz6pZZ+rV9oSpqGMey3/wgW
EiY99I9ThuxIk51R+iD9LgDt8D/5RlvBRwfuI7+67R+5VvD9of/er3n7964V
dPDQdzC4E6nkVxn4F3c8+DUMcZRGlgQLN9x9XnXdc/Wdeujqb72iHN7NTGqs
dxEwJ06xW8RAeQXy6GUHA0kt5mx62Pznhyfpj3llfR+/Pk8/fYKnE3gKs5W8
Yyn6erRA2EdkG5I/swU/ZB8YzMOC3tnErWGefNJ0V9jdjxdPjrQn+4jjfSlZ
CZWKktAha57miwVwMFUxk5ig2yoMojnoayJQBUlxpbjEWK/83U2eaR2wAmUh
4KVU+aHuK6hBLLHCgwa2O7W1bGZWS9FQ193L7GW6e72oiJMcr6qiJE+3cTaW
clFiyFnl+UxZEtI9on1gwQVxSWyPTxRxPOXYDduDKL/JYVM1YtEOzLhRQrZT
TqnM6SWIhaUEEpgrHxpcV5qJONH8m30hnoXf0OWyKNctGxeAZasbDf1JAsFc
ZJrectqqqfbH1xdpg6VqATkDe3BWiPU5p8nApi6RlUvQOB1KmYi2Rv2QQIoN
MWKyNF7UJCUW27pKQh+sNZSqABmJ/1TJcxxOvFga47x1+Nub3GcCsAQWoa4b
dpOw+CDepp2Ea9icPYThLleYyEQqhOALNM3gGlThR7eG4ynkmx1gCt/n9Q5T
PJybFCxA4yKNjeoEuAgsbuBSCq1JyC+skmQ2BQGwKTz2UADinbOS65aYFfP3
56HZWJWFW2IwSPmtjbeHXnyZ8NqARnPtiVgiot8WM6EIivJgcQYhfq7oqvvi
HwIm6r9RNLP1m/H2Joogei8YD/Qeh/sAr/4Nf43hAG3AOc1vjT5YQCNsmV1i
py+A+tg/JLVh/d0P9IX7Ammr7Ur3A33hR0BaajvR+0Be+A+O3AhuD+MRxu7L
R/CB7mhvBHnhB0gfwwe802n/A3oRNU/Tb+CDcAadD+yF++gJrmGep/E/XcM8
7/Sfpk+NHaDMYStCx7tv6b+xNYHf7XiXEU0brEW7CBtYQLskMldnmISJhPdn
hnu7QoTWk2/MJkEZHgmHs8hzv7BVmqkLXAUA3XOrxK5ITZzuosSWnuDf8WKt
yYDdnD8VXMXL40MaXgH6jhO1khWkF5Ln0ipdsOLHJRFaoWWyocoemLwED7RS
HQ3bxu6xC2Q/ornevRMNwiNvBGDVWX8fsMGQ+wDX/tLYZ40FpT6ZqgdbTBP5
Fwqqj5PacXpSYv5C7Cz11eRNo7miI8WzbLXVtp/mNYEjBsZZFl2eZhEKdbP6
XrlOVGVRqfpaYl97UdocV7+xgE9RT8knjfBP6kGglWgaSZSTbQ+eul/0YIAQ
DfXTM/kbSJlAB/biTIwFcpJjJLqxpRG4yCbdPcV0HkC4n+dtK55oxyu0I2SL
IDJQW5UX6MddEdp3dAnjPX913OxhoHaKf2JhEPgP8N6kLA0Bqaxw1QzpDAXB
mqeeegIreBm1SOokCpiOPusl9sx4DpqNhIsuFU2z5tc/ss3oNVA6Ei04DBXb
WKIHjqdIT+oCDYQZs9/cKYaoWXis6FUdmHcWRJawujeFzkfeab1nFXIVu8L3
rqIXXYpQdWli9eCacD3oS299WZcLjDxxONBvNvPJ0Up63gu4G/FcKWJRiEwc
/MJtQSIyTTfBi9wmOrmRrehvmLazscQQAhOl03MFvSh1Hdn8r/N2ak5mIZGc
xDtQQqqG1Vp+tYZcNcW/sf8hVbyLf0jfvuEk3TSaemnRpELO4wARNonOFg94
8mt+ac4HJOIRe0NwBKuUShIplgPBtHySZcWAN2/fnJvqy41PkidxA72vAMHr
JWLE5OwhrEmw98gayJngZRbpmNYf+Rl4W72prAkG6jB+oXnqeRCbTvS1BpGz
ZwqWmRLXFD4SPYJw3LD+UXdBXMebFNebfue9mrKK9u7vvEpoN6D1X9Lf0SNJ
tYv+iOGnukrhk3c272fqvDde10V4rwt5R30/Y1dBkQWogVuNbxN7VpkvnfNx
e6HPAiUJLndCTXpueXZdnOGqYROTdKsuOlWUOE+S1Yd5cDpUYEUoDi1qHGRt
65R0NdaY48ymwxlgpJ0rH9JQPI17SuFQm/bGytQCFDbOnaVykxkFuNGcHX4E
1gGRPl4eU/I/qpr1IfZYCTVJfJEgdNSN0p6I0L6J1tj1pOp7B7vUGC1tda/M
Ajvyo9y+YYsNYhosWRd54sjirURkdHPkZbdW6AWaF8PRql3RIqtainMcnLxp
oXTFGPZMXiVELnDe4pJAQYnE6cVAFH9gCeXjYb5uaDoZGUTFVezKMuPNBpJ8
mF+l1WXM1BkzWtjwsqgSBWM1SsTBljEga/Kt9mSR5LwKz3hGBEMYeqO7WglK
8bzO9s6FaGkvqtMg7uc8EQq3/KcXz/UpTc654fUq+BEu73qghphKYm1OquNQ
Je8HCbuUwDeuY3H4iOpj+JwjZcXfuZChTgqOaE2aOQi5k7CZ4Qsf9sOX+iMq
DMlxZoErJDI6xorQY/4TnYBgpJrz2wwRbV8JwjPWBpaSyCbsCw+9vRcg856o
s9pSaue4Nv5b3cjBTXaJfh3VV22o5xUQXDmluICPBh4qJFg6gLC+Eak7KXux
BtPi2Y9CDUr2QyUdRZTbn64wK1/puXxuGyX5CaI6InJTUIvLVyRL+5VCOpDu
g3Mxd6cvFdi9UlRwRa9VwCwFc7ysA2VVibUKpC6bvs/mYnbAyTOK9H6nxLX0
u5dkDlEGNbnT3YKUiAKdA8KAJ7xeSIaV4PEf4ZMtC4U9+VmpbYj6cFHSXDeh
iJjFbAOMx8xwh0guloSfn1NinU+fLt6eX06U1eh48ktgrMFet1Ip3+ImAvL0
B4f6TjbTBRzT6T/h3PVv8Y+9eE2P8T/whGNTNpFKf3B4k9ecB58GRXhkpxjY
sjch8V1yOMZAamYuqBIEg04/kZWCkbhDH+YlKP4jcdYmzI4qfzaYKzXgQZZf
SPoR7rZhU0Vn9F1gAV0O8PtzvQZGgfMNjzQQJ36C3O/vrJWgmV9DK0U8yiRL
Vg/69hn9zlZjfSjoP2rIz56R9vU31utVNdtwXPDWALBOYwoP/g7Y6GToBWyB
xIvRz7UW65tWzW0x635CgcT7vUjie3WNF+jdWcmOHn9rx81q9pE+2tZRaJDY
n3AWd3Y65Zs33tL1QLOPy8W2CXyhs4Fm2FnnK51x3Cq1hWC405gzygKXPhYp
YayuZ2SBOHgaCVCuNni6+8L9ctKTe2oClHt2pww1SjErO3lMhlom0ajdiCq6
2PlH/KojP4nyVEszYx/on4DumerIHxmYSZnL0bgoybGzvqh+Ka9fcP9H2v2h
QtlnoQ7+e3eLM3HUayGmCHT3tIQ9HUnHqgh0lsUfUiXoCq3vav5URpVKw7l4
gDzer75A2kkZZJOUlKTmLhFUO0OhQWGD07DBvKXBP4s9aUNcwxVI/Ju9mOgI
bcqi8EujzsII3UWZezRYaHOHYnOCDKJeLgZc+nd52SZbyneHKcBhDdBm5sZ8
Cpi+HoGULC7C76+gOe5OOLLjnxrl6T4U4uMfBwLUf/ofRYR8z/ciRL0PPDEa
fvlFgjQ4iUHaEUxV+BFqTZ3SKHSTvuGiSIMIUAomeTQIj6KAaFV3qeYiMK7I
b7FxivAJepsDMpGiix4logvqRwwuQolNCyuLL1Ck5XU5oCTyUothsztwlTpX
Y547X1k3OBqY1tMpZdq6zorFGkPc8A/6fA1CyGSCAlSrbheibognraWB0uAR
S5G5zhSB33ZDr0YuYLGcBX/hTtUbybDDgXYy6syb3bz3rm4BYkqtNanf8Cgc
JRE9lmpHopWErXh18XWzZXaWsbFYFbh08lSurrjqLanqLOcGOnytW54G6pij
efDkfAClKgJ60V9KJLWQ1YBvHKnoGR46ODxOr/szH1Afhgh6t8APpjKcKpyQ
goEhZWCgIOiFgGvebQRgzS5B/kVFB+6pf0rMLSOouK3x3zgplyoCCBFsOgfP
9LdYQMNTzlnfJAREIZQEEd1XpCXkwMxBDWHXp2yqEkq4bsbfWJ9y9ULhE5/d
b5CzQkkoYsJAGqKj6WKG3uI0XtQXPYn8/iIw0uTVIpARNJIGysg/ZhlX5yw0
uNCJYnWHUqrqasvO3mTp5dmZd7nzw7hOY8aGJ1ejtvHVhcUF2/fd9QfrEH+B
OgBJ+lOa1juqDi7RQC5odRR0CXp+muLFgup6noRaNKkp6pA8pYN2RSMzwPg6
TnTEwSXoVFrM17Vo4oOFIIQgA14uOdePw0+ihE9CpZNOAVLJxBNoEKFksg8u
IvKgwKooFouqLDYDH4ePHEUZhs3juNqfw0zSSdF0tYekEoizLHWxGhfxhuPF
uhYc5ksZCQTvhzlONAXuPJe8UwQzA11G+fypOlyo7ODxKYf6u0oHUnj4i6sM
aS6pfnRqpbfMPE1FdUI3VuaR+ueP+vnEOZICSwYDVI6cYZ6J9nIIWesq8A7I
xQ21LaVspZaZabqaYa74LV9076BAffdgCFYbyaLXPEuSg3Q89sAjNOZ6vXiW
PMPU1UIaw/Mvg9php08kJdgby0b2mIy+kptoJsHnnGeKG2HjGoVpbyLqDfaw
MxhF4K7LLePJW6ljZGFkeV1XlA1hJiWv1fdHLzpyEcRxoWgKox7hqNFFwBjh
Vkf1KjnXSGeQfYAdscQoYYr3qsm6m3YFlrGcdpBbTAhAi/FQSwbiX9NYnOm8
VjnFt2Awfeby2wx8/4zGDTdInqe/oqjRf6zj6OjFjPtP970j08i1eZaGv0l8
GmHOj8Q9gE7Dvo4d9HZjVlwr4rrveI9O95hqrNvE7wDDQZokw6OnwUeUH5oX
J3rRdudi/+QbfOjdPg/jb3R+0Tfy0D5DX9qBCUff8LMwErrTxjU+kF6jAGcW
hD0Q1OTxZzHdakAo32S85x+Fj/+QM441fgWz8x6nvs6sCHNVNVNib8F/9H34
VO/Qcl2aTVz8CH8uxj8UnAY6XyzwOu5hZMnteEWFnbP1rKiYGgHRqVD82Fxl
0/eBC7HSteOqLtiDzA0shiXkrbi41wW2ztMzdkTh7MF5O5VE0hJyXUlpW+Hp
hL+hG0eGpzmXIo6DjNEcvs1ao249XsU3WKU4+V4iBywbjIvnpdRNVE9pjjoz
LahkRR/ayv7WimtcUYvyi0X1VK4peJZdKy0S1/kSy3w7FZa31VZ+LUaIrkFi
SV5NDZXbLJYk6/tZUBURdXtj4sy52JvBEsycvcdF5LK5w/kmUhUajBSZcrRH
01RTzrBJ3zqU77pRehw4uucANKhSDC5t/xsmRw36s+p6XBy783IqFazGwZ7e
1WImuQFDYkQXnc8MUuijoLxdLNihalbdwOL5WNqr1SSwMpS6HntDrc+mG3If
nA6MRGI9naZV0y0C1ClIp+i6N7abMz4t5mSUI+rvTLXxfFCJgfZ6juvh7BIG
SaStFsY3dMCXO7H0oVFnVw7685nUnFtsGOj1Fwgakxxw1kxm3TkOqpctLquZ
F5gyzYdMiKW+KtDra+PSWuC2kJ38D4D0PqATiYMELZPF0ebBf8lUGsITczpS
3FiSAzvpFmxiljhl0kVXylsLFrQSwurXRWIiUgTgxNblLIznxcMBP5SQI1X9
R+groxNa2KkLPfIy2MmtPFOWXq9rFacrLLiDInb8NQn2rn9hwkNyamg+NouH
JEZhT0VKlUlFkkSc4w2Qj2TLqNidP/4A51I4bkaQzGKMgkzc6ji6ECPzG2Jr
AOz12fElT/siACtyTmxyYfUZVhmkXsaXtK/dBkQwDMWo745lRE2DCSe4wUeO
GDCJpi+VGBOcRKN/y9/6Z0nSe5R+S/wZ+XPQg/E5udWPqSU3YRYuPOg3kY63
daAZnkkt/htYhbxk9bj0cOcUvmUeN7mrpA/xU4Gt/4Q1e1DkhL/DoX3ec8wB
7pH1Bgx0f3f246jjrVhSGL4YQHoA0T3cyIuGDregXK+UHEfELr10XFPG9/AB
GEHKe174WtMa8Ehp829IhkrbbO6yR3Gi46gaqmZGvMkXK1Pxsizu6QQMJHn5
t8IcLemCnC+rGo4r+j2mWq9wWjs//Xy5A5u7g93RH9+/fXn6/Iz+PD3/8ezi
cqf77R+J0sHH8O34Ba52ng8G1fdBMYDW4Ad2qgiZ36+patGd7Xqnn0RTVRmN
dvVZOrAHJJ7x1o55a3vNaLkop925nCG3g//MGxIfbwD6rVsj5Y9DOfctqGt7
B7KZaBofZ4s5yBbtzTIVL+z9VOMyBcfrv2deGjZH7JcOmk1bajVFArXJwnx7
Bd4rrdvnbDfUjJc1BkQfYiNEtvr06e3JycXnz3uTzhS0WAdlxQlX9GojFIhu
sSbMAyZyJuU26N6zMNYpHZrNZhZUrLSZ54u4ZUqyJWcCRg/R9Xwp9BRnMYya
gYedvmfdMzUauNI4k8Hryp+ai9ssl6zpWQ/3jSKiGLHFMwy4X3agBxPG0e5o
MYwos2f0ved8yeIT8oGRyWckNp8sBu9RyArd0fVaHIj6Q+jQtzd5qzH1nSl0
Ge7sDpY7+KFamIZ3RY2XSlvmOMO2F2RiMSIWE/i//sf/BCz6v/7H/zXCP/HE
9W/Gw/CL58iphMYRqLfG3KCrTATfoy+vXCMENAaKFVLMzjvMProTjY+GcPbI
T5n67S9cicvgRO+QgY7Nl0e6ChmFFA8UvDvis6hu/EW/AGf3JnRZPJ4bU3Yy
ZHEB+d6ZdzNjdS4HCqJ+mtEwQ8wyKwE6ENb57q4tijiKrT30eCz80psG/JcR
koguJ1VIqvP4obrksAQ8vK8KAaLip6pnNdyeVcWC1BcoWTdM1hdsJvkiGrXL
PYlvvkNoYsXl+jXApuGX65Jd7bNrrRDgd/a2zlYryXZS58vqw+B64b+Lqokk
Q9cd8Qzbeoo2vdNPb7lR43svV5ZChh4d0Q5RKvLIxzGq6qCnMr/lTiIEVa3b
xsrfGt2+FuwQSKJSZ+gX0Rf0uifaDj8/l0LNIUtSpH2JUR4Hr3fieNXiIehZ
7hre8eDZDe3Eu4sMPUCwaxHwJWLj0cHTz5+hQ2Kdt/eoKelIAWUlsqJraJbH
DEHPW+EAmGAaXfHTRGf0fL4inAvzEM79XmvzwHLqexOu+w6+C/dQru6/e6j+
nb57wGOyQOEtWDQ5pQYeGX+FRVlh4sxamVn9WqE8eKcg18VpfV4CtBLcRRRB
okG0gh1Txzaf15E3TanfSpyVlzMl1Sy+vfYaIPKyoKxuF0O6EbrJjrsXRsK8
tCwHeaR32ZoMleLRq5yNdqTuidWBFJRXfijqqiSFf8I0v2hVSsXEwlKsYtoG
pZopE7muj1Vl6Cq/JrIW4qm9CjHrcIDdnYuD3hUM0H2H6zVMtcqTulQmTpbW
COoY2wpiYbayE6tGPplObw3L3hO06osKZYM0Oooc8u6d9qkWdXfbQ7RPkkVg
/NtAv80ACRHloOCRDj7jZIF6hcOOqkB8P6HQF50enBfM++M0X1FeVFPitTHc
Btu0pVR0NQk6jc2HifMyICuUrzI0+i82Gqqlv8fWJh5NCjc6XaLAkdT26JSO
lYkH2ZW0OmqrV+LfVQe5IXtK90mUrRiZg3GXOai4aHKqoVeFVUQOpTAszcag
1GUyj7hUaEUREH9CfP4zrkJlKwvuKKwd9oyL147btrDWk/zeB7sJjIAhhJNX
F2fpsTXWqowohWD9wAm+n9h7dGz2qc40ao8LsxD3E0ZztsJ7TKzkADyd10/D
8yLbxADpHHXrVJyefa+mOpdwjWFwCNQarfrOIbrx7sZMrX3Nmy75CyRZMLmL
36i9Q7OkaYpsCbrKhpbg5aJQSO1/zwJO+3r8hpGVFOPgkGrBCTWQMnQ0QkKO
IlwxY+RLhlz0FFCUJuqZS1bPfPrKSyriSd3XEuMyYh6W2YKQbf7fQUtvega1
uynofxb5ZGsi0zDieEQOOEec22hOI98is6zecbESYi2vCs6FlUtnW2aDknvR
ituTYGEskZeh/1++8JbazqdqcL9VB1e0uqOHEo5MFBIxUwvQ8x4DG9kPFl0M
MNFZm6sjhSfRUm6PAV1yXCtSjpJ7Unr0vMZU7t6/NInNS5Q0icBUMqEzJe+S
8J7oRaIJp3plZzDMshlcR9h4yvVHNK8A5ihHFtTyKcgQWsrK8l0SSsBs8X25
mfSPYr/rau2kAKpfXE8rCbdKQOuUEZ7CoBh+nL+HMl9iDbQLtITLzlSHfdSD
7bJF7/0Kc9PBx4TWNmqntbz27U0IOeIWJNOtVnnWc6wY9KrQAKCQ0qH/8Yin
IokNRENAKfoRxXG5Re/cIHU7Bl1PyG+owCI3l5rrLkR4wPMxzUIDO4pQXcPJ
MijAEV76+dLUIh2ZFfNM5uPqeqwJJiOzsChkC2JXXTbbqaGJBND9giM/FJGb
+MvgKW8YN3j+g+QUCrDm3oRm3OQL8qd3OVO13AunTU2itKnRgBy8JlYz+UC6
xbyKnPIdlrxpgB/QBFiUNCIKZ6GaKpmkYCOVwTxXBJZwXlvECMVHaYqToER9
vFMhwSpnu1gQCgupty7NGcj5zFpGwyY4o8wMxQWoa6vEn19Ra4ZRquWXUgxZ
ayBhvWJVc4QG9sDABoh3OklyuznX8HJjUmX6KNGP0KgQfUd1b4wsBPWYpUgs
IwAtyqQ/LhU8R04ihKkQSeEuJXlt/Fki0WG+b03NKOVSWsHFlHLuGBjh8VUR
sl/UceV2lSqQE89X1fRmzAnMKKkr6V2ePD16+vmzqwEYxQxad5z4bk479bv9
cfrowYPkCpgMHGQDKIPidILJh/eAozzjfQnpLylpDGdvx3J/nBWQHc/00Cny
gXMRp1psAVEgZ+ejs4UzUswCH74T57B0F89OvMYCjpG3hmc4AV9wKDPqx0Et
pBuKimjE4fFaidcNbAAR1UB331AVTmbbOeMXaQax7jdcIlVUMY7CbFvEyAWP
Z5cobxYTHZvSMXWGO/Un5BozLb7seHxdpX0jTpUU8YtuIVwuSoRO7K2t8450
5gu9WG0XdvSyKVLyGczOiKo38nSlmlWcVKgulmjXj5MLDe/llkqwbgkWkaQW
L6ng3jkp2Rit5HbVVAtijdBzgIQeTdw8UdjgckrkTazw8Up8hPB4nAz6ZZ9t
hT4zVLusXOm+/aqKWZSvEW4NoqhdKsmJYP+2CalcAbK+7vmCtuKzhdYHirqW
9HPm5xRVO+P81js8zE7SjWq0xH5i+xFw5iLSCMXEuZgMSjNco6kr8VRX7m8U
jRwyZaBSivNyRhnUuKqs8NNaTZjLK2jlV8s7HRZHZ1sQE9oIeqAAhx9xf4sp
alnlz4hNcTkn41nwZXDiHK07cZWhUCiDi7NejdsKDfMuSJBqGTXLPGSY9TIP
8W5YAIWSgki0aYgaKlznDIiLzZh3zc0P+uVVHsIi30jON3yDKz3DMYrcOdtp
7hNzFyQdLPo6InMrkBQmUyUm7cW+uZ3caLUb2HKjpXzqBlsgHLexLcxQh+9a
sLyBk6ZsxWtwtW6jsTT64zXOEikI9B8tXGvL6HvlQALAaBgS5r2n+XGWKYLz
RM8b1mLclbo6vieWm/J/LkLRInRrB/BnzIgFAOSGGeTgjFQNkSmXIZCicYAG
QFSyqRNruqJ6UVr2TRatASknltYyT8+bZo3Vg3BD/HMpTEr7s3ty/HWzl0aT
GnA/3hWnAZSa0T9+TtJpCvzs9D3X45bYQu2EeUOCc5VDJIGRCA9VSO6a13sU
gohFg2dY+ZeT2plMVMg64sSuOft34/51Uv94wHTtiXXVqm6ou9w9uXiDSupH
AkEgM8D/va4ayVGM+3bcwXed09tyJfANOaUA3GKVuJV2vrLO093X1es9f5Un
6YuK3WGx+DGyAVkKbVjNw9YW1grzvUhc4T+LjVJOs6ehGLOERhFHNJtw95qc
CsGitiVMLyHuDUBcb/H7opx18zzLvgc3PZgHjUPUObkTijFtauBemFzjjQqW
bly73557BUbp7iCiDKQ2eqrVdPoPv2UqDKRhuKxNhOX2h0u3+Eu5rc20qbeM
sKpWSaKToH8SjyPPNCAHQ4Wi2Ugz/0xK2EQTkmb+mRSqwTnZP2kGz7op9WGC
vWbwzDd75GrSDNlDUQGJWuEtGmSNgtecDUHZmnHhYsqBEcngIlOtFutmSCOb
Sib7BUmYlUC+KOTUVGxO5IRQxBFT88ax2finny/pA/WwI/0MZWrGvHTcbWiq
nTTc0NhstbqzXNV0QnyGt8THf6KpAvGMhn2ySxVhHloJZYMMy/Fats5Tli1Z
B4Y1KVHel2hzr7KlXjuq6i0dKv/AEs6QBYi2QaL+aWNHul1I2lHG3qKTl89s
91CBIn5cqh8KLlxi8yJHB7NqIh/heEdFPmY0ivR9LkACuTOg/BUqa5EZlH0X
O33Y+GW22he3va5RaEirH5sC1KrWsQiE4ncLO0pL3LPl8nhN54hjUQYmYDbX
SDFKSTHQ2qZI2Jm6vjyyP+h7jBypXXFkc+gIiRWPcd3btrCb7Vr9BPHcRZWS
NdsmTInzlsVHsQCaElnz72l4UB6yg/Ysy4PdUoTKl1xMsFhlNk8vvz99/OCw
W47IZNxCLK8lzmmR1gSPSBM3IXUgp84ygxb0Kgcldvo+mjHPUBaEQwucEQzv
BazCGV0kpxMZgSSqyHx+VQ0qYFtdx9semcco1CNWCA4eL7DhRMH3UbGgqBqj
9SuVcZlKVHVvPAeXVE3ScltwdP6wNmFotpMkFO/lb7NaDopUXcXWCyGqczla
rlYLbHcbMscirsX7FUUesOOROow2QGPliTgvW4yAPn+rCZnkjXXR+QDJ9VeP
JwBxu1u+3Eu2vIAvBzxTnXu7CzGwiHHAfxYF4O2KHMStG8bKuGaMe/1MKizh
v99xaAzwbsBiYEKpsaAl98GWRFcYjzPQ+jtq/RmDD7b0NxR3sKWzOPjHux8J
54O8j4atBtUjBkazwPKeXIooR9EHU0Ij0hgRWhyRP8CIrO8jb/WYJC8q8xdp
cnFJimt2V5I8XSqoL+HWk9gXdLiWF0iwlcXTkRdC11gelWlpuHpzJGAEX4Im
FCX3Qwdpm3RDaTPNywzE2EaS2KAiTnWsoSvMiyI11C7EdHbwANuQ6vrpA0zy
7BQ3QSEofhnd4ivkQsF4SjYcEDSuQyQr3jfAs9iYypFHG69zeGJTYK9FN4XO
QXgtKXYD8hlsCQgdblLUNSAZchlCoY+4ppASqpTgKKwxXs6xgoMQKufILwkz
SEMk2fuQm7JsTzgOISBGmRlxS2Jg5YBKSuNOuUZGTNnciVv8tzdtkWbaZG4U
DZE4yHOYT9iuI9suMTaE7WpId6IZtoZOjOOyHIgin+VzBNjkvGDOGFm0Me9Z
w0tKCo7Hh829KdBsYgGfVuQQB9XyPTUwxFQaBAFG819R0mTN0FXnUj6JmBQ4
iOtF/rGQpEquRl9bVURvi6VoPqJbeVVjBsXBuynp1bx87WJu4QrVXFy6uQsH
WBX2XsLfCSGj6U1VcU7MsEy6ljJSYKFHXuk+6jkLQ0dS/ntmngTbZ0ZqPdi4
DP1GA8ugjhjfY7QgM9aYv9SSeCHaWDdc+UUUiCEvsbibqrPqPQw1ZbAAiV3o
s/cW/aL1JL4qTO/WfHjH1mYqOmU+QGeXH7aVp4J+2MtAcq8TcycUJT0VG4sf
JJiGfEVIVrpJaLWbqRoozy17lqQvRLI3oqvOYeCUZ+ia+U/SFwPoYhCaqGTC
+NgNS2KjuLaDqpxHUeoiVDurf8S1mPSwOpTvjoS9Oidk7T7NFnA1Zzqasmsj
M6w144L2kDhLUe96zKd+mY2lHtOk/LDdzwXYdKvPCdC6wd0RXJInKomyP+H/
BMpN+8BSsF5HzomhixTIFbBVS+ZbJk7CB4gQjQDht1s+ZafrjcVoBRZCP7Lz
Je/vrR2YOjCqXo92uxVXwe4JSF0FohOYKH1Cabn+wgUNxXD0HgUVguRT6MoV
nTR2Bh+Rurn3nQC+RhNFnkiGaVZppCPh3acNf5GtaD7H5Ct6Jl/eY/+VWo+F
WpOzabO/BH5/5Ij5wOu/+bwQ/0nyO3dsHa7hrzk2V3fJuXVY5ZQmMKbENpJS
ykLhIqQvNJztZErfRroWS51G/MtdW+S2hmTbddFmZFN2R3fB/q9/w5mxumPw
vOTVf9JZmWgtPrx/5aH9u7dYV3Wf7X1tJY8vPPd2j22WtCnC32ovMQ9o8T0S
k0yc5B37eueWuurM5WxfFCXbRgZKg56ZwtZ2D0eTotC8NOaBjiLaHBC5hVR8
YS+Ck5djXug6QRe2cNbj8OWqqzY3GxDz+O2Xx6FvQZj3agvpPOSoBNY8ffLw
6WFqRu3wmfMr4PmRfil5dd1SxRXUGOF8yn6qhrbjxkoOcHXN2YbErdo7ypCG
idWnmbrN2ObCfPaJor4O+4BpoUk9QcYbkKxPlORSS84RJs4Pnulkm8EofXF8
IrKLiIHwS3X2k4Q0+NnGnFmpz5dvnz/3R8HdqmrKp0A2/IfeMuGLEY1Ot5Am
IH/RwxYPW6bis4miCtQxXeHmY5J0pyUg5oOwMWLlUHUD2/Febr1ImRSQIrHS
CcVUQhVmqfaQiPRHuO9OKk0TYdSDE353AUMdCIUOn6sr8he6sR6M8rw7k00L
PZLVCKHNFdfRMl0MBStElFT3fR05dG+kRDkdvNsKZ22l7LAEuBlLUffEUIxM
WFwc3FF/aH53GA8QwVEbtgNbOqjw5ajPXwasoJH/RNlnbDvqX7IQZsKOUIzt
BOTLdOfY+Z+8No3LSSS/77BsFRQ17G0yK5rpmg3giHS5nh1rfraqlFh1wlXh
We6bxEgWDUNe9jf0YklVnTORd2ixsJYyn1dazNjEXRTArxFZjlI/mglasrsk
BmSqGHPztlRgMWLSo+dQ7XBHPTpfUSmzCL99ltRo6mktowdEE4qbLrmpBUlQ
5rDQrtTs5Usmec0Ncgomr5HjIMpbNn8/Y94U03cHW6Gq/o3QDJAnHw6q8dOR
q2ocmYTlg8wnU0NkGFiH4mylFPf9WZFBA066K0FLe6q7vw93l93J2w0bzK7v
5ujI+sOr/cd8k8a18u5cZNbGjJQ3KbUGQ1pDdZYbGoF9QXSPfhjwJ8bexFV5
uUwqsajYplPBwxGEASTkL6jtVSPV0wkYYf2w4E+foOtiFikKM5dsUOeAgKGr
wrvtFyVT/9lR1C7nJP7qGjkfKx+7pdK2L5btOqw6oRD/UjWhRfmhWnxwRdp8
VMqWDOaqg5HICjULINbAKXDtxNBcU6p22mPJxcmjB08j56cbwBmY7XND5ATP
hW4AmwCVc7mDdqBsgbrU4I3cYnZwtkwDtI4RYqMQcDqh/s5t5RU6A2LuIeyb
nbGpZITbCEkyRERSgiRGEj2wKK5zrM8kKdkxSAqO1crREHrrikVZtMmWBeN+
MzUDvSuGYGdg+y5+gyTXWTYVcZUkvstTPMEExgUOrCCj2fcOOiBgRR5n5ayq
G8b9XSRyYaHK5IehlknTmQAn3r1XneOMxRCfkVW3B08uD3PwJ2fs/8xyU1Ju
Aj4U91H39jlrzYhddLPBW8rGEQ6DTH8A2nNTwnYjVyOuaR2jw6dPwOdghPT4
WhsDIjK5KHPuJI4htLbiFiPXU52GQeyc5l7hTA8wKjaKF+K6XNq9KjcH035Y
+U1lyWwGwnUdX15Mjl1u347ZJRKK7iBtzDCGzsP0/Fwb77/A/MHg0hX73sGf
Mnk2lEmfN7GkcX7tOuiWr5UPAvNM2PUuCsTHSEVVOr0I1Ih74RuXWHhY7e1V
2sbOc8je1lwc3cKUCmfsdWqTJGruFEWqOHe5KdbIRZBlyp+npJrWGkAdaxnG
MgpkWTJbz8lQbn+SyEWpShr1/5DBI+bJmoQoPDPSSRrc+/RJsdGbsJ54DGe8
ZEd42uu4d0lTy5YC4VIt0SmKKJ3TvSudnmVX2S4cd0yW4cKQNgiROk5DlHTC
B++orVJNWELC1SudvOkXGPU7y7WCtlv2zmqxns+RP93hWVutKDr8XtFY5b+L
WpNMTLYUcN+Nyq7tQYcVpm7QiOZuyZBOmZ3dboGdvT0/7Vyd76Wenkt63AZz
vtamuzw7ex2q0AfzdKiE+yWMJ4sfFshHYVUZiKNLURCoijZ27Dt5dfxat04U
vKSZusKwlVBPemBK29CVwwP30x78wDzuSCQODuJCQ6pmC+ASPeoyZ06fqk+4
U8+I22V9NbHI1E3VLDy3a14MlCD0WyGeu1/cCNfl3XuBJr5LGjHYA0/ZVeBC
zfpi+lPzO+VUL1aZi87JNVv+lZQxUP8ewwgSnMg1h7CFd4ExA/+lDwt32b7Y
GB9tAjSkCH7rsO/LEbkO4CJ7ZuuisU4xMOembVfNs/3929vbSX09HeezApPQ
VfV8H37i/19+f7qDu/YXtoOmfwkm6IAY/wKvUf29T2bHv4jJErV9+sasMfD2
lbdAKHIj606maa/ii3fvTtSMMfhxZK3QHrYZA5wwTh10NM/ytdNlxsUz6aOg
RIP2bxRsOSsWA+7ZxeGjxyP4z8MnR7T4s4tHB4d/pxoBakqKAMvliu4U2PeQ
9uMtqWg678TZlEiNZBAhjYAgMAcP2O0fPavf1zlA5y7lDAtMxUwJEznTqEdu
z5NV1Q5BjpikwMmRTtMlgWdkg7225CJHocHsLoETPPNixF8kKF6dLLT4bVkN
Sg4wbeziJRHYv1Bu9FsswD6Hb8XNg4lvtAbSgZGQz+YajR0isGD6hH1Grl6F
uMBIpTdemiRiuJI/jZdwhVK5D9buBmZgkh5T5H/kgkSewKMYI1qUOpcyonpF
ZYdbQ78Qx6zBMhK0l1LSJsDp2XuSRJsF6ds514zmcyNBOuTNMXRmSWAGxC+6
idAWpjendYsvsTs2MjHgzLFr368hKju/iFVTpOiSbXH0OhMgS8zMlr8ok+IV
xu29p1SI5oHp1RqOI56x6YrOKC4tckHloTx/6KIpvrSM5KuAzMiKYSkn0Ak4
/fSVWn4/Jxrjht5lcHIZ2dQXi+D9wppt/G7SESdCbXYUwckPGv3R+fbiOJpy
WWI01NeZnuE+5h9XpK4l3pkMoEJeNYEzQJMkhUNj4R6jAiG/8jHFMshmLDba
nPy64QNjR2gImpQdbKdwacf/xKdgoagC2kfsgBwHg+NmktBTLbylmElktk5o
T788lzB17Iba2WDuownD9p1GOx+owISS8zyP10URqFrBhVRIYnQ226u5ix53
crcR2wkDUJw3ZiKJS96qg1KY1rlWcskkvkJ5bc5SSvqfEIGlJxKSBqoZqqpD
MXBSmw7Wg5W9Dn5SEvKD8EdnI3l9NNyBHsaSl1uvgozEBsoY/TXe8zZk0V52
bwQVsORzopR9Mp3Y14jVdEuNkED1nsaqyyW1zbTk6cjwwgWQwph1lM5PlfdF
6UNbBqKqRpK4IMNAFux+ItBuyfUoM4Icrkvkyf64D5+iYQ5n792ZfeZBiXdK
vnII6xQBDBOkN4mqu5BUr0MaBxZznHDMwz0+eADdH69WQJ6LjykIao7lzhcs
sJLKhXyZ3UCAEaNUDAllzBkXTGwZtU6zhaGKTq4TdocOeV86SUnirCkuWURA
OUi2xJj59AHvESEShVxadTZXM4WAUZx0kq0KhDoFbl6pHjvr5IoWOZJ2AdEd
buxOWU74/yYT5MnflguKGCcvXfI4tvTjI8xO0Zj+ibizN+c0wd6hkE+2pJjC
D0i57GYjGN8y32BPUcCKnQSFlxzswp97SeLqFEiYaCe0YkQBFN9By/i5FkWZ
gGwMa0t3fjke//ds/OcH46fvvh3/+rsdiY/lVBnSNwV0wM9R+m/48DsJ8eAG
cXe7vzwYH/66t7v7f04e7P0F/veXg/HTX+Hh019/u7f3W9c95uXg7nm+/4YP
vsOyfr0a7dBujVswAVz0+NGjh498rXM68fOO6zVANE5RPLI/c60N5wykkMOG
4IHbcwb8c2l5e4kVTIJ/KlNSrvpQRwFyNE5UruK3HMqC1SwF7/Ti8KANJYJy
bSxur0lfYmR8MT0ld/bGJYBUyfawEzExgf4YusZVTfs83DG78r2qEXjv3XGn
OwJYbvPw6ZPH3AYBA9q4oTK9fMxO4ZW5zdGy1aALHJeWmFWYvXqMKQrQGxqu
FnO5ygLdsPd0unMwOZwcPnowOdjRHLh0HhrXvYMw9d2Oz+tObnsURtyEjCNC
5li5wWpBznZidTKYRl1aFHBWz9cqghiXpzV5LJ2ZRK4WjnGRQAsE1+fEmiUc
Z4Tp9plXGymBArlQf4xfckQc+aJolVkOpRe3a04JRsmpBio/efIpyKZXQEhR
p8SehrwoXJIQVZE/naS0n7Qaiwr0+eHmyOITc0a+qZItK4wbasmaK1/3wnLJ
GjU4hFyxpl5i/YEeJ7NNpfpRLPthH1TZmAvJdzVCeOoWyeBDFDDtK/O9kcDA
036dbRYYScJPqKPASOWB1UNp4qSjyM5mvNesqs2imkxSAYAOXHikT5+w53ew
sHfAcuGk+vzoSqYj7Dj5p0lgQMu+UwvNsupqb4QdCPx0DO0ahNxVYw5eDr6V
cN++i69gRAa7a3F7tyYnWuIeRHoWXjbkhu5EjjeRA6TbxRAQw3hZKlsPTtuu
Ks1cJ80Cl9OuyFyUbR6o3EhOlahKDBkK1N5NqfJp40VkllUUZBCVrJhbsl8q
Lzg2IY2m0hbsn1hbxnWLyXZ18aQm3n8xEV9mIrYmOqFY1l3SD4UsJ/yT0O9+
+kt6+Fv/5FfYT/dT5kSragBtpbsHDyaTb472RhLYyg+fTCaPj/a+u2Mmu+u8
mIU50C8cAYazv3m07hnpuIeTydHRXhoP/M1k8vAhDnxH4S/o3tX9kt8ytvsF
o3NccYgptpkln+8YgT6q8qVfH/9cURE9/rvI89x+1HBTqmUCEwgNv0WCow+o
NW1H+D1GOBu57sYYVfxd0nlgMce0Qw+TTgf96GVpeaRj8+T86PwkGl8e+Rm4
R/EcDh4nvX62TuPw6A4oks2+AVnwFtAHZitC/5iw7703dHqwz4MvLApdHj5L
XbXyf0ib6U2+zOHhb/QjfoKx4XdDg41G4aQD0+PnvcmFx3fehSO6Clvi2vEf
pgto7ObAHTm8846kze0YsxaEidIN2LvrWt32N9890+t1e5/9/sJ2p3fuN0DW
GNPVhmnAr8VdUwcidLWeY1mvdu0QQ/RUkz/1H36bAr7gPNSzLdmZUINwj9fj
BtWoNPkvtQT+cpmVrBr9QlPOfQQXzX8ECwmTHvonKZqkyc4ofQDUx9Yx/E++
0Vbw0YH7yK9u+0euleShGlzz9u9dK8lQdfdOpN8O59qCf3HHg1/DEFThfits
qddFACt7Ilci+m00BxOKoisG0WdSDvHtRueIwRf/YN4bA28wkRSGpm/9Zry9
yU2ekS6r9wJ4OACF3uOQqhde/ZsyaDbgnOaHDAvSUFtm9zz1hU8QhtAU1t/9
QF+4LxB8bFe6H+gLPwKCi+1E7wN50U1tNrCH8Qhj9yUmOdMd7Y0gL/wA6WP4
gHc67X9AL6LmafoNfBDOoPOBvXAfPcE1zPM0/qdrmOed/tP06Z0Qv17RmQfO
jnny7RSckHUDC3EYOzDwdyFu+pIqxN17uP/K9Pf/kUx/X2CYZosqc7T4F2DC
8ZHIJMgjhZ/KROCTd7q++plPlBzeg0Tbotz0jvqWwrmCnKiBSx3p29zJc/w1
OZq/sHDzhQudhUfKH8ZPcAN+Z61EKvw1tApyIu+Tio/47TP63ZMpR1FDfvaM
zvI31utVNduwCLCV7+w0JkngO9rJgRewBcKm0s+1JpOaVs1tMet+QjLD/lDF
5y93ffH2/PLdWfkhX1Swn39jx81q9pE+2tZRaJDYn6gZuKtTjEOoyny8peuB
Zh+Xi20T+EJnA82ws85XOuO4VWoLwaDvMRfyKj7kY/GNHs9ytDvkJVHFg6df
hH7ny+kugH9qd6D7UK6BfxyuQv/pf9R18D3f60r0PvDXYvjlF6/G4CQGofgO
ytg9gbHklQkHYatCfDzUEvM7r9Jf0/h8Oq8t1ZtrweGWz5y4PfD9Mxo35JSQ
50APfk2S/mMdR0cvZtw/YGTHYIxcm2dp+HvMtZixa/cAOqX8zHWBOr5mTfUJ
QDToUWvXCitq3fW+BC6mXpe9Jn4HyAEMCFUyPHoaWEJ+aOQW+YDuXOyffIMP
PX0+jL/R+UXfyEP7DDmEgQlH3/CzMBKJTv/51e7/Kzmi/Pv/bXJEVUEzInL/
VE2Rte+oBcLWAaoqnHZ5oD2+NTA8fEQyllcL9z7gt/LJ4SOUsbyCt/8BvdUh
Dh+hjDWoAwyy3y095k8OHz31H3QUa/qBPMZPDh8/4Cl51Vd/SqJWwREek26l
r/hyH8yu5vhKP3hI4nekzuiMYCEmI/rgiGULxxkPnZtmVhsdPn5E54A4oHcQ
dg70VqeEB5dEAmf/qOmtnATcU/iiK3DGH+DbRsVq/mBAZHQfSJkKP4KXXvpT
orcKG/xBrG/trfoWX0Yj9NStnQ8cbPAHXbki/iBE5YQP+qyY/8BH4Yz6n3R5
h/AVvNhJR/4ovATfOwp6GWblHWTIJ+BCLYlsEDTTIGJPasBFKb9NfxOeMB7m
F/vuhaFoqcW37ZNv0TDdIQV3NB4kHb73eFztv0eD7vpgK91Kotqc3/brdbKD
QlzC81tC6+RPQQ/G52Tc9RvKzEp40G8iHW/rIEL2w5vH3k139EDk7E5bn0cm
QPc+IQ0kQ+93zhT/GdjV8Otb71K5P1DgtKOz2cq+dJ257oTVsFKFVbd2zuXY
CMz0XyAE/AQgE0HKcLN7A0pUwhVGjn6PL8la/G26A8PuwI7s4DbRHzwA/SkV
6rvf/hGdZjpTHtR29eHH7dLQB0O8053t+kcWV64Vxos4/2fpwB4Qu8QeEMaY
DS0XOaQ7lzOkcPjPBOvO8Qqkpq8lie1JJ779K8luG8e9Y/IsiTYN6f26Wenb
Opu+Z4+S25JzcYj3cktJkxJyysEalqNO+j/LAGl1DNk9hFOB0XzG5IJbY8Wg
RJN1qc6h1UiauMKYehtjbitXnokq5CYaDosJRmqpuAPtLdGvLFG8479ugsNK
WyXrEksksVMxusRo9R92EAtpgy/or61bjbzmtu0+5l7IR21NrlDkNN/bjEn6
Jl9QpofXmLw1b5JQWUkzXXJdZXQMFWc0Kb3s0r3KKUnMYqJO8+9Lzh9snng1
iEKW71+yZur5usQ2SRTXJU0wNRP7TmJFP1cWYB3Kc2pVJvJPwqC0D0W14Ep9
vImrCnMOY9Wsc8mkoinDi/b/be/Lm9s4kj3/70/RQb99It8AELpxa54dAYKk
TN0WJcv22KNoAA2yJRCNQQOkaFn72TfPquoDJGh7ZmdfLGPGIoHuOrPyqsxf
bhT/jNcOJ+NJUptbqUHzprk0NHBLquIyXqXXGUYh0nJRQKD06WmwPKbawSBX
hIpLS5USzJ1AOUjAYeRkwzPWNSX9eDIqG+Zl8KMxhedMt5swbe/acz8PP8OI
L1wscxZfxxaj2sIgL3RZ+NRQcgZVr+PoLcx5wDN6bStDsDd7rSVsJTlXwSHo
biE+N8XjCswgWxeQEpebtYf9Z/ZkcHovrRWFGb+xtJKOOVfPYEzjXWzCx9TQ
H+5FvmqUJ7hsmm/4kPqR6oIGdYPBcCjP/nJpMY61dIw84CGA7wTGBnM4X8XE
rWDl87n6+kVmq/amizkG3Y2jBaaQeXQwVjDJFVEpF9LLDGIdIxVPCMreJM85
Q9d1sR+ZuFWtL5E7yKaw46oA0e4hqdBcc++Pbyj+byVMBN+5aRQ2w2V2meQU
Oo/ThiqxcC2gFZb99ZwxU9bATNO/nJHlOy4sL3Yl7M17RV1x3XLkxVoLmDkN
flUqum4Sw/B7am3hOfzIHXLFIPNzhHVC7xQl5HG5tnhaeIRYjqIZRIkRfbnd
tKiaTCyatWv4G59ywRy1Z0xcncnCMygkpdOEuQCxVI08Rly2CqJBevFs9qGQ
S80CZVhIPBGq2qLg79TM+fOukvjaFnh0lkKT+bXKLFKYEYpSdgb5g3c+T8e0
VZtFQqGjcz+arFLEWokWm1lEKVEqVp+pbN4qUFV6bxOqj01NayvokTFgJLvA
ZOg7nFqRpZympcmZxMySBV8MMLKnKjIoOopazDy6VnTC881chnmOZ92UfqLi
fcrZXAWEC4bjUqvYcUveI41gjxSiLjzljsFw4oJp3ylDCeuMIewJwWfM4pWF
G6T4dqrJWUUTeoJ0Lg5UfQHbgQAJ3LoMmTBfy8dnDC+lS0FySCqeZyKvcmvD
NHGIUUZnGDWxlSjUz7ONKAitxDiDbGh0DEtBd1xYntinNA+ryticcYOOgSrD
gguoU34Z1/U0Cq9JfFTUZFOhKcmXieTYNyf2vkIBoLm/jpdzEFsO7gBSg67D
569W9P22aVOlc4n8x01wkZhwZPy2C2bLuKdow+TwrOIiiBPn1eELnDZhtBmR
C9D0JTSKyb4KXpUT4gcS4y9KIAlKR7MAdgWGBufzSuG/8km94Tw5c1A1OTJZ
RFM4OGsOCcMMghu2GizRgtqxxmyaGhU31hOVMkom18JAvEGaM2Z8wxxjxlCM
iJIXjItWKmivIBySDYTJHht4b56eJ4uDhoJi8QJTimUmRXapVEVrNa2zmFnb
RBdnfhNNDKtEVsjSzWpi0y+pj3SlZUg3VN+rPGAtDQgzu8Iod046xBXXaqtK
mgZ91RmRBPY7xOFibVEKPpMDMyY4YtFcsg/SVXKOwJ8Ixcumynq1iRXnlbmw
BCtLQqVwonTF09LEETtvfnzB4KLQxTXD1JCWehnHmqG5Oodfhde5+fz3ORJg
XRv4uBI30pqnE8t8si1Yc26KRLm2kJOca4ofBV6h8pApKkIIAajYZ24ONGUe
1VC3WCqrA66FVWZTkvQjsBoRHzYIpeEK2Dg1WfLZ1kX7XqpQ+7mcRM85XWV5
lcsKcbL5/Tcr0Cmu0xXyXQLrY5ScHLSkcjabMG/AaokUKRPdZNvbgr25Gihc
/IFKpMsOCU0XK9Y4RitB/1NStZWIyHeodpKgQuSHiqlMEaLC3qSafzcBuatI
VjZB3aIzU+XjqIARbVJ5zWjN+F1G5uYwG2gQfoYLGV+yhmFN//xyF2ZLRIUs
yqKGqDpQWCWCPBG9wqzLFSGxKApHuQ0qIJ1pVSaBwkR+LzVexy5gLUFnFAyI
XIY/KniS3qRKsYnxlZQqRDKQBHuLw8AZXg5EShYJjO40RgtQ6h6T+ytV7IbE
5ukDNZJfSosgmpfMVpGr4Arh8YnhGW1c7Fmy3QqYszlsF5RNZM9hoRyzfbZK
T2XVDYZsiTIzbUS3MI8oqP+b42Pqmjnqlr5dCC6zuWNTXtsUXHIMVQNJKjin
oJnDsXyZBxk1nSSZAUnjsj0IuQNK63puCV6ACBCYyK337nmvnPrRpiJ70WEh
iPFIhwqyL95DxKPwCo+z8KInEEvYggE5AOxOU3jmkPl5tIGqYghCj2vrFKpg
k85B8LXalWcmkMWwnBEpUnI+eMr6pJ1q4mrtnvAiLjtf7BtZoPStsB6TaEls
neQ9uszYrcGlzphpIxgT4unnq2lGjCW+rFr9ceyJImwEKppcVaXrt83HU2Xc
zkfwfZQaaeWEQxcbiBbwPjAx2MR90PxZbLa5Ah1VAs7lt+7Js3sHNYE58YqW
W2mUxk+l/eT8Eaz2eFz5a5UuMU3VItNLiSy83IWjtLC6W9VieokwBoWC4BFS
CXWCZU9Fduwznhku+gGzC4cssL57RDFFkub8pjBBPFfPtUvvdXyOeEm4PYXn
7rEINa+0akjxy4jUNPbTuZW9CA4B+H5CubENzxhY+fk7Gtr+HrZOMSgY4XxQ
qknPJkxuDkxQ+qQVNnSJsgKaJPcSCwUqggX6j4dsngu2+hcbOFWoka9QJJHO
g9OcI2NkDqoOEqsMXwKxXcK6wvIsqIhfSoeoiq5kBbkXsiZsgRIP0dLptF6C
kbUCW8rV5+xrem5x2gqwnucuHOI5v3Hc/UxVupEMQyBSQyC2yQrypjHWBxYR
s+UlYafmnJNwdDGYWVcuQC17VOwEGQ9KRRKvplxDJQwxsRJUx9aqvbvFIlhm
ixUroNtXsVODItsRO9lCd29T5lkTZ7icNxcl8ONaAfg5YYTHtFRbxLUzcL2e
qzeQsvb1HspDgc0okFzmKQ84wIoeP6tkrni32BmlQHmkVOVucFwHj3Ojpndp
ThEwcyPmOZXToduMsJ3MtwzS77ymxUMR9W8hJgMm9HsOSr6+66L0aglTq1EY
lVZ8L2hs4NlgU52OGyZJ5nwEeupQiJGpIH2x6M5hqRD6zmahvWmWfsUwzRn3
+CyIjmrdDDmLR8uY6uWpFh4iRx8VJqLdwxVy1oSWDUY5zG+raE8G1WF/GiN6
+lSqnnt79q5Q30MBJwUfyFoUlIaaL9SAn5lKOcQCPXJIEMs22f5cPDFzIZFT
VSBzex9TDVrCmt/fm6bXiM0RR5f2qT3kYAw7h+RMoJJOxQYFWUWXEl45jN2S
Ou68qjZNR2eGi9xrceNVjMPUcqHbr/OY6rkQZzO1ZIgT4+lCxcfbkJqs7LUO
nAcbEeYAJNmIG/6bZ2cHNc8zjnUCC7a7ZSR+fEUlTZU0gDdo0QACtcJrO2vZ
auFKKadTMZXEsmsDvkBy04uck8r64cIREYa1KbHnVxqHUbWDxu+pOJIGWdv3
X+DEoRlEqqpVv00XYnZYuhGW7TMXFYTOderp8q0VsYrbMk6EKmxUCUPe4rbB
2/jKAi0Z1+wgd6czTKr1IMAYBMfEUQNwnjcLOcO2gjyeRQZxoqIyPp7iOYKG
nV+oNVUsOk+4Jpv5gjQ5mrOLxEmbipuWYJWVxU0OptPCX66NczFnZ6nWRV0b
n6DHkddOSelIXcUoKhT9S5yHpF0LDeWVDwngFgVrEi3kErLgDCxqxSOu1+aW
/uEQEqdAx0KkORcmRYIDubJBSFFQz3TCyGdop3hNYrutsrouNotTb0NhqHEc
knjGtMVHVjCkselsM5thgALereXqVSFhIwox+QdPhy+GJSIjl75T6d2ivbyL
xz5HD+073rsDW3qARoTBH4KzU4KZ5nNwuYS+kGTExZtKZw4YZsbKpeskLPVS
A2LFGTTgqQZ/a2AC6fMnzuc1kdNc/AGhcBFXlxZAV9KzHKlhNbwCKGEJQp+u
RhC2hr4jJKCVGSJXxcOeKpoiDgncgu4ArAp+S2Pe5880n/ejiwgvH4BYM/Qq
5stmkG8mr/bRNRabkggnawpAiPaWW1q9eCMz1lZwrvBugiaS5f2jiqcltsFe
nmyEKvYs7bqwZQr3qD5j8UJSpJ9DenkyuNnzqtpgr3TDo+tnBBzFw62Fuq3r
l85LaZHpJo59vEe0qksJMt8bsUsNTgzYX/M5qClcI+Astyy6ZjBRofdL8dE7
9zQazKNoU0jp7iicQYDBK/3w3xzPSICT+9kBd6LNOc2wJy7XEuKgEZ5blD+a
xTdrxon7xPlUmjJn0TaXv39alzpcVLTlFi0h9hCt4BgMM5RMRHFY7vOYkN4f
GQUBzLm5v9yMTVm/dQ6Z3pwhrkPpXiIZEvX06SgzlVTB1MV8fvYV5srYT/GA
Lc43WCvItQpiGm1kRosHPUtrhdOAjjFivM7QREUUOrPu69xMbOmFfUHylp16
yPe7B6UB0A2aOEJSOUhB2DSYmbZFfgfaU+w7DgwwJ58dGeWlLl4ENKQ+F8e/
2BsO0bPAimHR7riiF+Vm9Ura4vCaUh+4NUxzeZLLzIEx58OCiJa7bZAVOl1F
s7Vfb3bJnuHFm5ub/GsXtrGhRRvVz08zx0JPVa8xsi0V0yC1koudrbkZPBvF
l3j9Mwd7my8PM3sUCdia5saghtuaIuLF+/jNJXkwtW87HAyhsiv3iGHlzWcO
e7Nf5Rf7kZvtZF6EJX9EGRIOefIle9A8ME9ZRgV86hGllAqQIT5S5KWP/NPj
s8fwTTU3pSbev8+R4Pv3nvefi3G2/GtxnnivUj1N3Nu3JsznmD0K9HBp4pS2
ha24pLZl3mGn+28xcY7Bqp76WXyZWDQZX58szVuyz3aeeW/rzC+j5T99xt9K
2pr/8vj5tk13n9my2ZxBdwuFm+n2d9loqoDIAJ7/uhV4jil91StAXxUrrWjG
X9V6aILgDmc+7Az+LWjfrMP3nI12By3IU6Z6CO1UxTpobtsuK9Hdzv6oZMw/
//yzOwgD0qqnfyro27ka7xQuhtJMLpWqmEI8oXTO/CqE3XDbfGEI8zha/NNn
fIRJpQjRvt5s4Xtmypx5ivKcMlGdiMOqGWs+anHGrW0zVsBeKuTxL6F4jUXd
LurOy7GmVXM1qbQ7EXn7/yrDR1Naa1/dut+Z8WHasnycgLFNzdHk4J1WobN1
FRDKG4jgJYujf+5514SrTOOvttOCWhfiJqN7IvN6tSLA6c87Lcd2/efPJQq6
E6YMiaFaMmxGet7+cdEqgnex1FDeiFpTqLveVlRFK2PCCMkIMkQ44hJHf7BV
36S07+qlN9+VFUxOFi8t77aFNH7bf5VmYeKatxw0lZzoiCUZQgWNq6ZqIpt3
niwh0PzTZ3iquXpvszu5iZPX52b1VU1XkvR3nuy/XnQcPXs53CIvR25MVKZO
ebquO0rOkzXYTc/i9VquRYboIQcmUClCCXpg51X4F6lI6WxNhxv/3M4tKYBa
djnTV1abxcKpfSIxK1WskzEUdp76v0Jwmonfqh+/4UBGDaP5PVPfqjH/W8ze
VFzdYimZgqziEdLYL7MSdGc+n3N2we1rYYEu/s0OwXMHUGPLOjhPFM9BTeJ6
UJWYJecbwXw0hezvXhcXz+PfbGksoTi1gF8zvsj2IyMAJHSbz1hWqF5pU+58
uV611vFjL+y2NUL0kn+z5SGdYITZGrfwTk6HIPhXN3IHxZtBCMBIP/JIo25Q
rZNbRJbddaSEB/YnrQGpmxSl/fb1i8IN2dq9IaNMJ/4W3Web1eKL59H9YpI5
+iftPT9WuCygOp+bMVfdECa7d3T8PXV8Jl84d2cUpQ5PcDpPvgTqXgO1Ni0F
1qKSQ95v2gpVXzU7VoaryP9gVVglVvobGsIZ8ndlV6p1MZUayle6w4Yyaem3
knPylnbLDYlVEFHVxarQCroD4AgDWT65IyZsMKwKiVfEldsl/nayBZzSVVil
zMQk+iejkzM/W0YYSGXunKRcm3NXzPFO+VtUwwpoi3AOtB5UVe6USvf4ukBy
w1KxR/jm4VG3GcKDxAbcZa8KNdE4D1275xjNKlXsbqFyLTbtrJDWEx+lw1d0
3uAxQYCh3Th7dfQD39gwlCf8NS7VFTcEX9EKED2cC7NxEtohT9vi0q+Pz94g
NuHx4ipZpQtmtfuj9PXxAYJSAENBjdU5QH9jAkhXMaa0yfe/EASAXY1HvgPQ
+xABVf9CoKb/ZQoNKvwffHR6pKzJHJlHsNK4Al++uPzUbZ9zTx5eLaYNATuF
PhAR9T5dmLW9Zz/3nkuuo3q97o+jyUcqFKthmJ+/kggxjJOl6lz6NwM3XKTX
dPlKKdm5qpZORhxVRHNLM0WmOFOtMggKHpltuAyoW6WJqZX7JEK+pjBTG12j
fSTFGqOSE4Hjp3BvCibmxHLWcy6YD9goK60wmazJsc7F37MLyV8yARdnGJ9h
lgTUBbcFrgmecSkwzI96N3z94vTFYxKrmfMejT/isryMy6O3iHgLekMBXeIs
gDNMlM6xHlp+S/eLj/8Z5dtgko0/tNG1nq3zhQWMl/NccjUHm+ErnKLB4bf4
rGq9JnfD7uUoxYqinLrC9620OtDKg8yoS1JzyXvom/45z0NbWXPSk4a8mNFh
kpD/0PMYg/Khb64u4Xf+CZqP/IsHg3Z/1u93m9OgFbW7rfhBTV4Q0ELzODq4
H1Hapz4hXmH3idYjP6zhV1sLazy0oNr6YtiD1/62vYQK/dz1vR+EAfbsck0f
kUaG9G01pHvx5yHnxG2WFJQNylYyp992fp0CSoTYqIwa7zHsw52v6v6is6cu
N2eC1OnvNoWHBdJqILYInp5MCWuXNoyijlZ7TZP5MjVqdhoHKQKu14ALanPt
V4xU36GNz0Cee60obJeqIOgjd7cBRPHID7a8v2sbfgADGU4ueQVfnhXHs9M4
WjiZRtDYMpudxgFz+dvnVnk0LWg8AJ1tp0bwZ1sj4ZdfdmylCwLwtkd2HUnQ
29rQzm3gT9h+hGVCLuP36zh+32rEn+K9+7Tx5ZZHdmrjlgZ2bOP2FnZo4+KB
H3WbzW671eoGrbDVbk6aQTPojnfgXe2g2+pOu52w2Wm3O234tz3rtJrwSasV
xq1ghybgsXYz7IdRGPSDWXdcbHKXJqjXoB/CsKua2WUiZvDUTNjsRkEQwP/7
Qb8bd3eZCPfXmfXa3Q7+iyvQ7fT63c6DO97+5dbvf/G+CNifSPRhURXQJAAJ
AT97J5oqCDFSyMjaYOAOTJR/6JHAIT6rDP7sXY0yQlyWPU9Q2OITVNs00dAy
/ME2pBr4UhshvSFoDfphOGgF3X1VId5yRL8MFsUafm7ZtDwGupgi5NozyoxY
nlARQ8i7lhcUeVLxabdRl6GqhsPWscsWfGaauwhvi9WtLeVHZ37KvNN5c5XO
Y/tX8U3k07JAtNXptlIzhZ8vt9SX+5fPIHS35H7TuOuhX3Qr9VyUBtB9lJtm
o9Egci49R3Il1x0/nFUtSZXw+FPm88X7cuAg0ToX1KgbHqZgGtEBZcdVXtPX
3CK0mjK9ZrN31KZGspsuR6eZsSjIzrpIljV/bLpJCSdwLrA3jdJw8e3f//OQ
Ri5Aa65txDpxCcsGR2f/wrdHr95yCK5cr6y1tZdnDYHJu2bkzMym+ZNOim9z
JrzougyUc4+R//F58zoTqiHDakROXKugalC+p06+oW+/EngFwWFDo1jLTJ2m
b7jh6rn8OSMXGCTt2+QMkruHgIXUeLVT47erJyjITmaTU42scubxx0f+rdRc
dwhcJuKcEuBRiA5CJHGzpOQ8fluAhWLXQ5YrWC8yGHOL/cjJLeZ5iw+QM85N
XhvBayXT8mltOCO/t0XetzY5uYhzem+ni680g0F/1mlG7dmsO2l2+t1goi10
W/04co36fAthp48N9KHTsPUADejTYxQKb08VxIbjRI31LsGQjtHfGWALnfZg
Ooknk/540O9Neq3euN2O281Zb9JtdSZx/y7dCTYU08nwzghphjthZl0zXRfU
irALC/a3vaDRIrsqQOtF8q+j1Zrq22OpNh06X0Q7sw97RhK6+kapmx4qEaBt
dBod7uYPukhaOE7j4K+Ls8QO1BYR3AemeYBvwzYHnbDbaYewVWakHJQEv4Xd
gmQcOrdLICouUsTWonQoTrNwpESymmwQMYiOkRXke/TBnv/IL0lSl4qEgAbj
eNbv9XvxOApacTjpz7pxbzJuj4NZuxsMlAJtGy4dCQnFcb8560Td7iSYjQe9
djgYDKL+bBqNB61mf9C6i4TyZMTzkSVwCckdg91poaWw0YywON8v6AsqUNJf
stknZ4FAK7tjwUtrnZfA7mLzJ7utdjcA4w5J6NXxC/8kf0r9u6fYbjSJiqvO
ijM7qS+jNgtpMBJviHKWOKTjILXBxIfzFP3gZbelm0kvvuml01jkf/vOH+PL
uSmgaN+sMKe3Pt4kc8mjzuEevFTgFBf3kMPUMm2DLqjQ/nFVE0nRWiA+b6T4
RljPSEQYYm854ygjcGjYODndpYc6FUUR/KRLB/qD2mB4kMifgZA4aPjtntQX
i/HegW9/KOllv88B4zQl2K4u/0lt4CXswR/z7v6TJEm3HbbJAawAT8d4YbBc
JSARX/BN+MM/g3neUo55q5wge5FKIyPpUxkFVGnKR+CLWz4CMXYe0n/P1pgN
lrsTKNN46VKAE7wIL0bzOPH3jBpTwiqggDEkM0PmsIbL2LCoIjZIZXObqGiA
3KyKiICGYLpKGEAMbJvJpnDXjQ04ipCBsXLIPDm/qDN43cuzGuNEyGFWVZD8
BvmhJXyihoI+dos6/se0QR2BIhyTnCtsRMUs6NbNUApaTggMjiT5nxIUz0Hy
anvkLugss5crNNoFtk0wrnpVBP0zqr9ZH7tcZgr0+YOsuJ0WCIqQHMHic2TK
t89wMlnqywgIjlAwHxUGZr2TKfSn7MLQkDpiHHLAqLMHhCzswJfjV4zTC+Pl
XcCwAme6umaIf083gbRsnA3oxDBH9iwsJOSAORCFIvh0D8UutMRcuF7cLBEC
ZS12gU7BgBUS2D/ectJJJhhE1CkUYKRyUf8kUuZxZsllgtB8sAzDxXSFkK/I
iYY56Vdu4H/OrR/Wu7z9Ym/Hqzn/lsu9+zSx5YJvpyYuHpB/vt/qdWFVW61W
u4W/d3fqvTlpNptBd9BudYMevN4FBbs7QB91c9pt7eShJx992IybQVO89D2w
2qCZdq8DBlu7F+7USHfQDbqTsNkO4LU2jGMKI2rDpzAidLrvNp1wB23+dn86
/QDDGWPpAdEwRYnSXfF32piHFbnxjPauD+zSho/+egnWG0WrcbpI1nQJdd82
MCQZ2gga4V7xgZ3bGLFf9lHFA7u1AT97p4vpBi+igTkON+uUnYx3X6sZ8zj+
tCx6ZttgxnaB7kFL7JEJEzbDoB4060HnTdB/1Ok96rR/MjwjcdkM/3SlgaDX
7DeLDXQfgQ7abP5UPcB6H05QEyysvVmCCAcgILC+3dZHAx/vJh8aKV2vA8tB
wJn3yIOLphaP+KNzAREIVzwewT/xHEMMJz7oBFeC9vIJ9IybiqFCK45mHSK7
bnW7vQ4cue5sAIyjO2nNOsGsA4y7Nx60wXx6UJ7FQ+mK2qnrWPgzOCyv6lh8
s6rzT/VJmq5oAHXqvNuJp1EnCsJOrzcJx1HcD4EL9WZxq9XvNYNol/MeNKMo
avU6cTAed8adaRw0+9O43RpMmv1OJ6iewI0zkhaOJIg7YTwFrtMMgAhmvdkg
bjen09lg1moH49Z0l5FMBuMIBF8068XNSdSD/8WDOJ5Mm81+exoMJgW2pEa+
62yRHyyCiRRyW697qJ3tCSFxC5xu7Kqi7jZUiew7hLZ58y7ZbR7cIotvnQn9
/A8SxlYc91qt3o59djutXqvdHff6rb4I5P6Or7ZBvIKEHICFbO7Wd3y1E7bC
MG63SXa3WHbv+GpwQiL+2Ir47mDXuVYI+V1fNboAiPm7qWonQX+7pN9lx7eK
eZSSuzXgyvgjUsfxdPOXuzcgAv512DgK76Ug3C7dd21gq2S/s4Fbt2nrbSj6
EJ0/8XfXp1iVY5IJ2iZef+nlaCn+UqJb0VdiSpLMGLqeXpRrTgp81YBMIRe5
2uBUlFxaz9k7xryRB9mRUhWSJ1amgAqiuYuxqhxeC99Nk+h8kSIkGXVWCON0
AziTTEbtDFrwVq1TxfVmSNiH6zo1gRvGBxI5HgoF08H2QdrsU3QeB37Q5arO
3elfL/zQAjZYCOoihZ4OeFjstDAdSTZ15tZqtB3zKxhyQEsleUCZLxdydoAE
tL2RkJVcupAsuukxZ/1ucYfubvDeZuruZuQ6TlF7sdaJpvZibQRExeV49B3H
E7uzD9Yv6ySFG6Diz56oIc6NRUldqNIXKuz9ndaC381tHi9Lr71jQM5OD/05
Yb9muH8k+Fcb+d0hwPK+5XNVbGfXQOQYsVjxADihwOhGlO93bAURPmPDG4ld
YLwNfbJ7Ky4LuJ9uBpZeV4IZW53mZFelB+yD7tQJHAzDKShBYDDBv7NdlS4n
+pFDG8VlEmLDuypC1H87BN2pRb+BDoUuG1TFdlb/eiFHRDZbGMrYb0UtDGbs
BV2a4M6aaweG3kEFdNZrw7+znglrDHbV64Ko2Wy3x632oNnrh82gA/9pQlvj
Vtib7Ob3gem0xu1gEI6n4aQVT8J2PwoHYRh04mjc7uzmC0PlNBjPehHo4XHY
mQQwmnZvMGh2eG123h1Qh2EvYC068FsLfw/jHhhD3da91qQ5afXHgV2TSdAO
x4NoHO3aSAjWRHs87k96sEtBN2q3JoNBB1g6WPfRTgY2/IzBOh50esGs0+kO
xuPedAIEPxv077cmIGJI25+iCg8UMgGKCYM2TjPclexb09bYrkbUjQbTyXQ2
bvXBxI52JXsQ1+24HQdxP+53Q1iO/iScjie9JoiQnXen3YoGQQuO7zQetFqt
cdzdJYhgF3vkzkdujw78Ym8ZNRp4UWTaJh5Y9SgOVXldB2ZaR3nuxAurCsWP
HGKlIr132/P3Cdl1liDmzYYDhjNEcT81xRoyUQgrEt3B3thPJaArKhTROnt3
oAnuvlyRS2zhfSOIgc7DdufuGOKQrn91anUUSYJzTcnRzv3yHUHGZhX/tDDj
O+Nvbdxtfn/uDL+9f+DwFzNaJanceFu7hNFiDO1uStjOkbZOqO3qfZKu36cZ
RdsWA3OggQxrQfh+qQEglnYHWFG7U/ESIZKXX/J3non5IaXy7NvhFjfprT+g
wRuhyNLufu/DLAvS8b7vqzRVMXnf94tidSemyT+7uHJ2jWi/L2GBNUnlJbPG
Kpvck6j6zebgn0xTf5CorFbB6sJ9N7WoXtybKEUdUT3jvu8X9ZL/R4iKQcsb
82R8T4oKW0BRrX9nNvU7NTPzU1TR7vt+XqVr76pemp/fpdvxz44UdedTt7fj
JICQr9ONlxQYHfRpUW0A9km6fk78uC6uyly6t3F3UkzpZr3cSIiKVt0UkG4u
5RNPjQXu9m+K11xS+TauWoge9oaMwSkNadrFIpYYq0gVSWwMEjn1VCmkyhsm
BonKEIk/cJ58jHOhVTai0lQ5SSUK0ylezx5ZMwbyHvJA+NE8fpDRlkWZndqM
ZqoNs+BY/8XUjZSiqqb41qX4i3HZs/JQXEz2eGXQxQ1mhwIVaU3bPSqNCxP9
3qmEle1paFwOWE2KxnMXMtssD7dlJpDT1NW5TIzNwSgH5vXh47T/9Fm9//V3
81/PRYfdE8ffnuPrMwiviFRXdurZF5MpPpK8faefETI46rU/fQhGH9+H1ycX
FzenP7447v6o/QkAXLXm7WCkWe4nKjf+xdEEZmHtMw6nNKvsXiG43DrPVUs8
di+az8uBAHvZhoLQ8rlgzoHXX+nfX/KR0nR29ZKKy3WQT/9soyCjXi7N64Jq
MOARwSLJ6u3jMkRYxaPHVTy2bvT8tE6L/vpD92VxZ56Ud6Z7/vXXuv6CZnwX
NTiRtvJmQk8U0hIMUqo1MfY0dm24XPonabqXc1Q75AHfNWDiuuBGnu8JlPMx
B0X6x9SxSwAYMu3u4F541Dq7OH55MTyLzt89jtLRx+Tth/bFefPN8vGri4+H
w5Ph4eWrt0/fvB8P3z3+9pS++fDhH4+/+9k7Hj2erW4ef3d8cnj48fDw6u1P
w+8mR/D38fnl81+ffTg+hN+fpu9evH399t3oWXB+3pnUv39/9qa7/vT68XTU
+v7D25+9V1H7hw/zH+pPO98tHy+fvh6N3veffHh3vv7xu1fRdzfXL09/atUv
nzx90fphMHv2CYa6yC4Po/rzq+W3r399eV3/8Xrxs1fv9sZXT+YfNpN1/Ovw
1VE7yLrvh+vei/HZ961/XD+Zfzrd/OPx7DpuB3H2ta7cL2blniWLzScNHty6
8Pp9eeE3Y6m9/qSw4k/evckteHzzpBn/MExeJk+efh98lzwbPbkYP57g36dv
fz0NXiRPBg14aDlpPaeHnr09aU4ff//r9Gfv8fc3p8l1Er07aZ5+SD+9+PD2
04tfJ82XRz+2oZl5/C00e9kJxo+vs9PLk+Cn0Wn3NDnNThcvgh8T/B2a/tk7
/3DdXpw8v3i2fPJ28+qHq+evfn0aPH7+4eLmyT/Cq3c/nAftoPvD0+zX6+/2
3JOby3HwTxCChg9sHhcGbPZkQmUA5POKK8nj0dHZUKsCwqMqvTkdsRwvzoA3
xQf19o8qKkvLLP/nDQw7cvIsMziznJaGRTtRmOkFIEkRES0UtHQGowrIAe91
g30/6O/Lfl48GAbNIOw+uAUnw3/o1AS+iCOsCq6+/M9fbn8xvlxicd1FuQEJ
oYIBhM3DdrcZtofdw+ag1z86bg7bA4yvaIbNVrPd7DS7zV6zz0N08oPl/cHh
4DA86Ry3exjiddKF9kb9YTvo9A47vW7rZNTuHB73OqqgDoadFoEVdIJer9sf
hcHw5OSw3+4MO93hYafTO4bXBz3VR4dNUE97rUEQtlvD3mDU7vU73fAIXu8G
4THY56NuGAZdtdKHh2Gr1ev3HtyyKnZ1TOlGXI1f/APfzRjeDt+GoG9l7Kea
vadhSircE1OKjXuXTOk2DamBLs05Ue6l10nRY9VpjhmUoLlxIYWJLYPrAChZ
uCtWLPUCmKvOscRzusOWZ3E8FeqV2nTSrCYHcRGbCGseorapAtT6JU398tz1
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

-->

</rfc>
