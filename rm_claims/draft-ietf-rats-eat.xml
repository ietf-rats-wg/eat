<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="January" day="13"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides a signed (attested) set of
claims that describe state and characteristics of an entity, typically
a device like a phone or an IoT device.  These claims are used by a
Relying Party to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CWT or JWT with some attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>Remote entity attestation is a fundamental service that allows a remote
entity such as a mobile phone, an Internet-of-Things (IoT) device, or
other endpoint to prove itself to a Relying Party, a server or a
service.  This allows the Relying Party to know some characteristics
about the entity and decide if and how it will interact with it.</t>
      <t>The notion of attestation here is large and may include, but is not limited to the following:</t>
      <ul spacing="normal">
        <li>Proof of the make and model of the device hardware (HW)</li>
        <li>Proof of the make and model of the device processor, particularly
for security-oriented chips</li>
        <li>Measurement of the software (SW) running on the device</li>
        <li>Configuration and state of the device</li>
        <li>Environmental characteristics of the device such as its GPS location</li>
      </ul>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular it is a format that can be used for Attestation Evidence or Attestation Results as defined in the RATS architecture.</t>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949" format="default"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules <xref target="submods" format="default"/>, nested EATs and so on.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb" numbered="true" toc="default">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a set of claims about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT), <xref target="RFC8392" format="default"/></li>
          <li>Unprotected CWT Claims Sets (UCCS), <xref target="UCCS.Draft" format="default"/></li>
          <li>JSON Web Token (JWT), <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds two more top-level messages:</t>
        <ul spacing="normal">
          <li>Unprotected JWT Claims Set (UJCS), <xref target="UJCS" format="default"/></li>
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is simple structure to hold a collection of detached claims-sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>An EAT can be encoded in either CBOR or JSON.
The definition of each claim is such that it can be encoded either.
Each token is either entirely CBOR or JSON, with only an exception for nested tokens.</t>
        <t>To implement composite attestation as described in the RATS architecture document, one token has to be nested inside another.
It is also possible to construct composite Attestation Results (see below) which may be expressed as one token nested inside another.
So as to not force each end-end attestation system to be all JSON or all CBOR, nesting of JSON-encoded tokens in CBOR-encoded tokens and vice versa is accommodated by this specification.
This is the only place that CBOR and JSON can be mixed.</t>
        <t>This specification formally uses CDDL, <xref target="RFC8610" format="default"/>, to
define each claim.  The implementor interprets the CDDL to come
to either the CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/>
representation. In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is
followed. Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
        <t>(TODO: The authors are open to modifications to this specification and the UCCS specification to include CDDL for UCCS and UJCS there instead of here.)</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is authored with an orientation around that model.</t>
        <t>To summarize, an Attester on an entity generates Attestation Evidence.
Attestation Evidence is a Claims Set describing various characteristics of the entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The Claims Set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is validated.
Some of the Claims may also be validated against Reference Values.
The Verifier then produces Attestation Results which is also usually a Claims Set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the "Remote Attestaton Procedures", RATS.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing a entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="use-as-attestation-evidence" numbered="true" toc="default">
          <name>Use as Attestation Evidence</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence.</t>
          <t>Attestation Evidence nearly always has to be signed or otherwise have authenticity and integrity protection because the Attester is remote relative to the Verifier.
Usually, this is by using COSE/JOSE signing where the signing key is an attestation key provisioned into the entity by its manufacturer.
The details of how this is achieved are beyond this specification, but see <xref target="keyid" format="default"/>.
If there is already a suitable secure channel between the Attester and Verifier, UCCS may be used.</t>
        </section>
        <section anchor="use-as-attestation-results" numbered="true" toc="default">
          <name>Use as Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Results.</t>
          <t>It is useful to characterize the relationship of claims in Evidence to those in Attestation Results.</t>
          <t>Many claims in Attestation Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the entity by the Verifier just through normal verification of the Attester's signature.
The UEID, <xref target="UEID" format="default"/>, and Location, <xref target="location" format="default"/>, are examples of claims that may be passed through.</t>
          <t>Some claims in Attestation Evidence will be verified by the Verifier by comparison to Reference Values.
These claims will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.
For example, the Verifier receives the Software Evidence claim, <xref target="swevidence" format="default"/>, compares it to Reference Values and conveys the results to the Relying Party in a Software Measurement Results Claim, <xref target="swresults" format="default"/>.</t>
          <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.
For example, the data in the Location claim, <xref target="location" format="default"/>, may be modified to have a precision of a few kilometers rather than a few meters.</t>
          <t>When the Verifier is remote from the Relying Party, the Attestation Results must be protected for integrity, authenticity and possibly confidentiality.
Often this will simply be HTTPS as per a normal web service, but COSE or JOSE may also be used.
The details of this protection are beyond the scope of this document.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. No token may contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim may consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the Relying Party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) as fewer are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)
]]></sourcecode>
      </section>
      <section anchor="UEID" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>UEID's identify individual manufactured entities such as a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule or
subsystem. It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEID's must be universally and globally unique across manufacturers
and countries. UEIDs must also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID is permanent. It never changes for a given entity.</t>
        <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).  The
recommended maximum sent is also 33 bytes.</t>
        <t>When the entity constructs the UEID, the first byte is a type and the
following bytes the ID for that type. Several types are allowed to
accommodate different industries and different manufacturing processes
and to give options to avoid paying fees for certain types of
manufacturer registrations.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256 bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It may not be smaller than 128 bits.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This makes use of the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/></td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. <xref target="ThreeGPP.IMEI" format="default"/></td>
            </tr>
          </tbody>
        </table>
        <t>UEID's are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the Relying Party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead they
should use the OEMID claim. See <xref target="oemid" format="default"/>. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Entity manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa.  The main requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <t>A Device Indentifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)
]]></sourcecode>
      </section>
      <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
        <name>Semi-permanent UEIDs (SUEIDs)</name>
        <t>An SEUID is of the same format as a UEID, but it may change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity may have both a UEID and SUEIDs, neither, one or the other.</t>
        <t>There may be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label may name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile may describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
        <t>There are privacy considerations for SUEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>Hardware OEM Identification (oemid)</name>
        <t>This claim identifies the OEM of the hardware.
Any of the three forms may be used at the convenience of the attester implementation.
The receiver of this claim MUST be able to handle all three forms.</t>
        <section anchor="random-number-based" numbered="true" toc="default">
          <name>Random Number Based</name>
          <t>This format is always 16 bytes in size (128 bits).</t>
          <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
          <t>The OEM may also use a hash like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash may be something whose uniqueness is managed by a central registry like a domain name.</t>
          <t>This is to be base64url encoded in JSON.</t>
        </section>
        <section anchor="ieee-based" numbered="true" toc="default">
          <name>IEEE Based</name>
          <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
services <xref target="OUI.Lookup" format="default"/>.</t>
          <t>Companies that have more than one of these IDs or MAC address blocks
should pick one and prefer that for all their entities.</t>
          <t>Commonly, these are expressed in Hexadecimal Representation
<xref target="IEEE.802-2001" format="default"/> also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48. For JSON encoded
tokens, this is further base64url encoded.</t>
          <t>This format is always 3 bytes in size in CBOR.</t>
        </section>
        <section anchor="iana-private-enterprise-number" numbered="true" toc="default">
          <name>IANA Private Enterprise Number</name>
          <t>IANA maintains a simple integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
          <t>PENs are often used to create an OID.
That is not the case here.
They are used only as a simple integer.</t>
          <t>In CBOR this is encoded as a major type 0 integer in CBOR and is typically 3 bytes.
It is encoded as a number in JSON.</t>
          <sourcecode type="CDDL"><![CDATA[
oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
        <name>Hardware Model Claim (hardware-model)</name>
        <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
        <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
        <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
        <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
        <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
        <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
        <sourcecode type="CDDL"><![CDATA[
hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)
]]></sourcecode>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version is a simple text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.</t>
        <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    hw-version-label => hw-version-type
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
      </section>
      <section anchor="software-name-claim" numbered="true" toc="default">
        <name>Software Name Claim</name>
        <t>This is a simple free-form text claim for the name of the software.
A CoSWID manifest or other type of manifest can be used instead if this is too simple.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= ( sw-name-label => tstr )
]]></sourcecode>
      </section>
      <section anchor="software-version-claim" numbered="true" toc="default">
        <name>Software Version Claim</name>
        <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]
]]></sourcecode>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the entity 
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels as described below.</t>
        <t>These claims describe security environment and countermeasures
available on the entity  where the attestation key
resides and the claims originate.</t>
        <dl>
          <dt>
1 - Unrestricted:  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2 - Restricted:  </dt>
          <dd>
            <t>Entities at this level are not general-purpose
operating environments that host features such as app download
systems, web browsers and complex productivity applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
          </dd>
          <dt>
3 - Secure-Restricted:  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined in section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. Like the FIDO security goal,
security at this level is aimed at defending well against large-scale
network/remote attacks against the entity.</t>
          </dd>
          <dt>
4 - Hardware:  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed any potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a proper
security certification scheme such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>. The 
claim made here is solely a self-claim made by the Attester.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"
]]></sourcecode>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when base software, the firmware and operating
system, are under control of the entity manufacturer identified in the
OEMID claim described in <xref target="oemid" format="default"/>. This may because the software is
in ROM or because it is cryptographically authenticated or some
combination of the two or other.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (secure-boot-label => bool)
]]></sourcecode>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to system-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a pubic key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of posession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected the same as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision should not be used.
It usually does not provide enough precision for a geographic location.
It is not a requirement that the receiver of an EAT implement half-precision, so the receiver may not be able to decode the location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity must still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/> below.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"
]]></sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requres the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance (Certificate Signing Request)  </dt>
          <dd>
            <t>Certifying authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) appication. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has posession
of a key.  This kind of attestation may be neceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 
]]></sourcecode>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is encoded in CBOR according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not tags.
The OID is always absolute and never relative.
If the claims CBOR type is a text string it is a URI and if a byte string it is an OID.</t>
        <t>Note that this named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
      </section>
      <section anchor="the-dloa-digital-letter-or-approval-claim-dloas" numbered="true" toc="default">
        <name>The DLOA (Digital Letter or Approval) Claim (dloas)</name>
        <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
        <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
        <t>This claim can contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
        <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
        <t>The first data item is a URI for the registrar.
The second data item is a platform label to indicate the particular platform that was certified.
For platform certifications only these two are needed.</t>
        <t>A DLOA may equally apply to an application.
In that case it has the URI for the registrar, a platform label and additionally an application label.</t>
        <t>The method of combining the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
      </section>
      <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
        <name>The Software Manifests Claim (manifests)</name>
        <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and/or the Relying Party.</t>
        <t>In some cases these will be signed by the software manufacturer independent of any signing for the purpose of EAT attestation.
Manifest claims should include the manufacturer's signature (which will be signed over  by the attestation signature).
In other cases the attestation signature will be the only one.</t>
        <t>This claim allows multiple formats for the manifest.
For example the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
        <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
        <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
        <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it must be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
        <t>It is not possible to describe the above requirements in CDDL, so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
        <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests may be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

]]></sourcecode>
      </section>
      <section anchor="swevidence" numbered="true" toc="default">
        <name>The Software Evidence Claim (swevidence)</name>
        <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
        <t>In most cases the contents of this claim are signed as part of attestation signing, but independent signing in addition to the attestation signing is not ruled out when a particular evidence format supports it.</t>
        <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 
]]></sourcecode>
      </section>
      <section anchor="swresults" numbered="true" toc="default">
        <name>The SW Measurement Results Claim (swresults)</name>
        <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
        <t>This claim may be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
        <t>This claim can also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
        <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
        <t>For each software objective, the following can be reported.</t>
        <section anchor="scheme" numbered="true" toc="default">
          <name>Scheme</name>
          <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
        </section>
        <section anchor="objective" numbered="true" toc="default">
          <name>Objective</name>
          <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
          <dl>
            <dt>
1 -- all  </dt>
            <dd>
              <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
            </dd>
            <dt>
2 -- firmware  </dt>
            <dd>
              <t>Indicates all of and only the firmware</t>
            </dd>
            <dt>
3 -- kernel  </dt>
            <dd>
              <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
            </dd>
            <dt>
4 -- privileged  </dt>
            <dd>
              <t>Refers to all of the software used by the root, system or administrative account</t>
            </dd>
            <dt>
5 -- system-libs  </dt>
            <dd>
              <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
            </dd>
            <dt>
6 -- partial  </dt>
            <dd>
              <t>Some other partial set of the software</t>
            </dd>
          </dl>
        </section>
        <section anchor="results" numbered="true" toc="default">
          <name>Results</name>
          <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
          <dl>
            <dt>
1 -- verificaton-not-run  </dt>
            <dd>
              <t>Indicates no attempt was made to run the verification</t>
            </dd>
            <dt>
2 -- verification-indeterminite  </dt>
            <dd>
              <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
            </dd>
            <dt>
3 -- verification-failed  </dt>
            <dd>
              <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
            </dd>
            <dt>
4 -- fully-verified  </dt>
            <dd>
              <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
            </dd>
            <dt>
5 -- partially-verified  </dt>
            <dd>
              <t>The verification ran to completion and some, but not all measurements compared correctly to Reference Values</t>
            </dd>
          </dl>
        </section>
        <section anchor="objective-name" numbered="true" toc="default">
          <name>Objective Name</name>
          <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]
]]></sourcecode>
        </section>
      </section>
      <section anchor="submods" numbered="true" toc="default">
        <name>Submodules (submods)</name>
        <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have one or
more security-oriented subsystems like a TEE or a Secure Element.</t>
        <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
        <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
        <section anchor="submodule-types" numbered="true" toc="default">
          <name>Submodule Types</name>
          <t>The following sections define the three major types of submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
            <li>The digest of a detached Claims-Set</li>
          </ul>
          <t>These are distinguished primarily by their data type which may be a map/object, string or array.</t>
          <section anchor="submodule-claims-set" numbered="true" toc="default">
            <name>Submodule Claims-Set</name>
            <t>This is simply a subordinate Claims-Set containing claims about the submodule.</t>
            <t>The submodule claims-set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment as described in the RATS architecture.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>The encoding of a submodule Claims-Set is always the same as the encoding as the token it is part of.</t>
            <t>This data type for this type of submodule is a map/object as that is the type of a Claims-Set.</t>
          </section>
          <section anchor="nested-token" numbered="true" toc="default">
            <name>Nested Token</name>
            <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/></t>
            <t>In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token does NOT need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.</t>
            <t>Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
            <t>The data type for this type of submodule is either a text or byte string.</t>
            <t>Mechanisms are defined for identifying the encoding and type of the nested token. These mechanisms are different for CBOR and JSON encoding.
The type of a CBOR-encoded nested token is identified using the CBOR tagging mechanism and thus is in common with identification used when any CBOR-encoded token is part of a CBOR-based protocol.
A new simple type mechanism is defined for indication of the type of a JSON-encoded token since there is no JSON equivalent of tagging.</t>
            <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR-Encoded</name>
              <t>If the submodule is a byte string, then the nested token is CBOR-encoded.
The byte string always wraps a token that is a tag.
The tag identifies whether the nested token is a CWT, a UCCS or a CBOR-encoded DEB.</t>
              <t>If the submodule is a text string, then the nested token is JSON-encoded.
The text string contains JSON.
That JSON is the exactly the JSON described in the next section with one exception.
The token can't be CBOR-encoded.</t>
              <sourcecode type="CDDL"><![CDATA[
Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token

]]></sourcecode>
            </section>
            <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is JSON-Encoded</name>
              <t>A nested token in a JSON-encoded token is an array of two items.
The first is a string that indicates the type of the second item as follows:</t>
              <dl>
                <dt>
"JWT"  </dt>
                <dd>
                  <t>A JWT formatted according to <xref target="RFC7519" format="default"/></t>
                </dd>
                <dt>
"CBOR"  </dt>
                <dd>
                  <t>Some base64url-encoded CBOR that is a tag that is either a CWT, UCCS or CBOR-encoded DEB</t>
                </dd>
                <dt>
"UJCS"  </dt>
                <dd>
                  <t>A UJCS-Message. (A UJCS-Message is identical to a JSON-encoded Claims-Set)</t>
                </dd>
                <dt>
"DEB"  </dt>
                <dd>
                  <t>A JSON-encoded Detached EAT Bundle.</t>
                </dd>
              </dl>
              <sourcecode type="CDDL"><![CDATA[
Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
            </section>
          </section>
          <section anchor="detached-submodule-digest" numbered="true" toc="default">
            <name>Detached Submodule Digest</name>
            <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
            <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
            <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
            <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
            <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
            <t>The data type for this type of submodule is an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
            <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="cddl-for-submods" numbered="true" toc="default">
          <name>CDDL for submods</name>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="UJCS" numbered="true" toc="default">
      <name>Unprotected JWT Claims-Sets</name>
      <t>This is simply the JSON equivalent of an Unprotected CWT Claims-Set <xref target="UCCS.Draft" format="default"/>.</t>
      <t>It has no protection of its own so protections must be provided by the protocol carrying it.
These are extensively discussed in <xref target="UCCS.Draft" format="default"/>.
All the security discussion and security considerations in <xref target="UCCS.Draft" format="default"/> apply to UJCS.</t>
      <t>(Note: The EAT author is open to this definition being moved into the UCCS draft, perhaps along with the related CDDL.
It is place here for now so that the current UCCS draft plus this document are complete.
UJCS is needed for the same use cases that a UCCS is needed.
Further, JSON will commonly be used to convey Attestation Results since JSON is common for server to server communications.
Server to server communications will often have established security (e.g., TLS) therefore the signing and encryption from JWS and JWE are unnecssary and burdensome).</t>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached claims-sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set
]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-common-cddl" numbered="true" toc="default">
        <name>Collected Common CDDL</name>
        <sourcecode type="JSON"><![CDATA[
Claims-Set = {
    * $$claims-set-claims,
    * Claim-Label .feature "extended-label" => any
}

Claim-Label = int / text

string-or-uri = tstr 

time-int = #6.1(int)


$$claims-set-claims //= (iss-label => text)
$$claims-set-claims //= (sub-label => text)
$$claims-set-claims //= (aud-label => text)
$$claims-set-claims //= (exp-label => ~time)
$$claims-set-claims //= (nbf-label => ~time)
$$claims-set-claims //= (iat-label => ~time)


$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)

$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)

$$claims-set-claims //=  (
    hw-version-label => hw-version-type
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)

$$claims-set-claims //= ( sw-name-label => tstr )

$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]

$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

$$claims-set-claims //= (secure-boot-label => bool)

$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$claims-set-claims //= (profile-label => ~uri / ~oid)

$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx


$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 

$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]


$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]


Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-cbor" numbered="true" toc="default">
        <name>Collected CDDL for CBOR</name>
        <sourcecode type="CDDL"><![CDATA[
CBOR-Token = Tagged-CBOR-Token / Untagged-CBOR-Token
    

Tagged-CBOR-Token  = CWT-Tagged-Message
Tagged-CBOR-Token /= UCCS-Tagged-Message
Tagged-CBOR-Token /= DEB-Tagged-Message

Untagged-CBOR-Token  = CWT-Untagged-Message
Untagged-CBOR-Token /= UCCS-Untagged-Message
Untagged-CBOR-Token /= DEB-Untagged-Message

CWT-Tagged-Message = COSE_Tagged_Message
CWT-Untagged-Message = COSE_Untagged_Message

UCCS-Message = UCCS-Tagged-Message / UCCS-Untagged-Message

UCCS-Tagged-Message = #6.601(UCCS-Untagged-Message)

UCCS-Untagged-Message = Claims-Set

DEB-Tagged-Message = #6.602(DEB-Untagged-Message)

DEB-Untagged-Message = Detached-EAT-Bundle



Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token



iss-label = 1
sub-label = 2
aud-label = 3
exp-label = 4
nbf-label = 5
iat-label = 6
cti-label = 7

nonce-label = 10
ueid-label = 11
oemid-label = 13
security-level-label = 14
secure-boot-label = 15
debug-status-label = 16
location-label = 17
profile-label = 18
submods-label = 20


sueids-label = <TBD25>
hw-version-label = <TBD26>
sw-name-label = <TBD29>
sw-version-label = <TBD30>
intended-use-label = <TBD33>
dloas-label = <TBD34>
manifests-label = <TBD35>
swevidence-label = <TBD36>
swresults-label = <TBD37>
hardware-model-label = <TBD39>

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-json" numbered="true" toc="default">
        <name>Collected CDDL for JSON</name>
        <sourcecode type="JSON"><![CDATA[
JWT-Message = text .regexp [A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+

UJCS-Message = Claims-Set



Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"


iss-label = "iss"
sub-label = "sub"
aud-label = "aud"
exp-label = "exp"
nbf-label = "nbf"
iat-label = "iat"
cti-label = "cti"

ueid-label /= "ueid"
sueids-label /= "sueids"
nonce-label /= "nonce"
oemid-label /= "oemid"
security-level-label /= "seclevel"
secure-boot-label /= "secboot"
debug-status-label /= "dbgstat"
location-label /= "location"
profile-label /= "eat-profile"
intended-use-label /= "intuse"
submods-label /= "submods"
timestamp /= "timestamp"
manifests-label /= "manifests"
swevidence-label /= "swevidence"
dloas-label /= "dloas"
swresults-label /= "swresults"
sw-name-label /= "swname"
sw-version-label /= "swversion"
hardware-model-label /= "hwmodel"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: 10</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: 11</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: OEMID</li>
            <li>Claim Description: IEEE-based OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: 13</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: 14</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 15</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 16</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: 17</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: 18</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules (not actually a claim)</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: 20</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>TODO: add the rest of the claims in here</t>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-02.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="January" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.


   // The present version (-01) has a few editorial improvements over
   // -00 and attempts to address points from Thomas Fossati's
   // 2021-03-16 review, for further discussion at IETF 111.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-02"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-19.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="October" year="2021"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-19"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-14.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="9" month="December" year="2021"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-14"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="ECMAScript" target="http://www.ecma-international.org/ecma-262/5.1/ECMA-262.pdf">
          <front>
            <title>Ecma International, "ECMAScript Language Specification, 5.1 Edition", ECMA Standard 262</title>
            <author>
              <organization/>
            </author>
            <date year="2011" month="June"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>These examples are either UCCS, shown as CBOR diagnostic, or UJCS messages.
Full CWT and JWT examples with signing and encryption are not given.</t>
      <t>All UCCS examples can be the payload of a CWT.
To do so, they must be converted from the UCCS message to a Claims-Set, which is achieve by "removing" the tag.</t>
      <t>UJCS messages can be directly used as the payload of a JWT.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="simple-tee-attestation" numbered="true" toc="default">
        <name>Simple TEE Attestation</name>
        <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / secure-boot /     15: true,
    / debug-status /    16: 2, / disabled-since-boot /
    / manfests /        35: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
})
    

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
      </section>
      <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
        <name>Submodules for Board and Device</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /       13: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /     39: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /      26: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /         29: "Acme OS",
    / SW Version /      30: ["3.5.5", 1],
    / secure-boot /     15: true,
    / debug-disable /   16: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level /  14: 3, / secure restricted OS /
    / submods / 20: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   13: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 39: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  26: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   13: 61234, / PEN Format OEM ID / 
            / HW Version /  26: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
      </section>
      <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
        <name>EAT Produced by Attestation Hardware Block</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /           13: 64242, / Private Enterprise Number /
    / security-level /  14: 4, / hardware level security /
    / secure-boot /     15: true,
    / debug-status /    16: 3, / disabled-permanently /
    / chip-version /    26: [ "3.1", 1 ] / Type is multipartnumeric /
})

]]></artwork>
      </section>
      <section anchor="detached-eat-bundle" numbered="true" toc="default">
        <name>Detached EAT Bundle</name>
        <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
        <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
        <t>The DEB itself can be assembled by untrusted SW.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e0b500198f50a4ff6c058
      61c8860d13a638ea0d19faf20e040ff51003181a8263332e
      310114a163544545822f5820e5cf95fd24fab71446742dd5
      8d43dae178e55fe2b94291a9291082ffc2635a0b',
      
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e0e030ff51002182381
                 585dda53574944a60064336132340c01016b4163
                 6d6520544545204f530d65332e312e340282a218
                 1f6b41636d6520544545204f53182101a2181f6b
                 41636d6520544545204f5318210206a111a11818
                 6e61636d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /           13: 64242, / Private Enterprise Number /
    / security-level /  14: 4, / hardware level security /
    / secure-boot /     15: true,
    / debug-status /    16: 3, / disabled-permanently /
    / chip-version /    26: [ "3.1", 1 ], / multipartnumeric /
    / submods/          20: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
})

]]></artwork>
      </section>
      <section anchor="key-key-store-attestation" numbered="true" toc="default">
        <name>Key / Key Store Attestation</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / debug-status /    16: 2, / disabled-since-boot /
    / secure-boot /     15: true,
    / manifests /       35: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        20 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level /  14: 1, / unrestricted /
           / secure-boot /     15: true,
           / manifests /       35: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
})
           
   
]]></artwork>
      </section>
      <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
        <name>SW Measurements of an IoT Device</name>
        <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / secure-boot /     15: true,
    / debug-status /    16: 2, / disabled-since-boot /
    / OEMID /           13: h'8945ad', / IEEE CID based /
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /          20: {
                            "OS" : {
        / security-level /      14: 2, / restricted /
        / secure-boot /         15: true,
        / debug-status /        16: 2, / disabled-since-boot /
        / swevidence /          36: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
})

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
      </section>
      <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
        <name>Attestation Results in JSON format</name>
        <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
        <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
        <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
    
]]></artwork>
      </section>
    </section>
    <section anchor="ueid-design-rationale" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p  Collision Probability
    n  Total population based on number of bits in UEID
    k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Remove boot seed and uptime claims since they are not particularly critical</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAO/A32EAA+y96XLj2Jko+B9PgWA5plI2SW25d1f1VUmqsrJzuymlq+94
HBUgCVJwkgANgKlU5y1Hv0a/wDxYP8l8+/kOACnT7TsTMxPtcFSKwMFZv/Pt
y2QySZo2Kxe/ZOuqzJ+nbb3Lk2Jb019Ne3Rw8OzgKJln7fO0aRdJsqjmZbaB
hos6W7aTIm+Xkzprm0metZN11uZNmyQ3q+fpu5Ory/Tnqv5QlKv0p7rabZNv
0nlVNnnZ7Jrn6be3efMtPGp2s03RNEVVtrdb6Pfi/OrHZFs8T9K0rebajn4s
8m17DU8e4u+mqts6XzahRXO7iR/Mq802m7euxW4WnpUVPqqX83zRtLfrXJu1
RYs/rq7z9LyEH7fpSYvLylqYY3pVfcjL9MH5ydVeks1mdf7xeQo/kqzOM5h8
2eZ1mbfJhxvYr2JV4uIz9/l8VtWw6AVs1PP06ODweHJ4kGS79rqqnyeTtChh
+i+n6ctduZits0UOM+Ttfpnt6ryc59GrqoaNvsznuxqnCTOu6tv05ctTeJVv
smL9PF2v1v+tkQYtvZ/CDuhIP03TV3D2t9nGxvmpqIvFdVa7FzTKf99la/hy
k17l8+uyWlerIm9gvfMp7iucRA57+ujJk0fpq6rOr6tdk6dndfERpzmHwWGe
WZmeFfmqwl3PV7Abz9PTbF0sq7osMjquXdnW0PL95Qn83F4TQI5+d5g+ffQ0
ffzoMH0C4DgKi9vwFP/bX9pi+heZn1/ei2n65tuzqqxW17uwky/yOt/cxm++
folHT56lP2Z1CedY7VbX6bsqW9gS3QtazwI39P3hw/TJy8togWXR5ov0nwE6
FtUmrPV3Dx+mh0ePjtLjx8eHT5+Flf65WtBk+0tNyqreAGx9zPHGvPvx9Ojw
8Jn8+eTR4SP58+mzh+7pk/CnPX16cKBtD48e259PHtqfj470z+Nn9ufjQ/vs
yUPt9/jZU+3hGeAP/BP/B//8/NPl04f8u83qFe7o6Lptt83z/f08q9vrSVEu
q2m5yqabYr2/vd7uL6qbcg27PIUf/7Qs1vl386qqF5ObVfP04Yi74iv785t3
L8/Sn87fnJ1fXZyml//j8ur8VXr47OnDcfr6p5Pp5dXrs+nBwfHjXw6nB9OD
X2gy1IHeQPx7wtDwmi5stk5/yqtmCz+y9QSv93pdrOginuA/t+kD6HmPPrRL
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
LORQfyJpp9efRSlhxxy6xCE5rD6qBWRreB/ONDCJp6V6CnoMgEjh4EGY9Ik8
e3LW0juJqn6qtdKsMa0n2HVZ60QcMEghLjhGSv7BeNGoZ9FRQqTJwvDTMJjR
QmxeggIl8Fe6dClhxRBHVyGRF6ccuIKDfsZGjicWRFw4xet1uf9/X+kgrqtX
WmX0jnIGaHoqzz1iEFpRbdSIKSwrS7NGiYVry9DMFLCzymeLzAIxtqIJ/f57
fDCnJ1g6pYljqtCZ2roeQe776mbDAqVPwiRguSCdRA63BZkkI4ojVYjtGszj
CEP5sKloDu1hVaFBBo3csjrDbi4zCjoy/vYgwBKhP1cwrojtTFTQBS2iJrmS
EeRaCLTcMVlGGE1Fq3WVw4jdnUH1r2B8Couh59d03WK38ZW6dpnBAppi1o47
yrJU6UQysO+C7+mM87pAIyrHuAwx1A685PJUeJ3TWUqFjlqkO1iE5KkU4Xzv
PtSKT4KtTEaOI2eQiDbab5hdi5eRY670dnZMPT+BIVPetHA/jILNjPbhUnxa
RCQCL4axxng9AfpSjgYINoORUXSQ4bConVF+woEJj3VCGH5HbcAnRM9WqMUn
d5FzJDHzZsZnYgmoc74HcnfiYNjA2hBlZSTtIl+N5x1qVVaa1m/UWOgm2S5m
H+HwVKxW+7V48kpNFvAVneTbUB3Qr4uS+NPQaJf4kujd5fM3r15dvn5x+YJ7
Y6Dx1jbZBGXgWhbeJsprSWdvoX7hsc0waojPHcTYtMox5GRRig/Lo6TkrTrS
nVtjfXPzlTkivYqBZAIhxpoArrNE/JEk4mKJzCsfb9jt6V/xk/2jDWcRsXi/
S9e60z9+uDwLEhShNcrZCT9en4VhhWXLP0gEWNxKMMotjfTSksaLl98rPUIp
UjY58Sohma0KTj45QHWiGiSFsHkiTdvyBMOzij13pDoifY40awkRGLBjGoPo
ifrMfmXmxyq1mlzrrMXtibRh7qjo3uXcSWl1LcqVXbe8NEhmwSpFVctRdaS9
EX7UOwE5JY42ER46vUUAlmDA+REHy8hWUUMzbcuQxGgJ+FWTshWaxn7Sx9pt
E3w64htPBrbf3XhjwpHEILvhtIrf1C67T+HsV+yYeAOl+4QfoGQzeQ/tpVnO
1jSa/pvsbllks5Ym8eF3xkBLOypK5ZotAMvrYd7fIK2uEBdnOPc5XmRygMHp
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
V9ObuLtY44WDkqewj6DgRf8HmFKGtIkpAgA=

-->

</rfc>
