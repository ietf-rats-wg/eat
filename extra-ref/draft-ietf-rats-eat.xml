<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="September" day="14"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>Some of the goals and fundamentals in the security model for attestation are not the same as other security standards such as those aimed at privacy (e.g., TLS) and authentication (e.g. FIDO).
The security model for attestation is not described here.
Instead see <xref target="RATS.Architecture"/>.</t>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC9052"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for evidence and attestation results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the attesting environment defined in RATS Architecture.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>The hardware and software that implement a server or service like a web site may be an entity, but the web site itself or the organization that runs the web site are not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-detached-eat-bundle">
        <name>CWT, JWT and Detached EAT Bundle</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "eat_profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle, <xref target="DEB"/></li>
        </ul>
        <t>A detached EAT bundle is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where otherwise explicitly stated.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an attester generates evidence.
Evidence is a claims set describing various characteristics of an entity.
Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry evidence.
The evidence goes to a verifier where the signature is verified.
Some of the claims may also be checked against reference values.
The verifier then produces attestation results which is also usually a claims set.</t>
        <t>EAT is also designed to carry attestation results.
The attestation results go to the relying party which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the verifier and relying party are not separate and thus there is no need for a protocol to carry attestation results.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results.</t>
          <t>The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow.
They are a matter of configured policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the detatched EAT bundle (<xref target="DEB"/>), a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
Any new format that plugs into this socket MUST be defined in a IETF standards track document.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations MUST be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for claim keys.
JSON-encoded tokens MUST use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but MUST NOT be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce MUST have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the "oemid" claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel-hardware-model-claim">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname-software-name-claim">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="secboot-secure-boot-claim">
          <name>secboot (Secure Boot) Claim</name>
          <t>A "secboot" claim with value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
"oemid" claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an attesting environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded detached EAT bundle, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
                  </dd>
                  <dt>"BUNDLE":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded detached EAT bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.
A detached Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set of the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
              <t>The encoding type of the detached claims set is part of the carrying protocol and varies from protocol to protocol.
For example, a detached EAT bundle uses mechanisms defined in this document.
Other use cases may use a content/media type.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, a hash algorithm identifier and a byte string containing the digest.</t>
              <t>The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>.
Either the integer or string identifier may be used.
The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
              <t>When decoding a CBOR format token, the detached digest type is distinguished from the other types by it being an array.
In CBOR encoded tokens none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "BUNDLE", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like an EAT nonce (<xref target="nonce"/>).</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in evidence or attestation results.
When these claims appear in evidence, they SHOULD not be passed through the verifier into attestation results.</t>
        <section anchor="cti-and-jti-token-id-claims">
          <name>cti and jti (Token ID) Claims</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent in EAT and carry a unique token identifier as
they do in JWT and CWT.</t>
        </section>
        <section anchor="iat-timestamp-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EAT's may be used in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="claims-that-include-keys">
        <name>Claims That Include Keys</name>
        <t>This document defines no claims that contain cryptographic keys.
When claims are defined that include cryptographic keys, they SHOULD use COSE_Key <xref target="RFC9052"/> in CBOR-encoded tokens or JSON Web Key <xref target="RFC7517"/> in JSON-encoded tokens.</t>
        <t><xref target="RFC7800"/> defines a proof-of-possion/confirmation claim named "cnf" that can hold a cryptographic key for JWTs.
<xref target="RFC8747"/> does the same for CWTs with claim key 8.
These particular claims are defined for authentication and authorization.
Their semantics don't translate to attestation and they SHOULD NOT be used in an EAT.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a detached EAT bundle.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the detached EAT bundle.
No mixing of encoding formats is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a verifier must implement.
The attester will select one of them.
Since there is no negotiation, the verifier should implement all algorithms listed in the profile.
If detached submodule digests are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations <xref target="sec-con-freshness"/> requires a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver MUST accept ES256, ES384 and ES512; sender MUST send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID MUST be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce MUST be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver MUST not error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and MUST use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition MUST have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the "cti"/"jti" claim and the EAT nonce claim.  The "cti"/"jti" claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The EAT nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modifie detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "eat_nonce"</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: EAT Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Name</li>
            <li>Claim Description: The name of the software running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Version</li>
            <li>Claim Description: The version of software running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Manifests</li>
            <li>Claim Description: Manifests describing the software installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Measurements</li>
            <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "measurements"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Measurement Results</li>
            <li>Claim Description: The results of comparing software measurements to reference values</li>
            <li>JWT Claim Name: "measres"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Count</li>
            <li>Claim Description: The number times the entity or submodule has been booted</li>
            <li>JWT Claim Name: "bootcount"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): uint</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052" target="https://www.rfc-editor.org/info/rfc9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose/">
          <front>
            <title>COSE Algorithms</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-22.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest" target="https://www.ietf.org/archive/id/draft-ietf-suit-manifest-19.txt">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg">
              <organization>Inria</organization>
            </author>
            <date day="9" month="August" year="2022"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-19"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-21.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="16" month="August" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-21"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-04.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'948f8860d13a463e8e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric version /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / secboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /       258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /     259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / hwversion /   260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /       258: 61234, / PEN Format OEM ID / 
            / hwversion /   260: ["4.0", 1] / Multipartnumeric version /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'948f8860d13a463e',
           / secboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / oemid /          258: h'8945ad', / IEEE CID based /
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /        266: {
                            "OS" : {
        / secboot /            262: true,
        / dbgstat /            263: 2, / disabled-since-boot /
        / measurements         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "submods": {
        "Android App Foo" :  {
            "swname": "Foo.app"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "swname": "Android"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  /
/ Note that 602, the tag identifying a detached EAT bundle is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines a message format for proving trustworthiness to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain reference values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-14">
        <name>From draft-ietf-rats-eat-14</name>
        <ul spacing="normal">
          <li>Reference to SUIT manifest</li>
          <li>Clarifications about manifest extensibility</li>
          <li>Removed security level claim</li>
          <li>Changed capitalization throughout the document for various terms</li>
          <li>Eliminated use of DEB acronym for detached EAT bundles</li>
          <li>Replicate claim optionality text from CWT and JWT</li>
          <li>Several edits and clarifications for freshness and nonces</li>
          <li>Correct eat_nonce registration for JSON-encoded tokens</li>
          <li>Add security considerations for freshness</li>
          <li>Change/clarify the input to digest algorithm for detached claims sets</li>
          <li>Removed EAN-13 references and IANA registration</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
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
bKUo5z3io7gjzCZgySS10Aps90sBNt3qMwK0bkqdCC7JZ5Sk0J/xfwLdZncV
EmD1OnIFSV2k+skx2Kod+j2TJuECRP5FgPDbLU05Q9KtBbkHBkIb2fmSB9fG
DkwxLE4ZNUPtlOKw8J72pKOuKtlJSy354ln21nBBQ4EzvUdB+id9EhKPWKjo
RMQYfJB/ozEo3XYC+BoLFKWBMEyzSiP1Bu8+bfirbEXzOSKf6VNp+YD9V1o9
FlrNjuW7INo3I0fKB17/w+eF+E/Smbpj6/AMf8+xuVp6zivHqmE1gS0lppF9
HGVzY6QvJJytnErfRroWS4ZJ7MtdW+S2hgTbddHiktGTJZzdOfsS/gOHxtqM
wQOTV/9DhxXycfEa/s5T+y/vsa5q0/767X1rZezPPff2gG0mPUWr7K32EvOA
FkFOFu+aOck79vXOLQ2DAJDuippk08hAajSEYeBw1I+c5qVBUnQU0eaAxN1o
IN2dexGc9Bz3QvcJurCFsxaHb1ddtbmZA5nHb+8fh9qCLO+1FtJ5CCIA1jx9
9uj5QWo+CaGZ18fT/Dgy+s1VS2W0JF/JugxMqjK+tEUudQM5MHajIp2fE+mX
WP2ZNV75j5sL89klkvrW9iFJjpXG0pso16PnMjUI4tXRscgqIvXBL1WuTxJS
tUuAJE6F+nz9/uVLv/XcrSqifBZ7Q3hoygotRjQ63TqagPxFD9GaolPxCaGP
KIrGuKxw07HYhVMKELchHrG+dBJ+x3u38eJkUgWQchM4GZiS7MAs1XAR0foI
191JljmLEqEaMrKdw1D7QpJDc00AdU831oORmg+nsmmhRzLvkDtxqJCmtRYZ
ClaIGP9zDZLQeumVF7dshuKcUW4rnKGdDHQEqBmLTQ/ESIw8WD4c3FF/aH53
+N4TgfHxrv6gQstRn6EMWEAUBEzKZ2zn6V+qEDzIfmuM3QTky3TryLkLvTUF
y3Ekr2+xMBX0MuwcNCua6Zp9HxDJclFSVvTQYgYUSKwoYXcQlvMmMU41UUeW
S4w4aecJIYSehN02T3iiLnZTWbK36FZC/TxBl1Bl6fS/5rxY5vNKytmPYl97
mVHABiTihhnhVIOZIjhQXgUFcrCc+eDegPG7i+yYKIoQw2xhOI1KgdGgDAUD
ltX0nDOYPZymD0eqb0uw3o7qwB/CJmV3MknDhqWru1kjMqLwatF2H1cSvXOR
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
MP7NLainG//Y8/4vLuOpuyVnAgA=

-->

</rfc>
