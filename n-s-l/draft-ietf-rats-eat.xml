<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="August" day="15"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC9052"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for evidence and attestation results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the attesting environment defined in RATS Architecture.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>The hardware and software that implement a server or service like a web site may be an entity, but the web site itself or the organization that runs the web site are not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-detached-eat-bundle">
        <name>CWT, JWT and Detached EAT Bundle</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle, <xref target="DEB"/></li>
        </ul>
        <t>A detached EAT bundle is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where otherwise explicitly stated.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an attester generates evidence.
Evidence is a claims set describing various characteristics of an entity.
Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry evidence.
The evidence goes to a verifier where the signature is verified.
Some of the claims may also be checked against reference values.
The verifier then produces attestation results which is also usually a claims set.</t>
        <t>EAT is also designed to carry attestation results.
The attestation results go to the relying party which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the verifier and relying party are not separate and thus there is no need for a protocol to carry attestation results.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results.</t>
          <t>The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put a HW OEM ID Claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow.
They are a matter of configured policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of Claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as Claims collection and evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the detatched EAT bundle (<xref target="DEB"/>), a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
Any new format that plugs into this socket MUST be defined in a IETF standards track document.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for Claim Keys.
JSON-encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a very simple free-form text claim for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the SW for the entity is needed, the manifests claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-count-claim-boot-count">
          <name>The Boot Count Claim (boot-count)</name>
          <t>This claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the swevidence claim, <xref target="swevidence"/>, to reference values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an attesting environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded detached EAT bundle, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
                  </dd>
                  <dt>"BUNDLE":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded detached EAT bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger claims sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, a hash algorithm identifier and a byte string containing the digest.</t>
              <t>The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>.
Either the integer or string identifier may be used.
The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
              <t>When decoding a CBOR format token, the detached digest type is distinguished from the other types by it being an array.
In CBOR encoded tokens none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "BUNDLE", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in evidence or attestation results.
When these claims appear in evidence, they SHOULD not be passed through the verifier into attestation results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are not a substitute for the nonce described in <xref target="nonce"/> and do not guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp Claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
floating-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="claims-that-include-keys">
        <name>Claims That Include Keys</name>
        <t>This document defines no claims that contain cryptographic keys.
When claims are defined that include cryptographic keys, they SHOULD use COSE_Key <xref target="RFC9052"/> in CBOR-encoded tokens or JSON Web Key <xref target="RFC7517"/> in JSON-encoded tokens.</t>
        <t><xref target="RFC7800"/> defines a proof-of-possion/confirmation claim named "cnf" that can hold a cryptographic key for JWTs.
<xref target="RFC8747"/> does the same for CWTs with claim key 8.
These particular claims are defined for authentication and authorization.
Their semantics don't translate to attestation and they SHOULD NOT be used in an EAT.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a detached EAT bundle.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the detached EAT bundle.
No mixing of encoding formats is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The profile claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a verifier must implement.
The attester will select one of them.
Since there is no negotiation, the verifier should implement all algorithms listed in the profile.
If detached submodule digests are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>A nonce is always required by EAT.</t>
          <t>A profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>By default only the nonce claim is required by EAT.
A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the nonce be a certain length or the location claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The manifests and software evidence claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver MUST accept ES256, ES384 and ES512; sender MUST send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID MUST be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce must be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims. The general EAT rules apply. The nonce MUST be present and the receiver MUST not error out on any claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and MUST use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition MUST have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-security-considerations">
        <name>Detached EAT Bundle Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  The attached claims set is vulnerable to
modification in transit.  Although the nested token does contain digests corresponding
to the unsigned claims set (as a submodule), these digests themselves should be protected
from manipulation during transit so that a verifier can detect tampering of the detached claims
set.  A suitable singing and/or encryption method should be sufficinet to protect the nested token if transport
layer cryptographic protection is not feasible.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose/">
          <front>
            <title>COSE Algorithms</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-22.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-20.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="July" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-20"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-04.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured SW components and is able to check them.
It informs the relying party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "submods": {
        "Android App Foo" :  {
            "swname": "Foo.app"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "swname": "Android"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  /
/ Note that 602, the tag identifying a detached EAT bundle is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines a message format for proving trustworthiness to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain reference values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-14">
        <name>From draft-ietf-rats-eat-14</name>
        <ul spacing="normal">
          <li>Removed security level claim</li>
          <li>Changed capitalization throughout the document for various terms</li>
          <li>Eliminated use of DEB acronym for detached EAT bundles</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
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
IOCBnSVoWSe5iImKMarF77mCBU2Om8AFCficUYRU2H6ZNM01RUUxAdpaGpoj
tbnUPYwzosTurymKtFNQyGXG3EAlKhFdBNJ48APShWMnglCxHu3T7pc7CDVd
ffTkALgerBlgvBwHlImDtrt2BAM9yAqgcofIcqMYV3nmtkVF/CH0YePf4PT0
CVeRlZRVjAz/9Bf8+C18/BY+/owI9vJs0G300KeBpn5qUpZdkaV/isGSNAx+
Y/0HJv8VEZybybK6skSHGTdLwteQMqs3Fx6lkYQb40e0Lu2Ky0ZYQk1xSzPG
abNakdmIMdFAEpBkEmmdZBzcNMa4+6xTYM5lle2OE+wSG2dGIeKRVvbYyKwD
EOnVWyEFvrAzhEN6cJ3Pnr8igkgtmT+wUUt9WPnjw+3xQqiVH8FDQpoyQgr3
XFYxZ2CTNKRj2/EkXB8H8f5qknZBHZlxZCXbciaraLqugoYwrQJ6ZNXNeJyh
Z9IA5iuJkf8P/9/+zX5c5V/lG/qj+gSbavm1acyy0QGxSjigqmTHUdOtA/+r
r9HK43323Le+QkKPlQfhJY8T7KrpqgqiIXxFH3ol0/vHx1/5h7CtjOfgKXCG
/BD+0S1vg0L1O96ONpPf8Tbob8W3/x+pHre9tBhN7/9SEq3v/9J4nRRf4n6T
R563BXT/8eC/DuBTzIL62tuCKn0Nn2Lf1K+9LbDR1/ApfN342tuCC30Nn8LX
za+9LQjQ1/Apdij92tvaKy8tWsPX7a+9rV2xjPb82ZMf/6vzte//1X+3Tqhc
1ptXDx3rKJVSIjpG+EjpQPTS469xCgfz34EUfuDZUQf4wMB5YDxKVwceXMsT
VOhX3AkWGch4Mpn59Vq3FvZ8afQSq1mFMyKQD3mwn8cVGjW3imPfndOt+ypU
oE+EQy3dKLxyq9IIPr9gyjOkYECgpyh0saEm+ZV5IVrGYRAjiWlOupvViK7Y
snclwvSv2/U9KnachZPOVKFIJH/Ubm5WM9OwA0Oz/2rcfFIt4qB2IH5OZhfI
wtF1uh5fkddoKb1yshvg6h+JGU5hlNymTTCUiAg5NSPlHABDkj2AYvWpQJHp
k19bxZeAoP7Bz/3qT1H113q19/ar6i//+X9rd30AiACryUvgChIyNRE7yFx+
4+QbI8bg7uFFGMVhJxytNWcvHmmCxDgAX2rbiGFaBqIhlaAoUhyb1Ac2IQ3A
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

-->

</rfc>
