<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="January" day="29"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949" format="default"/> and JSON <xref target="RFC7159" format="default"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392" format="default"/> and JSON Web Token (JWT) <xref target="RFC7519" format="default"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152" format="default"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515" format="default"/> <xref target="RFC7516" format="default"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446" format="default"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422" format="default"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949" format="default"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods" format="default"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb" numbered="true" toc="default">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392" format="default"/></li>
          <li>Unprotected CWT Claims Sets (UCCS) <xref target="UCCS.Draft" format="default"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds two more top-level messages:</t>
        <ul spacing="normal">
          <li>Unprotected JWT Claims Set (UJCS) <xref target="UJCS" format="default"/></li>
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default"/> and Javascript Object Notation (JSON) <xref target="RFC7159" format="default"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is followed.
Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship-between-attestation-evidence-and-attestation-results" numbered="true" toc="default">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>Many claims in Attestation Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the entity by the Verifier just through normal verification of the Attester's signature.
The UEID, <xref target="UEID" format="default"/>, and Location, <xref target="location" format="default"/>, are examples of claims that may be passed through.</t>
          <t>Some claims in Attestation Evidence will be verified by the Verifier by comparison to Reference Values.
These claims will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.
For example, the Verifier receives the Software Evidence claim, <xref target="swevidence" format="default"/>, compares it to Reference Values and conveys the results to the Relying Party in a Software Measurement Results Claim, <xref target="swresults" format="default"/>.</t>
          <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.
For example, the data in the Location claim, <xref target="location" format="default"/>, may be modified to have a precision of a few kilometers rather than a few meters.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the Relying Party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)
]]></sourcecode>
      </section>
      <section anchor="UEID" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID is permanent. It MUST never change for a given entity.</t>
        <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design" format="default"/>.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/>.</td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI" format="default"/>.</td>
            </tr>
          </tbody>
        </table>
        <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the Relying Party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid" format="default"/>. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Entity manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa. The essential requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)
]]></sourcecode>
      </section>
      <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
        <name>Semi-permanent UEIDs (SUEIDs)</name>
        <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
        <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
        <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>Hardware OEM Identification (oemid)</name>
        <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
        <section anchor="random-number-based-oemid" numbered="true" toc="default">
          <name>Random Number Based OEMID</name>
          <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
          <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
          <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
          <t>In JSON format tokens this MUST be base64url encoded.</t>
        </section>
        <section anchor="ieee-based-oemid" numbered="true" toc="default">
          <name>IEEE Based OEMID</name>
          <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
service <xref target="OUI.Lookup" format="default"/>.</t>
          <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
          <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001" format="default"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
          <t>This format is always 3 bytes in size in CBOR.</t>
          <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
        </section>
        <section anchor="iana-private-enterprise-number-based-oemid" numbered="true" toc="default">
          <name>IANA Private Enterprise Number Based OEMID</name>
          <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
          <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
          <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
          <sourcecode type="CDDL"><![CDATA[
oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
        <name>Hardware Model Claim (hardware-model)</name>
        <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
        <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
        <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
        <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
        <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
        <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
        <sourcecode type="CDDL"><![CDATA[
hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)
]]></sourcecode>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
        <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    hw-version-label => hw-version-type
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
      </section>
      <section anchor="software-name-claim" numbered="true" toc="default">
        <name>Software Name Claim</name>
        <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= ( sw-name-label => tstr )
]]></sourcecode>
      </section>
      <section anchor="software-version-claim" numbered="true" toc="default">
        <name>Software Version Claim</name>
        <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]
]]></sourcecode>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
        <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
        <dl>
          <dt>
1 - Unrestricted:  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2 - Restricted:  </dt>
          <dd>
            <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
          </dd>
          <dt>
3 - Secure-Restricted:  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
          </dd>
          <dt>
4 - Hardware:  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>.
See <xref target="dloas" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"
]]></sourcecode>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid" format="default"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (secure-boot-label => bool)
]]></sourcecode>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision SHOULD NOT be used.
They usually do not provide enough precision for a geographic location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"
]]></sourcecode>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (uptime-label => uint)
]]></sourcecode>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
        <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (boot-seed-label => bytes)
]]></sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic:  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration:  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning:  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance  </dt>
          <dd>
            <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession:  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 
]]></sourcecode>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is always absolute and never relative.
In CBOR tokens, the OID MUST be encoded according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not CBOR tags.
In JSON tokens, the OID is a string of the form "X.X.X", and a URI is a normal URI string.</t>
        <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
      </section>
      <section anchor="dloas" numbered="true" toc="default">
        <name>The DLOA (Digital Letter or Approval) Claim (dloas)</name>
        <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
        <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
        <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
        <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
        <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
      </section>
      <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
        <name>The Software Manifests Claim (manifests)</name>
        <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
        <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
        <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
        <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
        <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
        <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it MUST be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
        <t>It is not possible to describe the above requirements in CDDL, so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
        <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

]]></sourcecode>
      </section>
      <section anchor="swevidence" numbered="true" toc="default">
        <name>The Software Evidence Claim (swevidence)</name>
        <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
        <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 
]]></sourcecode>
      </section>
      <section anchor="swresults" numbered="true" toc="default">
        <name>The SW Measurement Results Claim (swresults)</name>
        <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
        <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
        <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
        <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
        <t>For each software objective, the following can be reported. TODO: defined objective</t>
        <section anchor="scheme" numbered="true" toc="default">
          <name>Scheme</name>
          <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
        </section>
        <section anchor="objective" numbered="true" toc="default">
          <name>Objective</name>
          <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
          <dl>
            <dt>
1 -- all:  </dt>
            <dd>
              <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
            </dd>
            <dt>
2 -- firmware:  </dt>
            <dd>
              <t>Indicates all of and only the firmware</t>
            </dd>
            <dt>
3 -- kernel:  </dt>
            <dd>
              <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
            </dd>
            <dt>
4 -- privileged:  </dt>
            <dd>
              <t>Refers to all of the software used by the root, system or administrative account</t>
            </dd>
            <dt>
5 -- system-libs:  </dt>
            <dd>
              <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
            </dd>
            <dt>
6 -- partial:  </dt>
            <dd>
              <t>Some other partial set of the software</t>
            </dd>
          </dl>
        </section>
        <section anchor="results" numbered="true" toc="default">
          <name>Results</name>
          <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
          <dl>
            <dt>
1 -- verification-not-run:  </dt>
            <dd>
              <t>Indicates that no attempt was made to run the verification</t>
            </dd>
            <dt>
2 -- verification-indeterminite:  </dt>
            <dd>
              <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
            </dd>
            <dt>
3 -- verification-failed:  </dt>
            <dd>
              <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
            </dd>
            <dt>
4 -- fully-verified:  </dt>
            <dd>
              <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
            </dd>
            <dt>
5 -- partially-verified:  </dt>
            <dd>
              <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
            </dd>
          </dl>
        </section>
        <section anchor="objective-name" numbered="true" toc="default">
          <name>Objective Name</name>
          <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]
]]></sourcecode>
        </section>
      </section>
      <section anchor="submods" numbered="true" toc="default">
        <name>Submodules (submods)</name>
        <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
        <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
        <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
        <section anchor="submodule-types" numbered="true" toc="default">
          <name>Submodule Types</name>
          <t>The following sections define the three types of submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
            <li>The digest of a detached Claims-Set</li>
          </ul>
          <section anchor="submodule-claims-set" numbered="true" toc="default">
            <name>Submodule Claims-Set</name>
            <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
            <t>The submodule claims-set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
            <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
          </section>
          <section anchor="nested-token" numbered="true" toc="default">
            <name>Nested Token</name>
            <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
            <t>The following two sections describe how to encode and decode a nested token.</t>
            <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR-Encoded</name>
              <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
              <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a UCCS, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
              <t>If the nested token is JSON-encoded, then the data item MUST be a text string.
The text string MUST contain a JSON-encoded array of two items.
The first item is a string identifying the type of the token.
The second item is the JSON-encoded token.</t>
              <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
              <dl>
                <dt>
"JWT":  </dt>
                <dd>
                  <t>The second item MUST be a JWT formatted according to <xref target="RFC7519" format="default"/></t>
                </dd>
                <dt>
"UJCS":  </dt>
                <dd>
                  <t>The second item MUST be a UJCS-Message as defined in this document.</t>
                </dd>
                <dt>
"DEB":  </dt>
                <dd>
                  <t>The second item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                </dd>
              </dl>
              <t>The definition of additional types requires a standards action.</t>
              <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
              <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
              <sourcecode type="CDDL"><![CDATA[
Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token

]]></sourcecode>
            </section>
            <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is JSON-Encoded</name>
              <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
              <t>The nested token MUST be an array of two in the same format as described in the section above.</t>
              <t>A CBOR-encoded token nested inside a JSON-encoded MUST use the same array of two, but with the type as follows:</t>
              <dl>
                <dt>
"CBOR":  </dt>
                <dd>
                  <t>Some base64url-encoded CBOR that is a tag, typically a CWT, UCCS or CBOR-encoded DEB</t>
                </dd>
              </dl>
              <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
              <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
              <sourcecode type="CDDL"><![CDATA[
Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
            </section>
          </section>
          <section anchor="detached-submodule-digest" numbered="true" toc="default">
            <name>Detached Submodule Digest</name>
            <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
            <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
            <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
            <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
            <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
            <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
            <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
            <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT", "UJCS" or "DEB", the the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
            <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="cddl-for-submods" numbered="true" toc="default">
          <name>CDDL for submods</name>
          <t>The submodule type is distinguished in the encoded bytes by its data type, map/object for a Claims-Set, string for nested token and array for a detached submodule. Nested tokens are byte-string wrapped when encoded in CBOR and base64 encoded for JSON.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="UJCS" numbered="true" toc="default">
      <name>Unprotected JWT Claims-Sets</name>
      <t>This is simply the JSON equivalent of an Unprotected CWT Claims-Set <xref target="UCCS.Draft" format="default"/>.</t>
      <t>It has no protection of its own so protections must be provided by the protocol carrying it.
These are extensively discussed in <xref target="UCCS.Draft" format="default"/>.
All the security discussion and security considerations in <xref target="UCCS.Draft" format="default"/> apply to UJCS.</t>
      <t>(Note: The EAT author is open to this definition being moved into the UCCS draft, perhaps along with the related CDDL.
It is place here for now so that the current UCCS draft plus this document are complete.
UJCS is needed for the same use cases that a UCCS is needed.
Further, JSON will commonly be used to convey Attestation Results since JSON is common for server to server communications.
Server to server communications will often have established security (e.g., TLS) therefore the signing and encryption from JWS and JWE are unnecssary and burdensome).</t>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached claims-sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set
]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-common-cddl" numbered="true" toc="default">
        <name>Collected Common CDDL</name>
        <sourcecode type="JSON"><![CDATA[
Claims-Set = {
    * $$claims-set-claims,
    * Claim-Label .feature "extended-label" => any
}

Claim-Label = int / text

string-or-uri = tstr 

time-int = #6.1(int)


$$claims-set-claims //= (iss-label => text)
$$claims-set-claims //= (sub-label => text)
$$claims-set-claims //= (aud-label => text)
$$claims-set-claims //= (exp-label => ~time)
$$claims-set-claims //= (nbf-label => ~time)
$$claims-set-claims //= (iat-label => ~time)


$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)

$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)

$$claims-set-claims //=  (
    hw-version-label => hw-version-type
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)

$$claims-set-claims //= ( sw-name-label => tstr )

$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]

$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

$$claims-set-claims //= (secure-boot-label => bool)

$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

$$claims-set-claims //= (uptime-label => uint)

$$claims-set-claims //=  (boot-seed-label => bytes)

$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$claims-set-claims //= (profile-label => ~uri / ~oid)

$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx


$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 

$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]


$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]


Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-cbor" numbered="true" toc="default">
        <name>Collected CDDL for CBOR</name>
        <sourcecode type="CDDL"><![CDATA[
CBOR-Token = Tagged-CBOR-Token / Untagged-CBOR-Token
    

Tagged-CBOR-Token  = CWT-Tagged-Message
Tagged-CBOR-Token /= UCCS-Tagged-Message
Tagged-CBOR-Token /= DEB-Tagged-Message

Untagged-CBOR-Token  = CWT-Untagged-Message
Untagged-CBOR-Token /= UCCS-Untagged-Message
Untagged-CBOR-Token /= DEB-Untagged-Message

CWT-Tagged-Message = COSE_Tagged_Message
CWT-Untagged-Message = COSE_Untagged_Message

UCCS-Message = UCCS-Tagged-Message / UCCS-Untagged-Message

UCCS-Tagged-Message = #6.601(UCCS-Untagged-Message)

UCCS-Untagged-Message = Claims-Set

DEB-Tagged-Message = #6.602(DEB-Untagged-Message)

DEB-Untagged-Message = Detached-EAT-Bundle



Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token



iss-label = 1
sub-label = 2
aud-label = 3
exp-label = 4
nbf-label = 5
iat-label = 6
cti-label = 7

nonce-label = 10
ueid-label = 11
oemid-label = 13
security-level-label = 14
secure-boot-label = 15
debug-status-label = 16
location-label = 17
profile-label = 18
submods-label = 20


sueids-label = <TBD25>
hw-version-label = <TBD26>
sw-name-label = <TBD29>
sw-version-label = <TBD30>
uptime-label = <TBD31>
boot-seed-label = <TBD32>
intended-use-label = <TBD33>
dloas-label = <TBD34>
manifests-label = <TBD35>
swevidence-label = <TBD36>
swresults-label = <TBD37>
hardware-model-label = <TBD39>

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-json" numbered="true" toc="default">
        <name>Collected CDDL for JSON</name>
        <sourcecode type="JSON"><![CDATA[
JWT-Message = text .regexp [A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+

UJCS-Message = Claims-Set



Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"


iss-label = "iss"
sub-label = "sub"
aud-label = "aud"
exp-label = "exp"
nbf-label = "nbf"
iat-label = "iat"
cti-label = "cti"

ueid-label /= "ueid"
sueids-label /= "sueids"
nonce-label /= "nonce"
oemid-label /= "oemid"
security-level-label /= "seclevel"
secure-boot-label /= "secboot"
debug-status-label /= "dbgstat"
location-label /= "location"
uptime-label /= "uptime"
profile-label /= "eat-profile"
intended-use-label /= "intuse"
boot-seed-label /= "bootseed"
submods-label /= "submods"
timestamp /= "timestamp"
manifests-label /= "manifests"
swevidence-label /= "swevidence"
dloas-label /= "dloas"
swresults-label /= "swresults"
sw-name-label /= "swname"
sw-version-label /= "swversion"
hardware-model-label /= "hwmodel"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: 10</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: 11</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: OEMID</li>
            <li>Claim Description: IEEE-based OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: 13</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: 14</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 15</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 16</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: 17</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: 18</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules (not actually a claim)</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: 20</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>TODO: add the rest of the claims in here</t>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-02.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="January" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.


   // The present version (-01) has a few editorial improvements over
   // -00 and attempts to address points from Thomas Fossati's
   // 2021-03-16 review, for further discussion at IETF 111.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-02"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-20.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="26" month="January" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-20"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-14.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="9" month="December" year="2021"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-14"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>These examples are either UCCS, shown as CBOR diagnostic, or UJCS messages.
Full CWT and JWT examples with signing and encryption are not given.</t>
      <t>All UCCS examples can be the payload of a CWT.
To do so, they must be converted from the UCCS message to a Claims-Set, which is achieve by "removing" the tag.</t>
      <t>UJCS messages can be directly used as the payload of a JWT.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="simple-tee-attestation" numbered="true" toc="default">
        <name>Simple TEE Attestation</name>
        <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / secure-boot /     15: true,
    / debug-status /    16: 2, / disabled-since-boot /
    / manfests /        35: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
})
    

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
      </section>
      <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
        <name>Submodules for Board and Device</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /       13: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /     39: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /      26: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /         29: "Acme OS",
    / SW Version /      30: ["3.5.5", 1],
    / secure-boot /     15: true,
    / debug-disable /   16: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level /  14: 3, / secure restricted OS /
    / submods / 20: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   13: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 39: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  26: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   13: 61234, / PEN Format OEM ID / 
            / HW Version /  26: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
      </section>
      <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
        <name>EAT Produced by Attestation Hardware Block</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /           13: 64242, / Private Enterprise Number /
    / security-level /  14: 4, / hardware level security /
    / secure-boot /     15: true,
    / debug-status /    16: 3, / disabled-permanently /
    / chip-version /    26: [ "3.1", 1 ] / Type is multipartnumeric /
})

]]></artwork>
      </section>
      <section anchor="detached-eat-bundle" numbered="true" toc="default">
        <name>Detached EAT Bundle</name>
        <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
        <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
        <t>The DEB itself can be assembled by untrusted SW.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e0b500198f50a4ff6c058
      61c8860d13a638ea0d19faf20e040ff51003181a8263332e
      310114a163544545822f5820e5cf95fd24fab71446742dd5
      8d43dae178e55fe2b94291a9291082ffc2635a0b',
      
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e0e030ff51002182381
                 585dda53574944a60064336132340c01016b4163
                 6d6520544545204f530d65332e312e340282a218
                 1f6b41636d6520544545204f53182101a2181f6b
                 41636d6520544545204f5318210206a111a11818
                 6e61636d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /           13: 64242, / Private Enterprise Number /
    / security-level /  14: 4, / hardware level security /
    / secure-boot /     15: true,
    / debug-status /    16: 3, / disabled-permanently /
    / chip-version /    26: [ "3.1", 1 ], / multipartnumeric /
    / submods/          20: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
})

]]></artwork>
      </section>
      <section anchor="key-key-store-attestation" numbered="true" toc="default">
        <name>Key / Key Store Attestation</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / debug-status /    16: 2, / disabled-since-boot /
    / secure-boot /     15: true,
    / manifests /       35: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        20 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level /  14: 1, / unrestricted /
           / secure-boot /     15: true,
           / manifests /       35: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
})
           
   
]]></artwork>
      </section>
      <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
        <name>SW Measurements of an IoT Device</name>
        <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / secure-boot /     15: true,
    / debug-status /    16: 2, / disabled-since-boot /
    / OEMID /           13: h'8945ad', / IEEE CID based /
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /          20: {
                            "OS" : {
        / security-level /      14: 2, / restricted /
        / secure-boot /         15: true,
        / debug-status /        16: 2, / disabled-since-boot /
        / swevidence /          36: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
})

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
      </section>
      <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
        <name>Attestation Results in JSON format</name>
        <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
        <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
        <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
    
]]></artwork>
      </section>
    </section>
    <section anchor="UEID-Design" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIALOo9WEAA+y9aXPjVpYg+h2/AiFXjFNVJJVacu22e2RJdsmd26SU5e5X
UeEASZBCJQmwAVBKdY7rt8/Z77kAqMzq6ol48eJVdzhF4OKu5559GY/HSdNm
5fzXbFWV+cu0rbd5Umxq+qtpjx4/fvH4KJll7cu0aedJMq9mZbaGhvM6W7Tj
Im8X4zprm3GeteNV1uZNmyR3y5fp+9Prq/SXqv5YlMv0p7rabpJv0llVNnnZ
bJuX6bf3efMtPGq203XRNEVVtvcb6Pfy4vrHZFO8TNK0rWbajn7M8017A09O
8HdT1W2dL5rQorlfxw9m1XqTzVrXYjsNz8oKH9WLWT5v2vtVrs3aosUf1zd5
elHCj/v0tMVlZS3MMb2uPuZl+uji9Ho/yabTOr99mcKPJKvzDCZftnld5m3y
8Q72q1iWuPjMfT6bVjUseg4b9TI9enx4PD58nGTb9qaqXybjtChh+q8m6att
OZ+usnkOM+TtfpVt67yc5dGrqoaNvspn2xqnCTOu6vv01aszeJWvs2L1Ml0t
V/+zkQYtvZ/ADuhIP03S13D299naxvmpqIv5TVa7FzTK/9pmK/hynV7ns5uy
WlXLIm9gvbMJ7iucRA57+uTZsyfp66rOb6ptk6fndXGL05zB4DDPrEzPi3xZ
4a7nS9iNl+lZtioWVV0WGR3XtmxraPnh6hR+bm4IIPf+cJg+f/I8ffrkMH0G
4LgXFrfmKf7P/2iLyX/I/Pzyfp6kb789r8pqebMNO/lzXufr+/jN1y/x6NmL
9MesLuEcq+3yJn1fZXNbontB65njhn44PEmfvbqKFlgWbT5P/xWgY16tw1r/
cHKSHh49OUqPnx4fPn8RVvrXak6T7S81Kat6DbB1m+ONef/j2dHh4Qv589nh
E/vzyeGT8OdT+fP5ixPX4Fn4054+f/xY2x4e2WeHz070z+MXR/rn00Nr++xE
Ozt+8Tx89kTbvgCsgn/i/+CfX366en7Cv9usXuI+79207aZ5eXCQZ3V7My7K
RTUpl9lkXawONjebg3l1V65g7yfw418WxSr/blZV9Xx8t2yen+xxV3yRf3n7
/tV5+tPF2/OL68uz9Orfr64vXqeHL56fjNI3P51Orq7fnE8ePz5++uvh5PHk
8a80GepA7yX+PWYYeUPXOFulP+VVs4Ef2WqMl361KpZ0PU/xn/v0EfS8Tx/a
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
hr+X+OgbXyJkwK1C/4z2/1e2Rb23l8LCBunchYU9g6cYu9u///t5jubYTIjQ
gjjGqdoQA8KLm6kOKDWmL72v3errRrQ6qodG9sjRlYqM4dXvaW94rK3g3/LW
KYfj9DAcP7QVXm4LuqXk9yNLwQuVzDQYLWsMw6Zvji/FX6tHO7NLJhMce4Zy
cdYbdGbH2iJgLA/n3r1WtzsH2wROD/DfxbG2UOXqTRwD3fqru9o/rr/fBZOm
R/8C0wbdEmghHW2Vjbp8hdfp4WXcuJfife14lPDl29EG5QCaPkC7cDHqw38X
I7upS441t5K00+n3p73+pDMadzsJXgh3oKxprzuaHePfoO70pv1k0p3Ou7Ne
Nuv2x2l30u0mgyyd9gfHeHuoO0kyXYxSMI+z7mCWQGv6o8mkM+CxOXp2wEqF
uYCxGMC/evjvbjbqwje9R41JZ9YbTxM3JrOk351O0ml69EUMGPn96XQ8G8Es
JcO035tNJoPucAhH3fSo0yb8TeGoOBmM4JQ8GE6m09F8BgK/mIwfNyagwMkI
n6NlDRIyA4npJn3sZvdYse/Ne1M3Gukwncxn88W0N4bzZnqs2MPO2s/6WZKN
s/GwC8MxnnXn09mo0x31j56dfi+dJD1YvvNs0uv1ptnwl988Hf7F3UlpCti6
rJItCUzNGY5MftsCVdnCfc9LElNThh/5BjHs9JamEZ8QxsZiiQExe84SKzA5
/nKnydBiDN2UzGBJPTvJ/StwNQrhm6sPp4qyEkv4omSUPDZtDGS32x88nDjW
JcNIu9bCDQctP4Kh3eMVtDOR7s8ss1H81XLLHky6cslW4fw8mHP1+Gyxn6y1
NbYGFHhM7hQmTh1nkhydXuXlV21/WOa7H/KCUqzKodRQQIEQG3ElJAstwv6g
g3HGNS9ReEf1pfjonthf8vjrdfsDm9c2Ot7BHvc+9LK04z32fd0hdet77Pvl
rfLYePn4IY2of8elMT5WsMC0z/dbBIHcFrNHCtW405n8k2XqFwqVsxTYBHjs
pJZNhkcLpZgYajs89v2yrfH/iFAxR0V7tZw+UqK6PZCo3n9nNfUzrS37K5td
j30/NNP6x5qM9vd4e83+jpSoX2wAWtYvOhr9VJa3hIpGriWPtdd3NRI4ingL
6/yNFIG43yFpMUUz/IkwrDIBbhZ4pGxuh2u/dgMEuiHcNwYW5Yh8boEHTm3l
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

-->

</rfc>
