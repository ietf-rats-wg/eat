<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.15 (Ruby 3.3.1) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.21.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Mediatek USA</organization>
      <address>
        <email>giridhar.mandyam@gmail.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2024" month="June" day="21"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <?line 174?>

<t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <?line 184?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>
          <t>Make and model of manufactured consumer device</t>
        </li>
        <li>
          <t>Make and model of a chip or processor, particularly for a security-oriented chip</t>
        </li>
        <li>
          <t>Identification and measurement of the software running on a device</t>
        </li>
        <li>
          <t>Configuration and state of a device</t>
        </li>
        <li>
          <t>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</t>
        </li>
        <li>
          <t>Formal certifications received</t>
        </li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like Trusted Platform Modules or Secure Elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <t>Following is a very simple example.
It is JSON format for easy reading, but could also be CBOR.
Only the Claims-Set, the payload for the JWT, is shown.</t>
      <artwork><![CDATA[
{
    "eat_nonce": "MIDBNH28iioisjPy",
    "ueid":      "AgAEizrK3Q",
    "oemid":     76543, 
    "swname":    "Acme IoT OS",
    "swversion": "3.1.4"
}
]]></artwork>
      <t>This example has a nonce for freshness.
This nonce is the base64url encoding of a 12 byte random binary byte string.
The ueid is effectively a serial number uniquely identifying the device.
This ueid is the base64url encoding of a 48-bit MAC address preceded by the type byte 0x02.
The oemid identifies the manufacturer using a Private Enterprise Number <xref target="PEN"/>.
The software is identified by a simple string name and version.
It could be identified by a full manifest, but this is a minimal example.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>
            <t>A Secure Element</t>
          </li>
          <li>
            <t>A Trusted Execution Environment (TEE)</t>
          </li>
          <li>
            <t>A network card in a router</t>
          </li>
          <li>
            <t>A router, perhaps with each network card in the router a submodule</t>
          </li>
          <li>
            <t>An Internet of Things (IoT) device</t>
          </li>
          <li>
            <t>An individual process</t>
          </li>
          <li>
            <t>An app on a smartphone</t>
          </li>
          <li>
            <t>A smartphone with many submodules for its many subsystems</t>
          </li>
          <li>
            <t>A subsystem in a smartphone like the modem or the camera</t>
          </li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>
            <t>An identification and type system for claims in claims-sets</t>
          </li>
          <li>
            <t>Definitions of common attestation-oriented claims</t>
          </li>
          <li>
            <t>Claims defined in CDDL and serialized using CBOR or JSON</t>
          </li>
          <li>
            <t>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</t>
          </li>
          <li>
            <t>Nesting of claims sets and tokens to represent complex and compound devices</t>
          </li>
          <li>
            <t>A profile mechanism for specifying and identifying specific tokens for specific use cases</t>
          </li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>.
To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set either includes a received nonce or uses some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <?line -18?>

<t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string between 8 and 64 bytes in length.
In JSON, an EAT nonce is a text string between 8 and 88 bytes in length.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries, as described in <xref target="UEIDCreateRules"/>. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="UEIDCreateRules">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The EAT consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given product and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity; changeable MAC addresses that don't meet the permanence requirements in this document <bcp14>MUST NOT</bcp14> be used for the UEID or SUEID) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>
                <t>UEIDs types vary freely from one manufacturer to the next.</t>
              </li>
              <li>
                <t>New types of UEIDs may be defined.</t>
              </li>
              <li>
                <t>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</t>
              </li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="RFC9393"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="RFC9393"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to privileged software that allows system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GNSS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform <xref target="GP-Example"/> and those based on Common Criteria <xref target="CC-Example"/>.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="RFC9393"/>.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="RFC9393"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>
              <t>A submodule Claims-Set</t>
            </li>
            <li>
              <t>The digest of a detached Claims-Set</t>
            </li>
            <li>
              <t>A nested token, which can be any EAT</t>
            </li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: 
  CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: 
  Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector socket.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be authenticity and integrity protected</t>
        </li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> be a Claims-Set</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> use the same encoding as the bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</t>
        </li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag 602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC-NEST-SAFE<json-wrapped-claims-set,
                               cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="full-and-partial-profiles">
        <name>Full and Partial Profiles</name>
        <t>For a "full" profile, the receiver will be able to decode and verify every possible EAT sent when a sender and receiver both adhere to it.
For a "partial" profile, there are still some protocol options left undecided.</t>
        <t>For example, a profile that allows the use of signing algorithms by the sender that the receiver is not required to support is a partial profile.
The sender might choose a signing algorithm that some receivers don't support.</t>
        <t>Full profiles <bcp14>MUST</bcp14> be complete such that a complying receiver can decode, verify and check for freshness every EAT created by a complying sender.
Full profiles do not need to require the receiver fully handle every claim in an EAT from a complying sender.
Profile specifications may assume the receiver has access to the necessary verification keys or may go into specific detail on the means to access verification keys.</t>
        <t>The "eat_profile" claim <bcp14>MUST NOT</bcp14> be used to identify partial profiles.</t>
        <t>While fewer profiles are preferrable, sometimes several may be needed for a use case.
One approach to handling variation in devices might be to define several full profiles that are variants of each other.
It is relatively easy and inexpensive to define profiles as they don't have to be standards track and don't have to be registered anywhere.
For example, flexibility for post-quantum algorithms can be handled as follows.
First, define a full profile for a set of non-post-quantum algorithms for current use.
Then, when post-quantum algorithms are settled, define another full profile derived from the first.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "urn:ietf:rfc:rfcTBD".</t>
        <t><cref anchor="to-be-removed-1">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST NOT</bcp14> be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence. (It is assumed the receiver has access to a database of trusted verification keys which allows lookup of the verification key ID; the key format and means of distribution are beyond the scope of this profile)</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>For CBOR-encoded tokens, OIDs are specified using the CDDL type name "oid" from <xref target="RFC9090"/>.
They are encoded without the tag number.
For JSON-encoded tokens, OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>
              <t>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</t>
            </li>
            <li>
              <t>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</t>
            </li>
            <li>
              <t>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC4517"/>.</t>
            </li>
          </ul>
          <t>The CDDL generic "JC&lt;&gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC&lt;&gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.
Note that the JC&lt;&gt; generic uses the CDDL ".feature" control operator defined in <xref target="RFC9165"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC-NEST-SAFE<json-wrapped-claims-set,
                               cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label                = JC< "eat_nonce",    10 >
ueid-label                 = JC< "ueid",         256 >
sueids-label               = JC< "sueids",       257 >
oemid-label                = JC< "oemid",        258 >
hardware-model-label       = JC< "hwmodel",      259 >
hardware-version-label     = JC< "hwversion",    260 >
uptime-label               = JC< "uptime",       261 >
oem-boot-label             = JC< "oemboot",      262 >
debug-status-label         = JC< "dbgstat",      263 >
location-label             = JC< "location",     264 >
profile-label              = JC< "eat_profile",  265 >
submods-label              = JC< "submods",      266 >
boot-count-label           = JC< "bootcount",    267 >
boot-seed-label            = JC< "bootseed",     268 >
dloas-label                = JC< "dloas",        269 >
sw-name-label              = JC< "swname",       270 >
sw-version-label           = JC< "swversion",    271 >
manifests-label            = JC< "manifests",    272 >
measurements-label         = JC< "measurements", 273 >
measurement-results-label  = JC< "measres" ,     274 >
intended-use-label         = JC< "intuse",       275 >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: 
  CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: 
  Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>
            <t>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</t>
          </li>
          <li>
            <t>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</t>
          </li>
          <li>
            <t>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</t>
          </li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.
The "Claim Value Type(s)" here all name CDDL definitions and are only for the CWT registry.</t>
        <t><cref anchor="to-be-removed-3">RFC editor: please see instructions in followg paragraph and remove for final publication</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Nonce</t>
          </li>
          <li>
            <t>Claim Description: Nonce</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_nonce"</t>
          </li>
          <li>
            <t>Claim Key: 10</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: UEID</t>
          </li>
          <li>
            <t>Claim Description: The Universal Entity ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "ueid"</t>
          </li>
          <li>
            <t>CWT Claim Key: 256</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: SUEIDs</t>
          </li>
          <li>
            <t>Claim Description: Semi-permanent UEIDs</t>
          </li>
          <li>
            <t>JWT Claim Name: "sueids"</t>
          </li>
          <li>
            <t>CWT Claim Key: 257</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware OEM ID</t>
          </li>
          <li>
            <t>Claim Description: Hardware OEM ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemid"</t>
          </li>
          <li>
            <t>Claim Key: 258</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or int</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Model</t>
          </li>
          <li>
            <t>Claim Description: Model identifier for hardware</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwmodel"</t>
          </li>
          <li>
            <t>Claim Key: 259</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Version</t>
          </li>
          <li>
            <t>Claim Description: Hardware Version Identifier</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwversion"</t>
          </li>
          <li>
            <t>Claim Key: 260</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: OEM Authorized Boot</t>
          </li>
          <li>
            <t>Claim Description: Indicates whether the software booted was OEM authorized</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemboot"</t>
          </li>
          <li>
            <t>Claim Key: 262</t>
          </li>
          <li>
            <t>Claim Value Type(s): bool</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Debug Status</t>
          </li>
          <li>
            <t>Claim Description: Indicates status of debug facilities</t>
          </li>
          <li>
            <t>JWT Claim Name: "dbgstat"</t>
          </li>
          <li>
            <t>Claim Key: 263</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Location</t>
          </li>
          <li>
            <t>Claim Description: The geographic location</t>
          </li>
          <li>
            <t>JWT Claim Name: "location"</t>
          </li>
          <li>
            <t>Claim Key: 264</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: EAT Profile</t>
          </li>
          <li>
            <t>Claim Description: Indicates the EAT profile followed</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_profile"</t>
          </li>
          <li>
            <t>Claim Key: 265</t>
          </li>
          <li>
            <t>Claim Value Type(s): uri or oid</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Submodules Section</t>
          </li>
          <li>
            <t>Claim Description: The section containing submodules</t>
          </li>
          <li>
            <t>JWT Claim Name: "submods"</t>
          </li>
          <li>
            <t>Claim Key: 266</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Uptime</t>
          </li>
          <li>
            <t>Claim Description: Uptime</t>
          </li>
          <li>
            <t>JWT Claim Name: "uptime"</t>
          </li>
          <li>
            <t>Claim Key: 261</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Count</t>
          </li>
          <li>
            <t>Claim Description: The number times the entity or submodule has been booted</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootcount"</t>
          </li>
          <li>
            <t>Claim Key: 267</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Seed</t>
          </li>
          <li>
            <t>Claim Description: Identifies a boot cycle</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootseed"</t>
          </li>
          <li>
            <t>Claim Key: 268</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: DLOAs</t>
          </li>
          <li>
            <t>Claim Description: Certifications received as Digital Letters of Approval</t>
          </li>
          <li>
            <t>JWT Claim Name: "dloas"</t>
          </li>
          <li>
            <t>Claim Key: 269</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Name</t>
          </li>
          <li>
            <t>Claim Description: The name of the software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swname"</t>
          </li>
          <li>
            <t>Claim Key: 270</t>
          </li>
          <li>
            <t>Claim Value Type(s): tstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Version</t>
          </li>
          <li>
            <t>Claim Description: The version of software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swversion"</t>
          </li>
          <li>
            <t>Claim Key: 271</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Manifests</t>
          </li>
          <li>
            <t>Claim Description: Manifests describing the software installed on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "manifests"</t>
          </li>
          <li>
            <t>Claim Key: 272</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Measurements</t>
          </li>
          <li>
            <t>Claim Description: Measurements of the software, memory configuration and such on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "measurements"</t>
          </li>
          <li>
            <t>Claim Key: 273</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Measurement Results</t>
          </li>
          <li>
            <t>Claim Description: The results of comparing software measurements to reference values</t>
          </li>
          <li>
            <t>JWT Claim Name: "measres"</t>
          </li>
          <li>
            <t>Claim Key: 274</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Intended Use</t>
          </li>
          <li>
            <t>Claim Description: Indicates intended use of the EAT</t>
          </li>
          <li>
            <t>JWT Claim Name: "intuse"</t>
          </li>
          <li>
            <t>Claim Key: 275</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s"ueid:" b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references anchor="sec-normative-references">
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC4517">
          <front>
            <title>Lightweight Directory Access Protocol (LDAP): Syntaxes and Matching Rules</title>
            <author fullname="S. Legg" initials="S." role="editor" surname="Legg"/>
            <date month="June" year="2006"/>
            <abstract>
              <t>Each attribute stored in a Lightweight Directory Access Protocol (LDAP) directory, whose values may be transferred in the LDAP protocol, has a defined syntax that constrains the structure and format of its values. The comparison semantics for values of a syntax are not part of the syntax definition but are instead provided through separately defined matching rules. Matching rules specify an argument, an assertion value, which also has a defined syntax. This document defines a base set of syntaxes and matching rules for use in defining attributes for LDAP directories. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4517"/>
          <seriesInfo name="DOI" value="10.17487/RFC4517"/>
        </reference>
        <reference anchor="RFC9393">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="J. Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay"/>
            <author fullname="C. Schmidt" initials="C." surname="Schmidt"/>
            <author fullname="D. Waltermire" initials="D." surname="Waltermire"/>
            <date month="June" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles. SWID tag representations can be too large for devices with network and storage constraints. This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags. CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9393"/>
          <seriesInfo name="DOI" value="10.17487/RFC9393"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="http://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="http://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="http://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references anchor="sec-informative-references">
        <name>Informative References</name>
        <reference anchor="RFC9562">
          <front>
            <title>Universally Unique IDentifiers (UUIDs)</title>
            <author fullname="K. Davis" initials="K." surname="Davis"/>
            <author fullname="B. Peabody" initials="B." surname="Peabody"/>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <date month="May" year="2024"/>
            <abstract>
              <t>This specification defines UUIDs (Universally Unique IDentifiers) --
also known as GUIDs (Globally Unique IDentifiers) -- and a Uniform
Resource Name namespace for UUIDs. A UUID is 128 bits long and is
intended to guarantee uniqueness across space and time. UUIDs were
originally used in the Apollo Network Computing System (NCS), later
in the Open Software Foundation's (OSF's) Distributed Computing
Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the OSF DCE specification with the
kind permission of the OSF (now known as "The Open Group"). Information from earlier versions of the OSF DCE specification have
been incorporated into this document. This document obsoletes RFC
4122.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9562"/>
          <seriesInfo name="DOI" value="10.17487/RFC9562"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
          <seriesInfo name="ISBN" value="[&quot;9781504450195&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
          <seriesInfo name="ISBN" value="[&quot;9780738192192&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="4" month="March" year="2024"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50% while also significantly reducing memory and code size
   compared to ASN.1.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 Certificate Signing Requests, C509 COSE headers, a
   C509 TLS certificate type, and a C509 file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-09"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="4" month="March" year="2024"/>
            <abstract>
              <t>   When transported over secure channels, CBOR Web Token (CWT, RFC 8392)
   Claims Sets may not need the protection afforded by wrapping them
   into COSE, as is required for a true CWT.  This specification defines
   a CBOR tag for such unprotected CWT Claims Sets (UCCS) and discusses
   conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-09"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>Linaro</organization>
            </author>
            <date day="2" month="April" year="2024"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-07"/>
        </reference>
        <reference anchor="CC-Example" target="https://commoncriteriaportal.org/nfs/ccpfiles/files/ppfiles/pp0117V2b_pdf.pdf">
          <front>
            <title>Secure Sub-System in System-on-Chip (3S in SoC) Protection Profile</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="GP-Example" target="https://globalplatform.org/wp-content/uploads/2021/01/GP_TEECertificationProcess_v2.0_PublicRelease.pdf">
          <front>
            <title>GlobalPlatform Technology TEE Certification Process</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
      </references>
    </references>
    <?line 2594?>

<section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t><cref anchor="to-be-removed-2">RFC Editor: When the IANA values are permanently assigned, please contact the authors so the examples can be regenerated. Regeneration is required because IANA-assigned values are inside hex and based-64 encoded data and some of these are signed.</cref></t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                              [
                               258, / CoAP Content ID for CoSWID    /

                               / This is byte-string wrapped        /
                               / payload CoSWID. It gives the TEE   /
                               / software name, the version and     /
                               / the name of the file it is in.     /
                               / {0: "3a24",                        /
                               /  12: 1,                            /
                               /   1: "Acme TEE OS",                /
                               /  13: "3.1.4",                      /
                               /   2: [{31: "Acme TEE OS", 33: 1},  /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                             /
                               /       17: {                        /
                               /           24: "acme_tee_3.exe"     /
                               /       }                            /
                               /    }                               /
                               /  }                                 /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         270: "Acme OS",
    / swversion /      271: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest either come        /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for an IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896',
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    273: [
                                   [
                                     258, / CoAP Content ID         /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8xQk",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-submodules">
          <name>JSON-encoded Token with Submodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token. The payload is the    /
/ attestation hardware block above. The main structure   /
/ visible is that of the COSE_Sign1.                     /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A60A4CD79B964DDD5471C1393C88881901005001
      98F50A4FF6C05861C8860D13A638EA19010219FA
      F2190106F5190107031901048263332E3101',        / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="cbor-encoded-detached-eat-bundle">
          <name>CBOR-encoded Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag. /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE.                   /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block.                                        /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "Audio Subsystem" and "Graphics Subsystem".
The JWT at the start of the bundle has detached signature submodules with hashes that cover these two Claims-Sets.
The JWT itself is protected using HMAC with a key of "xxxxxx".</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
    [
        "JWT",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlYXRfbm9uY2UiOiJ5dT\
c2Tk44SXVWNmUiLCJzdWJtb2RzIjp7IkF1ZGlvIFN1YnN5c3RlbSI6WyJESUdFU1QiLF\
siU0hBLTI1NiIsIkZSRW4yVlR3aTk5cWNNRVFzYmxtTVFnM2I1b2ZYUG5OM1BJYW5CME\
5RT3MiXV0sIkdyYXBoaWNzIFN1YnN5c3RlbSI6WyJESUdFU1QiLFsiU0hBLTI1NiIsIk\
52M3NqUVU3Q1Z0RFRka0RTUlhWcFZDNUNMVFBCWmVQWWhTLUhoVlZWMXMiXV19fQ.FYs\
7R-TKhgAk85NyCOPQlbtGGjFM_3chnhBEOuM6qCo"
    ],
    {
        "Audio Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJsSStJWU5FNlJ\
qNk8iLAogICAgInVlaWQiOiAiQWROSlU0b1lYdFVwQStIeDNqQTcvRFEiCiAgICAib2V\
taWQiOiAiaVVXdCIsCiAgICAib2VtYm9vdCI6IHRydWUsIAogICAgInN3bmFtZSI6ICJ\
BdWRpbyBQcm9jZXNzb3IgT1MiCn0K",
        "Graphics Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJZWStJWU5F\
NlJqNk8iLAogICAgInVlaWQiOiAiQWVUTUlRQ1NVMnhWQmtVdGlndHU3bGUiCiAgICAi\
b2VtaWQiOiA3NTAwMCwKICAgICJvZW1ib290IjogdHJ1ZSwgCiAgICAic3duYW1lIjog\
IkdyYXBoaWNzIE9TIgp9Cg"
    }
]

]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC9562"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common computing platforms.
In particular, hardware randomness sources where introduced in CPUs between 2010 and 2015.
Operating systems and cryptographic libraries make use of this hardware.
Consequently, there is little need for protocols to construct random numbers from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; Same as JC<> but with unwound generic nesting as it seems to cause
; problems. Perhaps this is the nesting problem described in RFC 
; 8610.
JC-NEST-SAFE<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-27">
        <name>From draft-ietf-rats-eat-27</name>
        <ul spacing="normal">
          <li>
            <t>Random sources clarifications in Appendix B</t>
          </li>
          <li>
            <t>Minor wording fixes</t>
          </li>
          <li>
            <t>Add certification examples for DLOAs</t>
          </li>
          <li>
            <t>Clarify nonce source in section 1.3</t>
          </li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <?line 3598?>

<t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y963rb2JUg+h9PgaPK95WUkNTVLtvdVYlKUjmq9q0tOdU9
NXWqQRIkEVMEGwAtK4r7WeZZ5slm3ffaACg7yfT5dfx1p0RgY1/XXvfLcDhM
PjxLj5OkKZpl/iy9XuTpxQp+3KWnTZPXTdYU5Sq9Lt/nq3T34vR6L8nG4yqH
j+BHMi0nq+wGvptW2awZFnkzG1ZZUw/zrBkuM+wgmWTNs7RupkkyKVd1vqo3
9bO0qTZ5UjdVnt08Sy8vrn9IinVFj+vm6ODg6cFRksHLZ+lVPtlUMJ3kdv4s
fXt6fZW8v4XuivmqWM3TzM1xMi6rJFkXz5I0bcrJs/Tru7z+mn9M83WzgCcn
+LsuKxh4VocW9d1N/GBS3qyzSeNabMbh2arER9Vskk/r5g63jZvBv2zTLMrq
WTJMixX092KUvtispuNlNs3hE96rF9mmyleTPHpVVvOwWDyGsrpLX7w4g1f5
TVYsn6XL+fIPtTRo6P0IpqQjPR+lL7PV9C67sXGeF1UxXWSVe0GjvMynBRzN
+/Td1Wnofi6tRzfc+g9zfO6H+HGUvv76vFyV88UmrObHvMpv7uI3NMy/brIl
fH2TXueTxapclvMir9PL1WSE+wknkMNeHn3zNP0hq1ZwduVmvkjfltkU9x/W
+My/oDOZ4qLeHZ6k37y4ogebVVNBu3erosmn6b8ARExLXOZ6Ua6g7e9OTtLD
o0dH6fHj48MnT8Na/1xOabJ/+M+mGP2nzNMv9WyU/pQtl9kkrPMsq5buIS3x
LYz6R5jFNL0qZ80tQOxAFygjTeCrP1T5dIGtamlEI+FtaKpivGkYXniUP+ar
9+n3RfV+US7/osP8UGWb1aKc5VV6dXkNT/UKdl7IqAvoZTSWXv5QF81oZi1H
AG462vWivMnq9IeyruEO6XCn1U36orjBPQ1dNtR0NOOmf8gq3S/u6WUx3+TL
9HvYH7iQeVXW7tVkkcG7t/jfCjZhZeAOkJYvAd5s+9Kfyup9HUa9mVS/Q6Ty
h1qbjiaZ9fwmgw2cABzDVKvb4s/vw5hZsyhgZd9XON9qGvY3W60ACq/rCW7G
qpg/uOgFtR411rqz7jfZZpmeVeXtMr9LklVZ3cDufMgRB7394eybR4eP5M8n
T0+ePmMcxa8ALkOrp9rq6JH9efxUGzx5fHgA306nS/n9jb06fvrksfz59MB6
fAoIVP88fPyIv10vNzU/O3l88kRenzw6/EZbHj89tj+PT54l8PdPz6+enOBD
wKJZNccbu7NomnX9bH8/z6pmMSxWs3K0mmejm2K5v16s96fl7WoJt3gEP34/
K5b5t5OyrKbD23n95GSHu2Ja89Prty/O0+cXr88vri/P0qt/v7q+eJkePn1y
MkhfPT8dXV2/Oh8dHBw//vVwdDA6+JUmQx0olsW/h3x+r4gIZMv0eV7Wa/iR
LYeXqyZfLos5IdtT/M9dugs979GHU8CBgIAODk+GB98MD57gei9PX52Ozn66
Hp0ts+IGEAE9mNw29vLH9ss/u5dnr68uRqfLeQk4ehE+L+scm1wvAOc9f/Nm
dPny4jLeVN3TNZCmbDk6nq/XI1jW/jSv3zfl+qacbuBe7V+t80kxKya01tbP
87wBmK1HWb3++Pvav7mcfvvN0VO/88fVFPZplVdMOd/AScKPelGs0zdV+ed8
0vwTY23oYZlGw6TPAR+v07MSLuurvLmF+5rC3YTm1U0B+1//U/pqczPOK0DG
gzSbTqu8rolUQ6NimgNvoV1tO8pj2KP4hJ7i9p2/eH3av2vzZTnOAL6zZgYX
kDbudj1E/ArD7W/WCI71PvTzaP/waP/5m7Nfz4t5ARv9Igf+oXo9O12vq/JD
tvz1A0LaejrzmyVtU26clrNUm7tJvio/5LhqnO2jBKf75uLVljPOV6MiW2U0
T/ix/yZfQY9L2ZXROpvnfvw3VfEBxkC2LK/WVVHnssPpLoyxB0ToPzfIZykQ
Io4ZNtm8hhuc4PWMcdLTR48VTZwgTlKMcfyUbjzQnmYxze6A+8sm75/5iegr
5LrgXe/iYG23xftijSwGHwT82tcvf+UvR27jZgAydDsuLy4uRk8OjkaHp29h
019fjg4PRoeHB0/38c3V9fkItvbJ6MnJ0fE3T08IOR2fjeC2v0BeD/9+e3E2
nOfAaPBGDk/fXA7hm+PDgyNq//rd5ej5BmAwWhU9WRZIFWCr0newvXDEFx8B
dqZA3oG3gO1NLwVycdcv3l3uDdLX1TxbFX8RtLO862v5mloi5J8h87i6Sy/P
092zy3OPgU43c2B6EXC+6d1S4G9XUyScoyLPc9pUBe1pdrOPD4fWJrTev83H
gIwnmxtoWe83yGcAUqz3801BIC478qIs32/W0ZbghgNYzQvg0vjSn9ItJamg
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
7iENbEMA+uLaR7jjHwRn14evrvtn0dXl0ygdfE4uPrWur5rni6evrz/v94/6
+7PXFz+dfxz2L58+O6Ynnz79+vTNL87h4Olkeff0zeHR/v7n/f2bi/f9N6MD
+H54NXv524tPh/vw90/p5cnF6cXl4IV3ddUe1d9+PDsPV19On44HwdtPF784
r6PWz5+mP9d/ar9ZPF38dDoYfOw+/3R5tXr35nX05u721fH7oD57/tNJ8HNv
8uILTHWezfaj+subxbPT317d1t/dzn9x6mFnePN8+mk9WsW/9V8ftLws/Nhf
dU6GZ2+DX2+fT78cr399OrmNW16c/aB27oPeuRfJfP3FlQPYuPHqeXnj10Op
mvO8sOPPL89zGx7fPW/GP/eTV8nzn956b5IXg+fXw6cj/H588duxd5I87zXg
pcUoeEkvvbg4ao6fvv1t/Ivz9O3dcXKbRJdHzeNP6ZeTTxdfTn4bNV8dvGtB
N9P4GXQ7a3vDp7fZ8ezIez84Do+T4+x4fuK9S/Bv6PoX5+rTbWt+9PL6xeL5
xfr1zzcvX//2k/f05afru+e/+jeXP195LS/8+afst9s3O/bVzTnPU10ZfWfz
aUNAWk9GlIRcfq8wAcLTuhjz2BIn2U20ofdwcHDWNyWmKpJ/UGWtUkdsrLJs
dJayxTbGaVd3dtFnem7i/7hmw1o7T2Jh0SEXLiOqI6SI3HhwK7xN8W1O6O26
XndXgOL6Ud9ren746L40D49LJYYyZQj4+u3+hvFsgeWA5+UOxM8IJhA2+63B
Qae33wtbBwcH6Eo/QFf6AbrSe72m12y2m00lr/S6R21ocHQUDsikNUCT1oEX
9MOge9in132vd9SX1498+ik8atO/nWZA/7a6fghMp38YwPLN4q1IWZkdzGrf
P2oftjroZXUU9v3moNtvee3OfrsTBkeDVnv/sNNWvHOv3w4obL/tdTphd+B7
/aOj/W6r3W+H/f12u3MIzXsdxSr3m8A5d4Ke57eCfqc3aHW67dA/gOah5x/6
PX8Q+r4XKgVCf98Pgk638+iePTdL0UUtca8/uHuuHTuLmFdTuopUTpIdC3OK
lRMp1Yw9iW9LwYxMsSY2dBNQN6RAvHSXT6uUb05sKTN6UwwsnKoKWCNTI9jK
BmRyRzEbrOzDXL2OKbQ1HPY8ieOx3B2pcSfdqiiZBtdywxKJyBsrgm/0p7q4
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
JiddxrW6UvxAGyIctStPnP8L41/HVqF5AgA=

-->

</rfc>
