<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="June" day="23"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string and every bit in the byte string contributes to entropy.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a very simple free-form text claim for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the SW for the entity is needed, the manifests claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, {#swevidence}, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption.
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT.
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-18.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="14" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-18"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9aXPbWJYg+h2/AqHMiLS6SMpavPZk1iglZZaybMtjye3u
V1ORAZEQhTIJsAFQMsvj+u3v7PdcAJTd3TMRL+KNo6JSBHD3c8++jMfjpGmz
cvZ7tqjK/GXa1us8KVY1/dW0B48fv3h8kEyz9mXatLMkmVXTMlvCh7M6u2nH
Rd7ejOusbcZ51o4XWZs3bZLcz1+m746vLtMPVf2xKOfpr3W1XiXfpdOqbPKy
WTcv0x82efMDPGrW18uiaYqqbDcr6Pf87OqXZFW8TNK0rab6Hf2Y5av2Fp4c
4e+mqts6v2nCF81mGT+YVstVNm3dF+vr8Kys8FF9M81nTbtZ5PpZW7T44+o2
T89K+LFJj1tcVtbCHNOr6mNepo/Ojq92k+z6us7vXqbwI8nqPIPJl21el3mb
fLyH/SrmJS4+c82n11UNi57BRr1MDx7vH473HyfZur2t6pfJOC1KmP6rSfpq
Xc6uF9kshxnydr/K1nVeTvPoVVXDRl/m03WN04QZV/UmffXqBF7ly6xYvEwX
88V/b+SDlt5PYAd0pF8n6Ws4+022tHF+LepidpvV7gWN8j/W2QJaLtOrfHpb
VotqXuQNrHc6wX2Fk8hhT588e/YkfV3V+W21bvL0tC7ucJpTGBzmmZXpaZHP
K9z1fA678TI9yRbFTVWXRUbHtS7bGr58f3kMP1e3BJA7f9hPnz95nj59sp8+
A3DcCYtb8hT/+7+3xeTfZX5+eb9N0osfTquymt+uw07+ltf5chO/+fYlHjx7
kf6S1SWcY7We36bvqmxmS3QvaD0z3ND3+0fps1eX0QLLos1n6Z8BOmbVMqz1
D0dH6f7Bk4P08Onh/vMXYaV/q2Y02f5Sk7KqlwBbdznemHe/nBzs77+QP5/t
P7E/n+w/CX8+lT+fvziyD2DY8MGz8Kd98PzxY222f2A97D870j8PX2gPz5/u
27fPjrSzwxfPQzMb7QUgmJcJ/P3h18vn1Bfc9aye42bv3Lbtqnm5t5dndXs7
LsqbalLOs8myWOytbld7s+q+XMABTODHH2+KRf7jtKrq2fh+3jw/2uGu+DZ/
uHj36jT99ezi9Ozq/CS9/LfLq7PX6f6L50ej9M2vx5PLqzenk8ePD5/+vj95
PHn8O02GOtDLiX+PGVDe0F3OFumvedWs4Ee2GOPNXyyKOd3RY/zPJn0EPe9S
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
uLebY8b9UtLdX2x31fxsLavqlr0oYmvjmK28HTsLvW4AFm0gN+A4bitbx58c
Yi0iNTXW/D1KoztLMM/xhj23M6qvsNZ8h5kwqZVlif29VDzrxGoXSc/wbl8T
KfviUSBOng915QYADzvd+525QzJ569IaSIuQDaZyghs0zVvG8W5vb7OLf5i/
972O0NYBOn8+9/pBP9yD+7OZbZkDww538WdGZ+bdeLCdXZ4dn+fV+yRdv08z
cnsuejhBBxlm0fX9UgcALJ1uC31/Khoho1LRyN95JeaHOMrzb0ZbdL13/oAk
YKghk7mHtYdVFsjiQ9srGVX6+ND2RXq6qxubv5tiadfQgocCFgg8VFAla66y
yQOBatBqDf9kmPqdQGXZCeYTHnqoRb7iwUApfIgyGA9tX2RI/ocAFVcab86T
8QMhKmwDRLX/ndHUP8mSmZ8ib/bQ9nlerrMrX2l+/jmmjn52hKjfzf+ZSBzS
vLrupa+p8gHp2SifP+tJXd0rPm6I+jQXom9UsOSXu1kvN+KV8z1lqo+lBqck
QY+nRvR2xzdpv6+ougOXD0J9f1Pm4NQZNf1isTp07eQasMbtymZP5tzPbuVa
TOAuOkoqFVxwBTMuqFrmRbycCjVVUZ1pZkE6TZ4Kf6qF17/H+nFWFyrs7BR5
WLjGy3TBARdc1k5nOLmMuQL3leivccurKrVydWKMuriJKf/3CqduFKU3KzlR
rsnn1d6sNhlqzr536gdkNfUEdOPUTWFbGoLrDUhIkTv1HH+uam5GZzXgCt+T
KhaVhLUPH6eDb581Bl99N//lQnnXGmw9bTp9YrWDzmvU4ZEjt1UF1qbjC4QZ
elyr0Plp8zS+StgBH/5I3r4zL7BitzwH/vdvH4Kjj+/Dm9PLy9uzH1+c9H60
87vBTeFPK7l0+EK4c/wojyuFTTfPxJeihnsGa803KDTVk3LNIgVsX0bMfwdO
dg57WYdpbchDr1ZAB+Yv/uWnvO85XW+1qr0h2waZIs43Er6z7YDh8OZnDdq7
1x96L3PbrLv8tLzLvYuvvioedfVJ5w7a8SrW1gl/gz/FsBALYwUQ8+U1uwLU
XAGkpu58o+XSP03TikiCXLeuRd6etxvSUDtnI8oJO476Jwy+hVNHt/TCKdfC
4/b55cnLy9F5dPHuSZQefUzefuhcXrTeLJ+8uvx4ODodHV69evvtm/fj0bsn
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
uq0VUo0CAA==

-->

</rfc>
