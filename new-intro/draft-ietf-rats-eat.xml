<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="September" day="28"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message or token made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/>.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used and other for a particular token and use case.</t>
      <t>The entity side of an EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Other may rely solely on simple SW defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of an EAT. Many of the claims defined in this document are claims about an entity, which is equivalent to an attesting environment as defined in <xref target="RATS.Architecture"/>. An entity may be the whole device, a subsystem, a subsystem of a subsystem, etc.
Correspondingly, the EAT format allows claims to be organized using mechanisms like submodules and nested EATs (see <xref target="submods"/>).
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
In the EAT context, "entity" never refers to a person or organization. The hardware and software that implement a server or service used by a web site may be an entity, but the organization that runs the web site is not an entity nor is the web site itself. An entity is an implementation in hardware, software or both.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims are defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific token formats for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Full tokens with security envelopes may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization format or security envelope.
That is left for a follow-on document.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EAT tokens for specific use cases in follow-on documents.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>The EAT format follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities. An EAT MUST always contains a Claims-Set.</t>
      <t>Authenticity and integrity protection MUST be provided for EATs. This document relies on CWT or JWT for this purpose.
Extensions to this specification MAY use other methods of protection.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines a new top-level message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$$EAT-CBOR-Tagged-Token</tt>, <tt>$$EAT-CBOR-Untagged-Token</tt> and <tt>$$EAT-JSON-Token-Formats</tt> sockets, enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets MUST be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations MUST be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>All claims in an EAT MUST use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for claim keys.
JSON-encoded tokens MUST use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but MUST NOT be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce MUST have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the "oemid" claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel-hardware-model-claim">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname-software-name-claim">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="secboot-secure-boot-claim">
          <name>secboot (Secure Boot) Claim</name>
          <t>A "secboot" claim with value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
"oemid" claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an attesting environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded detached EAT bundle, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
                  </dd>
                  <dt>"BUNDLE":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded detached EAT bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.
A detached Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set of the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
              <t>The encoding type of the detached claims set is part of the carrying protocol and varies from protocol to protocol.
For example, a detached EAT bundle uses mechanisms defined in this document.
Other use cases may use a content/media type.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, a hash algorithm identifier and a byte string containing the digest.</t>
              <t>The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>.
Either the integer or string identifier may be used.
The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
              <t>When decoding a CBOR format token, the detached digest type is distinguished from the other types by it being an array.
In CBOR encoded tokens none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "BUNDLE", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like an EAT nonce (<xref target="nonce"/>).</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in evidence or attestation results.
When these claims appear in evidence, they SHOULD not be passed through the verifier into attestation results.</t>
        <section anchor="iat-timestamp-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EAT's may be used in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a detached EAT bundle.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the detached EAT bundle.
No mixing of encoding formats is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a verifier must implement.
The attester will select one of them.
Since there is no negotiation, the verifier should implement all algorithms listed in the profile.
If detached submodule digests are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations <xref target="sec-con-freshness"/> requires a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver MUST accept ES256, ES384 and ES512; sender MUST send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID MUST be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce MUST be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver MUST not error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and MUST use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition MUST have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the nonce claim for token replay protection (also sometimes known as token "freshness"). The nonce claim is based on a value that is usually derived remotely (outside of the entity). This claim can be used to extract and convey personally-identifying information either inadvertently or by intention. For instance, an implementor may choose a nonce that is equivalent to a username associated with the device (e.g., account login). If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token. In order to avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modifie detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "eat_nonce"</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: EAT Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Name</li>
            <li>Claim Description: The name of the software running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Version</li>
            <li>Claim Description: The version of software running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Manifests</li>
            <li>Claim Description: Manifests describing the software installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Measurements</li>
            <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "measurements"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Measurement Results</li>
            <li>Claim Description: The results of comparing software measurements to reference values</li>
            <li>JWT Claim Name: "measres"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Count</li>
            <li>Claim Description: The number times the entity or submodule has been booted</li>
            <li>JWT Claim Name: "bootcount"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): uint</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8259" target="https://www.rfc-editor.org/info/rfc8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052" target="https://www.rfc-editor.org/info/rfc9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose/">
          <front>
            <title>COSE Algorithms</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-22.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest" target="https://www.ietf.org/archive/id/draft-ietf-suit-manifest-19.txt">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <date day="9" month="August" year="2022"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-19"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-22.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-04.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
        <reference anchor="UCCS" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-03.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="11" month="July" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'948f8860d13a463e8e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric version /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / secboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /       258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /     259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / hwversion /   260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /       258: 61234, / PEN Format OEM ID / 
            / hwversion /   260: ["4.0", 1] / Multipartnumeric version /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'948f8860d13a463e',
           / secboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / oemid /          258: h'8945ad', / IEEE CID based /
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /        266: {
                            "OS" : {
        / secboot /            262: true,
        / dbgstat /            263: 2, / disabled-since-boot /
        / measurements         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "submods": {
        "Android App Foo" :  {
            "swname": "Foo.app"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "swname": "Android"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  /
/ Note that 602, the tag identifying a detached EAT bundle is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardize a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain reference values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-14">
        <name>From draft-ietf-rats-eat-14</name>
        <ul spacing="normal">
          <li>Reference to SUIT manifest</li>
          <li>Clarifications about manifest extensibility</li>
          <li>Removed security level claim</li>
          <li>Changed capitalization throughout the document for various terms</li>
          <li>Eliminated use of DEB acronym for detached EAT bundles</li>
          <li>Replicate claim optionality text from CWT and JWT</li>
          <li>Several edits and clarifications for freshness and nonces</li>
          <li>Correct eat_nonce registration for JSON-encoded tokens</li>
          <li>Add security considerations for freshness</li>
          <li>Change/clarify the input to digest algorithm for detached claims sets</li>
          <li>Removed EAN-13 references and IANA registration</li>
          <li>Add section on Claim Trustworthiness to Security Considerations</li>
          <li>Entirely remove section 4.4 that discussed including keys in claims</li>
          <li>Largely rewrite the first paragraphs in section 1, the introduction</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9a3PbWHYo+h2/AiV3VUszJGXJstt2TvdELal71PHrWHI6
OXO7HIiEKIxJgAFAyxyP89vPeu+1AVDWZJKqc6viSqZFYGM/117vx3g8Tpo2
K2fvs0VV5s/Ttl7nSbGq6a+mPXz48NnDw2Satc/Tpp0lyayaltkSGs7q7Lod
F3l7Pa6zthnnWTteZG3etElyO3+evj2+vEh/reoPRTlPf66r9Sp5kE6rssnL
Zt08T7/d5M238KhZXy2Lpimqst2soN/zs8ufklXxPEnTtppqO/oxy1ftDTw5
wt9NVbd1ft2EFs1mGT+YVstVNm1di/VVeFZW+Ki+nuazpt0scm3WFi3+uLzJ
07MSfmzS4xaXlbUwx/Sy+pCX6e7Z8eVekl1d1fnH5yn8SLI6z2DyZZvXZd4m
H25hv4p5iYvP3OfTq6qGRc9go56nhw8PHo0PHibZur2p6ufJOC1KmP6LSfpi
Xc6uFtkshxnydr/I1nVeTvPoVVXDRl/k03WN04QZV/UmffHiBF7ly6xYPE8X
88U/NtKgpfcT2AEd6edJ+hLOfpMtbZyfi7qY3WS1e0Gj/O91toAvl+llPr0p
q0U1L/IG1jud4L7CSeSwp4+/++5x+rKq85tq3eTpaV18xGlOYXCYZ1amp0U+
r3DX8znsxvP0JFsU11VdFhkd17psa2j57uIYfq5uCCB3fn+QPn38NH3y+CD9
DsBxJyxuyVP8x39vi8m/y/z88n6ZpK+/Pa3Kan6zDjv5S17ny0385v5LPPzu
WfpTVpdwjtV6fpO+rbKZLdG9oPXMcEPfHRyl3724iBZYFm0+S/8JoGNWLcNa
f390lB4cPj5MHz15dPD0WVjpn6sZTba/1ASuVFsXV+uWIYjX+Me8/JD+WNQf
bqrFX3R9P9XZuryprvM6vTi/hKcKv70XMuoN9DK5kl7+sSnaybW1nAAA6miX
N9Uya9KfqqYBKNfhjutl+qJY4kpDly01nVxz03/Maj0w7ullMV/ni/THbLGA
K5PXVeNeTW8yePcW/1vPmqq0CwBgkC8AGNKL6rq9hZtIeKdxgDKtf4+Y6h8b
bTqZZtbzmww2cPohfQdTrW+LP38IY2btTQEr+7HG+dazsL9ZWQJsXDZT3Iyy
mN+56BtqPWmtdW/db7L1Ij2pq9tFvkmSsqqXsDsfc0SCb386OTw4eCZ/fvf4
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
JePHnvd/ARrvmeytZAIA

-->

</rfc>
