<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="July" day="08"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC9052"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>The hardware and software that implement a server or service like a web site may be an entity, but the web site itself or the organization that runs the web site are not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where otherwise explicitly stated.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Evidence.
Evidence is a claims set describing various characteristics of an entity.
Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Evidence.
The Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.</t>
        <t>EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Evidence.</t>
          <t>This specification does not establish any normative rules for the Verifier to follow.
They are a matter of configured policy.
It is up to each Relying Party to understand the processing rules of each Verifier to know how to interpret claims in Attestation Results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of Claims generated by an Attester to be appraised by a Verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an Attester's various capabilities such as Claims collection and Evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
Any new format that plugs into this socket MUST be defined in a IETF standards track document.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for Claim Keys.
JSON-encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a very simple free-form text claim for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the SW for the entity is needed, the manifests claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-count-claim-boot-count">
          <name>The Boot Count Claim (boot-count)</name>
          <t>This claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, Verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, <xref target="swevidence"/>, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Evidence or Attestation Results.
When these claims appear in Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are not a substitute for the nonce described in <xref target="nonce"/> and do not guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
floating-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="claims-that-include-keys">
        <name>Claims That Include Keys</name>
        <t>This document defines no claims that contain cryptographic keys.
When claims are defined that include cryptographic keys, they SHOULD use COSE_Key <xref target="RFC9052"/> in CBOR-encoded tokens or JSON Web Key <xref target="RFC7517"/> in JSON-encoded tokens.</t>
        <t><xref target="RFC7800"/> defines a proof-of-possion/confirmation claim named "cnf" that can hold a cryptographic key for JWTs.
<xref target="RFC8747"/> does the same for CWTs with claim key 8.
These particular claims are defined for authentication and authorization.
Their semantics don't translate to attestation and they SHOULD NOT be used in an EAT.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The profile claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A profile should specify whether or not a Detached EAT Bundle <xref target="DEB"/> can be sent.
A profile should specify that a receiver be able to accept a Detached EAT Bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>A nonce is always required by EAT.</t>
          <t>A profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>By default only the nonce claim is required by EAT.
A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the nonce be a certain length or the location claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The manifests and software evidence claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-18.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="14" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-18"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines a message format for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-13">
        <name>From draft-ietf-rats-eat-13</name>
        <ul spacing="normal">
          <li>UEID length and type clarifications</li>
          <li>Address comments on SUEIDs</li>
          <li>"Attestation Evidence" -&gt; "Evidence"</li>
          <li>Wording clarification for "entity"</li>
          <li>Wording clarifications for DLOAs claim</li>
          <li>CDDL type for CoAP Content Format</li>
          <li>Move Claim Characteristics to an Appendix</li>
          <li>Rename odometer to boot-count</li>
          <li>Correct/clarify section on JSON/CBOR labels (Carl's comment)</li>
          <li>Wording clarifications in Appendix C (Carl's comment)</li>
          <li>xxx encoded -&gt; xxx-encoded</li>
          <li>Clarifications for cti and jti claims</li>
          <li>The 8th bit in a 7 bit text string doesn't contribute to entro</li>
          <li>Improve SW Name Claim description</li>
          <li>Update commentary on UUID vs UEID</li>
          <li>Remove most of section 8.3 on CBOR Serialization, redundant with profiles</li>
          <li>The 8th bit in a 7 bit text string doesn't contribute to entropy</li>
          <li>Improve SW Name description</li>
          <li>Don't capitalize composite device</li>
          <li>Reword encoding exception sentence</li>
          <li>Wording improvements in section 1 related to Attestation Results</li>
          <li>Lots of rewording to make profile issues more prescriptive</li>
          <li>Sync terminology definitions with RATS Architecture, include Endorsement definition</li>
          <li>Plug-ins to the EAT format socket must be an IETF standard</li>
          <li>Link to RFC 9052 instead of 8152</li>
          <li>Improve introduction to profiles</li>
          <li>Improve CDDL for OID in JSON</li>
          <li>Move privacy and security considerations to before IANA section</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9aXPbWJYg+h2/AiFXRFpdJLVYXnsya5SSMktZtuWx5M7u
Vy8jAyIhCmUSYAOgZJbb/dvn7PdcAJTd27dxVFSKAO5+7tmX8XicNG1Wzn7P
FlWZv0rbep0nxaqmv5r2cH//5f5hMs3aV2nTzpJkVk3LbAkfzursph0XeXsz
rrO2GedZO15kbd60SXI/f5W+P766TH+t6o9FOU9/rqv1KnmUTquyyctm3bxK
v9vkzXfwqFlfL4umKaqy3ayg3/Ozq5+SVfEqSdO2mup39GOWr9pbeHKEv5uq
buv8pglfNJtl/GBaLVfZtHVfrK/Ds7LCR/XNNJ817WaR62dt0eKPq9s8PSvh
xyY9bnFZWQtzTK+qj3mZPj47vtpNsuvrOr97lcKPJKvzDCZftnld5m3y8R72
q5iXuPjMNZ9eVzUsegYb9So93D94Mj7YT7J1e1vVr5JxWpQw/deT9PW6nF0v
slkOM+Ttfp2t67yc5tGrqoaNvsyn6xqnCTOu6k36+vUJvMqXWbF4lS7mi//d
yActvZ/ADuhIP0/SN3D2m2xp4/xc1MXsNqvdCxrl/6yzBbRcplf59LasFtW8
yBtY73SC+wonkcOePn3+/Gn6pqrz22rd5OlpXdzhNKcwOMwzK9PTIp9XuOv5
HHbjVXqSLYqbqi6LjI5rXbY1fPnh8hh+rm4JIHf+eJC+ePoiffb0IH0O4LgT
FrfkKf7vf22Lyb/K/PzyfpmkF9+dVmU1v12Hnfwlr/PlJn7z7Us8fP4y/Smr
SzjHaj2/Td9X2cyW6F7Qema4oR8OjtLnry+jBZZFm8/SvwB0zKplWOsfj47S
g8Onh+mTZ08OXrwMK/1bNaPJ9pealFW9BNi6y/HGvP/p5PDg4KX8+fzgqf35
9OBp+POZ/Pni5ZF9AMOGD56HP+2DF/v72uzg0Ho4eH6kfz55qT28eHZg3z4/
0s6evHyhzV7u22gvAcG8SuDvX3++fEF9wV3P6jlu9s5t266aV3t7eVa3t+Oi
vKkm5TybLIvF3up2tTer7ssFHMAEfvzppljk30+rqp6N7+fNi6Md7opv868X
71+fpj+fXZyeXZ2fpJf/cnl19iY9ePniaJS+/fl4cnn19nSyv//k2e8Hk/3J
/u80GepALyf+PWZAeUt3OVukP+dVs4If2WKMN3+xKOZ0R4/xP5v0MfS8Sw3t
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
c5iW2b6gTwQyfaf4EreH3+IAhFQ6/TvoVq05C4jiqEHWObzL5k8R60BF04b8
VZ0+5z1XixbBRFP10IBqu6oyHzd0fW9TRNx4Zvk0U/+4F/D42kWHoMwDCG/d
su8WH/fwphzsP7Qrz8OuGBX/wx8Caz0WWXEPyC3lHWCkNF5k1yATfv8D79+Y
HCH30r+mh//gn/y2iykM7SdQ9pP/lbaw9HRCE3h8sD+ZPD/ahTvkHr6YTJ4d
7f6QCClHV0eexGlwbSGzIYmLUehwhzc0wuBNTRyiIfaToQ9UF0ja+WoKN6Rr
AreHg1YOZtsjszyz7TFWQ9o+pOdjn2lvHlcPgQ8l3SfgBSQWzcxZj9d5MUNK
gZYpctYlE5WjcVkUpxEFRcqyOdolWVbXKABLaoUMEFDLYiRqpLL0RyDBbQWy
Jar6so8cMGPBJvksCW76FHpB2nnSv6k2XXe6zp3AHwU5eYQZmqF77oi9pUha
hCNvWCeZmH5ATAHZx6JkZ5/IRocYheTowg1AuJOwIUwduIYSw/Fhx3EDA+pa
69YvWFDnLGAYe8+shrhku32tm4QJ3Zp5mUnqelTRIm4dwnHJ6s9hL6MEbRrM
UmTi5V8KE4p6DVjYTBQbFDAThLCou0S6mwCLkcJZpZqnBjVUpOcasVcb9MOx
muSZbb0hT7hmnpVTOiC2g27CcNHa6Sb614lthFrQeePV+ZdNqsWN2MTE04a3
meZvJ2CX/D4j/8W8jFThRa7hq4InloyEcbiEMjCgkC3u+H3HOG+TrtKPeb4y
7ZMFTyfqnRMteZfpskQpq5F9IF6C4ECjDPHiyrfxp+ZeyjeZnAZgPFQMIJQz
w0GBcBgWMM/F5YidakM0qDXH3slzH/U9N4H9I8xMpFXddZWQEWFwApAL3chr
RHMsl7DfPBmipX2HxAcQCTA0GgQcMg+w9Tnn69NKaBVyowvJq3inNg0hhsKM
gGDAKuk4IOUmJ4uaBhjB0klVQJOWlkj8LQdQesykQ4y3h5S8gbDBJS0SNavE
yCzyco6OpX1+hjuPFH6UIsTG9SGRndBM1jtNmNfvphnoMlLCYglmYRP/kydy
cMhGTBL7Ke58xFw0bU+bErR8iN2KO5KO8SDQiUn5yRsOir8mlTJeGUFg7JLJ
AI1zGZ+SY6LtXJMGyzzOXzgcUg/pBAHtu8vPX4wix7r5Gm4rYD+1shmHaVyW
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
smIE0v8PzrxCO6mXAgA=

-->

</rfc>
