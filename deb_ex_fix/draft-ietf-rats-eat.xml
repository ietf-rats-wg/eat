<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.21 (Ruby 3.3.6) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.25.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Mediatek USA</organization>
      <address>
        <email>giridhar.mandyam@gmail.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2025" month="January" day="18"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <?line 175?>

<t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <?line 185?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>
          <t>Make and model of manufactured consumer device</t>
        </li>
        <li>
          <t>Make and model of a chip or processor, particularly for a security-oriented chip</t>
        </li>
        <li>
          <t>Identification and measurement of the software running on a device</t>
        </li>
        <li>
          <t>Configuration and state of a device</t>
        </li>
        <li>
          <t>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</t>
        </li>
        <li>
          <t>Formal certifications received</t>
        </li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like Trusted Platform Modules or Secure Elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <t>Following is a very simple example.
It is JSON format for easy reading, but could also be CBOR.
Only the Claims-Set, the payload for the JWT, is shown.</t>
      <artwork><![CDATA[
{
    "eat_nonce": "MIDBNH28iioisjPy",
    "ueid":      "AgAEizrK3Q",
    "oemid":     76543, 
    "swname":    "Acme IoT OS",
    "swversion": "3.1.4"
}
]]></artwork>
      <t>This example has a nonce for freshness.
This nonce is the base64url encoding of a 12 byte random binary byte string.
The ueid is effectively a serial number uniquely identifying the device.
This ueid is the base64url encoding of a 48-bit MAC address preceded by the type byte 0x02.
The oemid identifies the manufacturer using a Private Enterprise Number <xref target="PEN"/>.
The software is identified by a simple string name and version.
It could be identified by a full manifest, but this is a minimal example.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>
            <t>A Secure Element</t>
          </li>
          <li>
            <t>A Trusted Execution Environment (TEE)</t>
          </li>
          <li>
            <t>A network card in a router</t>
          </li>
          <li>
            <t>A router, perhaps with each network card in the router a submodule</t>
          </li>
          <li>
            <t>An Internet of Things (IoT) device</t>
          </li>
          <li>
            <t>An individual process</t>
          </li>
          <li>
            <t>An app on a smartphone</t>
          </li>
          <li>
            <t>A smartphone with many submodules for its many subsystems</t>
          </li>
          <li>
            <t>A subsystem in a smartphone like the modem or the camera</t>
          </li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>
            <t>An identification and type system for claims in claims-sets</t>
          </li>
          <li>
            <t>Definitions of common attestation-oriented claims</t>
          </li>
          <li>
            <t>Claims defined in CDDL and serialized using CBOR or JSON</t>
          </li>
          <li>
            <t>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</t>
          </li>
          <li>
            <t>Nesting of claims sets and tokens to represent complex and compound devices</t>
          </li>
          <li>
            <t>A profile mechanism for specifying and identifying specific tokens for specific use cases</t>
          </li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>.
To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set either includes a received nonce or uses some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <?line -18?>

<t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they do not provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string between 8 and 64 bytes in length.
In JSON, an EAT nonce is a text string between 8 and 88 bytes in length.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries, as described in <xref target="UEIDCreateRules"/>. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="UEIDCreateRules">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The EAT consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST NOT</bcp14> change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that does not require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given product and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity; changeable MAC addresses that do not meet the permanence requirements in this document <bcp14>MUST NOT</bcp14> be used for the UEID or SUEID) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>
                <t>UEIDs types vary freely from one manufacturer to the next.</t>
              </li>
              <li>
                <t>New types of UEIDs may be defined.</t>
              </li>
              <li>
                <t>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</t>
              </li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="RFC9393"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="RFC9393"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to privileged software that allows system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GNSS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform <xref target="GP-Example"/> and those based on Common Criteria <xref target="CC-Example"/>.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="RFC9393"/>.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="RFC9393"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, and multiple
security-oriented subsystems like a TEE and a Secure Element. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>
              <t>A submodule Claims-Set</t>
            </li>
            <li>
              <t>The digest of a detached Claims-Set</t>
            </li>
            <li>
              <t>A nested token, which can be any EAT</t>
            </li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions versus CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: 
  CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: 
  Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector socket.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, does not require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
If detached Claims-Sets are modified in transit then validation can fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide metadata about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.
The "intuse" claim provides an indication to an EAT consumer about the intended usage of the token.
This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
The possible values are in the EAT Intended Use Registry defined in <xref target="int-use-registry"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = JC< text, int>
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be either CBOR or JSON-encoded and does not have to the the same as the encoding of the bundle</t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be authenticity and integrity protected</t>
        </li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> be a Claims-Set</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> use the same encoding as the bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</t>
        </li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag 602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC-NEST-SAFE<json-wrapped-claims-set,
                               cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE does not require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document does not have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="full-and-partial-profiles">
        <name>Full and Partial Profiles</name>
        <t>For a "full" profile, the receiver will be able to decode and verify every possible EAT sent when a sender and receiver both adhere to it.
For a "partial" profile, there are still some protocol options left undecided.</t>
        <t>For example, a profile that allows the use of signing algorithms by the sender that the receiver is not required to support is a partial profile.
The sender might choose a signing algorithm that some receivers do not support.</t>
        <t>Full profiles <bcp14>MUST</bcp14> be complete such that a complying receiver can decode, verify and check for freshness every EAT created by a complying sender.
Full profiles do not need to require the receiver fully handle every claim in an EAT from a complying sender.
Profile specifications may assume the receiver has access to the necessary verification keys or may go into specific detail on the means to access verification keys.</t>
        <t>The "eat_profile" claim <bcp14>MUST NOT</bcp14> be used to identify partial profiles.</t>
        <t>While fewer profiles are preferrable, sometimes several may be needed for a use case.
One approach to handling variation in devices might be to define several full profiles that are variants of each other.
It is relatively easy and inexpensive to define profiles as they do not have to be standards track and do not have to be registered anywhere.
For example, flexibility for post-quantum algorithms can be handled as follows.
First, define a full profile for a set of non-post-quantum algorithms for current use.
Then, when post-quantum algorithms are settled, define another full profile derived from the first.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT to provide an algorithm negotiation mechanism.</t>
          <t>If not, the profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "urn:ietf:rfc:rfcTBD".</t>
        <t><cref anchor="to-be-removed-1">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST NOT</bcp14> be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence. (It is assumed the receiver has access to a database of trusted verification keys which allows lookup of the verification key ID; the key format and means of distribution are beyond the scope of this profile)</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it does not understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON cannot (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>For CBOR-encoded tokens, OIDs are specified using the CDDL type name "oid" from <xref target="RFC9090"/>.
They are encoded without the tag number.
For JSON-encoded tokens, OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>
              <t>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</t>
            </li>
            <li>
              <t>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</t>
            </li>
            <li>
              <t>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC4517"/>.</t>
            </li>
          </ul>
          <t>The CDDL generic "JC&lt;&gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC&lt;&gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.
Note that the JC&lt;&gt; generic uses the CDDL ".feature" control operator defined in <xref target="RFC9165"/>.</t>
          <t>This CDDL uses, but does not define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic cannot be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = JC< text, int>

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC-NEST-SAFE<json-wrapped-claims-set,
                               cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label                = JC< "eat_nonce",    10 >
ueid-label                 = JC< "ueid",         256 >
sueids-label               = JC< "sueids",       257 >
oemid-label                = JC< "oemid",        258 >
hardware-model-label       = JC< "hwmodel",      259 >
hardware-version-label     = JC< "hwversion",    260 >
uptime-label               = JC< "uptime",       261 >
oem-boot-label             = JC< "oemboot",      262 >
debug-status-label         = JC< "dbgstat",      263 >
location-label             = JC< "location",     264 >
profile-label              = JC< "eat_profile",  265 >
submods-label              = JC< "submods",      266 >
boot-count-label           = JC< "bootcount",    267 >
boot-seed-label            = JC< "bootseed",     268 >
dloas-label                = JC< "dloas",        269 >
sw-name-label              = JC< "swname",       270 >
sw-version-label           = JC< "swversion",    271 >
manifests-label            = JC< "manifests",    272 >
measurements-label         = JC< "measurements", 273 >
measurement-results-label  = JC< "measres" ,     274 >
intended-use-label         = JC< "intuse",       275 >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: 
  CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: 
  Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens from a particular entity will be
able to know the tokens are from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>
            <t>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</t>
          </li>
          <li>
            <t>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</t>
          </li>
          <li>
            <t>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</t>
          </li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it does not say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
a claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.
The "Claim Value Type(s)" here all name CDDL definitions and are only for the CWT registry.</t>
        <t><cref anchor="to-be-removed-3">RFC editor: please see instructions in followg paragraph and remove for final publication</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Nonce</t>
          </li>
          <li>
            <t>Claim Description: Nonce</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_nonce"</t>
          </li>
          <li>
            <t>Claim Key: 10</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: UEID</t>
          </li>
          <li>
            <t>Claim Description: The Universal Entity ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "ueid"</t>
          </li>
          <li>
            <t>CWT Claim Key: 256</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: SUEIDs</t>
          </li>
          <li>
            <t>Claim Description: Semi-permanent UEIDs</t>
          </li>
          <li>
            <t>JWT Claim Name: "sueids"</t>
          </li>
          <li>
            <t>CWT Claim Key: 257</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware OEM ID</t>
          </li>
          <li>
            <t>Claim Description: Hardware OEM ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemid"</t>
          </li>
          <li>
            <t>Claim Key: 258</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or int</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Model</t>
          </li>
          <li>
            <t>Claim Description: Model identifier for hardware</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwmodel"</t>
          </li>
          <li>
            <t>Claim Key: 259</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Version</t>
          </li>
          <li>
            <t>Claim Description: Hardware Version Identifier</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwversion"</t>
          </li>
          <li>
            <t>Claim Key: 260</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: OEM Authorized Boot</t>
          </li>
          <li>
            <t>Claim Description: Indicates whether the software booted was OEM authorized</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemboot"</t>
          </li>
          <li>
            <t>Claim Key: 262</t>
          </li>
          <li>
            <t>Claim Value Type(s): bool</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Debug Status</t>
          </li>
          <li>
            <t>Claim Description: Indicates status of debug facilities</t>
          </li>
          <li>
            <t>JWT Claim Name: "dbgstat"</t>
          </li>
          <li>
            <t>Claim Key: 263</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Location</t>
          </li>
          <li>
            <t>Claim Description: The geographic location</t>
          </li>
          <li>
            <t>JWT Claim Name: "location"</t>
          </li>
          <li>
            <t>Claim Key: 264</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: EAT Profile</t>
          </li>
          <li>
            <t>Claim Description: Indicates the EAT profile followed</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_profile"</t>
          </li>
          <li>
            <t>Claim Key: 265</t>
          </li>
          <li>
            <t>Claim Value Type(s): uri or oid</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Submodules Section</t>
          </li>
          <li>
            <t>Claim Description: The section containing submodules</t>
          </li>
          <li>
            <t>JWT Claim Name: "submods"</t>
          </li>
          <li>
            <t>Claim Key: 266</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Uptime</t>
          </li>
          <li>
            <t>Claim Description: Uptime</t>
          </li>
          <li>
            <t>JWT Claim Name: "uptime"</t>
          </li>
          <li>
            <t>Claim Key: 261</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Count</t>
          </li>
          <li>
            <t>Claim Description: The number times the entity or submodule has been booted</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootcount"</t>
          </li>
          <li>
            <t>Claim Key: 267</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Seed</t>
          </li>
          <li>
            <t>Claim Description: Identifies a boot cycle</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootseed"</t>
          </li>
          <li>
            <t>Claim Key: 268</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: DLOAs</t>
          </li>
          <li>
            <t>Claim Description: Certifications received as Digital Letters of Approval</t>
          </li>
          <li>
            <t>JWT Claim Name: "dloas"</t>
          </li>
          <li>
            <t>Claim Key: 269</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Name</t>
          </li>
          <li>
            <t>Claim Description: The name of the software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swname"</t>
          </li>
          <li>
            <t>Claim Key: 270</t>
          </li>
          <li>
            <t>Claim Value Type(s): tstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Version</t>
          </li>
          <li>
            <t>Claim Description: The version of software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swversion"</t>
          </li>
          <li>
            <t>Claim Key: 271</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Manifests</t>
          </li>
          <li>
            <t>Claim Description: Manifests describing the software installed on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "manifests"</t>
          </li>
          <li>
            <t>Claim Key: 272</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Measurements</t>
          </li>
          <li>
            <t>Claim Description: Measurements of the software, memory configuration and such on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "measurements"</t>
          </li>
          <li>
            <t>Claim Key: 273</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Measurement Results</t>
          </li>
          <li>
            <t>Claim Description: The results of comparing software measurements to reference values</t>
          </li>
          <li>
            <t>JWT Claim Name: "measres"</t>
          </li>
          <li>
            <t>Claim Key: 274</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Intended Use</t>
          </li>
          <li>
            <t>Claim Description: Indicates intended use of the EAT</t>
          </li>
          <li>
            <t>JWT Claim Name: "intuse"</t>
          </li>
          <li>
            <t>Claim Key: 275</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s"ueid:" b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="int-use-registry">
        <name>Intended Use Registry</name>
        <t>IANA is requested to create a new registry titled "Entity Attestation Token (EAT) Intended Uses" in a new registry group called "Remote Attestation Procedures (RATS)."
The registry uses the "Expert Review" registration procedure <xref target="RFC8126"/>.</t>
        <t>Guidelines for experts:</t>
        <ul spacing="normal">
          <li>
            <t>Each intended use should be clearly described so a user of it can know what it means.</t>
          </li>
          <li>
            <t>Each intended use should be distinct from others that are registered.</t>
          </li>
          <li>
            <t>Point squatting is discouraged.</t>
          </li>
        </ul>
        <t>The three columns for the registry are:</t>
        <dl>
          <dt>Integer:</dt>
          <dd>
            <t>This is a unique integer used to identify the intended use in CBOR-encoded tokens.</t>
          </dd>
          <dt>Name:</dt>
          <dd>
            <t>This is unique short descriptive string that is used to identify the use in JSON-encoded tokens.</t>
          </dd>
          <dt>Description:</dt>
          <dd>
            <t>This is a text paragraph or more that sufficiently defines what the intended use means. It may also be a reference to another document.</t>
          </dd>
        </dl>
        <t>The following 5 values represent the initial content of the registry.  Note that 0 will be marked as "reserved" for the CBOR value, and the maximum CBOR value for assignment is 255.</t>
        <dl>
          <dt>1 -- Generic:</dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>2-- Registration:</dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>3 -- Provisioning:</dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
          </dd>
          <dt>4 -- Certificate Issuance:</dt>
          <dd>
            <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>5 -- Proof-of-Possession:</dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
      </section>
    </section>
  </middle>
  <back>
    <references anchor="sec-combined-references">
      <name>References</name>
      <references anchor="sec-normative-references">
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:.plus,.cat, and.det for the construction of constants;.abnf/.abnfb for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and.feature for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC4517">
          <front>
            <title>Lightweight Directory Access Protocol (LDAP): Syntaxes and Matching Rules</title>
            <author fullname="S. Legg" initials="S." role="editor" surname="Legg"/>
            <date month="June" year="2006"/>
            <abstract>
              <t>Each attribute stored in a Lightweight Directory Access Protocol (LDAP) directory, whose values may be transferred in the LDAP protocol, has a defined syntax that constrains the structure and format of its values. The comparison semantics for values of a syntax are not part of the syntax definition but are instead provided through separately defined matching rules. Matching rules specify an argument, an assertion value, which also has a defined syntax. This document defines a base set of syntaxes and matching rules for use in defining attributes for LDAP directories. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4517"/>
          <seriesInfo name="DOI" value="10.17487/RFC4517"/>
        </reference>
        <reference anchor="RFC9393">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="J. Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay"/>
            <author fullname="C. Schmidt" initials="C." surname="Schmidt"/>
            <author fullname="D. Waltermire" initials="D." surname="Waltermire"/>
            <date month="June" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles. SWID tag representations can be too large for devices with network and storage constraints. This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags. CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9393"/>
          <seriesInfo name="DOI" value="10.17487/RFC9393"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references anchor="sec-informative-references">
        <name>Informative References</name>
        <reference anchor="RFC8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <author fullname="T. Narten" initials="T." surname="Narten"/>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters. To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper. For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed. This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC9562">
          <front>
            <title>Universally Unique IDentifiers (UUIDs)</title>
            <author fullname="K. Davis" initials="K." surname="Davis"/>
            <author fullname="B. Peabody" initials="B." surname="Peabody"/>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <date month="May" year="2024"/>
            <abstract>
              <t>This specification defines UUIDs (Universally Unique IDentifiers) --
also known as GUIDs (Globally Unique IDentifiers) -- and a Uniform
Resource Name namespace for UUIDs. A UUID is 128 bits long and is
intended to guarantee uniqueness across space and time. UUIDs were
originally used in the Apollo Network Computing System (NCS), later
in the Open Software Foundation's (OSF's) Distributed Computing
Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the OSF DCE specification with the
kind permission of the OSF (now known as "The Open Group"). Information from earlier versions of the OSF DCE specification have
been incorporated into this document. This document obsoletes RFC
4122.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9562"/>
          <seriesInfo name="DOI" value="10.17487/RFC9562"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
          <seriesInfo name="ISBN" value="[&quot;9781504450195&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
          <seriesInfo name="ISBN" value="[&quot;9780738192192&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="8" month="January" year="2025"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50% while also significantly reducing memory and code size
   compared to ASN.1.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 Certificate Signing Requests, C509 COSE headers, a
   C509 TLS certificate type, and a C509 file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-12"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="3" month="November" year="2024"/>
            <abstract>
              <t>   This document defines the Unprotected CWT Claims Set (UCCS), a data
   format for representing a CBOR Web Token (CWT) Claims Set without
   protecting it by a signature, message authentication code (MAC), or
   encryption.  UCCS enables the use of CWT claims in environments where
   protection is provided by other means, such as secure communication
   channels or trusted execution environments.  This specification
   defines a CBOR tag for UCCS and describes the UCCS format, its
   encoding, and processing considerations, and discusses security
   implications of using unprotected claims sets.


   // (This editors' note will be removed by the RFC editor:) The
   // present revision (–12) contains remaining document changes based
   // on feedback from the IESG evaluation and has been submitted as
   // input to IETF 121.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-12"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>Linaro</organization>
            </author>
            <date day="3" month="November" year="2024"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-12"/>
        </reference>
        <reference anchor="CC-Example" target="https://commoncriteriaportal.org/nfs/ccpfiles/files/ppfiles/pp0117V2b_pdf.pdf">
          <front>
            <title>Secure Sub-System in System-on-Chip (3S in SoC) Protection Profile</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="GP-Example" target="https://globalplatform.org/wp-content/uploads/2021/01/GP_TEECertificationProcess_v2.0_PublicRelease.pdf">
          <front>
            <title>GlobalPlatform Technology TEE Certification Process</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
      </references>
    </references>
    <?line 2602?>

<section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t><cref anchor="to-be-removed-2">RFC Editor: When the IANA values are permanently assigned, please contact the authors so the examples can be regenerated. Regeneration is required because IANA-assigned values are inside hex and based-64 encoded data and some of these are signed.</cref></t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                              [
                               258, / CoAP Content ID for CoSWID    /

                               / This is byte-string wrapped        /
                               / payload CoSWID. It gives the TEE   /
                               / software name, the version and     /
                               / the name of the file it is in.     /
                               / {0: "3a24",                        /
                               /  12: 1,                            /
                               /   1: "Acme TEE OS",                /
                               /  13: "3.1.4",                      /
                               /   2: [{31: "Acme TEE OS", 33: 1},  /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                             /
                               /       17: {                        /
                               /           24: "acme_tee_3.exe"     /
                               /       }                            /
                               /    }                               /
                               /  }                                 /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         270: "Acme OS",
    / swversion /      271: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest either come        /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for an IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896',
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    273: [
                                   [
                                     258, / CoAP Content ID         /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8xQk",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-submodules">
          <name>JSON-encoded Token with Submodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token. The payload is the    /
/ attestation hardware block above. The main structure   /
/ visible is that of the COSE_Sign1.                     /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A60A4CD79B964DDD5471C1393C88881901005001
      98F50A4FF6C05861C8860D13A638EA19010219FA
      F2190106F5190107031901048263332E3101',        / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="cbor-encoded-detached-eat-bundle">
          <name>CBOR-encoded Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag. /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'ab86f765643aabfd09c84eebe150b7f6  /
    /                1bc24804cee75e90c5f99cb850fe808f' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A70A4C351574496125
      4B41A6CF9C02190100500198F50A4FF6C05861C8
      860D13A638EA19010219FAF2190106F519010703
      1901048263332E310119010AA163544545822F58
      20AB86F765643AABFD09C84EEBE150B7F61BC248
      04CEE75E90C5F99CB850FE808F58408469C5F3AC
      750981BABE6525ED750F38B4A9EE6656A7E70815
      B34D0B1014E7143CEDAF81F8198EF978BCC35581
      C675A1D4116FDFBC1D1D1258612B255F4692A4',
    {
       / A CBOR-encoded, byte-string wrapped EAT claims-set. /
       / It contains claims for simple TEE attestation.      /
       "TEE" : h'a40a5048df7b172d70b5a18935d0460a73dd7119
                 0106f51901070219011081821901025858a60064
                 336132340c01016b41636d6520544545204f530d
                 65332e312e340282a2181f6b41636d6520544545
                 204f53182101a2181f6b41636d6520544545204f
                 5318210206a111a118186e61636d655f7465655f
                 332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,    /
/ which is the hash of a Claims-Set conveyed outside this token./
/ Other than that is is the other example of a token from an    /
/ attestation HW block.                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'ab86f765643aabfd09c8
                                             4eebe150b7f61bc24804
                                             cee75e90c5f99cb850fe
                                             808f'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "Audio Subsystem" and "Graphics Subsystem".
The JWT at the start of the bundle has detached signature submodules with hashes that cover these two Claims-Sets.
The JWT itself is protected using HMAC with a key of "xxxxxx".</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
    [
        "JWT",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlYXRfbm9uY2UiOiJ5dT\
c2Tk44SXVWNmUiLCJzdWJtb2RzIjp7IkF1ZGlvIFN1YnN5c3RlbSI6WyJESUdFU1QiLF\
siU0hBLTI1NiIsIkZSRW4yVlR3aTk5cWNNRVFzYmxtTVFnM2I1b2ZYUG5OM1BJYW5CME\
5RT3MiXV0sIkdyYXBoaWNzIFN1YnN5c3RlbSI6WyJESUdFU1QiLFsiU0hBLTI1NiIsIk\
52M3NqUVU3Q1Z0RFRka0RTUlhWcFZDNUNMVFBCWmVQWWhTLUhoVlZWMXMiXV19fQ.FYs\
7R-TKhgAk85NyCOPQlbtGGjFM_3chnhBEOuM6qCo"
    ],
    {
        "Audio Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJsSStJWU5FNlJ\
qNk8iLAogICAgInVlaWQiOiAiQWROSlU0b1lYdFVwQStIeDNqQTcvRFEiCiAgICAib2V\
taWQiOiAiaVVXdCIsCiAgICAib2VtYm9vdCI6IHRydWUsIAogICAgInN3bmFtZSI6ICJ\
BdWRpbyBQcm9jZXNzb3IgT1MiCn0K",
        "Graphics Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJZWStJWU5F\
NlJqNk8iLAogICAgInVlaWQiOiAiQWVUTUlRQ1NVMnhWQmtVdGlndHU3bGUiCiAgICAi\
b2VtaWQiOiA3NTAwMCwKICAgICJvZW1ib290IjogdHJ1ZSwgCiAgICAic3duYW1lIjog\
IkdyYXBoaWNzIE9TIgp9Cg"
    }
]

]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC9562"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common computing platforms.
In particular, hardware randomness sources were introduced in CPUs between 2010 and 2015.
Operating systems and cryptographic libraries make use of this hardware.
Consequently, there is little need for protocols to construct random numbers from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored, protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> does not.
Vice versa, EAT does not define a device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the relying party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus cannot be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; Same as JC<> but with unwound generic nesting as it seems to cause
; problems. Perhaps this is the nesting problem described in RFC 
; 8610.
JC-NEST-SAFE<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registry exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology-neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-to-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-30">
        <name>From draft-ietf-rats-eat-30</name>
        <ul spacing="normal">
          <li>
            <t>Minor typo fixes</t>
          </li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <?line 3601?>

<t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y923bb2JUo+s6vwFFljEgJSV3tstVdlagk2aVq39qSU7t3
7TpukARJxCTBBkDLiuL+lv0t58vOvK+5AFB2ku7zcMb26E6JwMK6zjXvl8Fg
0Pt4mhz3enVeL7LT5GaeJZcr+HGXnNV1VtVpnRer5Kb4kK2S3cuzm71eOhqV
GXwEP3qTYrxKl/DdpEyn9SDP6umgTOtqkKX1YJFiB71xWp8mVT3p9cbFqspW
1aY6Tepyk/WquszS5WlydXnzrJevS3pc1UcHB08PjnopvDxNrrPxpoTp9G5n
p8nbs5vr3odb6C6frfLVLEndHMejouz11vlpL0nqYnya/PYuq37LPybZup7D
kxP8XRUlDDytQovqbhk/GBfLdTquXYvNKDxbFfionI6zSVXf4bZxM/iXbup5
UZ72Bkm+gv5eDJMXm9VktEgnGXzCe/Ui3ZTZapxFr4pyFhaLx1CUd8mLF+fw
Klum+eI0WcwWf6ykQU3vhzAlHen5MHmZriZ36dLGeZ6X+WSelu4FjfIym+Rw
NB+Sd9dnofuZtB4uufUfZ/jcD/HTMHn924tiVczmm7Can7IyW97Fb2iYf92k
C/h6mdxk4/mqWBSzPKuSq9V4iPsJJ5DBXh59+zR5lpYrOLtiM5snb4t0gvsP
azz1L+hMJriod4cnybcvrunBZlWX0O7dKq+zSfIvABGTApe5nhcraPv7k5Pk
8OjRUXL8+PjwydOw1j8XE5rsH/+jzof/IfP0Sz0fJj+ni0U6Dus8T8uFe0hL
fAuj/gizmCTXxbS+BYjt6wJlpDF89ccym8yxVSWNaCS8DXWZjzY1wwuP8mO2
+pD8kJcf5sXiLzrMszLdrObFNCuT66sbeKpXsPVCRp1DL8OR9PLHKq+HU2s5
BHDT0W7mxTKtkmdFVcEd0uHOymXyIl/inoYua2o6nHLTP6al7hf39DKfbbJF
8gPsD1zIrCwq92o8T+HdW/xvCZuwMnAHSMsWAG+2fcnPRfmhCqMux+XvEan8
sdKmw3FqPb9JYQPHAMcw1fI2//OHMGZaz3NY2Q8lzrechP1NVyuAwptqjJux
ymcPLnpOrYe1tW6t+026WSTnZXG7yO56vVVRLmF3PmaIg94+O//20eEj+fPJ
05Onp4yj+BXAZWj1VFsdPbI/j59qgyePDw/g28lkIb+/tVfHT588lj+fHliP
TwGB6p+Hjx/xt+vFpuJnJ49Pnsjrk0eH32rL46fH9ufxyWkP/v75+fWTE3wI
WDQtZ3hjd+Z1va5O9/eztKzng3w1LYarWTpc5ov99Xy9PyluVwu4xUP48Ydp
vsi+GxdFORnczqonJzvcFdOan1+/fXGRPL98fXF5c3WeXP/b9c3ly+Tw6ZOT
fvLq+dnw+ubVxfDg4Pjx+8PhwfDgPU2GOlAsi38P+PxeERFIF8nzrKjW8CNd
DK5WdbZY5DNCtmf4n7tkF3reow8ngAMBAR0cngwOvh0cPMH1Xp29Ohue/3wz
PF+k+RIQAT0Y39b28qfmyz+7l+evry+HZ4tZATh6Hj4vqgyb3MwB5z1/82Z4
9fLyKt5U3dM1kKZ0MTyerddDWNb+JKs+1MV6WUw2cK/2r9fZOJ/mY1pr4+dF
VgPMVsO0Wn/6Q+XfXE2++/boqd/543IC+7TKSqacb+Ak4Uc1z9fJm7L4czau
/4mxNvSwSKJhkueAj9fJeQGX9VVW38J9TeBuQvNymcP+V/+UvNosR1kJyLif
pJNJmVUVkWpolE8y4C20q21HeQx7FJ/QU9y+ixevz7p3bbYoRinAd1pP4QLS
xt2uB4hfYbj9zRrBsdqHfh7tHx7tP39z/v4in+Ww0S8y4B/K19Oz9bosPqaL
9x8R0taTqd8saZtw46SYJtrcTfJV8THDVeNsH/Vwum8uX20542w1zNNVSvOE
H/tvshX0uJBdGa7TWebHf1PmH2EMZMuycl3mVSY7nOzCGHtAhP5jg3yWAiHi
mEGdziq4wT28njFOenJ4ZBjj0WPFGCeInhR5HD+lyw9kqJ5P0jtgBNPxh1M/
J32FDBi861wnLPM2/5CvkdvgM4Ff+/rle/5y6PZwCtBDF+Xq8vJy+OTgaHh4
9hb2//XV8PBgeHh48HQf31zfXAxhl58Mn5wcHX/79ITw1PH5EC7+C2T78O+3
l+eDWQY8B+/p4OzN1QC+OT48OKL2r99dDZ9vAByjVdGTRY4EAnYteQc7Dad9
+QnAaAKUHtgM2OnkSoAYD+Dy3dVeP3ldztJV/hfBQIu7rpavqSVegnPkI1d3
ydVFsnt+deGR0dlmBvwvwtC3nVsKrO5qgjR0mGdZRpuqUD5Jl/v4cGBtQuv9
22wEeHm8WULLar9GlgPwY7WfbXKCdtmRF0XxYbOOtgQ3HCBslgPDxvf/jC4s
CQgVsuHUZ+dsy2yGt3vYMWt7BNLCAGe33oz2P+bZ7XBeLxfflDwg8IvbwGPw
9uxr5/m1Owl3erIZg+xSZeXHfAzoVhawn8Pxf6KZPQStAGAHh1vB9WT4+MnJ
twdPv8VPiE78j0cHT4cXKDfB9AcXQxKekFYMPsEbavbD67fD86ysu5vRRQei
BnzxZDCGZvjNu/Pza9eQhLHNeFzhu59uzp63d+1atoJgHjjaDYg1gzf5ioD1
cgU8ED54tlmNGb5JPgGEk5yNYZOq5A3QLGr7A/K4aXk3uB4DS3dWjufATY1r
EHY6jwA3/hPgZuCH7QwUSPcfnRwePXn82O33s2xUbqB3vB0HuBqQP4dLRC6D
+m6dVc1FowQaXtN2ng8uP6XL9UJuve4CSV1Zcr0ZDa7vgHldggyQ8F8DwB3n
SBZ3j6/paXG+hyQS10WUsyyQxZHuGgtEoaJYjUvkTvNUSDuucjWt9sfjNX5Z
7fP/rtf634PDw2//dDR6D/fSKFET5J6/6V7JcyKEb4QQBsELDgwOGiEp0HGY
Oh5f99S/lqIeHe4fHAJFfQ/9R91L7+8/HgHj9mYzAur2NltkaZVtWdRgMACx
Bm/vGOD4bPUFLUSCFBiwdQWQJ1oAwNBjYsySKqt79TytE3gP2z+CVthFRlCK
QgiMAUdS1fm4QgwPXWQ0Wr+Xwjd4+ZNF/gHaJ9USeCMSJ0GyK27kbT9ZCesD
tDdfI8QC65JUm/F82LuZ55WbSQK/NhVMbgTUMimzxR1yQ2vo9q6fIKpBnqJM
BOkkdQFj1MRMwY85/D9AL018ks2Af8T5kpYkWaMkOkGoxGa8gCFv3dkNjpoB
Ewqdp4RHkp+zkW4gMLh7OOZP169f+ec/4fNb+MrrVQaARKFzEIt4TUM+q2UO
IgWc2zcg8NaMOZGl+4qTg5mlyRKAA/icZJlOsgT4SViVbFk6KjZ1OJIh9sh/
QuO7ZISnoqdQFcssQaGSZEfcRXxgYnYPtVnaLTTYLOoceCE4gm0nktzOcf/H
BFn5lPZ9XtwmeQ37sljAZsPRAPTwLvl9x6HirnC2IDcCpsZDpTMDuClqOT6Y
LbbLiWHgR76/Z/A+4zve14bSTLdhsShuibNOAM0A919iP+mqShk3FStc5xoH
TwGcQbSFo8NpqhIJPgN2h9Y4K6B3xP9eoUZbxpwMtsGfNH3sAoTfJGU2qSAo
s06NsvIVAiIMGzAVCEdwBIqKi2Q80ceTaD6k4ahDOCSGFFgn7HGRzICRJeDg
rUG4gbXDVEBGqeluwOwm+XSakYqtn6DOEU6zpBdpVRXjPIyxyKdARu/G3NGH
DA+NkPWCD6A5V2jBkKQdwfz4vvAy3D3mJdR4AAhmdCRVss5KRKgKe/oRLKhY
ozRWkHyRai8yi3AmfVrG1mmo2CcXpLJzg12Y5jPaTxhYUNwyXW2mKRHoslII
TnGv8IpW1QbnCdADsDZNQbzP0zLAPUJMFQ4qgFMLiipDw4SsUIcbMQfJ/b2o
HD5/jgCtzNYZrQ3gKyPYhXkphwCdTolTpyvPpFbvOuF+7GVdIL3iKwb7OiqB
bOGmD3uIIkE4zY1lp9tUIVkBEYsvk2KOFbNG001JkK6D0MYotOd/ySbD3o8Z
HkqZ8aQERlEO+13yMv3AQMG7BLNx2z8hMIV1lXI2nR+kgE6AFUHEwdS1KAU1
jDeLtIRF0N7bgRjmpu+gy6tI/ObOgSTDBJiC8e1R9JmUmxUp2bFpmNe5gJK7
qURbaYLW6nL1MS8LEg4As3TR3IjQ5nUlzAuwkxWdCo58fYfc2O7zN9d7icpy
0PkzFGmhV89wVAAu4wyww6TXE/qHewoYc1wzGFeb9ZpYVQBiIDqAKWc0a4CH
ZAyMCVK2V9AMBl5kdHcDUUKGNh0TlE2IkQBaYN/BjiUdQ6ZI56YlYEriFPBs
CGZxYXZR/U2pkUgyTrX3bnJXK3fYfRoxMEH4J3KQcKCw2au8WgqApqMF0R/A
cQQi3PMdnbQsbpVlIEEwahmXd+u6mJXpeo6zM1UW36lqXmwWE+wW6SeLs4z+
myfMkBjmy4ujD3RJw979vcy6gpsfeDVdirCbfAM7lkpTgk2vNnlNy8RB+QRS
QA0ThTB/wDdGYn9b8aHhFSUwpTOYsVYsq/wG4fjAhqEyDHcQhF56vRTcv4pO
EZAznBVNrMyqNZIfndtaBAcAAKJGza+uEWu0J1Ux70HLKJbQI20KjQ0E9S6Z
57M5jpUjMmIWkpUrfLdukGmA3TCx4CVrExGRiOhzyaPBBr3G06yIxUBuBkB7
gf+BGVY0qYAdAJYBWvnWwDIIUUwVhonRNha4IoISrs9ETgrWAnc9M2pFBzpP
gcIvkVWj4TajiiSxKrC2wv+I5Is0RTjdn9KP6TUA0bpOXo9Qi5m8KmR/d5HX
3WNSg0p2ADiYAuCyMerTfshXiPDlo7fZGnbTQGIX2Wf99OkJfprqpaGFZOl4
7qBaUMFoky9q3LhO7pt7O356JDSvkxWnRmgdkEb5ClaJqBLRD6w4b987AlV6
E8iyYgTYwhcIEDABHvPnG0YjkwI2HykuHjGQwtWd8edToIqw888KZTaJeyew
E4AQKqcwTwthnaNsTnVHbAXpg0fA2o8JhwD3QPiJdBy918ir4p1g1frgOqsZ
H63TO5Q1qSv8TXPGOw9c+Qom9p/wr3dP8uQOMAvvV3Ci2c5psvPy6uKHVz8e
PcnzIq/+/OZup8+NNlk+gff0b+dsdnaZ/6X8l+N/1ddFtrT33z5+dHLcT/hF
dYsGH36zczaGi4ri4Otr/bC6hU2pAF5w8OPh4fBkp/eZp8eMi3Ksc6ILNE9m
KwDW5sDIVCI58pucEdAIIOrxyaZcMLTLJUuTwyPg42oiYpNimYwYfukR6s2I
WYbPcbEkCQI/PEYdMJ4uMpcoTKxYicwcPrwQ5fydoie+lTIr7emhSZ08GYxA
UHp5dq56f8B4QJQnzHWaMEvTPPh0cMSTpC0304BgXs+bwt1iMWe7Jvz+/s3l
q8+fuUNDUTBf61Y4bsVitElkw6OrIGdHQDxWGtf8drqBawcTA6EBRTmE5Rr3
hgVaIOzIlNh1ANH4GxWFX39Efj67bfKwm0qWiwI/ADC13kEEXmZo1EW5Ed+S
dkY0Faj26r0sKuPXBM8yPyz6AD8I8f9flK0RSv5jA/u7wG9IZpRhs8DKJaQV
VH1Lyby9DfuLsPG/wuJfpHcZ8rWRJIBEoYn0+y0BwbrpMyvNbJsd4GbE1jDH
6exWGUoR/Ap4iT0gpdqsYs4e8LXRKNhBRpTG3w2ISFWFcDkbwOfzHPgAlFIy
5v4AHogRRzY/3jYvD6eACFiFaJR6p9/YJmyPlskSZPbg8QHcL1qq7xjpnxCd
IYa0FkbHPTfZxyAGV6Mj2zNY0R1gk7tl1Re6kJL07hQpIHRWqCpAKTTYMOiY
RThiNpLvX3NpxJPicpCIELf2Ce6FTWqVobxPkFwxRHUPx7fW1DgkUugVZh5P
2SHk3YFGEvy0VWe6qnA4YXbod5Tpnc3i1dIYLH8jPC6Beazh/4lBmsNF4yO2
gXOmle4WMeOm4h6CFb3JRfQ7a7BZ9Ei5sstP8I6m4USmZPfm8nKP2qmicYwa
ejyXpIQ7nJX0kv/s477O07XwhMSOND/DFXBrf4ewk1UARpg44KfVrEp2gbjt
BWnuDEFikgMDvgEUJ9InP0/XaxYQg6aUphZ+8qyWyFVU4VYi6UNWRp8Ll8ff
6k9esOtKVEp8F5eJMAVjuH1l2mtoComRBERfoLyl10y51iSd4RHXAezy1ce0
Iu0S8c4V0QLshzgV6gzxiPbUx0dEQwqWqWBjWqMQZJcCMkwiNsvQrESMK8K3
SGsOqIh+oJoC0cozlSNNut0qW361SMnayDS8YRmNO+KL+fMcBS3laFNUmjpE
DmOgaEPnGzGVwAWQxCw8XkDvqdyIVcMVQEWsTHEMCQhMtPKVx9Lw9YVNkO6a
6H66VNbyIWotWkTy/OLiheivkB1CBY4wGsSwi3ocPjUUDYQwWwCecDtBTUVs
uFafRDKbkSDN4sPr68s93huQT6pIPtn2zU/4DYztJCsvTtFu8dESryDyCh3K
IvsUKO1mpVIw36y2liCAxl3DS+MuUlQ8CEkMlMbNIFu1D5zEBvn3vIxJpAMU
nLwO5hGMGhru7+FD/uGI3pfPOygAgYqx8odkCzcyekokwcwMnFDVAcerwpsP
0DESVbR3XrxlReW4gHNECAoaEjjZoiRu4d0K0ZYKPw9cG5LFdJXcvUCkyKkX
aZ068E9epKvZBsW0XYRmlSofHx4g7wC0eYlsIuuo7AgI7sMdN/MUnuyoEO0u
wvU+zk0vh7ulKIXBzdj/qfka2b5O+ZIAA68BP8Y/4EhEoxOU7IRV0cIyo+tG
HNraFLSkwp6wOpcQJCnA0AZGyHWV3aIOBB0CBTOstiqz+tASKTwBPIvSjbZT
uEX5KCdbN9y9c1wJLqBPwKOrGDLc65GhVSuVO6Ls5hZ9CHJDTp34N6pCWHOr
z5UbR2rDo7EtoI228ISdNEAzUWUKiFET0aYQERoDP2oLYA5txUbWoMlje1XU
EsQOuhI0dVgloggDPRMXd7PhbNhHy+TPXp0DHckMcJv3ZHvhDjP4pnIgbCJF
LqeJEwEJTlgzV2XrtGRT37QECdlpxXU/JgSbtNHIuxLHlyaTfJYF2YrHiSzL
LUMEYxHkcZHGo8dBwnrImug6+iaY+qJB9WQUInwsmPSJKYpvXZCyy/ap8tG4
+4z7UHpHGO5YZsbTQfaBJXTe7/v7hjMFyR7Pcrp5rIiBQ5XOWAY1UoICsFiA
M5ExQHDHkwpq1DKzqazSsixuSTkbUXESyrqpC85wSgqoQbGyfUdl5YqUEdBW
J9OtAa6YARM/uMWdsgHCZL0m1h83+KUZRFtWKoZFngaviiUGdjplG00kxj4j
e1ty+EWbF9k1q80SuFwgIf1IwA7q6AxxJWmGmJknTS4bhYKrgUwAl/IReis2
1YPuDoBDrVekAhvTb6u0jSZROlJE1nKaQfpXFGCdUDsEBDFPKmaPLPE4UVHY
5nDnN6zUV+uN6L+KkqkGGdLYxMDIFTFnhSYrrzjrnaEGhz3tiE6UhCSVcQVW
JKcFUSNTcOFCUzoNwqcpvq/FnuipL0mwtEDiacRUagPiGt26HfcNEwQkDeTm
FmjKPAgToyzwbGIoEr3OTcMsID2wMZPppbEzDVcSHkP0EerpEOyKgmreZkvU
KHjfDHLVmWzUXyJ2YjCernNWkRocEZfe2SCSBi8FE86Y+KF6MFU5te+9GeBu
pqsx+zs4dwb1rwG+hs+IZZjanwUjP78ANSZPEP5X49pE8yHe/W9gQxZsZEHT
6ghmk8Fp2rXA/vxevZWV339Tuu8+o+gp9uLtejjcItH+IPOJpA+FDPiPoGvT
y2wELdvFapjUZf+HiZxXWECQE/JV55HB3mfuzk/RY4+NtHDzZ3DHy1XQ1kbb
6h/8tkrWxSIfk7+RMuR69tSv0LuoBwQQ/ozYP3aFAASVgbTdh08XaClkgiAW
v7H4jrNeww6FITJfrTe1MJJ490ixgVj0Tla7dQ9IpwTixtgoFC4cOcF5li7I
pMdW7U2l96bTLccZz6vovOQcidkv+cY2kYhcYZ4RDMLXl8zuDdSgOus14L39
aZovtqwLzoJNMIRjgJ9kwyOrNB1SU62YTpaMiyOiKLdpibd5swJ6xorvLlyz
dXzii6QbsRUB00qCrvTjAKhheKUTF5hqo6EgVqXs6jXthkcc58OquIXtRLaO
QAvJEhpdgu9N8BTJa52vGocNYvEMaRvuOhr32balgIByrNNRrtFOAZOhcyw/
8gKn3oF2mHQflRufjgUhPD62rQBNnlETDgIRRX8AXIF53ggEyw1CFyxhUQDX
PkEvJWK7QRpJR2TFjAC9bm6McyxYs0VBLGeCBB+YLOAWOQnG9jgD8pIy7ZIY
6aQrkRUio9UeLsU4BnfzlDmP4l+CfRMnM1rk1ZxsnMYRJqWpJKOVwuqY4esL
zqnYuydFNzGJBUG3lIVBLp8qO92RHjYGYxSIVhMQFWrFqA7J8SRQeYwf+kkQ
RKMbIsIZ276y+mFET6ytBOWQBzBDN/JzQG9BoNp5+e76ZqfP/01evaa/317+
67urt5cX+Pf1j2cvXtgfPWlx/ePrdy8uwl/hy/PXL19evrrgj+FpEj3q7bw8
+7cdtkPsvH5zc/X61dmLnW5jFatCbaGEBnsRb/3D+Zv/538fngAX/X8BG310
SBZy/vHk8Fv0I7sFpkz8U9C0zD/R9tFL1+ssJVKMCH+crjG4h81QZFRWb7Pf
/YI78+tp8s+j8frw5Ht5gAuOHuqeRQ9pz9pPWh/zJnY86hjGdjN63tjpeL5n
/xb91n13D//5DxjvkgwOn/zhewCZq8Z58NVnl6YN411EEUm4Yk6Zen8/wDhD
OoqBRhySJEleN2oeIXlTf0Fj5BtIjwrS52xVoJiCl1WubuCm7u+vxev+Cc6D
wh/EMeL+/gxOFSj6p+Q5v6N5dIjqzM+Ga8HaAWTCms4W5/qMvTROez2ze2vQ
xWnvNGk9ZOfJWBbUvh99/gwC/jAb9kW0ePf2xYAdDEF6RbXpoEqnWRDaSFhi
y9/jkycI1+RxtCDWGGRs6OK33/02tAf8scxrujIr9glVOkCiVmUi/F1C5z4C
yfwDCyiAQtYpesyaS2/wj3QDwJ6SLh3Xfpas82xMUGFxZuTxCcia5sDmZmUC
hvCBkIeqzeWwvhinbX7rZJ6H6ZAU6lXFtc4ieYVRuDQV8VRGG6Sa95noxY4F
NAElv8Rop+4FDzlV33jVvNhw/5Ld4Wg3oiIFOrCm2VFHfoqpDrR7Y+Z962IH
STASHIQ9jDZNbuJLR2Yu1jc2XAQW6ShbxB4CfiIsH38scvIonfKBE8zE+k1s
OtzTVf0Jt17XJXr7ovQaKlmMnh+3EbM4AhPfX8IMNdvlaP+onW5elVxndWv3
tGkhfGKkjnPuDfDsY3YXZJMgPn31LY+0MA0lDFzvM9FrMDiVBbLckbu2CbC7
wRlQ3Vj3MHKgcrqQJXrq4+6s13BTRaADystnBtdFXNKzT7WY/1gCiDQs4lGK
/usIX2gyBupdzzFyBJ0UAHSRsnHEAglK84wVK8xdcgjcXxg2VeBilYoqr2D3
/iSshls4G1Bk6nwOpEQRfXgQxdShJFIKPaQMEeq+Jf4CZvNWfmNQ8l1zSpMM
0Twp95tzijBQc1rMr683JfDazGTBsDnwgne4Sh4wDTG4zj+XrQlDjtoEmNmP
5ruvDivomIF+LypV8cRjJ2JV5ik02Z6J7dcghfZFGcBhkNSQ8xaVmXn0C5mE
qxfLo0C5MxRI6vKuz6oHkT9JXdZWaejFhI1Djj6eq02m7/xgeSYk5z289bdk
A484648FgK9nud1BOsEYoUHFZkJSVbSvIkmrKZ8vkDyMfbe9MI6iIJwd0UE7
+5VuvzHzLOGpXJEkzZmYn3+dIy4ndCyyPt50uoamq8ZBkYtfDWZFMZE59pNZ
sYDuG+eG1qOCYumtHSolKD0KR9MgZqvcSXCshqwwRw8bmjsmNslZNQgzhxnQ
ObQUEct8Nq/Zvwle88GzEtyposhLo+BdC+MgwK8mRVnR3PVsCLdSUAB7NhAu
Qf8Watk+/GDyY+W0Qs5vq6DFTtds/UEyrqjPKMNiIYwhcQ96WyRH0FeTB+Fh
zYIKJIFzHVwX4w9MuYIvE/mgmBF9dKf6my7zaiYB5N2ubjjYrzTzXyRdx68k
uhXrwYvsY7YQj+Bg9SU/l53Ls5sdwvErc4TeDZ4Me+bAS0Im472gZsp5Dahd
nXKEoLndmg4UKA3775N1nHXpJAAJdY6+GrYkB6d+Txe3KQYsxTTbd0nWQm8H
FndnhYu1RdwOe96KryZk0ejFM0ALloTshHuIKJRlCrmiyuI1Y5n4bJcMpaSb
JymmbcCjeIS6AChMMtUAmfHB24v0ZhEns2I9p1neYVWVLgtdj+JhGmTPBhyn
ZWnmDJpkpBxHNkC0NaM7ZwBUnQod4o83N2/QwQDZkMENvgUMvZjsUV8S3NHo
rJ5zsqYNwxTxcphwInZ3muafKHxPL0k6xmQ8cehM63KSQswM6iu1/BAs92OT
LO7vaLOaAG8gDqAXlz98/rynppA5IFeEOocfUHxtW3QlTG4V7MEWbBJ7I0QQ
GmBSEdly2LtoT84IkIg13rtIr64A19S87AMWUe4f0MGC0MG//wb6HmAvg5t0
NssmA0IQ/973b97BFXXvaPb8GoflpwMKo6qrfweIQQRX6TaqmH08fOqEadhX
kFBHJHNON6QNYIs/035l7My0ihYRdMqQWADe18VmRptaUNQm7ALRHCb6VWYT
IaQQOhN+CdPEufDSVBDC66mPM0LQMvdWniCBfHyuAJ6TvESBIzpT4pPaSIcO
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
OWUnmTUuY6DMkoKBQiqzjelUuOUoKvj0arijKDxmLOrGv0Ui4GCaKFyih4OG
pKD9xsfmEp0Qw1SwnRkt0DRca9UEWpDy3SzHBiUjRH2X7Jw7IKgpNQ5XwuTJ
FdG9RLApvCgbJnhYlv1npWCKO/2nc/iegEwDXcd85rAr+1X6vD5x8yjNi7Sf
QdX8nTpcTzibBnU/rC+DD2X54BP/+PD8CL4p5oTUSI4KPe8/ZoNk8dfsnNDL
WjwlPP4XJtLvkA2N9HBukpT2ia2YL2iOtWbrvkn+y+fGkZbFszuLprHF7fH1
ydzUJDW1aHLtTZObhot/+dx+lHxV/9XhS3/TFuYfys2Pc2jTtFlrdh4iTkTr
+dOm+BLTdYtnSF9li1RpLm/RfDX5Nzvj7v8opZqpvuUs0Ae2U54yN5RoWTxV
zSnNTLa1kff8OTwHqbG3hmvJkhB0MTa0eMLHgpWemAKfHCA3XtEyIOPHGzko
WNhkaJrcQOgkKLJrUdu48fP55F++FAeY0Y3A/Kv1BkZl14DzvqmGE71lI4GL
5quZ4Nn51jfNd/1nnGkNC98scq7yYd9F0zMZ69n5Nf4nuTJeQrUa4AO7qVZh
W5eUs542KRGaZ5+db3Pjfi5jqhYSj/71glbTExONb9y8v2pmEdstuWbN68US
mNECshPfqFv8GRt9QagOxbM03+X1JMaCyM4k+B89khSa38fA4s2bJio/gcW5
fmcMpjKpqRidQlVKmS8XLYCFcMiuwUZl6s9bA0xP2HBqVc6iA4IyB6hC/KYZ
UoJCdoL3qlT/ejnz4lVvg4Dpu1F+ibpkyBV9EF/FK1D+X0Srlbi+eugfgRtn
ocghyIzsxDdqVn+OsnGm2gL+eQ+FhybByyoYy/Vs5tR6kSisIh7FqB+Zqbc3
6lmrP+X6o9O4V6k8Z+eBRob9I3PfoGa2N/K1P3nnXypKyoY7hH6tNl4NaDRr
QSEhkwlnyty/GhaRJbsaGxXNP2c1XjqYLxvWwXkiexRKEqxmPGGhyakgp8zD
6+JCzmSXZqNO+mcTilNi/JQhcDYfGsHIoWAVRnxDVUabcufLtta0r2zTGiG+
TnZ5Nqq0f87yHAvCj3+RPKjVKhqQiw8AWm7RbAUWKDvZzfrsP1cRsEgPF6cn
GW/MyvXGUIYef4u2oPVy9u377OlU6XY94Eodwk53Dg7fUsdn8oXjp6EcC3iC
U9DSXsidCqopWuKsTlWRvN+1FSqsbE2dD/z8DrNWoqS/oSGcIX+XN/1ZI0uu
oXThP2wokZZ+z1na7mk33xCWxyXYOVj2MqyQ1sXNbByzI6qDu39y5JZHuZ3j
Y4n4YaQ6lsQoDVoNGqX4qnPlsQQMkQBEy1I6SN0ZNAD4nWyMTwR5BfFD/aeP
aRXxd09/8Z/6/56QmfTJjnZrQIXYCXwecuNF0UD3UKenfgRDPuKbJVRArA6K
rtlCckWYjaGkLTg1xrAAnQko3uBOSBYhBkgaX7oW/7VOW45jTLswDQ8kmsUJ
E4FQ4cFjqq7kK8VISlgB0cKbrWoNniLm5xJh0cpJdJNQ0iga4JK4hFT0Eo4s
S1ewTS4fNC5R9O3PVgR+pjuwiT1IkkhIDMFsF41j5O/Iaeg5GcYSCgAj20t1
nuxw2k+qHQaIHbKasnNKabup1l5jdtaIK2Ke9s7P9io7kmKmfEfThnYOv8B5
RRGIoAGGM5k0IG5GnL9BjWsHPlvHo2hCKX0UP0pNMFQIOYZTksG6duAaRc4j
G5KTaHIuyg8JQ6dUqVtN/eLKpw80jHXO49lwxbRMIa5OrvbSnChq6DVVpkx+
XYcr8okhE4oTW9qYExCuMSVsOJ+sp7PEMAI3MOsJnkaqNvbEe+Kb4l4aC6iV
yArTflPTkKqouaJoHslOp21pGaa9XFk3102klc406qmwS+mpsPya5wr41GQI
scT6WTXvg2EyTByaKcWa8L7lpsi7mIVzCR1FiYJ+OTbZVgPnrbDcqqlREKas
qHQVr2IOd6eENAN8IQ5o37fYHlUTrDwNl5/55rvDOfwINGAc2MilqbOSiZeY
hl/i6XrqfMexvcYTiktWazZh3AHWJHzG1bdwQeXXFKSAjTHhSET1VdsSgakM
Ac8U7qaxIDDGelFezctUc86EO8NooiSZOsvAfeLyRYIXcrzC4Bw8tBSCJbF9
No6LGufgiskdhfikxifJw55Xg0m6rBNnSpwtjgpOnwpUZmUCjaExd3Ywc88E
16YhGEJywWd31+FTSaI5Z0bdTCI54o4lVujTbTrWquxCsmPJVUfSxaQity+Y
dx13181oTE1c05RsJg2LTgvtIkRMFalpfAllY1I4q+dkO+RSO1JpR3OFHXEB
Q1bAtRJJJTSU4yaESp4gHjeiFDXuGQLCNcngPhSnAcJCNHAh+k6Q4XGSrDGd
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
YmqZnmja+Bc7y82q2mccBmmW2LXXu0w6zUxzrHUnnEzyfu6dZE0xSemMI+ec
66/07y/pCNzUyWU4MbKg20wjOWJ6BtEmh+mBDOSlVj6uE4loX20u9bRxmyfH
ZVr100+tV9mteZ7fmtbV06e6AVLV5SFycEI35c2YnsjEuxvYcHu12OnNRuSa
6i0W/tF8vpOyCzv0Ad9VYOK64kaO75yxuf+Qg+T8Q+rYpQCMxXW3cKd2UD+7
Pnx13TsLry6fhfP+5/jiU+P6qnq+ePb6+vN+76i3P3198dP5x0Hv8tmPx/TN
p0+/PnvzwTvsPxsv7569OTza3/+8v39z8b73ZngAfx9eTV/+9uLT4T78/tP8
8uTi9OKy/yK4umoOy28/np23Vl9On4369befLj54r8PGz58mP5d/ar5ZPFv8
dNrvf+w8/3R5tXr35nX45u721fH7enn6/KeT+s/d8YsvMNRZMt0Pyy9vFj+e
/vbqtvzudvbBK7fag5vnk0/r4Sr6rff6oBEkrY+9VftkcPa2/uvt88mX4/Wv
z8a3USOIkqe6cr+YlXsRz9ZffNmAjQuv3+cXfj2Q+onPMyv+/PI8teDR3fNq
9HMvfhU//+lt8CZ+0X9+PXg2xL+PL347Dk7i590KPLQY1l/SQy8ujqqjZ29/
G33wnr29O45v4/DyqHr8af7l5NPFl5PfhtVXB+8a0Mwk+hGanTaDwbPb5Hh6
FLzvH7eO4+PkeHYSvIvxd2j6g3f16bYxO3p5/WLx/GL9+uebl69/+yl49vLT
9d3zX2s3lz9fBY2g9fNPyW+3b3bco5sKnqcKg+bMpmFD4LYeD6kcjXxe4AKE
b8vizGNPnKCbGEfvYf/grGeLjRaAf1CN1VxD7KxyfHSOscV1xplQdw7RZ3lu
8/+4etfaBE8ihNSAK9iS1BFRRGE8uBTBpvw2rxXs+kFnV4ji+lEvqAa11qP7
YB4e54pNJuoI+Prt/hej6WKFCK35BiTOCAbQqvYa/YN2d7/bahwcHGAofR9D
6fsYSh90q0G12qxW9b7S7Rw14YWjo1afXFp9dGkdBPVeq9457NHjtaB71JPH
j2r0UeuoSf+2q3X6t9GptUDprB3WYfp28k6mrIwORrVfO2oeNtoYZXXU6tWq
/U6vETTb+812q37UbzT3D9tN1Z27vWad0vabQbvd6vRrQe/oaL/TaPaard5+
s9k+hNe7bVWVe1XQnNv1blBr1Hvtbr/R7jRbtQN4vRXUDmvdWr9VqwUtNSD0
9mv1ervTfnTPmtupmOrmuNa/+Hu+mzubgkssAPUUnFQEdswDKZWsP4lPS8aN
TLkmLnUTUbM2aJpLwyqlXye1lBW9CSYWTrQWKkYAi6bpoAFZ7ChWg9U/zHWM
WUI73WHL4ygaydmRasfSrGbJVLiqL9bKRt1YBX4W9y7rPTdJNg5ElZZLW12v
E2UsBINE4jH3asU7kyjoyNnDIWY3MfuQAZu8AYNulF5SDiTgPgSSs7AItq3y
zHXyQM+c8KjWs5VkGdwDelTY6Cq8IiNyq1rb/ZuGmh3Fy0QitS3DZCg9o2m5
Fw72vONKqVEYU3MQcQ2LU0+xsnmIek2J4uktspOTKmagnbQFM1hZRFMpm/ON
OLmNbgSwqjtuNW8Tval15L+stDgLM2qqO23hyAg5ORVZoy18Nb/RjwSbNzpH
ysoarfrho1LqKcelfx//y73lZAu5nxsHfeZjyfxJfVbl9MxAc0BTXxKITWo6
vs9rh7lA2S/wpxy0SoVfoEVj0GmN261mq1EPw8F4VO0OO40oGkRBszpoj1t+
8YuwhgM0tlYbwyhqN6Nuddgcd7vDQadZHUedamf8KPfiL6lPvjl/ffMN9z/o
1A+AGzeAO5OY7OGSt3ptlFj1JgiBRqMLnFotL439RtBr9Y+6/WrNCq78jsnj
xYIrL7Hk8bzgok96vaBVZ0iYTg1ElbZeq/b2O60jXs1eb//ooNrtdxqHh/uH
sJr77aNWsN+HRZPHq43+IQiyw2613zzqdvv7sHZHh7B20GKj2mm0uvB5vdeX
x9vNarcT7Pf2D1vNWvPwAP4+qnf2G73u4WELuuy1D9vVTqArs19vHFT3YciN
w3bQqPcPD3pHnQD+2+0cHnXbnf0+rGezo0K+32o3ewFozUHr6OBovx8cwH9q
uHi1/VqzeQSjqfUaEntjdGPManHlWqkwBMMWPi7DsXZiPB+jQ60o9MjitmUy
I+ktfZ0ZBh7SsFENm9WH4NuK3Aq472Pdd6KDABaxwxQB8292GJEo/2YWo2gT
AFH+zXSUxPfgDT0EL6T95t/chCaUhQoqmmcaPOib5/+y5/lpX2zqim52tEgs
ZMRBiXf0cbFYSGWWQbM30R2WOFmvCPaQlCXW+bGFV67PlbuT5tgbW5CuSwI9
nOkYXDXD6Aa5Bdn0s0X6qsvBGrBzYWs47g6rtf+fvkrpq9hEQd4qvy7mEjeY
7d64Of2xojGnikgc/Xe5AViY/mMuhGJx+31GfFc4qwz+vhaKJPb3tUDyfdtX
HjT4exvtgffeklTv5VLfS66kUXDXSUr+Tm89iue+sdFI/fRnjPubOF/wTYaq
sAvq78pBSZYur0PnjmbvCw5oCynWEgtIvIjuEpKQieN0hme7lHsB383k8r5O
UJL++LLX18hizCCC8ex8oZ+dyh+xj7JJwlqrMsYqtFVlbFNoTDptDtGw9Hnx
89s+26om734+HQ+m3fW72gU+3Bydf/CGtfPPjcbZz28vT6YXaOb6bXT5fDWo
nf52/GnRPv58FLx/Nrk5PjoJ3s1OmsP66WRwdty6vHt+eHYxOrpA09jRBy+J
L6rX+y/OpfPP789OLxt3byen9fD8c3N4eXJy+vbot3fTL6vzt0ezl7XjYFB7
/+7iWfPVy2D/+bvLZv/l4QeveXpefxn//LYKLYzu3v28Pw8vT367v+9sz9BK
7WX95NeLtxf1N8H76unR6eewenp+Mbm+HB69Pzi5OHn5FlSny+nbN5eX1+cv
Lq7nbyfvL1/+jD0H3fGbytG75IPXPi2f/3R91fvcaZ7c9V+9fjMZrJ49+3T0
8mN9eD273j98tX7Z+rU/Z9vbLxmVq4CYsf7m7fzquN+7Op6+vR4dddeDWvPT
e5jRcf95cna2en550Tw6mTz/4P168rkTv+jJ07O3k/DyDexYL35zefrqbHJR
HQSTd6Ojt7dvzlbH0cHJr2/OhzenR4dxP+7hO/Gg9vaDt9K3wrdvfx71jxPn
29W7afdmhATy4+nd6PIiOTa9ndQH06OVjOuDtz+6PF0M7vbfDKfdT+9/Pvlt
UD++Og9exv1Z9SeXDAsO6gOTfn8pk/7gwbTvmfTbC9i/0zfByduXs+vLN9PV
29GzyWz040V98OzCTPqDhxOTt+on573bl/3bn6i1/vOb95cBTLyLJtmr0Y/P
g/dnt1f65rA+Wr+7DCb43QcvRXyH3fPjq0W3f7UjetUvlhNy9Z6DCLmLf0oa
SYjFYv6Cn5f5c6750odrL0HBI5DJIBxgwd074QnDcIJOSYVOIHRlkPtTYA2S
CW7eYK1oaBqbjz2q11T9Ug249rhmo1PqBNZcRBR0Mokq4P58oZ0pIoRU5YTG
Iq00QPgNjr9UXnbKAWBeDwbaE2fDgiYWoyuhcsz6AGNgI+Y8aINocnErgVIR
YvISesj84H8J4vSj5xR0EsLqwSSJWZm/CRXEJuFycZgwsQyxVghw0qtrkCKe
fk/G4bkUtbjDxJEFfFZyqh2L13O+/EzTJfxtfz4reRGuoA5YazzcxKM1dD9h
T/V6MkgqcK0yZRLugKXfRJ59Ep3P7EDG0nZyIJKSFLVhKYALnMiehlQPPfSm
8wHGrC2u57PIQDckiNdvymlEbPxL7CZw5REcAXTqUZGNoPrvKhBhipPRo8Td
ervuFaeCidkyb8X4dyRItSwLkgRcGYH2qJTCcL4coUCLyUY4Cu+0vI08UuZH
7BgppkS2FBPMwuQOi4zE0/AKSR0RR/FQqAxmS9IoGoYjHCU2/es6HG1qHTFL
hWxgCWiR4mlMSsGt3jOoJ/KQ025zjR8+XhMC/6c6BzBEQnyn2QTVqtttqj/M
6oT3EMeO1vWGkOcZYm92M59gwQhvFs7m0MN8JfWMYHZ3QuclGOINbCM5NmYw
ugmjy80Rh4uqPIy8QYxYdseCdE2mPK4RRxUrNFwBjuXkLompso/ZTfwipnJY
HEOKPoYlF5GAex+Bu1L+EZHN8Ws/HI2WCFoBY/AIsJvqljj0DEdipqVUZIdW
eHxoc+60gIJ5yiMID+BkeGwHWBWq5N/ECAtDeXGg+nyGT/Yn62g1x0BecwK1
SkOceDgGUvAwrgB3ahJNKWEq/g0Pph011ivwfvdfR/OFRJr+Lolt6FJ5zXzl
dyua8FOpjMeVw2hTX8+XdDycj84kEkp+fvd+Lzs//1XO/RR8VPa3fVC+gZkE
VX8gNPc7UWHqh77P/fxOpz7zkTmyu0H170Ftz5lJrpNS1e3oOzpxjwj109zT
TnDsTifYhdvNd3SSPYvUUXtPi7LJjpWRz5SN60Pqs0lZtPS2qj8UC7Op3X6I
BoHFiik+ARaC4k/ofT9erq6B05EQR0rkekpTsWB4VqgZqTuQV4DSw8kt/OvX
W00u/PTZBM0Y+bsg8jVsHx0VW42nt4J7zmcejmfUAxPrbiOqyGQzXs+GXKQ5
I5mZgcMxQ1mM3lpgayb6yGodaYXFJIAt/Kd+4Jf96O9fy5//Xnu8W5vtfXO+
9TdoQfIA2nfO0yqLFVj6EIK09Ya4Gu6X3o/zW2SsJTNY4rIkJTWIijmyMMES
X051iqb+1XgyD1dU44YKuXH1GnJDA6tXs5WWr/LDmxB2g9zNdlGwnAhzMglx
otoisExagwMLX3+Jp0bfwxoxWo1TN5T3k26AzuLCogLXqsF8j2iaad3xibvU
D620LrRRCDhnEn6xNDyIOYwP9Upn/V/bl0hL1HOH7Hcj1/SDWqcMDbLGDH92
a+6ftWbL+TPNYu/jmQ/86d3D/fya/5/AUf5eDpr0Z0f+rPOfTfmz2WQutpnD
mYaq3VRDtW6qoUbXV567gYvZhtIjqqVH1OARmYqmxO7mCz7QbllT2oNX/AVy
uBPQp0oUGyhE8/D1YjhcL0UDJhTDuyhcPko85A8OyJxSQEnxu7LqaloFJE3G
Q0CqKBxpPSW+i4QpvdW8pqCKyJZwCBXEnzQ4V15OLXX0YlLxSMNx5RD16baH
FSA96naeRPq14j+T99yu2uieJVM7Dy3BwsBSowqerMpDXgO0OMcrWSYxPUU4
gFRpKVfTxDDJSUQRraCRRQsscjVzPN3AqG4oB4paqKD1TdRpgxm2nqHvmAoi
yZLrqmrVQprqaBTzxi7hJgVdmk0eU5FQUvor2eKJK2SCiVMdBrEoWfcD7ovu
8ngiJkCuJ5RaP88lOcOH+PFBhO0j6WHi8XVaXGa30Qsz8tTcUsQ37dxZmQus
SGQ99nd3P1Mm+x6cscWe/dY/x4nw+J1RegV81p0TSiE6gkjvnuGcB+4x+A52
6f/zGOYfY5kt1txwrRPRyP5ea+jf9GfD/nkv0+xgjMB8Nkqscvf3IN1UPdXU
ZrbZ8afxcDnX9ripIN2U/dMyTrOdZXfvXA5aKEWRlfa52mwJ90nkpAkiVxVk
Bo+YsmoY4cKx16RpUMVlZo8Z8w0FxkzjGZUDBQrWDvjM8QGazd12qEN0ctA4
6CaOZ/yeu3JirnemNqYJ3rBjJjhJKW3GPjwEmIULuz0GGctVyGoX8TofeR1c
5Hra3HoxcpibASOES6MHDHFJpdkyK4SySidWkhptykJSj8FCemnMycSN2Ofq
jVHq0CRcU+1kTlWYYVQXF6DleD0+UYrMYauMA+OULE+nzvguvrQnVdSbrdq3
bxgdhAr1kLjx8HqOF0ylCMswcbpzKo+LLbAeTuYKvlsbqmJ3K16scThYzNTS
GMGE8uJ6uEe44EQmSAGldNHEMlADUfcSlh1kBnNIKcNntFgSJ6zdksRZU4HT
BWwwJQ+QWLE2wZKNzeRWZ2g8kEw1TiYACaBhYAgw/PoCt2V1G0Uzv1aFax+S
GGZTV7xXrFFAd3o9x+9Sc4AFGizDJddB/Rwp+D2Rpo6k4vVhWbEiJsc/GYKB
ya8QkDuStGPFwCRzK24YxZFml4cWhF2dWCFDpsbCKQYBc4vy/q24Sxs+7+Vo
Lhig2I9B6IdtLNwRL90lA/1DE1jGGE0qiwWrX3LjUyhvolYb/IrrgJKKFo3C
7PjWU2FDin0wpjvhbO5xkWFanjsM/RuNVMv4IoV8JU6ODJ4TrBNqql4499yQ
72JMrOj5inDLF3cmro5M43K8XPNaIndKWXmjZmiJa3vI6ERNB/HMaJxJRKvg
PCRKlEIHW9uW1hS1BaWlByTWikeHfUVliejWGIOSY2sWp0bHfHcyRyhBoiOM
o4ndA2G45RZHz5daknM5hMAQRrF7paSsnaKRKamX7A0TGn6M5bPD2XqMG0Ia
u9Qttli8wtlmTjlINDZSvpJ/S+Zbsh3StssiYJ1lFlE1fn338OL48ctef48o
CS/BiiROBWKXwr9aUnYUd71CnhL0DZ9GEwOAjmA9lU61Vgl6p77kQ4g9jhks
rNgufAD8VVRqiSl0KkcqHZgS7WRfiWfCNhHxCSGBjqkZ4NJun8CqlzgcrnAD
oys5Ozmh4q80YVyjMwqv9LxcC4xrjTtI1lhSMbFYeWzoeZbFQsb6tRjm6u/w
qF4yztIObred2TWwDx42M8IX+jvaE9CrgeVMjfeZ0LEouce4okM/1bzXc+mU
gQjJBTCOZgg+fIWBQCt0WISUNYZn6doE6g6v4+iGd5bUE26aQqCxMrtYymPG
BtLI+6LhSywtVcVlP/nsTo3IhiVTJXgswXsVCY5YhaMJ0Ctv+Tbhkqce45PC
gwNiWUapivXEiEKJneXgNTWlIZOQ64/UD3IQn7k9t1KzTX5QBDRvn6T+ahli
qBSSuuo3oNdTTdXUQE3gUyJKTpjOyTNVMun2RgWKLFqYrDmSeZYeK3CAl1yy
DcdAZZswAiKekNBCosJSRiWn4Cw50R4kqoqH7TnlmnHQtGkS7XCDcpkvw9YN
CIqnVvzJ6GbACq+oZjvJ15hdH9K1nhzod2UAtMn8BgRKlJuY7513iF/S1O0i
EXltT/fIzskmIVKDzxF2QzJH4NDVXMpTgb3HpZHiWkgoTOLIr7l+NwnVmCaP
ujGWLBaSvIoo4A0ZJT8WkQLkVMIOTckkZYmSU8nKK/d4ga1d4j5gjXevJ/Dg
psLQNgSJ489xN13NivcWx0B6MDeWW2e/cKNZmeFR4isw6h8jqitBsaa8UpzY
mj8eDpsx/IIZTeqEg8ydT0VIuoGBpvq2Hn3oMnHfpzQKoDC3pvrwGlM3uElq
kYpNJZHUJZiZZAhN3a3YQKchGcAoJap3blzr0hep92R9QR6Kzq4NW8zXCinW
IY4y1hj2lAtS+/FKnQcsloGIzrg+hz7FPe9qGXlC9DST2TOmOlPLyu3Lehot
IOAnVBNgeJPRRs7ImcaJ9aiG/tV8PsKphdwSb6ZeiKYiUYyDLz2I+dLcnFhP
E/HjZiMoLTjv8dn4EZid1I1hICAsQg1XRtB7cR+LNQ5WWrGzEi8nl7OjY+om
YEjZG9zWyLYptCFYjtmTiw4Yo8bn1jMsWs1zEnk2LpuOzDJaLCOixZBqdcrS
UUssFcXhwRFtfMi486JedCjM4qMvWKE+prrpeJWAGWIyyp0c9CTN6mEr4VsZ
nHBCnr3R7m+iOyrsZoqay0wGFC8hxfemmvwjmEuydJL+kz3Vt1r1XWSSLdHO
rJhuLdCe2ALnpq4cmyfHMLpruqqqmo83Jye3yA7SFmB3XPckWbXLEseQDKlW
BBerIImtOe/I8jmeAW9nRDvPXp/BLYLz5mHNDDMzq5YlHNnZ4hWTNbKqP1/L
3HZmpGBkCAtJwyEC5F8CukXrNeI7RLppssSm2kYameGyGFsyG2l0zLAuKCX4
S5js2VwdCUM19+A8nIbNrK8xInKWZEhC2SofSaLo9Pgkuueu5A2Y5InZkmmk
qDuHOkgJ5IcGGPXAkpgIkO+4MoTCgcHcLq8xbCclHbnA4R0pXm7nrITZkFS9
qpFGBooYisLsesihtlq5JslldBgvnPHBSF87NEAJ+RXNhRSgJPN2xXvFgTgY
LIGtYNAGF4bCUF653kr5SL5DikFKRPaAUooL+hc+ZG7UWAsIJrZkj4Zjv2Hv
CeWISQocvmdac1OPoSW8jZOuI9NRzzHLgN7M/7nSrHa1WhnpRyKi1MVM0Xai
xMD1Ef/muGaX71J4mLSVOkiuG8rwJHnJYJpMObgXWuYWburwDujRCSuQPCCK
OXNHlazWY5QLt9cInZZKS13P5PTbHEE55QVD9I7HvDu57wToW67HMBO+polv
XBWrcMaHTRZnnVgFh19URTYXe8RfT1EZhfs5+5jcq1+2jo65AK60+KpzXbNy
lpU4HIO1h6/EUaTajvg1pTkJQwrRQqDEk8FjEXXaKgOkiL2W/IihBLRHCKGC
0R3m85Kzgnwo9FIZGnuLRVgRoxTzQ98Euk3icZTmrDRHkCtsFZ9LlB3ZW4z4
s9VUQb2Bo3BHARxA82dqwnZHM5Pd1ZZlCDNtBsdQHt4N8UjfCAZL/kZgDBRT
vDiq9dUuB649yLEYbxt8syW+Ysxz0WfGpqHOcRI4IFk+pxXhFrZIKnVzS/Fl
zINyQ0NzlFYZ+w5zjNxft78kipqTuYxLj6mGMj2RvQLPAt2b8QO6BkdOKKYS
PkZxul9u4NV0+tGxJGJ2EJnxOGsZO3S7aUrQ0qMks1ZuE0mqFeP9T9xiuEhA
RD9s7+sfHLwgrUmTvDF14utf8OOP8PFH+PgbUhgmO9Qx2QG2N+FydQkmbAyi
MYadUjP4jfVSmIxxpHAuIcwXlQX6ALnqFb6G3Fn9LfAotSQSGT+icWktZLbn
si+APe1MclqiWLQ1Ek7UkIRmmdRzJwEOJw2TTbHDr1/jcFUmwUCGRwk3smGa
qI9R/Ui5DpHN9f+Qxw0DkXa/fmW/TBm/SL592+N5ph9l3hBbsxfLLWLXNrap
zLFNolCoJ5BErovJimg4MqaY2hCTPmZzl9l0OqK+E3O145VZWjIkGxX6xqpN
TmehBbzmYC0c5cmrc2LyVFj8hu1y6hlMkyNuFy8suZJofyVYLSEid+lsGTEG
A2l42rZtT/JqsBHvryZhHy5WEw66ZbvUaBmOV2W464zLQO5JeT0cJuj5NRv9
VNI9/tP/t3+zH5f5V/mG/ii/wGpvfmUcsb63Q+IfCK4s+bZUDW7Hf/oDWqy8
b5771lMUXgiSCi95nLJbni/LoO7CV/ShV9C9//jxU38XppVwH9wF9pBuwt+7
5224Gv6Bt8P16A+8DTfR7NtM4/e9NBuMv/8lczK/56XhKs6+xG6QPc/LLbr/
vP/fO/Appk/+4OVWlb6GT7EA8A9ebtnoa/gUvq7/4OXWhb6GT+Hrxg9ebgXo
a/gUvm7+4OXmykODo17yWz94uVmx3vnq5MW7/27/4Pt/9T+tYkL2uzx/4lh6
CfWN+DLRI2UH0kvPf8AuHMr/BDeLHc+22scH+s4Dw8F8uQNN9P/7eYm+TDX2
2Hdf9eD0nlHXCc7jBzI3kkRfz25JIGt5+xkG1KM5lxg+6CFTdvyiLgGNSGB5
UkGNj+L3NWqKgyL4ZQ0/t2oJrARwNx9a6LSCagVGXT45PDsvn/WODs34s7PH
SeQmbNO0hSv1iJGpYRQvCFwcOITPz5gTHlLYKbrdhisxgcW/sbKBhlRoxGi7
ir7hZmpX/H7huxLL/Nc8uFHJtjNzUipLFLzmD1qN9XJi6gZhFsFfjUdW8Gt2
KjvikmZxjDoSerlXQ8rBnC+kSFZyB2rTF1I2xtBKatImfk50sNRVbs7ZKkZE
eLCK5Zeyik+RKSOJ+pVldIXl6nb+1iu/D8u/Vcvdj+Vf/uvDh8oDHwBpwnjS
9xxdFDLjkYBKXAnoYCoMR6MJzh9ehFYcAcchflN2jdJ9m0QZkH4lTxoqsCgA
hNZRKJIdFn2bFgsLKvqs5lP8lZbMCMUK0S8qYIbYC+SlyF9Yzb5dzQQPLvx5
Hl5dgSTTNX5MH17A9rkfezTs1FKtRJf4+NLSuETIu1Sqbw659IhkS+EcoWNW
qOUthhRCrBno2ysY2lP/L61KK9ilXvk77XwPu4Gr01rGTR1IPottFCkQls8r
miGuhjObxOYInkS3PB9NFOynPEioFOO3H/vXIV5R4Sxi8k/yLRtkyYoVtZD2
QTElymivo8kCjbJou8IoGTYMDCkDiPVDMvRhg7Po1rFXqCFCrs4jDIchd14y
XCeJRHuvOJvsM75+BXeehVyHltFaLWyuHiaWEDhsMYr+iB0wThAbfX4Hwn44
WSdAdBOOnXRHpdROSupMw8jENIfxa8uVj9GvMBk4A7h8NmXhuYylXzQWthOE
KweRakZ38iWxs7GG2I/mw/WU7A5kJThGUwJdgSRgEDs4FWvCa4JUfUUXUUlN
0OLLgyUS/tU8FPsG+qOMeZ4NgMwlXcuEScVki/OE7sAwBdCPJ2gxlHOEangp
YwSG0UfD69l8Mr+6y5htSb3lGAkyS8DFGfPirAMndMapcbg6hPJivVygzn3j
AMDmPLzG+UBP3bGVijPgOCtDQ6zYjSAWWpJXdOeC3vkjckPMZ+P4aq3kjo1Y
3UMLauFNxFKLzABaj7P7ZdBpYb3woOEHQhxoWU+iyQ1mqiG9kSNVn2fjbYkF
HB1IgirLit1QYjV1HJP5GDql0XC8DQYirSdsHeHICqYNirHCiyG2LZ6XDBN2
zJHO7pZn0XolxFHxzkAqoPpKmo6Gdqd6FSYSyu3ObJX1LOXWhwIGiGzIB7Jp
9U0aDjZAU+abmJg3if2YobDRzQb+nTEwJy7SuaXcE56bXrwcA7iKWIphsDY2
vdDq1V2sX/NMgKHYwZwolwVd/0SRMEF/TK1O/c5sQxIlaJfkhv2s6Q7IXrC5
l2SKzrwIjsQIdacNfZjHpQtaK/JKcZgI+a4pvLKSXa+MfahgzVLrZWPLotlN
vJzPyAPOcZNXy3A6xe4m4exqHZJj5491BqdgQY1b45l1CGRN7HduL3RAxWTi
agikGv14qaDczPSjpTX4mGwIo8WRF7XgFetuwAco0JGssQnb8HjslAVjKMBl
xGI1IbAetpYpWHjkHOeUoOGo3FkaCck5q2gZH2AMraNkUgMpPkDgrxq08oJI
15yllxgY47JdTR4noWS8myiNaCW1UBrmlYt728T+pnLdOJWFlgc4UQrlWNxb
UwRqAe42YtOTSdMUW7LDQ7IhRxpOC7MFjahsAnLsPMwuhZybnX8mQ07og1gs
eCMl795J6Nd14FVBIYebfps/XA6t4xyVdKxDG91iCWeic8yPOQjiQqdgFCuo
JmLGNMkwZiLEg3KB2Cyj7Whmc1WpUnLDRvNL73R81twHO+JSK+ucfQmXP40k
oPnwC1n4MYFFvGsJukBxGHofKxmQSB4XvhlOlprzpdFInJbAieqlVEgvwZGq
RCWByvGw4egmRO3b0CVrgYiSZYIsjJLLCV0aIEjrPBVXb1YzgCm+GgOxoXcO
JyfDp9ORYWlsWDWaAJotCxQBXtrBHVtPNTYG0f0lTtZ4HlNXPtuuiZPRiNy8
ZzVRp5IYldEHMQEimy9DXB6+jS/VUi9/jDcMOOF4JjrzdKQoTEhuFgL4Kj5A
jo7aqAkho00yp02cljk/JA+uf/rC6MPAH5YxefLKsag7aF0T+6EQwzJi+Lqc
gmc4tnhZsaTxbIyxmRoFj/M3FELVUFkBxz/vGZ7cAF5DbxgDg8EdYuyVzWVD
Ot1GjVUCu8I4mFmswZ6i9K1MZiFqSibBxVX5sGM5cAunU5UbCSs2YtJOczbL
yJxLQYqrKboeLVdR88p4iTfgkqU0frLnSDgiDHAcGcTecFXUuaubJ+sFgtRG
I4cxI+FNUS4xLy8YkJunGAFHRc8/edVQLM0HnAApbmraUIzPUWcDjl8oOEsw
JV1jvWSluJNdbHN0JaLdhtMxibgVMfyfoju82n+O7uKRXOVNvQ+yWiCB4BWO
VRcuumHCm+DUwfhsyY50IsxCwM7Et5PaFoodLMm1S2N40DLx+DlaMYzRbq/y
UFQ9kTH6zpklc6BRqi8YbupCv6LQHpvahWxIQQWyLyqMmjGykOtviF8h9SZ3
U3h9yR/4ku3EWi4H1LKjRkwSFE1EalIyBHYpkVYHnNrQm81nd1OkDbdYzO5B
rwdr4J32zs/83hLOJNo6kTmwx6peb6Qc3ooho/H7qXBKh7bRTIJSKBMo6msI
9zphJIeUWkB3+CVRxSQcph134si2xWgolM2oaPGKJAsuowB6sgXHrGb+5DoX
WrZBz008Xa4tFDaxOQUlEacc7YOyPkw0XbegzA1Nw1nzJZcGSqcyrjj/aGaV
AhFGu8meFu5OLTWGKLmBwkJBJGvzz8umFATGOOeXVRAimlzxHVEZnFXISql4
tiGwx0a8lrKbItuUj8lx45mzZ4ZEhGpI6c3Mzniy8cn8Cd5wPtNv01UzwUTv
OLnm2+BYaDa24Zg5asXN0buvuU2QCjyNQrYTzXI7LPAWqfJGu9pkyZypUiZr
olKp7DEXSAGXjTBnNcLoDIcUpQoIJYdOYgpWtmJhRUgGqYAI0WGzEX35VUus
Cgus74JPu4RUqQDTM7qcU3lKc+/jnCln8PkRYxBlFDkQ9rmUBHa6w8B0XGUY
VzkZkv8d7ZfpfX1JTDrx0sESeBjY9GX0GObmxK7y5IFQaOZOX7DOSAYRHKL5
HZ10FBMmIhgmjX8jJ8BOBaElhzGgaAlRSuwuC85Qko4XswEjJjATX2aQAzdT
xInAp3BftyMMWyWyVUXZP5aszgy7Ec5kA2pLZGd37zVGqyd6oK2kvFQOdZTX
KlKOgiT35RnqEz4mKGsIhuWW7JxDsoGr70oGz4/7u5/j0Z7LIRVoxgRlSOoH
/N1uBs1vmNuOrU+iUKNhU4ZA/OAztw1HZVYmDZGkxtDWdZB0c4pyni/TKDEl
J4A/I/Qd0RnSBA4iwkHGnToSyCJ/96eDoz16uLfGWw7SP03WSZ/o/XRsREee
wyK9cbziedEhzJz0W7UP8awfJc56cN0HwsOFHaJbAq4dd/kjb8tr3ZZEVpa/
/foV/6j8DL9XDjDQRHaC7n+X0YDq9oRWH+HNUWpVFS279cAmvzRXJf9Lc83c
EBdBJZpcVFFq3W286NyxlUKzzpVqmO7ya6naW/oMmANn+lJYEUzaLVKPKN9Y
GiOjRNHOldQH5AoLcg6S0Se/GGJgGaXjwBVda70wAd55hqU2cpFnVo1zwTlp
nSq2bozfd5aGNruICECmLdnZwzMkusG3T9jvmt4RJ5oK5Ge2lwQJCT6r4GdK
SLQmCaMtK7EKft90AX0gN6dLn+2fDEgUcOemaEraUCrDRd5JnCgIW2NRe7Ui
UBIUOFm+iF6HSK9DoVddSwpB2Sfjl3u2h+JSO1L0g/zGIcya2EqFnJZR2Uwm
JbmiDIwQbTSFznKG+MR5NBEla6UOv/SCcSpkhNw834ufliVu/xoQpzhDxrBF
im2BFmYiB2dz90xx6FFGD5ua5HHKy0EPQ75LhIJP94qfrmdC8BxiPhUrO8KY
omUsDjkliAM9gCjmA3PxcOadmGo9zoexGae9lEpUQEkQJ+lbCTmRYFLJLiEv
yGvFOiJyhxP1t78voymQ4C/Or08osCGCFZovn6BFDG+I/B3rYkiDdJ/GHtKa
Rkr/wbKcM5veYqfkFBk16EsUMpgofCU1QRiWs3IowkqiLoQFoQ5Mpwq99uLF
xlORRE5yDG7+bOWpe4EgW3t0lpfRtdi3oDuYKKmfNlAWsTYpxvrw/Igstatl
OPwcLR8lKqGLfNxw/o6Kwh9BKynXq55X9l/GM3zvbjH3x/EXrCbnlctlToCO
B2sYiHgYULn/bHJ47QI7TzLcMXblS9kB4wrwdFBPvP8LL2NxLZV6AgA=

-->

</rfc>
