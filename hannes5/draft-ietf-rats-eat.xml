<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2022" month="October" day="10"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message or token made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/>.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used and other for a particular token and use case.</t>
      <t>The entity side of an EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Other may rely solely on simple SW defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of an EAT. Many of the claims defined in this document are claims about an entity, which is equivalent to an attesting environment as defined in <xref target="RATS.Architecture"/>. An entity may be the whole device, a subsystem, a subsystem of a subsystem, etc.
Correspondingly, the EAT format allows claims to be organized using mechanisms like submodules and nested EATs (see <xref target="submods"/>).
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
In the EAT context, "entity" never refers to a person or organization. The hardware and software that implement a server or service used by a web site may be an entity, but the organization that runs the web site is not an entity nor is the web site itself. An entity is an implementation in hardware, software or both.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims are defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific token formats for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Full tokens with security envelopes may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization format or security envelope.
That is left for a follow-on document.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EAT tokens for specific use cases in follow-on documents.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>The EAT format follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities. An EAT MUST always contains a Claims-Set.</t>
      <t>Authenticity and integrity protection MUST be provided for EATs. This document relies on CWT or JWT for this purpose.
Extensions to this specification MAY use other methods of protection.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines a new top-level message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$$EAT-CBOR-Tagged-Token</tt>, <tt>$$EAT-CBOR-Untagged-Token</tt> and <tt>$$EAT-JSON-Token-Formats</tt> sockets, enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets MUST be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations MUST be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> socket group. Claims defined by other specifications MUST also be added to the <tt>$$Claims-Set-Claims</tt> socket group.</t>
      <t>All claims in an EAT MUST use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for claim keys.
JSON-encoded tokens MUST use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but MUST NOT be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce MUST have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the "oemid" claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel-hardware-model-claim">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname-software-name-claim">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="secboot-secure-boot-claim">
          <name>secboot (Secure Boot) Claim</name>
          <t>A "secboot" claim with value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
"oemid" claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an attesting environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded detached EAT bundle, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
                  </dd>
                  <dt>"BUNDLE":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded detached EAT bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.
A detached Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set of the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
              <t>The encoding type of the detached claims set is part of the carrying protocol and varies from protocol to protocol.
For example, a detached EAT bundle uses mechanisms defined in this document.
Other use cases may use a content/media type.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, a hash algorithm identifier and a byte string containing the digest.</t>
              <t>The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>.
Either the integer or string identifier may be used.
The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
              <t>When decoding a CBOR format token, the detached digest type is distinguished from the other types by it being an array.
In CBOR encoded tokens none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "BUNDLE", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like an EAT nonce (<xref target="nonce"/>).</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in evidence or attestation results.
When these claims appear in evidence, they SHOULD not be passed through the verifier into attestation results.</t>
        <section anchor="iat-timestamp-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EAT's may be used in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a detached EAT bundle.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the detached EAT bundle.
No mixing of encoding formats is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile MAY require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations <xref target="sec-con-freshness"/> requires a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver MUST accept ES256, ES384 and ES512; sender MUST send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID MUST be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce MUST be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver MUST not error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and MUST use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition MUST have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying Parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the nonce claim for token replay protection (also sometimes known as token "freshness"). The nonce claim is based on a value that is usually derived remotely (outside of the entity). This claim can be used to extract and convey personally-identifying information either inadvertently or by intention. For instance, an implementor may choose a nonce that is equivalent to a username associated with the device (e.g., account login). If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token. In order to avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modifie detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "eat_nonce"</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: EAT Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Name</li>
            <li>Claim Description: The name of the software running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Version</li>
            <li>Claim Description: The version of software running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Manifests</li>
            <li>Claim Description: Manifests describing the software installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Measurements</li>
            <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "measurements"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Measurement Results</li>
            <li>Claim Description: The results of comparing software measurements to reference values</li>
            <li>JWT Claim Name: "measres"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Count</li>
            <li>Claim Description: The number times the entity or submodule has been booted</li>
            <li>JWT Claim Name: "bootcount"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): uint</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8259" target="https://www.rfc-editor.org/info/rfc8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792" target="https://www.rfc-editor.org/info/rfc8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen">
              <organization/>
            </author>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald">
              <organization/>
            </author>
            <author fullname="A. Farrel" initials="A." surname="Farrel">
              <organization/>
            </author>
            <author fullname="Q. Wu" initials="Q." surname="Wu">
              <organization/>
            </author>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052" target="https://www.rfc-editor.org/info/rfc9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose/">
          <front>
            <title>COSE Algorithms</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-22.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest" target="https://www.ietf.org/archive/id/draft-ietf-suit-manifest-20.txt">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="7" month="October" year="2022"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-20"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-22.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-04.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
        <reference anchor="UCCS" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-03.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="11" month="July" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'948f8860d13a463e8e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / secboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'948f8860d13a463e',
           / secboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'948f8860d13a463e',
    / secboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / secboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements      274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "secboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardize a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain reference values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-14">
        <name>From draft-ietf-rats-eat-14</name>
        <ul spacing="normal">
          <li>Reference to SUIT manifest</li>
          <li>Clarifications about manifest extensibility</li>
          <li>Removed security level claim</li>
          <li>Changed capitalization throughout the document for various terms</li>
          <li>Eliminated use of DEB acronym for detached EAT bundles</li>
          <li>Replicate claim optionality text from CWT and JWT</li>
          <li>Several edits and clarifications for freshness and nonces</li>
          <li>Correct eat_nonce registration for JSON-encoded tokens</li>
          <li>Add security considerations for freshness</li>
          <li>Change/clarify the input to digest algorithm for detached claims sets</li>
          <li>Removed EAN-13 references and IANA registration</li>
          <li>Add section on Claim Trustworthiness to Security Considerations</li>
          <li>Removed section discussing cti/jti and other mention of cti/jti</li>
          <li>Some rework on section 3 including adding back in a <strong>non-normative</strong> reference to UCCS</li>
          <li>Improved wording in section 1.3</li>
          <li>Improvements to abstract</li>
          <li>Appendix C clarifications -- say "message" not "protocol"</li>
          <li>Removed "transport security" section from security considerations</li>
          <li>Entirely remove section 4.4 that discussed including keys in claims</li>
          <li>Largely rewrite the first paragraphs in section 1, the introduction</li>
          <li>Mention $$Claims-Set-Claims in prose and require future claims be in CDDL</li>
          <li>Add Carl Wallace as an author</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-15">
        <name>From draft-ietf-rats-eat-15</name>
        <ul spacing="normal">
          <li>Repair all too-long lines</li>
          <li>Remove tabs from examples</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9a3Pc2HUo+h2/AkW5aki7uylS1DNHY3NIzpgTSdQRqUxy
fKcUsBskYXUDHQAtqi3Lv/2s914bQFN0nFSdWxVV4mEDG/u59no/xuNx0rRZ
OfuQzasyf5G29SpPimVNfzXt/sOHzx/uJ9OsfZE27SxJZtW0zBbQcFZnV+24
yNurcZ21zTjP2vE8a/OmTZLb6xfpu8OL8/SXqv5YlNfpT3W1WiYP0mlVNnnZ
rJoX6XfrvPkOHjWry0XRNEVVtusl9Ht6cvFjsixeJGnaVlNtRz9m+bK9gScH
+Lup6rbOr5rQolkv4gfTarHMpq1rsboMz8oKH9VX03zWtOt5rs3aosUfFzd5
elLCj3V62OKyshbmmF5UH/My3T45vNhJssvLOv/0IoUfSVbnGUy+bPO6zNvk
4y3sV3Fd4uIz9/n0sqph0TPYqBfp/sO9R+O9h0m2am+q+kUyTosSpv9qkr5a
lbPLeTbLYYa83a+yVZ2X0zx6VdWw0ef5dFXjNGHGVb1OX706glf5IivmL9L5
9fwPjTRo6f0EdkBH+mmSvoazX2cLG+enoi5mN1ntXtAo/3uVzeHLRXqRT2/K
al5dF3kD651OcF/hJHLY08dPnz5OX1d1flOtmjw9rotPOM0pDA7zzMr0uMiv
K9z1/Bp240V6lM2Lq6oui4yOa1W2NbR8f34IP5c3BJBbv9tLnz1+lj55vJc+
BXDcCotb8BT/8B9tMfkPmZ9f3s+T9Oy746qsrm9WYSd/zut8sY7f3H+J+0+f
pz9mdQnnWK2ub9J3VTazJboXtJ4Zbuj7vYP06avzaIFl0eaz9J8BOmbVIqz1
dwcH6d7+4/300ZNHe8+eh5X+uZrRZDcu9WiS/pLN59k0rPMoq+fuIS3xHYz6
R5jFLD2vrtpbANqRLlBGmsJXf6jz2Q22aqQRjZTA5W3r4nLVMqzyKH/My4/p
D0X98aaa/0WH+bHOVuVNdZXX6fnpBTzVm9J7IaPeQC+TS+nlD03RTq6s5QRA
XUe7uKkWWZP+WDUN3Ccd7rBepK+KBe5p6LKlppMrbvqHrNb94p5eF9erfJ7+
APsDlzOvq8a9mt5k8O4d/reGTSjtqgHA5XMAO9s+wnCNA8lp/TvEiX9otOlk
mlnPbzPYwOnH9D1Mtb4t/vwxjJm1NwWs7Ica51vPwv5mZQlQeNFMcTPK4vrO
Rd9Q60lrrXvrfput5ulRXd3O83WSlFW9gN35lCO6fffj0f7e3nP58+njvcfy
57PnB/YUoDM00KfP9vaf2J9PD/TP/cfW4NFz/ezZk72H+udTe/ro+TPt4flD
G+I5EJ8XCfz9y0/nz6hboANZfY0XceumbZfNi93dPKvbm3FRXlWT8jqbLIr5
7vJmuTurbss5XM4J/Pj9VTHPX06rqp6Nb6+bZwdb3BVj+l/O3r06Tn86OTs+
uTg9Ss//7fzi5HW69/zZwSh989Ph5PzizfHk4cNHTz7sTR5OHn6gyVAHirjx
7zEfyxvC89k8/SmvmiX8yOZjpArzeXFN+PsQ/7NOt6HnHfrQaMHB+OHT8cNn
uN7TwzeHk6NfLiZH86xYNPHKceGw7tvb20mRldkExt3NGqQ2i7xsm93pbeuX
d/TD2bv0l/xSSRd0u5Nyv5sWgcO7uV1l8ya3af3cmVY0r+auif1ZJqYz+/n8
7I2f2c+dmUVT681tcHJHZ+cnk8P5dQUE72Zo4+6c4LRq8l2/d1vYXxr62+rv
2J0bdnEDVOOnt28np69PTocnswQ+JptPHl0vlzSfWd58bKvlopqtADPtni/z
aXFVTAmsOj+P8xZufTPJmuXn3zf+zens5dP9534lj+oZgGSZ18yHvIVLAz+a
m2KZvq2rP+fT9p+Y7kEP8zQahrm39Ajoevomb28B46WA3aB5vSgA1Jt/St+s
Fpd5DeRslGazWZ3DniLjA42KGeysdbUJ4B7BHsWX4Tlu31F1/svpMWzv+HhC
nGaTTRdjOKXbYobvj1+dHQ7v6vW8uszmS2BIgb1Y0MbeLsdIwWA6u6slYoZm
F8Z5vLu3v/vT26MPx8V1AQfxKgdurT67Olwu6+pTNv/wCS/9cnblN1Paptw4
ra5Sbe4W8ab6lOOu4GoeJzjdtydvNsBAXgaAhB+7b/MSepzLrk2W2XXux38L
jBWMgfxpXi/rAngtPoF0G8bYATL/HytixPVaINs5brNrvRDcDb5i9HABr+Cr
6wLYnPXfeWe06/DX5PNNu5jT6Odvj/81GtMI59ts+hGWlR5nbZaefAZSW8Kv
bfxgZ3AGzXL2GXiBT0MHCRwD3JWDPTjR/Ye7D5/tYjfj6EqM98f7do4KZvsP
CczWUxR+dKaGOPXxMJqb8muYFG5JNNYuHH39qchvdwcwlZ0J3KfxMquBLMMp
Dp0MXPi2zgoYI313cn5xBZT7pPxU1BVvPaDy6t3JDt5l6SPat/91D3QXzeB7
PrH3pxcTYP6LK4AgvnpO1GtWRTteyFtoj2Q3ZiEO9vaVfB84vmFv/6ER9UfP
iaijhDg5rKc3cHjTFsQbd9FJpMzcO/wA2Mz2ZpatQR4D4Ik2TF+hsAXvBgEI
Ltlt8bFY5rOC9wJ/7eqXH/jLySDdOzk5mTx7uD/ZO3wXnxO8SM9RfgaebZRu
0W9pyIIZAHj+qQC6fyqIMK+33BDH+VSRxMPnQ1S+kc4b2Jc8p2lfFcCZtwj1
8m5XRhxjJxO+e8AzPTqaABPyCoRoP2V4NK8EsR++Pe2g+n1A2SezwnA1z/Ln
rFxlIFoCJnu2ETvcPqLZXbzbvQ5DjGGI3QfEeQGpgEv6oUCcdcUyySAtAI56
PgMEnxNrgJcAKGSxWuCazt6fTn5awbt4SfhkXiCfDNCYvgd0CCj55DOgiBnc
HZC2AB26AwDx/f3pzig9q68Bkv8iHNt8PdTyjFoiJTtCzUG5Tk+P4eKdHnvm
7XB1vWpa3J6nw6irf4iKwWbZYhcfjq1NaL17m18CHztd8XVtUfICfrLZzVcF
oTLZkVdV9XG17AOmIHQ5a9ppUmcEFDA4WxDO8VgmA7O2R3BBxzi75epyFxEd
Qd2DmgcEsXnjLXp3eN953ncngfDOVlNAFw3i3CnQAVnALtyT/DPfhzsuNd6a
vc23GoTNOoVLBOT+EKDgdd7W1bKaA/2HudZ5pixRk54J0qd2Hq8NX5n8soHz
zCdZ2RTx5hJA0P/A9HB2NfzP04hwwU8kXMjt/utjuPTHiKId/kROdvwZ3lAz
IPGTo7xuh5sR3QahpILLMp5CM/zm/dHReRcfr6bTJknG4zHI83heU2h5WH5D
S5YiYwT3s4FLJKowuJNT4vLTJm+T9iZrU3g/rYtLaIVd5HThUPqGMYCvbNpi
2uCdhi5yGm2UZPANIdZ58RHap80CWFrSo4zS0+pC3o7SUjhWYImKJQI9YJm0
WU1vJsieF42bSgq/Vg3M7hLoSFLn8zVysUAgYbwUoQt5vToVOEvbCgZpiQnO
05vqNl1Ar2nRprdFcwMrgfekQ03bm1ymPeENO7zAoXIQKaDHbFhCg4EG5aNb
+MqrFEEAKaDzfJbwQiZ8QotiNpsDnD9AnSTfEMTp9zgvmFmWLoCFR+4MZtHS
u0UGCBmkADgE2bDsslq14UQm2DX/CY3X6SUeih5CUy1giwC2ifXDPcQHpl5K
UNmq3UKD1bwtgKmAAwjnkUbnkd7e4O5PCbCKK4IXPALa/fk8JSoDwMPb5Q8A
h4q7wtlObyq4CnZkADZVK6cHs8V2BVGI/oEiesg/Z4vlHNYpDaWZbsN8Xt2S
PJQuADxbpKRwe0oQZmjzqxLXucTBM4DmRdHCGeI0VXELnwF9ozVeV9A7Ejmv
VKYtY9KFbfAnTR+7AN4uzZguVgRu1qmhG75BgHVhA64EvhEuAYXiIpmQj/Ak
ug9pOOoQDolBBtapewwQUxM0NQ1QsBmuD3bjKlsU8yKrw8ngmprQVVhwb52N
4QkQLMv0y5ceC/n1K+0djKp0Ez65ItaAQA71pqiGZ1gj1IPbtayQGPMRA4Rf
1iBV4IInCd5VEGkL4xHoNBvEaiB48WEq5MIKcMpXq5p2WgehZetuF3/JZ5Pk
jzkMigPTpAR8QARIfpu+zj7yMfIewGyA3V4Bw9TSLqMFBdZVy9Ua/CADcAa5
HgG3roAgAgMloDldzbMaFkE7a9ttKIS+gy5PI6GdO8+zBibACPSKYUtFuXpV
kqEDm4Z5Aed2VVyvagcphNppgtbKCTQA2UMoP8LzBYg9P709T5W/hB5+RAEE
PgXCFRQlAH7THISSWZIItp2SNAVokCGxWS1R8wLdE6tZk/QJw6HdYpo1OeLR
N9AM1jXPiTgEzDdFSjYlUJoRsQKEY9/BtqQDQ2aIVa9Q1CJqhAdAgIn7prJj
BOyEdvni2ns3udPSneiIRgyEFv9ElSecGsrVRbMQKMwu54TkpvOc4IB7XtNx
yuLKPAc+YMSP6vWyra7rbHmDszM1GF+c5qZazWfYLSFpPGFGMQxdYXpCQrCB
rkAwnNCLBo+AyTttHd4GggjaiWtWWyFFdWQCOmvXS9RW4TqAoaXXC6GPZbSX
H3NA1KdE3+u8WcKxFLgRV3xDEHXgMWDvva/O8YL2J9UwmaHlgFwAaB0Fchob
cOc6vSmub3CsAu898wosXzIYX7x93TArQSJizj3DsZ7RBiLhQBoFsDTH/8Bk
Gho/Pf8FwQYAgwEU5koX70rBhfgmY2gaQr8BUhk/0YRRYyI3S47zJvsEAIOk
FwdqVpfNGlg1YiiEZxF6JqwiYmBhYYhRAWzMOv+vX3FpxNTws+cH+CxT2KJJ
5BnwSgEa5MZcrop5i8sdZIm4t0fP97E3WOggf0SN0DYhjYoSZohoA28pzLao
e1iGYIneBAKkFweXnzx4oEyT8vgMvkZjVo1AJ7KD6RaD9Raeep2jsQv5CnxL
MkCAdDK/rhWfyrkxvaLtbSNChqh2mPcaATtUIO/ZEJv7KZtje4Q5vQcIJXlA
tUxKbZw/ER316pZfJ2mPncM5Ats1z42tywKYRD8Yb7t3eTudJEdVzbdvhkh1
zSgGD55VSEpZI7JZsYieI+bANYRz4YuE3gOsKadTLFm6gE6bdLvJc4AGbtF8
/boz8SgHuuc9y3jANEN9a043hoibdoz7I7vbYiNAnM2I+WI+02o5nuefgPJK
z8CNQstZlTfld/oFdpKFPvlKSXtgfgAh2940zAduyU4adtkadQ4NB1d/g+AE
8NOcDIhrvgcHdPVw4bC/1/qKRlS2yIAV909HtWfMNgEcEn7MAk+bLvO6Qea1
1jMyHu02h5tG9K67BiJbeuqkAfkMrLbNoMyR76QbI7swPMiEnDNMnCDWQnkR
mqThamJyunJbEClABk8JEeqqwoW6XDEDHS2OOgduh0HEvgaQQX7bvoZftcJR
aNQ2+fzKX6uCROIOsYOD1YWNwqqgv0ugrQA3555hxHtGnRXCPB6q0vGE+6RH
Fycn9N8pajMIEFUmrgGL5DW9jB+NcOdvsqWQNELW+jmuilt5kMZOSid48+8C
7jrwJCvgz4QV5edwK5hbDFI7zSL85IEXiB7dHUfKgbhcnwuJ4m8N+xRxzyrf
5MQhL+juIroFXqzOko7YSlQQuLYK+TK9VEpy0+w6K4CnC7BXlJ+yBvhMoe4N
sRnYD90x6gyQmvU0wkd4l8qKeS/YmN4ohKdqASsQ5MtisVqEZjWieOHEhasL
MjjTKpRZ8P79qPymccEbedB7s54sGmfhDTN33BHdzuSXG+Q9laRneN1EAiDv
q5aYLzpfIOtMyX+5GCHWJM4ad+4yd6JeJsBddqyJygTmimiIu2HyUaiQN0Y+
CL4+tgnStRFBcEiRIh+iCBNUEg7xHh0fvxJxFdWxjjoR1yKKG/jckDJQ3nxe
LXO3G2RYpqXDH9DWsXKef6MV8nEQM7EEKoEHjxs5zz/bppJPj7BzdBv6EkA4
znXHOLuOhBA+T6bJm4CA4cm4HnQt2QWuYwWSdFbUTaR6cGeMa9AxPW5QzdWX
L/Ah/wDuTSnUt48qCPIgqrN8hzPwI5NFLeinJ8lhMwCCZeXVUOhflrXoU+fY
aoR+EC6ra2ZLghAEIkhVo3CfvC8R4zANuRPicRNtldy9AFJVTtGqS8bRALnp
KxBTV6iX20YgVI74yd5DJPJAWxdV04oYakdA4Bqupyk5r4So8FYB5O7i3BSm
3QWD1wjQuz93X8NSXyFq7a2JACOCcDwSkU+DDokQImrqrumWkAC5NEXLFPUH
M1bLEG4jGRe92QgvlvktCljoUCWXutwor46gZZsJomMxoNP2Ci5TcVngQHgF
j3AluIARAY+uYsJwr0eGatJMEGUp93eDHIbcjNMY/J0iGGtg9Lko0WsA4h9X
uBoeksCr6aMcldoWgEpFbCOCMQV20GbMvLGwz0FcZ0Vn1BI4W7oDNFdYFuIE
gzUSDbHpdj65nqBMgLAR5EboSGaA+7oj+wmXluE1kxNgzToxHR1cCMhvxnJ+
k6PlmnTEV3W1cOosWzsJAryzyGwi6UZ1UnGdN6bE4nEii0RPg8hoA5lSpMdo
Pk5JjCYLHhEghgHsr0OhZBQiUmiTPCQ613SumQhAVd1fg/DuMJ15ftWKauWq
QlFpXJU2R5jzjwXdGxar4IRkeNGpKD0okDSyQQBPGvu+yqa47UHDUuc2+TKr
6+o2nzkE0shC7mYT8JD701Rp+mxJjkgAKK9NtU0O45HZjGDSCYjcH0+yWoor
E5APVnxGquEfUfOYp3ub1cTpBSoBF8AlAh4fOeNU7RROOSIs1N8I34sTEQ1r
sBrJwLiaT9BbtWruNF0BIrNeERWvTIOlYsnHfM0ngxhTDsUmZ9fSOqF2eJ5M
tQy9RmYVMm/BBVyxgrCs8FM1xLDajpEZYqoGVb1wrfLmBlACaYBQrcUmccLL
NSEl5fGA9Bc0d2q0VmUarinD7Wb8leH7VvTwntqRxEdrIR6CGeAwIC7HLdEx
qjBBQIqNqj+M777MA6skulfWt1DHAz2wEYDpk7EPHQOgqVjwnVqogj5ebvq7
fFHBY29ce4uSz2yldq7Y+GQ81OCsIpUZ4g29X0FAC9al0uk2gNjAwQVRb+St
UHCTs3LKdipnhhKzKPIRfEbM7rf+LPAg4wWotWmGoF5OWxNIJ3jTH8CGzFlj
iiaJS5hNDqdpNwD783v1Tlb+5UHtvvuKUprYWTbrx6ra1CLkPgWUB3lx+I/w
fabJWgkVsjvUMTTJ/rOewU/EsedFOXhksPe5u95XwJdnbNyAS36NfmFyzXvb
6h9816ToYzAlg7EywHr21K+Qm6gHBBD+jNitvCZ0BdQNBNMRfDpHbTyjcGwu
EjkeJUv5digMkUW5XLXCuOHdI3EfEeZaVrtxD4hiAXs/NZqCC0fO6ybP5qSf
Z2vQqtF7M2hOdUanJjovOUdirmu+sV0kIleYZwSDiLav7qMG1a0vAe/tXmXF
fMO64CzYhkA4Bvg3tiKwLcQhNQFCg3GyFFwS8bjNarzNqxJIFp7bMK7ZOD6x
JdINtoZfwCSi86724wCoo1iiExeY6qOhIMZkrHC6GoZHHOdjWd3CdiJXRaCF
FOgGNlIAjuVb3YtW59uIyccgFs+QtmE90HjERgIFBJQbnU5vif6vMBk6x/qT
MFGrcsoMAQJSOnxUbnw6FoTw+Ng2AvQ1qnlm7HItCvgAuALzvBEIliuELljC
vAIuaYbmfeJ6gfvPLsniEQF6290YZ6tbsqZ/q8oXxWxLkOAdkwXcIifB2B5n
gOMHRUz6/gSd2JgHTUvyHN7ByavR1N815YYjB1dSbxPax+Ev50WDd5oUn+wM
mtamr4vWButhLm4kWKZhOziIUpn6Us/J2Uphlc+R3SNIDxkDLkog5Qx481Zx
qENrPAlUkuKHfhIEw+gwgpDFXtR5ezdqJ9ZVnN4xOGzN8IzMGlBYkGC2Xr8/
v9ga8X/TN2f097uT//3+9N3JMf59/sfDV6/sD26RwI+z96/kPf4Vvjw6e/36
5M0xfwxP086j14f/tkW+icnW2duL07M3h6+2hs1GrCe0hTLi8wxz8sPR23Tv
gBUKGAX09asoF/aeHsDft8CDsRskeavwT9jttTdwzOfJNFuiZ3xDxwtI5bZM
UZc5IFIx4xN2k6U4pNZdC96RPmPTH/RFerkXyQvUcxX5lNCVeSKTEQJgm1bJ
djLFkhPUgvP9abpkABVXYjxmCkJjm48WqrjwPhNv7rVYrc4nfYMBVjQpccZB
8wbqks14osKhN2UrpmIbunvBQ16pH5iK1jbcP+drHO1CtDdwgZY0O+rIT1GE
FfvwX3B1+qlo7dDFNoirMjHdLG6DullSNq95PERlsHxWqNMUqZ0O06Tnedub
oDathGpFsrkzgsKzT/k6cEqBmbs3KEXyJAohg3Ig8FciWfHR1WjfDJQM5THj
q7eDw4F6peygRbRx0tgCHb9wm5bLOiuEzwT0wGgHgJQFGkD9rSjwmTGJZDzx
HYEuiblBZzJAMe0NuiGijyEa2W5I6T4tiBGAXwSnBRM9dqH9C8OB8oEs6anY
DNv4L4IP3cJZjypT5wMh2U7UYoFDVPtzJJbeJaMJCtrgzgezeSe/MTJp3Z3S
LF/maBqtyt6convfnRazEctVDSwAUwIYtgCCRXiLB8xCoI3zxGGl4oS9vgF4
dqP57rLVnA2sv6IaS3aGJx67C6k6QaHJ9kysNwYptC9KpSaBgUSGQGR3lr7N
qwrvYMwmA1YmbxKQdkYsEQlbTFJ8X9LSGwobh4xGPFebzMj52vBMiP28e+tv
yYoVkf9PFYCv5wvcQTp+HaFBuXnCVk20r8LgqzGOL5A8jL20vIxAOL5m7ws7
+1K33zgOZjyV+UnT7kzMba8tFnnDYoeIIHjT6RqaugsHRVajHF9X1UzmOAI5
cD5Dn9ro3FCJXFFAnbVDWYmizNk5E1Fc406CHStlhUXDikT0ACEWWA4AZkDn
0JOPFsX1DaGqBQb28cGzJs5JyGRnrXjXwjgI8OWsqhuau54NIVny8WPbJOES
dDemlv3DD5p/Vo8p5HzXBD1atmSdMJJMRX1GIubzfGqyjeEmSbswIW6tWo5f
kXMGuwgFU4p3xM7SLfF3RnYq3SLF5tZINSKC4lXfSx8wiRsDiev64phSjflq
b6In4z+OSQxiNr/N1o3XTIdO8a46K4k4Mul2qc8arJx6unS6K9xcdH+ZpF0q
Sd4taHkMehE+CWgmGHKSUNBMQyoCkih7jD/wnKSIUJUhQOaMbl2YlAh6fU04
+SW2FRycerwF1Vyk3FVgJC6gZI2F2axg/o2am9DeHg/ToRQ24DSra1NMkiow
UnMh5RS563ItOn5S2oshg4S3P15cvEXTHILB+ALfAlKbz3aoL96QbmftDaeJ
WHFMEvFBFCIZ2fivis/kQK2m2myKaQBiv9Ie3xN58WRkDwu+SALPo9jGgft8
CeISkFXxjjo++eHr1x1Vbt4AXsK+3NWCSQ+YSPgA5ORMVc3O+JE9z9v6PNwK
DgCm9Lg/OcPdwn17s7p6HwqQMdSQydTMnOqKZ5vx77/5DXQ+xm7GF9n1dT4b
Ezr491H06j1cRPeS5i/vcWR+PP6RDeP/DsAz/Zgj4s5LlIBhClcrUnbHBvRW
nBlIaTkhPSYelZg0eO/mq2vauCpFdxVYKaFkpolNriPZZVcNKLMTmDDHOfNn
cgfPrrwHLoKRuW7xBAm847MDUJwVNTLm0bkRGzGAfPAQsWP25EdVMsoRjXfS
Y+4t2H7JNpWjfI5qxBCLIKFbAJEYeERCnvOIIH++QnTd4mrs1MBfvrwhwyWf
EPu7kZ1LzB2tmDalNw+2BVsEr4g2tu5Uyo7t06wHzpIOffmBA4nlIR1EBm11
ozjyF2Tg+dJ6cHG+Jnx5g4m5g1DFk8tZbIWsNDHEJX+DfziXJFwCav4y3XAv
0t1047VIk2TjVy8RN+uz14yB7mr9w/s3x69Ouh8km8eWEezpwBj9L2SU3ke4
LZ3NCdfcNqd/83WC/Tc4GhClzrSG2909K2RdEIIY4X55ENxiVBsnVzDEzSEo
dTyIu/Ez5iUjgkfXV+bLl07eEfWzDu9+9u96PjXJ4XzuLcUj76yGJgi1LGOv
xPvzz6VayJpRwAkqAWfSlR/NWTEaRJos8Xt/H6L3ZHbAFdLtjXdOyKdu3w15
6ZGVAmXzDJBB1J14BaHggDdPO+yGhhjTi+7yqAoQ9k623En1bDNlSZ8URcy5
EGUv6QWwlY3izGZaLYUidFmySXJuUmsQZRvDm6TnlnPoRTHE6lNnFepaNBwt
QbZ1kvwRMPEnFPNUFX3ZsCntipnm+OSRlen6aqH6WAZH4QioWXd2SvCCaxVe
VeytUqNVlsrm4UEuOVJNtWmt8kfiwIrjJxgUrBtNvLmo1dL0xBphD3qJyEJE
qPwa06AQr/fli36GsQ6ldTIKeJ8aw2JXdcmU3VRgeUm3JUQwdL3nULoKU9lo
7kTS5W8wsCpBgBjzn8qlyNwVoTgGQoICoywzMSH5ewdhLOBU6U7mGXYWyj9P
82Ur+gKa0C06v+WfEZqLdr5mqXIWMeOE7TUUhehfBGWqh/PNdoZtGc4tousr
h9F3FTsL3Qq7EPEdTil9XiwKCq4bDYlNNgaNcEUs3t39sgKceI7Gcx3MIlAr
7OsD9PUBMJWgar1XZojpApOq/G8IrgcU1SZqkqIyVlqjsru/7004WzIOmGwv
oWA89MccsQYRw29+7ecTesB7QlYY9CACQvKBnVgwajl9g39K8iigl/Tmq8n4
3NCHXF+uWw5udiMhtcRg2jrjINB+E/FMkSZLVhlyIGHD/nkAqNfss8Q6L+eo
zJ4iS5GQD92iZukWzXALUKtDPORqwZ5n8JOwHdHAK5be2b9UbU1BuZpPM9xM
iUEhaNBgR3MhpOFgNW+QM88/ka5F58Dz8jMRqRsWX4mbx/UKLX5EdFnK5j7m
a/sGiWbUo1wLw6+ycDtHslxF4KFqDGZO+Ayl+0SFZ4SzUvUeqjYQbQbBFO9i
sC9svfGrJBMLKhHzbBZEA0scRO8nHTCiHSfvR7gc8zyDa/zkIL0sWg3HqKsl
RsMDsv9Mnvvh06b4C80aeQZAqBTrLUz+oqrNtV84t25syIQQq9ho60Ad1VDs
HUypUxkfR0XfBY6qGylCtksht4FBnCHcgg5kws+oiYC/7xdf4ur5LY6BRzg0
hrtGatS1wHBEM3T5zW8uNs+JEQiFvzp9GvYaERvNXV0s8AZg2EwPiyg5APl6
jGxeCZcJmQjoTy8MfvIMHl+66C1LeUkbbGfb2yK10kWwi0vce8h7Yx4+3c17
GjYvyCIDRDbdBaGBUoBs06aO59llPk9ffs97PCZpfjf9U7r/W//k1x1M8mg/
QT45+l9pC5uSTmgG23sPJ5OnBzuATNzDZ5PJk4Od7xORRgDdyiSOg6sj6dFI
45l4P8OOnGsUx/tKSCgUfrYebKDmLDIwV1MQCLreWvZw0FB/TrqtyIPsK4e7
FM10RcmGkW1Dnn/IVEUf5t6Vi91WH6SrHHj27fclXcBsrlGhp8eB9KBvxVfe
ki1srqiGLZqNeF+YO2EgrlkULhUF/cu2cKaTZFFdoiev5DrJAFW3rIpFbjxL
fwBGEhhqdAZf5tlHjn0zR0DAnUHCoggoMkCTiUkNxnoSde502lH44qkjLuEz
dIQesTcuRTfDwhs2uyVBBS5X/yPLRFkaeaEgkSB9qade6ml+mcPUgV2hiAAM
s4B9DFhwpYcyZ80jZwDEzBqSGYN1qm5f6yZhurxijnySuh6V+42/VnWyiJ7s
nT9K0Gwvfv91HmgSy3ze8Z7i1oK6Keou0XhrYGZSOKtUExuhEYZ441GKmItC
myj8h5zfrTeUbFYsiXO2FsSat5UbLlo73VT/OrGNUG8w3nhl19lpqLgStw9h
NHmbaf52AoYEQFIcsfuut+4WuaZnEDyyYPyNwyWUgQXj5EWf3nek9k5XFbCV
+dIMLOaEmqijabRk5v819YY6kcV6Bs4ghnAwSRmN4CWWtnFTyTUiO1OQAxyM
h974COUERhzSKskN2Xkf/chcwN6hfe7TRXAANSefIMxNZI613YEgMmkJah1n
dclrRIOsz+AIBXKzku873EIAkQBDo0HAIQs4awhyvj6thDlS5B5GI7P/lyh+
mYyq9mGZsdU1UuOkVzk5jfioA1SL0qTlS0Sb56biPmTSIv5J+0/oIHAXz2mR
aDwknmiel9eome6zRty58qoMEhQ+ruP6WOdOzDVr+UXM3aSxUJ5MuDXBLOzF
9uiRHBwyIJPEfoprObElTbtZ8CfsVnwinZ9q0oU10ZQWl2Q1xSsjCIzd+Bmg
cS5joOTFdWk716TB+QznL7wRKcJ1goD23eXnFnS9zY51vYLbCthPHUmMWTUG
zfGqKPKzCShJ/pqSOe0HBHL5G72p4O84PeFfoeXDzw/34MW7wzfH2JY0/Qgf
e/vPRune832kPPuPn4yRj4PZzEBGEVNscG6o1PecUrDZ0cql5E7NxzjcykvC
FujVXGaSUoGplV060qgtMCMPnDXahEM6hmAPllkRGyt8Id2CmfJVbhBS27IN
MevErIEIf2Ner0bFTW3TaS1eAd/YEhZHLuF6Skofxrfz4irv4N6wewHbCfA0
C8yqLtADx0IrZXRKnfG1zMpsvm5IhusBpR70PpwwZeM7eX+qh20RE/RiKlkZ
O8YR9fhnkzt87IR/ejA+AGjB/z55iABDfx1InIplOoOmZ+9PR/g/40dPmAs6
QuYtoEYnoXenkmOiCFZRL4yRABoxVjY4oGocnzF0ddXmZSC6GaeJYd0Swtbr
wyNNsZyrkZ8IhGmYoAUtDiZfXWICmTYProS88km6/aZq5ZbeUrS2kVCOuzdF
gaQFsKydTYiSt0bRnBxGIJEOLZpE4USm5cVj6GqUgPHr1xE8svyeDgYeIQy8
PjmNL/vBeIZJmN0mMiH3Vr5n0obwCWBrTXt6VM0kU1r6RJpEXCiRyWnmJE/P
Rijrzk68Lh9O1nhBmjyZGdL3DlwaBWoifp40Nrm7oPJ3W5O2HZ4fnZ4G9ahG
KmLjfwp/po9kZPIywo3i0PyHnx892mG9CW0bd66TNNdj8yh7tbopxZN/Rb6c
5//yxrt2KR8U5TLn8/nyIn2A7BEJl824ZeyOSTRfbtGZH0mcK+UYxDZbX5Xe
WNxQLqFvLJ+R9RnFcdj5m9UCbZ+i9QUerOTDLRNCklkTJRPbIcEfqBDK/ShC
mQYh07jnYBO9uIlDt8QnnrBYi5yIPkE1aeLY7WqZ4TUOZxzEe1zNgpOxrdXh
o2hZRwVs0TxhOoLMQ9r1/rcIDDKKiDYCbkNwWaNbnhBOpIl5D98uiHaCatJT
1nDxSImMpKNEgQV62PSMoiTJKy9rhDVOiBWBs6OMDHySzDFReB+yIlcAJhqU
i5c/mpiYEUo4oklCaQ+U44Ipc3dKd/EUkLhEWyVeObANT3kboHWSuvYhzMFH
NvopRLxnA4BPKr7fphfRJjpGN8Zc3g8BM6kJa19THReOZ8RVa8SvnlVW0lQm
aXc9fm7QA64eEzwzUKAfDOqZF6iWaSlFlU4K7kcDWGVKqXlYEys7s5ektM/y
kxgiSnxD0pkAfxAqCgsybGP1Lh8HOgAZtXPM8SVp65BpiMVEh5AJ87CaWoLG
I4gVI1BIyxnmpGx0K4fqfDfxS7mEfEExKS+JWlVrSnBjwhpjW/QWpnYL9Q12
Q4JYL1N3+v7dGw4VMCLfEw/1HeLBVc0c9TcVeduENU2FZzh0J0nsb1bWITg/
ORiv6vmY9JmqttufTA4OdtJYb/d0MgHc/705ETzA8lrQH+DQc7jQYxNQeQmq
tNo+55+iteJPunor75nUDHRmvRDLRX+TkclOmgnKaDD7mjcWs8WVlWRk4Tj8
N71lpDAK0MiUrSqDfuwqH2Na/pwUJagJDMl9sBuCVMp5kQXg4WljomDiD0e6
UgI0urNJcuISLvVG4cRsN5pBsrqVwhojjKxvWa+PGn+OnhlfVhq9V3KGtpA0
CZFBds2ekawNUlX5Zb6uRIMcuwKYVNhWls3RZ15U3HouVFc66S+CLjVQtWuW
+yRPHqxpouYPTSGAOxn8ufruCKJjwWaXjkvkGUzYHMnmR6+h58tA1iQx31jQ
ZtF0URNGChJ9wfMRswR3gKMSt+t6GkU+/lVtyBnbnPP174XjcXfqq8zwrNEL
P54en6VnpZ3kW/My1SjKrR+Pz7b+U4eHzAOPRjOg1DxEpBpRmFO2X0zbjfxP
CFhANMg7Ls8s1Yc7OzTRXA0w6Od83VqLPaqxoBQ5JaPLgkANuXejIG9aDp4j
W8h40uZLGIVjegmGXBZBcnsF6BY+CHIAljBQndq3dXTnf4eSLqD28lu4/fy/
ALkzAg3oXX4Lgne/AMV/IZvO79gm40lB8tWjceLH0u0/at6xs5PXnSy9wQLB
vJsg8zhqNI4/O4PbTvEGJ5Yb/bXnlLZhlB29J5ryjF1YNa8JygSE2X04ISy7
ulVo5Li2VvUagGwK9RMK4IZpXRDRMrcpOiO9Jdykq1kD3IR+zJzOx2bBSQce
pO9YyyFVcX4gnhBWc3rM2xIrQS7D68g1f++JcPfbqsQQDTJtP9El4k8EXWKw
I/RwuRY2sKOBGd+pgalqud63hEI0aIs2QK5pSEPi1TGqdYAtUWUOYxpWHovg
3WSFKSiigVgKwAh2RJqoiEZDW84qRQ5sztfETIlXLesx5useMMGWcEo/lLeQ
tANgwc4WjfqzzTH7qarMRAhhrIKcXl7CDs/niKF5nkXedHabVFtk1I91X2wY
A8l2vP/4CSOrekUaNCbiHNoEG2S6KA5Q0PwGDN7NjYuCt6yXPjOT2fufP+na
+5lVWZIHMIWX6VCRT8DwqIq2LdEmx5sExW1K2kjkDCQsa4o9koQreS2kBgKA
FfoaiteCGOPNqVnSyOEh6mVi7hKYS+dWT/eHMHTv2tBTDiEklbwYf2waCGmR
Msjy03HhFE1hwDdaFHloJ5Co+EiohXHF/UMib9T6w4UOLKuUafVodq8Px69G
+L+v6X/PxauH3h3BOoTcvDtE4RY5Vf6Awj0xIzZFa0lYCun+SN20f0DqZGI4
Ex+pe1XUlA5yfsVCulv9hGahlG++lp6eYU8Js660A1FPQdx3PY2Euo/Pw0QT
mygrJ1GUfPQkzBIWR7mF7S7B7cGU/KK7A84IuDtYSELcrkQaYMjvERuj6K7F
Cw/+PoQrmmXGuUKyMuFNxCuAUpjGBRCPF+0InwMli1hR1gDYyVC9J/HVe0Tv
KrV3iFFw2kF1VdWE53MqgZNoilduy3VxOGLctsElWqs4X2yZ+j1ISeiN4Di9
nFfTj00iJpImx+AY+ohnwSmeKZVWVbs80y4TzhGlcJHsXJLzIP+8pFtCfNof
gfnEcF5MZf8uVlx1Q/V7mtMo2QWGBubMbB5lZcX1/BgFTFIKOoj8sBJzxkNM
SXHKptQSakMSptoXVSsdmnOrZPMCuiocvnOMs7YOj8bHJ+ODZ1tMj5I4v7ia
xjixOsctPvx8eDSC/z0+wf89eKZOnYLmaB+IfD8Ky2BvG3aA2oQZR99Ajawx
5q6D0w5jS3TL21yUL8Kj1BbRtEb9RdhzYyeNlPb78gX+g0d+iOUENYfwBn9N
VlppR5qE61JQGGqv1LjF1gKKyXcKnO0z9GxhPxr2wWijmKszFKHraaqhNI5I
4TJfpPCw2t7bCX3Oxj6h8vajHaBZs+0nO6KeyVtsveRN2D7YcdOHF5jkjsMb
LaR71Hc5leQNTcioRlsuMCubBmvKP2WlFnohsy7cW1yQZjEQfzmGCu5UYcNp
/FFA+rOKlA9tEsLyhFjdYENVF7lv9cv84b0EDpIhiNMPQgf/XFI0D/+NBaXs
BzOhCcgjoeFLnL4+oNakggq/x39u0L/ePcDaUd8nnQfwmdNKPUo6HeDrQa3W
gY4tHLIbnZ9E48sjPwP3KJ7D3pOk18/GaewfJF70urnl/IJB+KKchSJviZgl
jVTQMh1VQZySpYtm36iRd+2Zsb9C2Ua+ScLoOU0OoA8W0JHuhPuE7UgYPGY7
qiruE89pqfej2CCRsotKxU2TrQjsvBWyObQhXpuHiVi4AR+truMVswWS2/kS
xcc7JTxKLs1x7ZzMotMdOSHbM5fjxG2VzJy3ywYT5j7Y1nO3KlFx6FxE8ADJ
rcQeXYYChoVuKF4Talpgf63WprJ04Jc51wXRHkP+vpBOgQwWqKPngIFggOt1
wn7OoQ/CgZJwjRO1auirHqIsyKnWYm9sz3gLDCDNLcrgozYy3o7scmPkJkkY
d7E3IllpQQcMy4+smDaks3bBqjodsrJvWq1qdKYP0ebEq/kpiUdKZyHkslNT
HivODFsq7zsuyjF21xkvULxRAFTM8+9cL2JnC9VRxSnaxdxL7sccBobAoDmF
8OTIM8J5gshW44gs16J/MllAQrqfC+c1LCPAsI/2laDETuF3K03UHallB5fI
P/xbuhc2ixYcs59+0ySqzopO3UgAni0xHQf6w2QLiboIdlET9/FGoVIH9YXz
Ng8JIwZNOI26wmXsVBXnUULxsShXuUS7xeqLNdcToHO4P61VhD6mDwPR7Twn
PR6Q2IHHd1p3Dsi4M+LiwUP/eLVqC5pMHu3HVp+bW8UjgWr9Cz/p0i1puBWu
UNZJXGX32Svk0aABpIdQnjdh8hGGA2L/l5oN9ypeEGj5QeTKBc01a9BwbJnf
mJXgnHCKoz2pODiGQdEflAFdM2lhqeROljfKYiKdNRoiUOa3lLSBRncGBkUd
RG/ns/uxYV3Y0Jn3oUPf9ODDvwAI+RN1KA+Bm0YlMUPF78UoAA9/E+9Q8mtk
/rslY8i2ld1Gt7oYBLiJM/epYMIYi3Nj4mUcs0YSj030AZiyhm8xiYY6hppJ
nAtCckoqnKKSHNVlZdE6kqSv9kBDNsZWWA3yHSRzboEBo1iCOtPyXSHfNPsy
oXEIZE9Kns9TY5OHPiNjY3ENpAVDnhQFderZKcMTDP6+KNqWlr82E+mXL/bo
69dOjllyvLgXYoGzGuNJBHghm8BOfJx2r+1EB+91073XuH+Nt4fL9dH+5HpR
UjfODFFxxktLj6otdXdC9c5DFp6kR90LCtNgui3mNnsjF04DrwrBCES+Kxnv
fpaW2/4tc8/U4nJ7n4v1jXuVdi5WDlIGcC/bUnDnB/hhR3AIB8DvLZzOFBi0
//UqdwlyJXUS9Yd+iphPBD1fzqPniQselyacBU60hwsrhlRpdvXEanNRhdAZ
O8m1dTU3dnaj15CXMUTFExuTOqU4TfA4khEGXOd0hGi27NCh+eClkkvIxVMg
h8jm8vTdGchA/CsyrXDQRyhNileVWJTLoozz8N9Wzp/yfiBGhzDGQwgwBr/m
OxYd9SCdXV6j2SPdPs4vV9foqt6umvhGShPdPS03xmFlWIST6lBSyikJs+En
M+pRcvQXuSnBfUzQzxeHP3FSlCK7Livy+zaZk2vqobNBguU9OQTHDc8pvgSZ
9EbjWCjOsAxbMEp6R0Ue58WnYp6j6icuxEWOUtKQl8ORjglc/SVHiI0o3kM4
QU6LHDJGlXj9eBjrmFaMxWiTBflxupwHJvWai4lVJUOJUq0N3TVqtiG5VBjL
ArwA/+CsvWukFFOMZ6FSXMQr2Htia4M3DDbCDAhc2LqsQn4gDBGRVMRcB4xV
ouRiJSP4tlgUi2PimXGOS+8WFhwxYyASWQzWRkV43QAJpuey+fHUZYxLSwpv
8HJF0cO4bAQXtsCom0HiPSdCvqqClQBt9jGXbAcYcLHCQJhI9StRXQl7SlK+
X6zd3FsY6T7EuIRZuTG/Lm382vlPJ2RCmEpgudXzCTkAmFy7vBTtwD3k9Dqs
auDSPhgpTZmaSDvK6aU/ueS5PEvOnieaCsaaDBCUqiBWv0jXOedWw2MyDYzV
xNEk7zQM3bGOaM2ZuBByOXE6yb6R2qOT8FvJReMlOU0EnM0wTWCbm8AriTLI
Ynlb9ssbmxJCu3WKC6kiZIOIgJjVjVG5gQVYyvrB8biT2mJgZpF7EdVXhTmQ
kqMJPQfYtsAhxUPdFomGNnAX7LNAxIZM4FdXlC/4vKDqrTccfNy03Nx6T6x3
JTBU4fO7RkZDv9RVjeIuReoxzuA8Fcwa8eiJBkixE1ZVdRQMUsM0EziWUFst
e2OVKjmecgXAU1SEHfFh7PyZ+m4JeiVniq8qh6H0GsnDKwxL09KePEgqg6C2
YrHkaM/QliI/Q/U+HHzFeoHaVfVj7aRL9mERwQIcSYCaXB2Sg5rCpxeBW5bY
lTRMX3AaFoqqu0rjSpw++ruWSHXLE6PqNMYO/T6iPZgMVhI07zeaShKIDi9E
+PHlfFVr2GTv0hOvTdV5klAaE5cntgum4Nn1dZ1fm4ebgxi5Mb66KyXpofw+
yBCklVYTN+dryuAjMVzRzNfB/K9yAJeE1Yrj3BHwGDxxqd7DBFHqklukSgAN
iRIlbUI4G1ESuow983XCCNp2JVSQoHmMdR78S9wqI4q/1vRwYsSkfObZOlYW
I0ok7QEfSMBaijZcUcpGccTQfVUT4QmTBxJGKQg4mpIoyyJe2QhyYOqaEckB
hlGE5sjuEQaW9I+i8FcZw/w6jgUHCX3i1kESCXjSsUfk3trDYshGJgIuocCC
MSLtTW5VCiRishOhZpgFtj+vAwGVjwCbtFaGdb1pEp1lCb5GYewfXyExguwy
jKHETRVOWu85SgX5bBdAox7Y5PStMl3z9R3TQSY3OvnOzJauF5tbuKHEYZIj
Vy0XkAqHMQy705ikZwDqSU8mMxjRnY/FvF4vuI6EztCXeImI7H96a3E/eTd7
e4ml7jjq8Nu7unk6HdVOZ3s9XN1DYUO9jxkvBNkwekr88k6S9B++TGfNWGF+
d1DVa7t19+sx7R1JqN9q6df6jaao0lmPYb/9R7CQMOmhf5xgZEuabI3Sh+n3
AWiH/8k32go+2nMf+dVt/si1gu/3/fd+zZu/d62gg0e+g8GdSCUby8C/uOPB
r2GIgzTS2Ftw4varquvQq+/Up1d/6xXlYHBmUuO6gwLmxCl26wwor0A+wOya
IInInO0Mm//y6Cj9Ka+s78O3p+mXL/B0Ak9htpKlLEUvkRYI+4hsMPJnNueH
7D2DWVvQn1tTI7JGucLufjp/dqA92UccHUypTajmjgQaWfM0n8+Bg6mKmUQQ
3VZhEE0TXxOBKkiKK8WZxnrl727yTAsqFSgLAS+lug91fEGVXYlFGDQM3qmH
ZTOzWqovuu7eZG/S7at5RZzkeFkVJfnIjbOx1N0Rg8kyz2fKklDxBtTDz0Pp
9M6JIo6n3LxhexDlNzlsqsY32oEZN0rIdsrpljkZBbGwlG4C09lDg6tKMxgn
mq2zL8Sz8Bu6XBTlqmUlPrBsdaOBQkkgmPNMk2FOWzWJ/vT2PG2whCcgZ2AP
Tgqx8uY0GdjUBbJyCRqBQ7ERUdaoBxNIsSGiTJbGi5qkxGJbV0noAxUxlrg/
I/GfSiKOw4kXC2OcNw5v2lc5FE13EQpkYTcJiw/ip9pJz4bN2bcY7nKFaU+k
iAe+QBMIrkF1fSTjcASGfLMFTOHHvN5iiodzk5oCaMSjsVGdABeBxQ1cSqHF
3fiFleTLpiAANoXHHgpAvHNWitrSuGI5+jw0G6uucEPUBqmJtfHmYI1vE14b
0GiuPRGNf/TboiwUQVHWLM43xM8VXXVf/D5gov4bRTMbvxlvbqIIoveC8UDv
cbgP8Opv+GsMB2gDXtP8Vui9BTTCltkldvoCqI/9Q1Ib1t/9QF+4L5C22q50
P9AXfgSkpbYTvQ/khf/gwI3g9jAeYey+fAwf6I72RpAXfoD0CXzAO532P6AX
UfM0fQofhDPofGAv3EfPcA3XeRr/0zVc553+0/S5sQOUZ2xJ6Hj7Pf03NiTw
uy3vmqFJhrVyFWEDC3+XBOjqdJIwkfCe0HBvl4jQevKNmSMoHyThcBZ57hfk
SjN1Ya4AoN5qgl2RmjjdRoktPcK/48VakwH7NH8quIqXx4c0vAL0OidqJStI
zyUrplXBYMWPSzm0RAtgQ1U/MNUJHmilOhpSc9xnF8hyRHO9eycahEfeCMCq
s/4+YIMhMz1X59JIaY0cZbMhgVEwxTSRy5+W5YhS4HEyU2L+QqQt9dXkTaOZ
pSPFs2y11fye5jWBI4bSWc5dnmYRKh6z+l65TvL7Q/6llkjZXmJTjsJfmw+b
qKfkk0b4J7XUa7GYRtLqZJvDru4Xb2gHo7GBeiT/ACUT4MBenG2xQEZyjDQ3
sv3PgIls0u1jzP0BdPtV3rbi8HW4RDNCNg8SA7VVcYF+3BXOfUeXMN6rs8Nm
B6O6U/wTa4bAf4D1Jl1piGBlfaumU2cgCLY8dYgTUMG7qMUmJ1F0dfRZLwto
xnPQ1CVcFqlomhW//olNRm+B0JFkweZlbGNZITgQIz2qCzQPZsx9c6cY22bx
tKJWdVDeWRAZwureFDofeW/3nlHI1dQK37uaW3QnQl2kiVVsa8LtoC+98WVV
zjFkxaFAv9nMJkcrCfofsdjjbsRzpVBHoTFx1Ay3BYHIFN0EL3KZ6ORGtqJ/
YNrOxBJDCEyUTs+V3KI8dxSmcZW3U/PlClnnJFCCslc1rNXyqzXcqvUAjPsP
eeVd4ET6/h1n9KbR1BmKJhUSJAeIsEl0tnggBECTUXPyIJGO2IOBQ16lipJ6
3VIEmVZWshQa8Ob9u1PTfLnxSfAkZqD3FeB3vUSMmJw5hBUJ9h45AzkTvMwi
HNP6Iy8Db6k3jTXBQB3GLzSpPQ9i04m+1qjzCzJCYwUqLk8mR6JHEI4b1j/q
LojrIZPeet3vPA1pDdTBhdHe/X1ECe0GtP6n9Hf0SPLyottf+KkeSfjkg837
hfrIjVd1Ed7rQj5Q3y/YI09EAWrgVuPbxA5M5rLmXMle67NASYJnm1CTnveb
XRfvB84WJulWEIHyTi7lC1Ul0nlw7tSm5QC2qHEQta1TUtVYYw5Qmw6ni5F2
rtZIQ4E47inFUa3bGyvVClDYOGeWyk1mFOBGE3z4EVgFROp4eUyZAqmg1qfY
XyUUMPG1hdC7KcqRIjL7OlqjIGubYt8JN3L2x63u1WRgf3kU29dssEFMg9Xs
Ij+cTmnx+OYM1S9HvQBaF8PRqlnRQrJaCpAcnLwpoXTFGC9NTiVELnDe4pFA
0YzE6MVAFH9g2efjYb5raDoZ2UMlsvPS0ujNBjKCmPuiVU7M1OcxWtjwsqhs
BWM1ytzBhjEga/Kt9mQh6LwKt4aYYAg/b3RXC0gpntfZ3rkQrQhGRR3Ey5sn
QnGa//r6lT6lyalHZ6/qnno/dB09QzAmsTZH1WEooPejxGtKxBwXvdh/TMU0
fJKSsuLvXFxiJ2dHtCZNM4TcSdjM8IWPvOFL/Rn1heQ3M8cVEhkFgQ0kV/4T
fYBgpJqT4QwRbV82wjPWBpaS9SbsCw+9uRcg856os9ZSCu24Nv5b3cjBTXZZ
gR3VV2Wo5xUQXDn/uICPRiwqJFgegbC+EWk7KdWxRuHi2Y9Cecp5NlVnuqgQ
AF1h1r3Sc/ncNkoSG0RFR+SmoBKXr0iW9suKdCDdR/Viok9fRbB7pag6i16r
gFkK5nhZBcqaEmsVSF02/Zhdi9UBJ88o8tKIoHAt/e4lC0SUbk3udLdWJaJA
538w4HCuF5JhJTjWR/hkw0JhT35RahuCK1x4NRdZKCJmMVsD4zEz3CGSi2Xs
5+eUiefLl/P3pxcTZTU6DvMSUWuw1y1iyre4iYA8/dGhvqP1dA7HdPyvOHf9
W/IFnL+lx/gfeMIhIOtIoz84vMlrzoFPYw88slMMbOmekPguOOphII8zV18J
gkGnn8hIwUjcoQ9zEhT3kTjNE6ZSlT8bTKwa8CDLLyT9CHfbsKWiM/o2sIAu
Yfj9uV4Do8D5hkca7xI/Qe73d9ZK0MyvoZUiHmWSJR0IffuCfmfLsT4U9B81
5GcvSPn6G+v1spqtOaB4Y5xVpzHFFX8PbHQy9AK2QMKy6OdKK/tNq+a2mHU/
oQjk3V4I8r26xgv04aRkP49/tONmOftMH23qKDRI7E84izs7nfLNG2/oeqDZ
58V80wS+0dlAM+ys85XOOG6V2kIwqmjM6WeBSx+LlDBWzzMyQOw9jwQoV707
3X7tfjnpyT01Aco9u1OGGqWYwp0cJkPhk2jUbuASXez8M37VkZ9Ed6pVm7EP
dE9A70x144/sy6TL5aBXlOTYVV80v5QEMDj/I+3+VKHsM1f3/p27xZl+9DHl
j2ibkOmnI+lYyYHOsvhDKhJdofFdrZ/KqFIdORcNkMf71RdIO7mGXKA70TTz
lgiqnaH4lrDBadhg3tLgnsWOtCGq4RIk/vVOTHSENmVRlKNRZ2GE7qDMHQIs
MdwxtT7ntBpEulyctXTuqONkQ1nvMD6c1ABhZlbMJ47pKxFIw+Ki6P4OguMu
hKM5/qmRne5DoTz+caA+/af/RRToN1HX9yFDA18wLUqJGG16/S2KtGEig9Qj
2KrwI9SbOrVR6CZ9xzWUBlGg1FfyiBAeRZHHqvBS3UVgXZHjYusUYRR0Nwd0
IjUaPVJEH9TPGFyEMptWZBZnoEjP69JHSYijVtFmf+Aqdb7GPHe+tG5wtDCt
plNK0nWVFfMVVunBP+jzFYghkwmKUK36XYjCIZ60VhJKg0sshcA6YwR+2w29
GgX0geytOQx3iuRIch6Om5NRZ97u5t13dQsQV2ppSv2GR+EwieixFEcSvSRs
xdn5d82G2VmSx2JZ4NLJFay65CK5pKyzxBfo8bVqeRqoZY7mwZNrndenqgJ6
0V9KJrXu1YBzHCnpGR46WDzOxvsLH1Afhgh6N8APZkGcKpyQioEhZWCgIOqF
yGbebQRgTeNADkZFB+6pf8rjLSOowK2B1jgpl5MBSBFsOkfP9LdYQMPTzlnf
KITpXqyCiGi/Ij0h6X2HdYRdpzLLnRuum3E41qdcvVAnxScGHOStUBaK2DCQ
h+houpihtzitpOJrpESOfxEYaa5rEckIGkkHZQwAJiVX7yw0udCJYjGIUorw
asvO3mTpxcmJ97nzw7hOY9aGJ1ejvvHs3HJ/2ffd9Qf7EH+BWgBOAGNW21Fc
TFzCgVzA6ihoE/T8NJeKRdX1XAm1xlJT1CFLSQftik5mgPV1vOiIo0vQq7S4
XtWiiw82At2aEeLlkhPuOPwkavgkFEbp1CuV5DeBBhFKJgvhPCIPCqyKYrEG
y3w98HH4yFGUYdg8jIsDOswknRRNV39ISgGnNB3AalzzG44Xy2BwmC+F/gve
D3OcaNbc61xSVhHMDHQZpf+nYnKhEITHpxxT7wojSJ3ib64yZMikctOpVeoy
AzXV4AndWFVI6p8/6qcf51AKrDAMUDlypnkm2oshZK2rwDsgFzeUwpQql1qV
punqhrlAuHzRvYMC9d2DIVhtJAFf8yJJ9tLx2AOP0Jir1Tx5gcmuNcGAPf42
pO13ukRKAp2xbGRPyegrKYBmEnrO6Zy4ETauUZj2JqLeWI86Y1EA7qocHk5e
Ss0jCyLL67qitAYzKY+tnj96y5GFIHYLJVMY9AAHjW4BRgi3MqhXyLk2OoHs
E2yHZR8JM7xX+dbttCuxjOWkg+BiQgDai4daMgD/msbyTOe1Ciq+BYPoC5dE
hhjwVfT9Cxo33B55nv6Kgkb/sY6joxcz7j/d9W5MI9fmRRr+JvlpRDKMewCd
hn0dO9DtBqy4VsRx3/EePe4xn1e3id8fBoM0SYZHT4ODKD80F050oe3Oxf7J
N/jQ+3zux9/o/KJv5KF9ho60AxOOvuFnYST0pY3LgSCtRuHN7Ac7IKTJ469i
uNVoUL7HeMs/j5B1IAGC8kUoq4I5fQ+jirQix1XVTOm8Bf4R86FONXBjS1K2
YSh/6E/v1WJVmpVcHAt/KcY/FpxROp/P8YruRF13ewEcOV5SyehsNSsqJlxA
nyqUVNaX2fRjPDNlXqxA7riqC3Y9cz2LRQpZMi4hJllaTubCwPtqyBxkEVhA
YYfokpKl6poLHXeCko2pkt701NhDIlQGXWTLXc7ayvZOlLHXHAgSavVe9Ko9
aHfhc7HMoWlLkgkncYpJVM6ZOMruN5p0GMbjwk5SsVVyL3DWx0TlCObBJLja
R0FwyDXTbrYfaitOMgbk7wYde1EnFZdIloJVRA50Sa5cFtnpxKSH8k1iZnuZ
TI0H12jtRGkZRib/EsrJcuWfJoNPScrniEW7WVzxLJGMiJoz13SpknGBfaAo
153Wagm2PaqydeggIxAWelGiY6BZPNW7gHWGJUVAFVSLXFtQQtuKa5VLyatZ
QdVGKy6k1nIEjRsmkLW7Cl7Q7gcq9gUrWiB3BX+H/fgKNCv8eulGAXrxhpYy
vqBj202PZSpj+2B8TDN1qqhos/2UQ51AmFmFNVpQznLDCbyRJonXwaqGzAsz
8deqJHYXMh6WDXaYbtN5gpDSU/w3VfsJCBzuf8nVPunKqaBAmCT+OCRZydQ7
cjqvGvtWkSPfpI4fShidZbaPOSqYYTDKajlfM5PWLDkcoArOplzb9FNRV+WC
XDg7Ocip+3eHF+dRWgFWdHleXDY3qlCsimBCKd2tYNQniRVc6oi+E0vIcarO
J/S9YXMtIaVH6t8EC7tVgcrSq1WtYrgduktSoYHrrnMBBp/iNBsGDe9g4RXh
9qn85jUUXtCRQUJiNgtXUG+bMGIhBXsEqytcOVROfnSzXEYVxM5113J2k/ef
6y3ju5ny3fzywF/Vr3LbNkyGol+5aMHMBIYY6oOo5W8POvbDDpB+xPyfux9o
okFWyWKMp/IuPYAlYD30OTC+fMFnE//s61dUv+lOOHp8NXxx9dr1k5FdYjuV
fIYuPJaGFCkKHfJ5krhgIE1z9vjdMCQ7Rt2qtqysWOK5LLgVAXMLyPMj+kmw
Ug0ZEAybws1k1sxjBUmSy+Rbtk8l0ShUmJKtgLyVoegblFVJTIdCUmiMxaCc
q42D/C7Id/CZS85RSfqw7tlqkl9ObKYui5j9pJ41wVVThmk4yse7HSpAkTkA
M9J0HIx4Gep69MsFkVS59z/DT07P7pccQIWZTFdska8QUqpwkuJ7SYOe8KDq
6mIRFDF6QAE7D2jG0/F42o1OTNiUoaVZFbB4ETojaSs+2pGfDyfEz65DhA48
vgW4X6qy2VXAlZBsaO1KEgACajXKtzs6bXbvNIwpwV27XGHVpxGRiVDf07sv
CgwO12w3SB04b9V6cSSSrRRjuM8unCPMhq3zR+Hc20PkcNjFKPNt4ESwB94z
Kk5RNH4VyIEhBNMwEa8kSyyp01zzU//iEf2I0qxF1YkpzyRFpbFTJCMyLirT
SgHxjXvFs/TdEQxIvyCeVp/UXOwTxtlezTBifVE4VkW3e8PM/Y7dZ+b9e2H5
AcZ0GKwopamE4h4Yid5EjqytHEbv/gSmODqLl7xZ/lmS9B6lL0kNQR3Tg/Ep
XdYxtRQOmJqEB/0m0vGmDrT+AZl+f/MbuDzylm3A0sWdc3jJuhzPcA/iMerk
vx2PDZ7DRfcmbnCmHXXVvVwynRSkVW15SMX51feuUCfpwlV335+NDR2qCQWx
DwS5LSAdWy9EzSgOuAKGMXpAEsPIjHSr02lVC/0XJ+nHe8+BU0m2cPfu6FGT
QBGitHI2wY2Wi5tIyRy8fF7tzYSvqr+Ji2EeP7x/c/zq5H5r89s20BvzbQ53
Rw6TyeGMtbx4RlZ1+jK3T5hxFCtsg8c5iA3brht1QAQDXtchq5Aghn5dgxgI
LQiKWge0hZSFD83HPw0REE7j6zrpBekpid0w1OZh/HkKHo8rHQ1h8RgIiKQ1
3He0bYo2u7RxGN+PCd+fqu2KFfliVCXgNGLMhGEjzu3RRMFrnWakqqYpvkjp
Mqa7sk/4hwAx6ap5/mOe/wu8kOPXedNg/PdQ1qQ+Hg5odfADU24gVv6BAR+1
4Hd21HfKCXpdTJSllymoRFRhYhx1T0bDUPdP2VyM9JkXWZ0iJP88zZdsj43V
HSa7qKyGCsZVq/oxg7vJRiHRW8cy1UUtslk+XEPTPBL9VAVEo5lRsXEJ5VEO
KZI6berd6Kbh+cdKH8e0tUGFhr2qmtNQG7/TqAvbJRu+s6G974OOEbnXAQUd
CScaEG2OBBobEJK0+jvZCCGO5qi2yKhApSwtm19XNQhaZAlnL9m5Y9y6FNzN
rpsu0emjQXJFFnLcZSErrsiaapgG47lI0+L5s4Gt8nZi8hMBZM+uJ1qoWesu
qX3aXnBOXvq754YxRK+ohKMp6e4iXmd0NsGtB0kXF30RN5bdRT4rWMmj5Xrq
YoEZcbGZqX1YNJacdlrFqJP7lzVRVGyGvXDIRKFybwiBWq5qqoVSRu5ZqEjE
b0fdD8MwQEfOzk9I36h8HZkXsvQqvzUbgA7zZ+RETNVmfmqxKyndTDTMEwCy
7UQgM1aKh34f7XOxHOvRAkQmiXknmh3YZ+4I0cJSl7a2SsStG4Ay1dL7kYQM
cby4WLx5cq0EkOf2BIe9hfvSajpsugJ0HJ0dbfyUsQuJ4oi1yENf8n6b4zi2
Y4Xnhu2Npqzl6W5Wjfo+Sl1eSRCt58yQHIDjbV1dYn1bzeLrcmqp3hI9govP
8CEXK/p79Jdd5h0hIqwQ+LQQiT9KpSaTQ03B9YQ1ul5AHUTZmkx6Yz8hftG8
BAnuD62xVm9ENzOsMzjB9xN7T67MLrGZBulxuRMnWOBoLhBq8u2JlRxvp/P6
eXheXeZXVRteWzKK8ajgfOY7m41lcVot7dFEZRr07CZWQLEr14l81KFV0hW5
uOD3zcDMe0U7EQoAC7ZzqeZ6W9Ufo8z4amiUFOUdYXGACvpp2EouKr8L/X5s
UzqdjcRHzedliKI4KagsI85YdcLIvBNzCiBiTGng4zv69VjsIBJDMQ+oXMY8
cZYZqtx8UaijHsPiuQ2veeuU/Tg++QE9Kn0MH6fHAPZmiDQ3Jmvz1qmmu6gH
+BEYd4QOxwjpI8uXp8nSJf5ukC5LlXoCMSsX9980y+AxyFGhA0waAxRb50Zu
QjwDQUoisVOlI3XoZEdwqpdAIfnCWdQZsM1tJBNtNJiq5IPIZByAQPJG7Kaa
SE7gX/+98B48UeqIB+mbKj0NKa7NJGpmM+U+JWpG0mGHDAt2XwJWTsT5IN3U
VzdLvLK8ITNMUXNl8EZdxKQIHPKS5PdMriV8xqzc56BJQEhwattfvtAfX79a
DE4t1wwtMxjAzJnMkTbiHNbsNvCpKmbqC/fZZ/5OuLAV+yeS68En5OXMHVLJ
nxVmCJ6QrGhTd/VXXCNAA7f5YWT6pPBpNUT0dk6iP5mQYYFlybSTkbUV60DM
NaW8McyBWgZJIuymVGbhNKE+wf9pK4Wm0CoFyD4Xf45gR8OxOVEpr4P4jUT5
SDkdutXhGyn2oN90a6coV5wl6JTT6YpkSeGjcM7YBEUD8Sqi59i/2JLPzncS
kyskxRvue7UUE5SgEEoHq0aySLSiTJtry3JGjkmMOVBBTVRKOLmPORYKoDRU
841rgqcLQLaoWZXPcnM06nhAYGk3ARN2xODybHmoTeqIh6cm5AkkWkDUKwhn
4ku7mfiGd78Te24+5WTfwxHR7AWzEwSYHjPJ0M5ERXNx4zOS0ILFfGFVURaA
05jnY/eMgJAJNVaYAhI+JmZprdjGykew5jl4bXBZBrRVZeRx5cMq4xx44jCs
gXYhdUr/4xFPRRKISD1TqoSB9IOrh0b6BS6PMzQce+gVWEbqQlNKxlkAi1C3
xpuG0CQJ5Ar1xkVIUaUqQxweM7jm4+pqrKlbI/WGOFQU5C3i8kTrous8AWo1
55CqmDAWjZhn5Q2TOM/zX6mpzi4kXaCbfE6BKi4bsdZR4oTESZSQOBqQ40IF
y8sH0i1mLOViCrBk4CFTyy1H+ViiODGqVpRJckNCU9e5KpoSzhiN1vHiszRt
bySNMe9USF3MiWTmZM4PWe0uLKug81mzXKFYq7SppgXpdJW9CIDWVok/PzRa
c+5eqkbJyLs1kLBeYeMJGtiXDRuQ6iBOPx3nu5wQDcR05fRRoh+hGBd9RyjK
fMlCKjfHYnoALcqkPy6gO+xm7eK/nLOepIWOP0uE3/d9a9JTKUTUmvp4kiLf
+uRgfFmEzDKWQzCCfBZNltX0ZszJASlfMhlYnj0/eP71qytjGcXjWnecU/Ka
tup3u+P08cOHySUw3TjIGtAERcCxrISiOm8CR1DHGxMyy5JuhwsjYMVKTriZ
XhPAy6mTAyen+TY2R50t5CLBISk2gQ8/SCaIdBsP7y3/CPGZ8nZMC/zKGZ19
9gijchwuRmabqD5NnHpCrv6WG9ggIngBxN9QIVmWkTmbHlnk0jMqNq4WKUZS
mMmOBJsQTeCSUM5iQmNTOqTOcKdIE5VpIXQnCOkq7RvxZKNoeuRcuRKb0E3s
ra3zjjbT11CysklID2dhipTYCROforKM/MipHFyk7osTdw3v5YZixm4JFuun
TraUqLTNOyclGyNqjuyyqebkJwTInDUMmhN9orDBlcrIV1/h40xUe3g8Tmf7
7YgIhT7zHHUZ70A20V/AY0e5UOHWII7apqqyCPbvm5AlGSDru25WHONqUeah
jAaS2tE8AaM6giyGbPEwW0k3XtiSZkp6NAFnxEgYsCPciil8aIYrNB8lkVUh
7Uf6hyw0GK3JKW+j7IRsFmE0nGpBbK5cYvoJTekeFkdni9VzJX3QREKHfsL9
LaZouZU/I9bE5XONZ8GXoRV9pa47cUXXUPyAi7NagpSAIqQTXahMWLPIQ/Jm
73TaimSVkG5E4rhDPF7hOmdAnK/HvGtuftAvr3IfFvlO8iniG1zpCY5RWJkY
pzYm2ZQ4gTK/TTHvF6qKBZLCZKrEyvaV0X518g7WbmDLO5jyqRtsNXnLRcbi
6jVhWyxBIYvSAk6aDZmUW6s2Gksjq97iLJGCkAOCW7iWbdL3yoIEgNEAP5S6
aH6cwY3gPNHzhrUYe6XiuBdqQj0wjBoB8GfMiLU15IYZ5OCMVK+TKZshkKIR
tgZAVA2tE8W9JI9hragoi9ZoryNLGZunpw1IZiiev3CPqazJqsXCG7RB20eH
3zU7aTSrcBiNjUbcUiE9xumL49qpsC3LrKib9KZqJE23E09S4IkQbXVTYUU2
LLcGlXFxbqiz2T46f4dai8dy6sDow/+9rRpJ2Y2Hf9jBUZ0d3wDG+GZKgUol
qqkQ8LnzpXWebr+t3u746zdJX1ec9hNrbiPpzlJow2or9slgtQrDcuLqYFqs
oLKHPdfaMUtSFINHswn3pcmpxDHakML0EuK4YP/15n0s2LfCr1j2vcwxhL5B
GgwToYGIpCZ3gh7mEQ4sB9PYj/naSA8v3u/PvWIFdXsQuwX6GD3V6lL9hy+Z
dAI+Hy7zFKGm3eFSRv4mbWozbeoNIyyrZZLoJOifhKjJM41Rw+i5aDbSzD+T
kk7RhKSZfyaFm3BO9k+awbNuiQmYYK8ZPPPNHrsaTcHBAq8RO200wD+jAnyD
slyTQmgKk6ByFsf4sTjGB8lZJKHlfNUMGralssOc5ELR2UV+DZkLjCCMIn4r
zpsZrfW/XNAHwnWwIoVSl5Oek7oNTbWThhsab6wJElgYarzL/Cb7AadJuK3g
e/Z3N7cDtpIQ3rHIAbcW7xzeecqqYfbPxgKtKKKHMDcyLZmX24BfxlCHQvFZ
JhlycbA9uMzVbVn2Cokxey0NmiW6W4c6D/ZOHqtKRzRc5AZwoWq1EAfEdnHj
9hTzmG112DG9MdUQsm4T0yajp17YdBcR2DWYDhk1QviQ+CcO2MBMcywHSsdo
Kaw23JrYD510l7GjzGaf8291HftpD3TdcYejUtA4802b0M3crqpV0byi7kJC
HQYB4g3cheKzeBKag4vmkiTJjDzPTUL1Y3N18qFuyXflW76bWHc1u04vfjh+
8nC/W1nLZMpC3JdKnNM8ZbMGkrN1SIPJaeDMIkcOe7/cWCzTAIZQx20RPEML
nFEbG1yh5aDdueNqqKjEeY1E2x7Z9yiVQqyBGzzeyzVr03dZsc1YFvNOVCpT
MoKv6t54DvCoMKplaeE8E8PSu37tg0uTUIaaP81qOSfSLBUbAV6003KyXHcZ
mNw2eLggosT7E9kS2eysPo8NUEd5Is7j5gypz99rajF5Y110PkBC++DJBABu
e8OXO8mGF/DlgNuks3s6X0pLfwAIzLw4vTcoZyTQDWPdVzPGvX4htcLw3+/Y
/x24LmAOMDPaWNCO+2BD1jb0uh9o/T21/oq+nhv6G3DzTDZ0Frv4d0N2E7LB
qL6vCZo+jPJnWYMNdZRs65MpfRFnjAhLjsjXZUSeJSNvZZgkr6tGBZMmZ9Lb
9UCTOgBtxQIEXHqK5QsqU/OEE2RljnbkYdM19kcFhxp2LIxdQ820jRl3COXG
QwfhllQxaTPNywzkuEayMaHeS1WaoStM8CPVAM/FOrX3ENuQpvj5Q8xX3ol2
4H0Wp6NuGSFyD2I0JRsO+BnXIUIR7xugWWxMXivRxuscntkUOBrATaFzEF4p
id2AaAVbAuKCmxR1DUhmUcDuorxGLE/IbVZyJs82F58uo1Mac65R/qKQkUSU
yApZ2jIchxAQY8yMWB0J6GNPS4omoaQ5IyZs7sQVWCJTEimCTVxGqQ5pgzyH
+YTtOrDtEt1+2K6GVBWaKm7oxGAvYhAl47TLeGGT8zJ1MCGzRwdl4AJCPB9x
AYW6uinQSmFukVauEwfVQlQ1cLNU5QYBRhO5Uf5vTTVX51IIjHgUOIiref65
kOxgLs9CW1GYA2wck/f4Vl7WmBB08G5KnkCyRohk7Nww4ArVXCa9uQsHXK8y
DBvN817uavLySac3VcXpXcMy6VrKSIH/HXkd96hr6MSOpJD9zAz0m2dGWjR0
ksXcFoFjUKf1H3KMPyXOGFPxWjY6RBurhhQ/qq8LKbaz2azOG4tMvoddpAwG
FzHDfPXJKb9prIivCtO7FR/eobWZigqXD9CZvofN0amgH3IzkESuzNsJRUmP
xaThBwmWGF/bVHxKy25xLDUIBlFKfFGR7I3oqrO/EHlNXDH7yflBqgV6J4ky
JYyP3bAYNYrLlKiGdxTl4CrNVxntJGxBw0JnvjuS1OqckLX7NJvD1ZytzQ6v
Ls9qx2rGBe0hMZaiTfWYj8ItMIjacuhpfQnY7lcCbLrVpwRo3UwiEVySqxzJ
oT/j/wTKTfvAIqxeRy6cp4tU9yAGWzUcvmfiJHyASMAIEH675VNODLO22N7A
QuhHdr7kuLKxA9PkiRWda9ijmWzJ9dx78lFX9+fkpZZckCxpZbigoa6T3qMg
/5PjMFKPWKzoBAIYfJBbl7Eo3e8E8DUEIop+N0yzTCMFB+8+bfjrbEnzOSRX
0RP58h77r9R6LNSa/Wl3QbhvRo6YD7z+h88L8Z9kcXTH1uEa/p5jcyXEnBuF
FQFqAmNKbCO7dsnmxkhfaDibpZS+jXQtlgOQ+Je7tshtDYm2q6LFJaPrQTi7
c3ah+gcOjfUZgwcmr/6bDiukIeI1/J2n9p/eY13Vpv312/vWqnefe/btHttM
mopWGVztJWYCLXCWTJQ1s5J37OudW+oKjZezXVGUbBoZSI16bg8cjrrP0rw0
NoSOItockLkbjR+6cy+CV5XjXug+QRe2cNbj8O2qqzY3+w0z+e23x6FvQZr3
egvpPPhOA2+ePnv0fD81I3L4zNnxeX4cEHp21VL1IEnTsCoDk6qMLzsvhoh1
8jjrBoM5xxTSMLECNFM3FdtcmM8ukdS3YR8wwTnpJ8juAqL1kdJcahmlvPNc
p/qCvz48EuFF5ED4per2SULKd4kTazXI4837V6/8UXC3qpryybwNAaJ3Svhi
RKPTLaQJyF/0sMXDlqn4vLiHFExgXFe4+Zjz36kJiPsgdIxoOVSQwXa8lxsv
UibF0EiudFIx5RqBWaopI6L9Ee67k0xzMhlCPTjhD+cw1J6Q6PC55sH5RjfW
g5GeDyeyaaFHMvggtLlCUVpyjqFgiYjyP1YgGa0WXp2xZjdLTp3jtsJZSinP
MQFuxmLUPTEUIxOWFwd31B+a3x3GA0RwfNifP6jw5ajPYAasIBoDJu0ztvz0
L1mIoWLHI8Z2AvJlunXo/D3emsrlKBLgt1i4Cpoa9u6YFc10xcZrRLpcm5FV
Pxt1Sqw7YYM+C36TGMliynAv/Bt6sfTAznnHO5BYSEaZX1dal9vkXQ7xB6gc
pX40k7Rkd0kOyFQz5uZtzt8xYtKj54QG4Y56dL6ksnwRfvvKmgjzZpbRA6IJ
4RgSE2nxinhTXbtS8/AvmOQ1NxTZqQIbOeqhwGXz9zPmTTGFd7D0+QhMqXXV
I08i6ajOnDITRK6hcdgdlsIyH0iLlE6imPtgEtaq8vdnRYbjircltGpHlff3
4e6yO3m7YYvY1d0cHVl/eLX/nK/TuO7jnYvM2piR8ial1mBI6wHPckMjsC+I
7tGFAv6E/zRxhWku+UssKrbphLk6gjCAhPwFtb2SFGEMjLB+WPCXL9B1MYs0
hZnWjqds0jwHBAyfGsYvSqb+i6OoXc5JHMQ19WCsfeyW/du8WDbssO6EIvpK
VYUW5adqTonLbPvIX7/MqWz0hmz8qoaR+AW1DCDewElwJdDQXIOfOu2xgOjk
8cPnkevSDWANzBnJgal4MnQH2AiovMtm6kFmdtKnBgfglrL7kHkZAHaMQKup
aoNCtb95G9mFDiTDZlLf7P9M9U/cTjCqYTopgQkj8difF1c5lhuT+gKYpI+T
2bIjN2G4rmSURbtswcD3m6lZ2V1lDzsE23iXE0IKGgbvRGK9PNETZGCM4MAK
Mpp9/6QVBSMZILAYPGg4E/bu7q3qMpe8jpQy8j4nGmwmDqVpvIq77RTekvXL
KOLVNEX1TNHeSTmr6oapVhf9icmEQBDZOTGqmrona3oYoTPnWIBaULX3hsLw
9VQR4PIwBw9wIbHnJPkjh8niLmshODfxzkY5Q9NInHmzQQTDhh2ONUt/BLJ5
UwKYIEMmDnEdg8mXL8CiYSms8ZU2BhxqIl3m/FgcL2ttxR9Hg+zEv5gDNJ2y
XAI1QxpAfkc1QrR7VcxqPpdONo6LmJu0GQjD2M8MGpmMInnuDqrMvG7oPEzP
z7VJoyprmtKpt3QlHHew1sxZGK6nz5tYSDq9ch10q0jLB4HvJ7JwF/HkY6TK
Rp1eBGrEqfFdsEM2wyp7r443SYQj+jYmBOvWh1U4Y2dXmyQxIk7HpUr/NiQr
XSG2IKuaP09J4K6ZzzuWPszxKZAlimO4q1m0N3VOygRRCJM14L9k8IjvsyYh
Ys8MjARR9+uTQszXYT3xGM7wyj7znGKhZ38xK4cw2KTlU+mqc7qbTpYCk+dN
fsvOapvk+o65NVwYph1AjHAaol8UFn5L7axqfhOSpA7s5Hg/x2y5Mwp56Sx7
azlfXV8ja73Fs7aCbXT4vdrNKjoUtab5mUj1u24JxO2oAOIOdFhhViTNBNyt
29OpdbXdrXK1s+OnnaufvsQWj3i+6t2nHJ6Ub744OXmbaoXmJpjWQ0Hqb2E8
WfywLmEUVpWBJL0Q3YZql2OvwqOzw7e6daKbJqXaJUa4hLLuA1PahK4cHrif
4uNHZs9HIixxvBcagSUYRupkWWYS9TZVVcidKlLcLuuriaW9btJzERdc82Kg
EqjfCvEX/uZGuC7v3gs0T17QiMGWecxuDufqkiBmy8Ry+7XFtFhmLpCHMliL
lpsKiqhvkmEEiWPkwl/YwrvvmHPChY8ad6UL2ZEg2gTk7TDztXXY90OJ3B5w
kT2Te9FYpxjDc9O2y+bF7u7t7e2kvpqO81nRVvWkqq934Sf+/8UPx1u4a39l
G27612A+D4jxr/AaNfe7ZDL9q5hbUVGpb8yQBG/PvPFEkRtZpjLNuhlfvHt3
ohaYwY8jQ4v2sMmO4fQI1EFHaS5fOzVsXMOWPgr6P2j/TsGWvG0FcE/O9x8/
GcF/Hj07oMWfnD/e2/8n5fypKekwQkZWOGDse0hx8560S5134idLpEaC+0mZ
IQjMwQN2+y+e1++rS6BzlwqKBb1ipoSJHIHUmbjnhKsakyBITFLg5EjaYXKf
M2rFhthrS+59FEXMrh44wRMvR/xVAujVQUQTbZXVoOgA08Yu3hCB/SsVH7nV
QjTiosLEN1oDqe9IP8GWJg1ZIrBg+oR9Rm5qhbjvSMY2XprkabiUP42XcCWL
uQ9JQmXMwCQ9pCwBkftUzYnkIoxI88ZD5kykVDes7HBr6NPimDVYRoKmXkqH
CDg9+0gSdDMnUwGn7NEqRiR3hpxFhs6AbJeblFl0E6EtTO+a1i1u0O7YLBM7
5xIM/RqisvOLWDVFio2JsNyvECDFw2K0dLiV1MQLWqnzHvXqGMcRz9jqRmfk
jriZpMk51WnzDCIto1eiY3AdyYOAzcgCY/kpKFH6lwdqtf5KtRMlUfUVHF1G
DgHzeXDdYa08fjfpyBPqKdKQEE4+3OhLz9cXxynKKDpEHbXpGW5k/nlJqmZi
nsl4K/SVMD20AHCSAi5o6NxhXCD0Vz6mSArZjPlam5NPOnxg/AgNQZOyk+2U
D+44z0xcihaKfaB9xA7I6zF4nSYJPdUSeIqaRGjrRBT1C+UJV8c+tJ0N5j6a
MGzf47XzgUpMKDpf5/G6KFp1QeyG6L7EYG52Y/N1PewEfRDfCQNQTDimLYkL
T6t3VZgW5qqs5jP1uwwygmZWzH3gl55IKPCjJrRKKtUzGthUlVn2Ojh5SbCR
FgbQIhgaqkEPY9HLrVdBRkISZYz+Gu95G6K0wb0bQWVk+ZwojbBMp5+O1tVz
QL2kxrXLJbXNtHJwVNB+J5XytHWUAVgND0Xpw3IG4rlGkuQgwyAcqWFkwMha
RMyiIIfr0oyzM/Gj52hUxNl7X+zCpEmLtkoeOIR1jABmxcGI2iGtXoWUDyzn
OOmYh3uy9xC6P1wugT4Xn1OQ1BzPnc9ZYiWdCzliu4EAI0ZpGxJKrzMuSlcg
aKp5wPJeXhT25Q5JYjoJTOIMKy6xREA5SLfEEPv8Ie8RIRKFXFp1dq0mFgGj
Tk0AsogQ6hS4OVMFfKdEhOZ7oF1AdIcbu1WWE/6/yQSZ8vclJUJjF2PW/2qW
9RFmsmhMAUXs2btTmmDvUMihXFJQ4QekFXezEYxvaXKwpyjaxk6CYmP2tuHP
nSRx2fckOrUTFzKi6I/voWX8XMs2TEA4hrWlW386HP+fbPyXh+PnH16Of/3d
loTlcloN6ZuiUeDnKP0bPvxe4lO4Qdzd9p8ejvd/3dne/v8mD3f+Cv/7p73x
81/h4fNff7uz81vXPebw4O55vn/DB99jgc1sORaRXsu2vExXuAUTwEVPHj9+
9NiVeeMTP+0q6788wCmKDv8rp3x3tgOFHDZiD9yeE2CgS+JQTA+fBOdapqSW
C9RhERonqsL7W47DwbKygnd6MYTQhrJGuTaW6r9J32BEfjE9JrOJL1ylou1+
J9xjAv0xdI2rmvZ5uGN2QzyrEXjv3XGnOwJYbvPo+bMn3AYBA9q4oTK9fMxO
4ZW5zdEk16D7HiePnVVY0mI8AzqCrtxwtZjNVRbohl2/0629yf5k//HDyd7W
jmATOg8NJ99CmPp+y5AIVn1GTxqKXm5CdhIhc6zdYL0gZ0YhEkB0zmrucPxx
Vl+vVAYxLu9KiIXZkiRutnCMi0SJILi+ItYs4SApzKzHvNpICRQIhvpj/IbD
+ciPRms9cwS/+Ixz/jBKZBXCUbqlUoh8CrLRyfZQpwTGdhJjkkr056OU9pNW
YxGNPpncNfL4ZlrTzFph3FDT2dwQuxeWyxuoxSFkcjb9EisQ9DiZbSrVB2TR
j1mh/O3tuhOvYrUfLQzDx1dQPmbieyOBgaf9NlvPMQyGn1BHgZHKA6uH0sRR
R5OdzXivWVeLiD5mv4RJUh7pyxfs+QMs7AOwXDipPj+6lOkIOz7i2mMU1dCy
39dcU9yGkHG3A4GfjqFdI6S7eszBy8G3Eu7b9/EVjMhgdy1u71bkAEzcg4jP
wstGxTlCnFLj900y9A9OzC4jzU2nxSKVU6DIaMgYx1WzxNcT1YQh54Ha4Kk0
DrUTcXioGJFLIu0rvnWH6ZYi61WC/R9m4NvMwMY8KRRQu02KnpAkhX8SGt1N
/5Tu/9Y/+RX20/2UOdGqGkA/6fbew8nk6cHOSKJr+eGzyeTJwc73d8xke5UX
szAH+oUjwHD2N4/WPSMdd38yOTjYSeOBn04mjx7hwHdU34XuXfFd+S1ju18w
Ogc3h8Bmm1ny9Y4R6KMqX/j18c8lFevlv4s8z+1HDdeiWiQwgdDwJRIOfUCt
aTvC7zHC2ch1N8bQ5u+TzgMLfKYdepR0OuiHUEvLAx2bJ+dH5yfR+PLIz8A9
iuew9yTp9bNxGvsHd0CRbLZWXMBsR+igE/a994ZOD/Z58IWFwsvDFykdPUet
/z5tpjf5IoeHv9GP+AkGqN8NDTYaxbQOTI+f9yYXHt95Fw7oKmwIrsd/mLOg
sZsDd2T/zjuSNrdjTJ0QJko3YOeua3Xb33z3TK/X7X32+xvbnd6536w1GmOa
2jAT+DW/a/ZAdi5X12OM6lw53BA91fRR/YcvU0AZeYmqodmG/E6oDLjH6zHl
xKfJf6slsIqLrGQt5zeacvYkuGv+I1hImPTQP0nyJE22RulDIEC2juF/8o22
go/23Ed+dZs/cq0kk9Xgmjd/71pJjqu7dyJ9OZytC/7FHQ9+DUNgfqzNsKUe
FAGs7Inciui3kR3MI4puFUSiSc/DFxwdHQZf/N48MQbeYCoqDJHf+M14c5Ob
PCO1VO9Fs8Saxb3HIUMvvPqb8mg24DXND3kWJKO2zO556gufYgyhKay/+4G+
cF8g+NiudD/QF34EBBfbid4H8qKbHG1gD+MRxu5LTJOmO9obQV74AdIn8AHv
dNr/gF5EzdP0KXwQzqDzgb1wHz3DNVznafxP13Cdd/pP0+d3QvxqSWcemDtm
yzcTcULWDSzEYezAw9+FuOlLKm977+H+J1fg/yO5Ar/BM81AnHe0+E/Ah+Mj
EUuQTQo/lY/AJx90ffULnx85vAcJtkXR6QP1LZVdBDlRA5d80re5k+34e1Iz
f2Ph5tcWOguPlEWMn+AG/M5aiWD4a2gVREXeJ5Ug8dsX9LsnVo6ihvzsBZ3l
b6zXy2q2ZilgI+vZaUzCwPe0kwMvYAuEU6WfK01qNa2a22LW/YTEht2BDFD3
6Pr8/enFh5PyUz6vYD//wY6b5ewzfbSpo9AgsT9ROXBXpxgLUZX5eEPXA80+
L+abJvCNzgaaYWedr3TGcavUFoKx52Mud1l8ysfi5zye5WhCyEuiinvPvwn9
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
UoMTaStvJvREIS3BIKVaE2NPY9eGy6V/kqZ7OUe1Qx7wXQMmrgtu5PmeQDkf
c1Ckf0wduwSAIdPuDu6FR62zy+NXl8Oz6OLd0ygdfUzefmhfXjTPl09fX348
HJ4MD69ev/3m/P14+O7p16f0zYcP/3j67U/e8ejpbHX79Nvjk8PDj4eH129/
HH47OYK/jy+uXvzy/MPxIfz+Tfru5ds3b9+NngcXF51J/bv3Z+fd9ac3T6ej
1ncf3v7kvY7a33+Yf1//pvPt8unymzej0fv+sw/vLtY/fPs6+vb25tXpj636
1bNvXra+H8yef4KhLrKrw6j+4nr59ZtfXt3Uf7hZ/OTVu73x9bP5h81kHf8y
fH3UDrLu++G693J89l3rHzfP5p9ON/94OruJ20Gcfakr97NZuefJYvNJgwe3
Lrx+X174zVjqrD8rrPizd+e5BY9vnzXj74fJq+TZN98F3ybPR88ux08n+Pfp
219Og5fJs0EDHlpOWi/ooedvT5rTp9/9Mv3Je/rd7Wlyk0TvTpqnH9JPLz+8
/fTyl0nz1dEPbWhmHn8NzV51gvHTm+z06iT4cXTaPU1Os9PFy+CHBH+Hpn/y
Lj7ctBcnLy6fL5+93bz+/vrF61++CZ6++HB5++wf4fW77y+CdtD9/pvsl5tv
99yTm8tx8E8QgoYPbB4XBmz2ZEJlAOTziivJ49HR2VCrAsKjKr05HbEcL86A
N8UH9faPKipLyyz/5w0MO3LyLDM4s5yWhkU7UZjpBSBJEREtFLR0BqMKyAHv
dYN9P+jvy35ePhoGzSDsProDJ8N/7NQEvowjrAquvvxfP9/9Yny1xOK6i3ID
EkIFAwibh+1uM2wPu4fNQa9/dNwctgcYX9EMm61mu9lpdpu9Zp+H6OQHy/uD
w8FheNI5bvcwxOukC+2N+sN20Okddnrd1smo3Tk87nVUQR0MOy0CK+gEvV63
PwqD4cnJYb/dGXa6w8NOp3cMrw96qo8Om6Ce9lqDIGy3hr3BqN3rd7rhEbze
DcJjsM9H3TAMumqlDw/DVqvX7z26Y1Xs6pjSjbgaP/sHvpsxvB2+DUHfythP
NXtPw5RUuCemFBv3LpnSbRpSA12ac6LcS6+Toseq0xwzKEFz40IKE1sG1wFQ
snBXrFjqBTBXnWOJ53SHLc/ieCrUK7XppFlNDuIiNhHWPERtUwWo9Uua+uW5
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

-->

</rfc>
