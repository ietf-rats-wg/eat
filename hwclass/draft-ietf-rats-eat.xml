<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="January" day="03"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides a signed (attested) set of
claims that describe state and characteristics of an entity, typically
a device like a phone or an IoT device.  These claims are used by a
Relying Party to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CWT or JWT with some attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>Remote device attestation is a fundamental service that allows a remote
device such as a mobile phone, an Internet-of-Things (IoT) device, or
other endpoint to prove itself to a Relying Party, a server or a
service.  This allows the Relying Party to know some characteristics
about the device and decide whether it trusts the device.</t>
      <t>The notion of attestation here is large and may include, but is not limited to the following:</t>
      <ul spacing="normal">
        <li>Proof of the make and model of the device hardware (HW)</li>
        <li>Proof of the make and model of the device processor, particularly
for security-oriented chips</li>
        <li>Measurement of the software (SW) running on the device</li>
        <li>Configuration and state of the device</li>
        <li>Environmental characteristics of the device such as its GPS location</li>
      </ul>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular it is a format that can be used for Attestation Evidence or Attestation Results as defined in the RATS architecture.</t>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb" numbered="true" toc="default">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a set of claims about an entity/device based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT), <xref target="RFC8392" format="default"/></li>
          <li>Unprotected CWT Claims Sets (UCCS), <xref target="UCCS.Draft" format="default"/></li>
          <li>JSON Web Token (JWT), <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds two more top-level messages:</t>
        <ul spacing="normal">
          <li>Unprotected JWT Claims Set (UJCS), <xref target="UJCS" format="default"/></li>
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is simple structure to hold a collection of detached claims-sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>An EAT can be encoded in either CBOR or JSON.
The definition of each claim is such that it can be encoded either.
Each token is either entirely CBOR or JSON, with only an exception for nested tokens.</t>
        <t>To implement composite attestation as described in the RATS architecture document, one token has to be nested inside another.
It is also possible to construct composite Attestation Results (see below) which may be expressed as one token nested inside another.
So as to not force each end-end attestation system to be all JSON or all CBOR, nesting of JSON-encoded tokens in CBOR-encoded tokens and vice versa is accommodated by this specification.
This is the only place that CBOR and JSON can be mixed.</t>
        <t>This specification formally uses CDDL, <xref target="RFC8610" format="default"/>, to
define each claim.  The implementor interprets the CDDL to come
to either the CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/>
representation. In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is
followed. Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
        <t>(TODO: The authors are open to modifications to this specification and the UCCS specification to include CDDL for UCCS and UJCS there instead of here.)</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is authored with an orientation around that model.</t>
        <t>To summarize, an Attester on an entity/device generates Attestation Evidence.
Attestation Evidence is a Claims Set describing various characteristics of the entity/device.
Attestation Evidence also is usually signed by a key that proves the entity/device and the evidence it produces are authentic.
The Claims Set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is validated.
Some of the Claims may also be validated against Reference Values.
The Verifier then produces Attestation Results which is also usually a Claims Set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the "Remote Attestaton Procedures", RATS.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing a device on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="use-as-attestation-evidence" numbered="true" toc="default">
          <name>Use as Attestation Evidence</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence.</t>
          <t>Attestation Evidence nearly always has to be signed or otherwise have authenticity and integrity protection because the Attester is remote relative to the Verifier.
Usually, this is by using COSE/JOSE signing where the signing key is an attestation key provisioned into the entity/device by its manufacturer.
The details of how this is achieved are beyond this specification, but see <xref target="keyid" format="default"/>.
If there is already a suitable secure channel between the Attester and Verifier, UCCS may be used.</t>
        </section>
        <section anchor="use-as-attestation-results" numbered="true" toc="default">
          <name>Use as Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Results.</t>
          <t>It is useful to characterize the relationship of claims in Evidence to those in Attestation Results.</t>
          <t>Many claims in Attestation Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the device by the Verifier just through normal verification of the Attester's signature.
The UEID, <xref target="UEID" format="default"/>, and Location, <xref target="location" format="default"/>, are examples of claims that may be passed through.</t>
          <t>Some claims in Attestation Evidence will be verified by the Verifier by comparison to Reference Values.
These claims will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.
For example, the Verifier receives the Software Evidence claim, <xref target="swevidence" format="default"/>, compares it to Reference Values and conveys the results to the Relying Party in a Software Measurement Results Claim, <xref target="swresults" format="default"/>.</t>
          <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.
For example, the data in the Location claim, <xref target="location" format="default"/>, may be modified to have a precision of a few kilometers rather than a few meters.</t>
          <t>When the Verifier is remote from the Relying Party, the Attestation Results must be protected for integrity, authenticity and possibly confidentiality.
Often this will simply be HTTPS as per a normal web service, but COSE or JOSE may also be used.
The details of this protection are beyond the scope of this document.</t>
        </section>
      </section>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>An "entity" can be any device or device subassembly ("submodule") that
can generate its own attestation in the form of an EAT.  The
attestation should be cryptographically verifiable by the EAT
consumer. An EAT at the device-level can be composed of several
submodule EAT's.</t>
        <t>Modern devices such as a mobile phone have many different execution
environments operating with different security levels. For example, it
is common for a mobile phone to have an "apps" environment that runs
an operating system (OS) that hosts a plethora of downloadable
apps. It may also have a TEE (Trusted Execution Environment) that is
distinct, isolated, and hosts security-oriented functionality like
biometric authentication. Additionally, it may have an eSE (embedded
Secure Element) - a high security chip with defenses against HW
attacks that is used to produce attestations.  This device attestation format
allows the attested data to be tagged at a security level from which
it originates.  In general, any discrete execution environment that
has an identifiable security level can be considered an entity.</t>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. No token may contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim may consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the Relying Party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) as fewer are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)
]]></sourcecode>
      </section>
      <section anchor="UEID" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>UEID's identify individual manufactured entities / devices such as a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire device or a submodule or
subsystem. It does not identify types, models or classes of
devices. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEID's must be universally and globally unique across manufacturers
and countries. UEIDs must also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the device to keep devices distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID is permanent. It never change for a given
device / entity.</t>
        <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).  The
recommended maximum sent is also 33 bytes.</t>
        <t>When the entity constructs the UEID, the first byte is a type and the
following bytes the ID for that type. Several types are allowed to
accommodate different industries and different manufacturing processes
and to give options to avoid paying fees for certain types of
manufacturer registrations.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256 bit random number generated once and stored in the device. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the device and stored. It may not be smaller than 128 bits.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This makes use of the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-device identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while devices with multiple network interfaces may have multiple MAC addresses, there is only one UEID for a device) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/></td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. <xref target="ThreeGPP.IMEI" format="default"/></td>
            </tr>
          </tbody>
        </table>
        <t>UEID's are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the Relying Party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the device. Instead they
should use the oemid claim that is defined elsewhere. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Device manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa.  The main requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <t>A Device Indentifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)
]]></sourcecode>
      </section>
      <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
        <name>Semi-permanent UEIDs (SUEIDs)</name>
        <t>An SEUID is of the same format as a UEID, but it may change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
A device may have both a UEID and SUEIDs, neither, one or the other.</t>
        <t>There may be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label may name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile may describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
        <t>There are privacy considerations for SUEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>Hardware OEM Identification (oemid)</name>
        <t>This claim identifies the OEM of the hardware.
Any of the three forms may be used at the convenience of the attester implementation.
The receiver of this claim MUST be able to handle all three forms.</t>
        <section anchor="random-number-based" numbered="true" toc="default">
          <name>Random Number Based</name>
          <t>This format is always 16 bytes in size (128 bits).</t>
          <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every device they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
          <t>The OEM may also use a hash like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash may be something whose uniqueness is managed by a central registry like a domain name.</t>
          <t>This is to be base64url encoded in JSON.</t>
        </section>
        <section anchor="ieee-based" numbered="true" toc="default">
          <name>IEEE Based</name>
          <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
services <xref target="OUI.Lookup" format="default"/>.</t>
          <t>Companies that have more than one of these IDs or MAC address blocks
should pick one and prefer that for all their devices.</t>
          <t>Commonly, these are expressed in Hexadecimal Representation
<xref target="IEEE.802-2001" format="default"/> also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48. For JSON encoded
tokens, this is further base64url encoded.</t>
          <t>This format is always 3 bytes in size in CBOR.</t>
        </section>
        <section anchor="iana-private-enterprise-number" numbered="true" toc="default">
          <name>IANA Private Enterprise Number</name>
          <t>IANA maintains a simple integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
          <t>PENs are often used to create an OID.
That is not the case here.
They are used only as a simple integer.</t>
          <t>In CBOR this is encoded as a major type 0 integer in CBOR and is typically 3 bytes.
It is encoded as a number in JSON.</t>
          <sourcecode type="CDDL"><![CDATA[
oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
        <name>Hardware Model Claim (hardware-model)</name>
        <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
        <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
        <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
        <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
        <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
        <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
        <sourcecode type="CDDL"><![CDATA[
hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)
]]></sourcecode>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version can be claimed at three different levels, the chip, the circuit board and the final device assembly.
An EAT can include any combination these claims.</t>
        <t>The hardware version is a simple text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.</t>
        <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    hw-version-label => hw-version-type
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
      </section>
      <section anchor="hardware-class-claim-hardware-class" numbered="true" toc="default">
        <name>Hardware Class Claim (hardware-class)</name>
        <t>This claim identifies hardware equivalence classes.
It is a globally unique identifier that applies across hardware OEMs.
Its purpose is to identify that some hardware or subsystem is equivalent, even though it is made by different OEMs.
For example, multiple chip makers might integrate one particular hardware subsystem like a TEE that is supplied by a single hardware designer or hardware "IP" provider <xref target="HW-IP" format="default"/>.</t>
        <t>Often, a class identifier value will be created and published by the hardware designer for each of their designs.</t>
        <t>This claim may be an OID, URI or byte string, 16 bytes in length.
When it is a byte string it should be a one-time generated random number. 
The byte string's global uniqueness is achieved probabilistically.</t>
        <sourcecode type="CDDL"><![CDATA[
hardware-class-bstr-type = bstr .size 16

$$claims-set-claims //= (
    hardware-class-label => ~uri /
                            ~oid /
                             hardware-class-bstr-type
)
]]></sourcecode>
      </section>
      <section anchor="software-name-claim" numbered="true" toc="default">
        <name>Software Name Claim</name>
        <t>This is a simple free-form text claim for the name of the software.
A CoSWID manifest or other type of manifest can be used instead if this is too simple.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= ( sw-name-label => tstr )
]]></sourcecode>
      </section>
      <section anchor="software-version-claim" numbered="true" toc="default">
        <name>Software Version Claim</name>
        <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]
]]></sourcecode>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the device/entity 
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels as described below.</t>
        <t>These claims describe security environment and countermeasures
available on the end-entity/client device where the attestation key
resides and the claims originate.</t>
        <dl>
          <dt>
1 - Unrestricted:  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2 - Restricted:  </dt>
          <dd>
            <t>Entities at this level are not general-purpose
operating environments that host features such as app download
systems, web browsers and complex productivity applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
          </dd>
          <dt>
3 - Secure-Restricted:  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined in section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. Like the FIDO security goal,
security at this level is aimed at defending well against large-scale
network/remote attacks against the device.</t>
          </dd>
          <dt>
4 - Hardware:  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the device itself.
It is assumed any potential attacker has captured the device and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a proper end-device
security certification scheme such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>. The 
claim made here is solely a self-claim made by the Attester.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"
]]></sourcecode>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when base software, the firmware and operating
system, are under control of the entity manufacturer identified in the
OEMID claim described in <xref target="oemid" format="default"/>. This may because the software is
in ROM or because it is cryptographically authenticated or some
combination of the two or other.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (secure-boot-label => bool)
]]></sourcecode>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to system-wide or submodule-wide debug facilities of the
target device / submodule like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-device
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means
it is not reported. A conservative interpretation might assume
the Not Disabled state. It could however be that it is reported
in a proprietary claim.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status to the Relying Party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The Verifier or Relying Party receiving an EAT cannot
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An individual target device / submodule may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the Relying Party can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future, and it may also be
possible that they were enabled in the past after the
target device/sub-system booted/started, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the target device/sub-system booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer cannot enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug capabilities for the target
device/sub-module are permanently disabled.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a pubic key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of posession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected the same as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the device entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the device is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the device velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision should not be used.
It usually does not provide enough precision for a geographic location.
It is not a requirement that the receiver of an EAT implement half-precision, so the receiver may not be able to decode the location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity must still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/> below.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"
]]></sourcecode>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim contains a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (uptime-label => uint)
]]></sourcecode>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim is a random value created at system boot time that will allow differentiation of reports from different boot sessions.
This value is usually public and not protected.
It is not the same as a seed for a random number generator which must be kept secret.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (boot-seed-label => bytes)
]]></sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requres the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess device security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance (Certificate Signing Request)  </dt>
          <dd>
            <t>Certifying authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) appication. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has posession
of a key.  This kind of attestation may be neceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 
]]></sourcecode>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is encoded in CBOR according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not tags.
The OID is always absolute and never relative.
If the claims CBOR type is a text string it is a URI and if a byte string it is an OID.</t>
        <t>Note that this named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
      </section>
      <section anchor="the-dloa-digital-letter-or-approval-claim-dloas" numbered="true" toc="default">
        <name>The DLOA (Digital Letter or Approval) Claim (dloas)</name>
        <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that a device or entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
        <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity, device or submodule has received the certification in the DLOA.</t>
        <t>This claim can contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity, device or submodule received all of the certifications.</t>
        <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
        <t>The first data item is a URI for the registrar.
The second data item is a platform label to indicate the particular platform that was certified.
For platform certifications only these two are needed.</t>
        <t>A DLOA may equally apply to an application.
In that case it has the URI for the registrar, a platform label and additionally an application label.</t>
        <t>The method of combining the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
      </section>
      <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
        <name>The Software Manifests Claim (manifests)</name>
        <t>This claim contains descriptions of software that is present on the device.
These manifests are installed on the device when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the device, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is that they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and/or the Relying Party.</t>
        <t>In some cases these will be signed by the software manufacturer independent of any signing for the purpose of EAT attestation.
Manifest claims should include the manufacturer's signature (which will be signed over  by the attestation signature).
In other cases the attestation signature will be the only one.</t>
        <t>This claim allows multiple formats for the manifest.
For example the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
        <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
        <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
        <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it must be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
        <t>It is not possible to describe the above requirements in CDDL so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
        <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests may be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

]]></sourcecode>
      </section>
      <section anchor="swevidence" numbered="true" toc="default">
        <name>The Software Evidence Claim (swevidence)</name>
        <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the device.
The defining characteristic of this claim is that its contents are created by processes on the device that inventory, measure or otherwise characterize the software on the device.
The contents of this claim do not originate from the software manufacturer.</t>
        <t>In most cases the contents of this claim are signed as part of attestation signing, but independent signing in addition to the attestation signing is not ruled out when a particular evidence format supports it.</t>
        <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 
]]></sourcecode>
      </section>
      <section anchor="swresults" numbered="true" toc="default">
        <name>The SW Measurement Results Claim (swresults)</name>
        <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
        <t>This claim may be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
        <t>This claim can also be generated on the device if the device has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
        <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
        <t>For each software objective, the following can be reported.</t>
        <section anchor="scheme" numbered="true" toc="default">
          <name>Scheme</name>
          <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
        </section>
        <section anchor="objective" numbered="true" toc="default">
          <name>Objective</name>
          <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
          <dl>
            <dt>
1 -- all  </dt>
            <dd>
              <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
            </dd>
            <dt>
2 -- firmware  </dt>
            <dd>
              <t>Indicates all of and only the firmware</t>
            </dd>
            <dt>
3 -- kernel  </dt>
            <dd>
              <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
            </dd>
            <dt>
4 -- privileged  </dt>
            <dd>
              <t>Refers to all of the software used by the root, system or administrative account</t>
            </dd>
            <dt>
5 -- system-libs  </dt>
            <dd>
              <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
            </dd>
            <dt>
6 -- partial  </dt>
            <dd>
              <t>Some other partial set of the software</t>
            </dd>
          </dl>
        </section>
        <section anchor="results" numbered="true" toc="default">
          <name>Results</name>
          <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
          <dl>
            <dt>
1 -- verificaton-not-run  </dt>
            <dd>
              <t>Indicates no attempt was made to run the verification</t>
            </dd>
            <dt>
2 -- verification-indeterminite  </dt>
            <dd>
              <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
            </dd>
            <dt>
3 -- verification-failed  </dt>
            <dd>
              <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
            </dd>
            <dt>
4 -- fully-verified  </dt>
            <dd>
              <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
            </dd>
            <dt>
5 -- partially-verified  </dt>
            <dd>
              <t>The verification ran to completion and some, but not all measurements compared correctly to Reference Values</t>
            </dd>
          </dl>
        </section>
        <section anchor="objective-name" numbered="true" toc="default">
          <name>Objective Name</name>
          <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]
]]></sourcecode>
        </section>
      </section>
      <section anchor="submodules-submods" numbered="true" toc="default">
        <name>Submodules (submods)</name>
        <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have one or
more security-oriented subsystems like a TEE or a Secure Element.</t>
        <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
        <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
        <section anchor="submodule-types" numbered="true" toc="default">
          <name>Submodule Types</name>
          <t>The following sections define the three major types of submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
            <li>The digest of a detached Claims-Set</li>
          </ul>
          <t>These are distinguished primarily by their data type which may be a map/object, string or array.</t>
          <section anchor="submodule-claims-set" numbered="true" toc="default">
            <name>Submodule Claims-Set</name>
            <t>This is simply a subordinate Claims-Set containing claims about the submodule.</t>
            <t>The submodule claims-set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment as described in the RATS architecture.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>The encoding of a submodule Claims-Set is always the same as the encoding as the token it is part of.</t>
            <t>This data type for this type of submodule is a map/object as that is the type of a Claims-Set.</t>
          </section>
          <section anchor="nested-token" numbered="true" toc="default">
            <name>Nested Token</name>
            <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/></t>
            <t>In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token does NOT need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.</t>
            <t>Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
            <t>The data type for this type of submodule is either a text or byte string.</t>
            <t>Mechanisms are defined for identifying the encoding and type of the nested token. These mechanisms are different for CBOR and JSON encoding.
The type of a CBOR-encoded nested token is identified using the CBOR tagging mechanism and thus is in common with identification used when any CBOR-encoded token is part of a CBOR-based protocol.
A new simple type mechanism is defined for indication of the type of a JSON-encoded token since there is no JSON equivalent of tagging.</t>
            <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR-Encoded</name>
              <t>If the submodule is a byte string, then the nested token is CBOR-encoded.
The byte string always wraps a token that is a tag.
The tag identifies whether the nested token is a CWT, a UCCS or a CBOR-encoded DEB.</t>
              <t>If the submodule is a text string, then the nested token is JSON-encoded.
The text string contains JSON.
That JSON is the exactly the JSON described in the next section with one exception.
The token can't be CBOR-encoded.</t>
              <sourcecode type="CDDL"><![CDATA[
Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token

]]></sourcecode>
            </section>
            <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is JSON-Encoded</name>
              <t>A nested token in a JSON-encoded token is an array of two items.
The first is a string that indicates the type of the second item as follows:</t>
              <dl>
                <dt>
"JWT"  </dt>
                <dd>
                  <t>A JWT formatted according to <xref target="RFC7519" format="default"/></t>
                </dd>
                <dt>
"CBOR"  </dt>
                <dd>
                  <t>Some base64url-encoded CBOR that is a tag that is either a CWT, UCCS or CBOR-encoded DEB</t>
                </dd>
                <dt>
"UJCS"  </dt>
                <dd>
                  <t>A UJCS-Message. (A UJCS-Message is identical to a JSON-encoded Claims-Set)</t>
                </dd>
                <dt>
"DEB"  </dt>
                <dd>
                  <t>A JSON-encoded Detached EAT Bundle.</t>
                </dd>
              </dl>
              <sourcecode type="CDDL"><![CDATA[
Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
            </section>
          </section>
          <section anchor="detached-submodule-digest" numbered="true" toc="default">
            <name>Detached Submodule Digest</name>
            <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
            <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
            <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
            <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
            <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
            <t>The data type for this type of submodule is an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
            <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="cddl-for-submods" numbered="true" toc="default">
          <name>CDDL for submods</name>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="UJCS" numbered="true" toc="default">
      <name>Unprotected JWT Claims-Sets</name>
      <t>This is simply the JSON equivalent of an Unprotected CWT Claims-Set <xref target="UCCS.Draft" format="default"/>.</t>
      <t>It has no protection of its own so protections must be provided by the protocol carrying it.
These are extensively discussed in <xref target="UCCS.Draft" format="default"/>.
All the security discussion and security considerations in <xref target="UCCS.Draft" format="default"/> apply to UJCS.</t>
      <t>(Note: The EAT author is open to this definition being moved into the UCCS draft, perhaps along with the related CDDL.
It is place here for now so that the current UCCS draft plus this document are complete.
UJCS is needed for the same use cases that a UCCS is needed.
Further, JSON will commonly be used to convey Attestation Results since JSON is common for server to server communications.
Server to server communications will often have established security (e.g., TLS) therefore the signing and encryption from JWS and JWE are unnecssary and burdensome).</t>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached claims-sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set
]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the device and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the device generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-common-cddl" numbered="true" toc="default">
        <name>Collected Common CDDL</name>
        <sourcecode type="JSON"><![CDATA[
Claims-Set = {
    * $$claims-set-claims,
    * Claim-Label .feature "extended-label" => any
}

Claim-Label = int / text

string-or-uri = tstr 

time-int = #6.1(int)


$$claims-set-claims //= (iss-label => text)
$$claims-set-claims //= (sub-label => text)
$$claims-set-claims //= (aud-label => text)
$$claims-set-claims //= (exp-label => ~time)
$$claims-set-claims //= (nbf-label => ~time)
$$claims-set-claims //= (iat-label => ~time)


$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)

$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)

hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)

$$claims-set-claims //=  (
    hw-version-label => hw-version-type
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

hardware-class-bstr-type = bstr .size 16

$$claims-set-claims //= (
    hardware-class-label => ~uri /
                            ~oid /
                             hardware-class-bstr-type
)

$$claims-set-claims //= ( sw-name-label => tstr )

$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]

$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

$$claims-set-claims //= (secure-boot-label => bool)

$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

$$claims-set-claims //= (uptime-label => uint)

$$claims-set-claims //=  (boot-seed-label => bytes)

$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$claims-set-claims //= (profile-label => ~uri / ~oid)

$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx


$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 

$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]


$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]


Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-cbor" numbered="true" toc="default">
        <name>Collected CDDL for CBOR</name>
        <sourcecode type="CDDL"><![CDATA[
CBOR-Token = Tagged-CBOR-Token / Untagged-CBOR-Token
    

Tagged-CBOR-Token  = CWT-Tagged-Message
Tagged-CBOR-Token /= UCCS-Tagged-Message
Tagged-CBOR-Token /= DEB-Tagged-Message

Untagged-CBOR-Token  = CWT-Untagged-Message
Untagged-CBOR-Token /= UCCS-Untagged-Message
Untagged-CBOR-Token /= DEB-Untagged-Message

CWT-Tagged-Message = COSE_Tagged_Message
CWT-Untagged-Message = COSE_Untagged_Message

UCCS-Message = UCCS-Tagged-Message / UCCS-Untagged-Message

UCCS-Tagged-Message = #6.601(UCCS-Untagged-Message)

UCCS-Untagged-Message = Claims-Set

DEB-Tagged-Message = #6.602(DEB-Untagged-Message)

DEB-Untagged-Message = Detached-EAT-Bundle



Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token



iss-label = 1
sub-label = 2
aud-label = 3
exp-label = 4
nbf-label = 5
iat-label = 6
cti-label = 7

nonce-label = 10
ueid-label = 11
oemid-label = 13
security-level-label = 14
secure-boot-label = 15
debug-status-label = 16
location-label = 17
profile-label = 18
submods-label = 20


sueids-label = <TBD25>
hw-version-label = <TBD26>
sw-name-label = <TBD29>
sw-version-label = <TBD30>
uptime-label = <TBD31>
boot-seed-label = <TBD32>
intended-use-label = <TBD33>
dloas-label = <TBD34>
manifests-label = <TBD35>
swevidence-label = <TBD36>
swresults-label = <TBD37>
hardware-class-label = <TBD38>
hardware-model-label = <TBD39>

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-json" numbered="true" toc="default">
        <name>Collected CDDL for JSON</name>
        <sourcecode type="JSON"><![CDATA[
JWT-Message = text .regexp [A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+

UJCS-Message = Claims-Set



Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"


iss-label = "iss"
sub-label = "sub"
aud-label = "aud"
exp-label = "exp"
nbf-label = "nbf"
iat-label = "iat"
cti-label = "cti"

ueid-label /= "ueid"
sueids-label /= "sueids"
nonce-label /= "nonce"
oemid-label /= "oemid"
security-level-label /= "seclevel"
secure-boot-label /= "secboot"
debug-status-label /= "dbgstat"
location-label /= "location"
uptime-label /= "uptime"
profile-label /= "eat-profile"
intended-use-label /= "intuse"
boot-seed-label /= "bootseed"
submods-label /= "submods"
timestamp /= "timestamp"
manifests-label /= "manifests"
swevidence-label /= "swevidence"
dloas-label /= "dloas"
swresults-label /= "swresults"
sw-name-label /= "swname"
sw-version-label /= "swversion"
hardware-model-label /= "hwmodel"
hardware-class-label /= "hwclass"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: 10</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: 11</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: OEMID</li>
            <li>Claim Description: IEEE-based OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: 13</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: 14</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 15</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 16</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: 17</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: 18</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules (not actually a claim)</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: 20</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>TODO: add the rest of the claims in here</t>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a single device will be
able to know the tokens are all from the same device and be able to
track the device. Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The device obtains explicit permission from the user of the device
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The device authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the device, then
the device generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main device UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per device. Each UEID/SUEID is used in a
different context, use case or system on the device. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the device generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-01.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="July" year="2021"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-01"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-19.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="October" year="2021"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-19"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-14.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="9" month="December" year="2021"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-14"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="ECMAScript" target="http://www.ecma-international.org/ecma-262/5.1/ECMA-262.pdf">
          <front>
            <title>Ecma International, "ECMAScript Language Specification, 5.1 Edition", ECMA Standard 262</title>
            <author>
              <organization/>
            </author>
            <date year="2011" month="June"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-02.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="12" month="July" year="2021"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-02"/>
        </reference>
        <reference anchor="HW-IP" target="https://en.wikipedia.org/wiki/Semiconductor_intellectual_property_core">
          <front>
            <title>Semiconductor intellectual property core</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>These examples are either UCCS, shown as CBOR diagnostic, or UJCS messages.
Full CWT and JWT examples with signing and encryption are not given.</t>
      <t>All UCCS examples can be the payload of a CWT.
To do so, they must be converted from the UCCS message to a Claims-Set, which is achieve by "removing" the tag.</t>
      <t>UJCS messages can be directly used as the payload of a JWT.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="simple-tee-attestation" numbered="true" toc="default">
        <name>Simple TEE Attestation</name>
        <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / secure-boot /     15: true,
    / debug-status /    16: 2, / disabled-since-boot /
    / manfests /        35: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
})
    

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
      </section>
      <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
        <name>Submodules for Board and Device</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /       13: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /     39: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /      26: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /         29: "Acme OS",
    / SW Version /      30: ["3.5.5", 1],
    / secure-boot /     15: true,
    / debug-disable /   16: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level /  14: 3, / secure restricted OS /
    / submods / 20: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   13: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 39: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  26: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   13: 61234, / PEN Format OEM ID / 
            / HW Version /  26: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
      </section>
      <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
        <name>EAT Produced by Attestation Hardware Block</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /           13: 64242, / Private Enterprise Number /
    / security-level /  14: 4, / hardware level security /
    / secure-boot /     15: true,
    / debug-status /    16: 3, / disabled-permanently /
    / chip-version /    26: [ "3.1", 1 ] / Type is multipartnumeric /
})

]]></artwork>
      </section>
      <section anchor="detached-eat-bundle" numbered="true" toc="default">
        <name>Detached EAT Bundle</name>
        <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
        <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
        <t>The DEB itself can be assembled by untrusted SW.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e0b500198f50a4ff6c058
      61c8860d13a638ea0d19faf20e040ff51003181a8263332e
      310114a163544545822f5820e5cf95fd24fab71446742dd5
      8d43dae178e55fe2b94291a9291082ffc2635a0b',
      
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e0e030ff51002182381
                 585dda53574944a60064336132340c01016b4163
                 6d6520544545204f530d65332e312e340282a218
                 1f6b41636d6520544545204f53182101a2181f6b
                 41636d6520544545204f5318210206a111a11818
                 6e61636d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /           13: 64242, / Private Enterprise Number /
    / security-level /  14: 4, / hardware level security /
    / secure-boot /     15: true,
    / debug-status /    16: 3, / disabled-permanently /
    / chip-version /    26: [ "3.1", 1 ], / multipartnumeric /
    / submods/          20: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
})

]]></artwork>
      </section>
      <section anchor="key-key-store-attestation" numbered="true" toc="default">
        <name>Key / Key Store Attestation</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / debug-status /    16: 2, / disabled-since-boot /
    / secure-boot /     15: true,
    / manifests /       35: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        20 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level /  14: 1, / unrestricted /
           / secure-boot /     15: true,
           / manifests /       35: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
})
           
   
]]></artwork>
      </section>
      <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
        <name>SW Measurements of an IoT Device</name>
        <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / secure-boot /     15: true,
    / debug-status /    16: 2, / disabled-since-boot /
    / OEMID /           13: h'8945ad', / IEEE CID based /
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /          20: {
                            "OS" : {
        / security-level /      14: 2, / restricted /
        / secure-boot /         15: true,
        / debug-status /        16: 2, / disabled-since-boot /
        / swevidence /          36: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
})

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
      </section>
      <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
        <name>Attestation Results in JSON format</name>
        <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
        <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
        <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
    
]]></artwork>
      </section>
    </section>
    <section anchor="ueid-design-rationale" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p  Collision Probability
    n  Total population based on number of bits in UEID
    k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>Add HW class claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIANpg02EAA+y9a3Pb2pUg+h2/AqWTukdKSOrpZ/fpHh1J50Ru2/JYctwz
qdQpkAQpxCTAAKRltcdd+RtdNffr/WH5JXe999oAKDvJzK1bU51KHYvAxn6u
vd6P4XCYNOusnP6SLaoyf56u602eFKua/mrWRwcHzw6Okkm2fp4262mSTKtJ
mS2h4bTOZuthka9nwzpbN8M8Ww8X2Tpv1klyN3+evj29uU7fV/WHopynP9fV
ZpV8l06qssnLZtM8T7+/z5vv4VGzGS+Lpimqcn2/gn4vL25+SlbF8yRN19VE
29GPab5a38KTE/zdVPW6zmdNaNHcL+MHk2q5yiZr12IzDs/KCh/Vs0k+bdb3
i1ybrYs1/ri5zdOLEn7cp6drXFa2hjmmN9WHvEx3L05v9pJsPK7zj89T+JFk
dZ7B5Mt1Xpf5OvlwB/tVzEtcfOY+n4yrGhY9hY16nh4dHB4PDw+SbLO+rern
yTAtSpj+y1H6clNOx4tsmsMMebtfZps6Lyd59KqqYaOv88mmxmnCjKv6Pn35
8gxe5cusWDxPF/PFf2mkwZrej2AHdKSfR+krOPv7bGnj/FzUxfQ2q90LGuW/
brIFfLlMb/LJbVktqnmRN7DeyQj3FU4ihz199OTJo/RVVee31abJ0/O6+IjT
nMDgMM+sTM+LfF7hrudz2I3n6Vm2KGZVXRYZHdemXNfQ8t31Kfxc3RJA7vzm
MH366Gn6+NFh+gTAcScsbslT/C9/WhejP8n8/PJejNKr78+rsprfbsJOvsjr
fHkfv/n2JR49eZb+lNUlnGO1md+mb6tsakt0L2g9U9zQd4cn6ZOX19ECy2Kd
T9N/AeiYVsuw1t+cnKSHR4+O0uPHx4dPn4WV/rGa0mS7S03Kql4CbH3M8ca8
/ens6PDwmfz55NHhI/nz6bMT9/RJ+NOePj040LaHR4/tzycn9uejI/3z+Jn9
+fjQPntyov0eP3uqPTwD/IF/4v/gn/c/Xz894d/rrJ7jju7crter5vn+fp7V
69thUc6qUTnPRstisb+6Xe1Pq7tyAbs8gh//PCsW+Q+Tqqqnw7t58/Rkh7vi
K/v+6u3L8/Tni6vzi5vLs/T6v13fXLxKD589PRmkr38+HV3fvD4fHRwcP/7l
cHQwOviFJkMd6A3Ev4cMDa/pwmaL9Oe8albwI1sM8XovFsWcLuIp/nOf7kLP
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
IzwTUh/zralqOL8V+8B2aX6AIOpQoYhzwwSzUYislg+ER6AZSR6AaBaSKFIs
KMQ5ZAt1HoSOk+dYsdRFj0frwStLUQp8LDjALLqF7Q9UCv/6yiiB7dDyo3Xm
QYrSqdlqQkN2i2PYh6/eWlYMt03IyQ178mRF06eWL4ty80l7Y0+z8N227m25
WoCWbicm7HIwnk1RHcdaN1STc44m8eKSJF3AmTRbB9Ec+ci8RO6O4xq4iQXm
xMxqcVjQiXSV8Zh6I3lM6+LDh/GuQ9VxeUh5MVurkzJoQpolfNYs5wEhhQxV
AezItLUQod4RxH6yQsBoN78qhxj8VG/KCCgwzQ2A1XLFtj7Kt4j4cVN2EIfA
ln80RD4c00tjmGTOOZ5j7ISdygCaOQIDTQrzsgaMwTWTcdH/EOozrdGpmvhz
lOIp45rodyjpFnr2SrY8OovjztSYb+ibE3ZMKh2qpWO2GLehZPaUUjtTyUo3
FZSAjXJGPJM1ayT6qJyAPUe860X/ptnIMS9iqVMGnsYjd0d95IDybxoZ2bhQ
d/JvnkeE+qkagK8D0CJuXt8bXwajoy26vuNRzA7Cwc5P2SQfV9UH9FnZ+ZaC
KIEhjm2t+ljsrSALRIAlL3t8AaNmctvMMXDLvYFbaG6CPfBr3oIxIAXHwc5J
P08fDZItc+76E/ZN2dwEt0+5vwlP2d7FUw7Oh50p76St6dqp9+0yfGqbqvTL
tpABwnYtUB3bMUckaKvcLj5PH3e3Lsylu3swlbBamYo9UNg0p0ydSkjBGqbS
3p0dFEA9GLrKCWFu3MFzV0TBZvs8/eqOhnofX1vwINW8tTCfVs+d6+By5z4I
gwN1QAgDIlvJq4kcD66DgnaXWR10MiB6q0m2GCdThvwBih6ITsjAaKIOetaf
JstqjN6Rq1sq6EhFg6pqqniFkh2a8KL+PSDWlblk3E9Cf6JCWS43pTEHu/lo
PhpIdnzK1p0vFqhT2ou6bvcCssFwVd2hkLqZFhUXqATJsULXk/txNvkQz4wt
iklImo8JgTllP2Udss5dLSCK4IizgXujZSMxHkFuFEllDhz7iowgc7F2xLng
TDyT3uSAxE8jlBtaZqt9PukBzR/Gr+85dDrw5SaaqMnbugufc68SKkT2kST2
I0YdqnnwsbtPqiWiVjmb93yyF2VLEmX72VtEctq18vdmZmitZcfUgSBHlgW7
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
tOBULOG8IdAko6SJL14jAj0yIREQoWLoBQI9Z45fYXuiKdrh+qHZuTXIXn0q
olBd4sBbw5IhHNWPK4zephvv9WrzAb75GuyVXVEQYKksQUU2X5WRkn8Tsi9O
1Tq/phvR1T9wZbpWI1xg9CV+nRc3a+Uteya6gCBFSiKEu7SlCN8KlRpTb9Gk
vi62whxnX13K2Ub+vkRfOt7fbzu1v4avOvGxD8ov0JOkF89E6L6QGAZ/9Hvt
7wst+8pXtmZPkt5fk/TU/dJQS7vn1/SAWvxFQhUNT60WbL1XC9bh1/OAWqrL
kWoan2It7tAgsNMss16oMcrR16vt7gqUFe2+KEuMz30tJmnk9iXbOGfyCsiq
EIP0R0PGY/5glqxtoTckgKa50Uw/qj1wdkCOLGpOZPu6+Z/dEYeOzcv9RrC8
K5sr62CE12cejWtQTHYYcOZCaGkY3sJN/Ps4iTtx/tcfOx/+mj4+STenYtrY
E/EBE0YewACJt6Hl4fYdfQgTv86IMNX/0QG5aoNJV9JmpwzxrFdFlQmtpHbT
6CWXYMwjE0l0U4D+QQDYObcXFba68B3x5scMZoTZXGxgCiFUgbNHWVA1kcJe
InnB59W1mWkI0Kn0izqdPJs//dSNHZYFDi4MKoajbmLGMN5VrL4n8rD3zt2j
jcOto22bO0ckwD+cMM9WfMgmtvXYzcJr9xaZfLqdoio9qAHjJJ10oES2cuHj
NPU/psOR9zFUl3fpv3s+RndpsjT+DeiGv3aSIX2cyMc+fxzKxyF9jO5SVlpQ
bxoUlE6DggZTKeiwPrKCwhalYYsG3KLoJREv4UlchOF+g38OJ06xTglt4zbP
tmDkRcLTo3laOqOKkV6zJUP7jKyMCJNCiIyMWAjkoJAFRqW9pugfqHCwDd2A
tyuq2Yye0Ur2F1kf/g5BdfrlIX9VRNUWZa4/K+gZ+WvcsC3uGDN1F9AQ3BgW
G9rH5a4z5zFAH8pqJ8Mk3ggEh454KKq9p+0Ge0rOI7CWjJLSkswMf5pK6CJK
g9i6lrez36BfiEmAuR4dVcXnpq4KfjqS84AVnbtJXuaf1CKXHcCnLZ1hJIoD
bKU4ebLLQKcihMIKs7gsbK0yfpEvdKZZ+PlZztSBUCb0+CrcCavzGGWVrdLO
EOI9cidKpwF3tCE9jk9OPsD/Jr1TWDc3GMVov8dvsTvcC6+pUYP+9HuGOwwp
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
AgA=

-->

</rfc>
