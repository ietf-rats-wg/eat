<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="September" day="28"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>Some of the goals and fundamentals in the security model for attestation are not the same as other security standards such as those aimed at privacy (e.g., TLS) and authentication (e.g. FIDO).
The security model for attestation is not described here.
Instead see <xref target="RATS.Architecture"/>.</t>
      <t>EAT provides the definition of a common set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC9052"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for evidence and attestation results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of an EAT. Many of the claims defined in this document are claims about an entity, which is equivalent to an attesting environment as defined in <xref target="RATS.Architecture"/>. An entity may be the whole device, a subsystem, a subsystem of a subsystem, etc.
Correspondingly, the EAT format allows claims to be organized using mechanisms like submodules and nested EATs (see <xref target="submods"/>).
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
In the EAT context, "entity" never refers to a person or organization. The hardware and software that implement a server or service used by a web site may be an entity, but the organization that runs the web site is not an entity nor is the web site itself. An entity is an implementation in hardware, software or both.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims are defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific token formats for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Full tokens with security envelopes may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization format or security envelope.
That is left for a follow-on document.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EAT tokens for specific use cases in follow-on documents.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>The EAT format follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities. An EAT MUST always contains a Claims-Set.</t>
      <t>Authenticity and integrity protection MUST be provided for EATs. This document relies on CWT or JWT for this purpose.
Extensions to this specification MAY use other methods of protection.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines a new top-level message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$$EAT-CBOR-Tagged-Token</tt>, <tt>$$EAT-CBOR-Untagged-Token</tt> and <tt>$$EAT-JSON-Token-Formats</tt> sockets, enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets MUST be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations MUST be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>All claims in an EAT MUST use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for claim keys.
JSON-encoded tokens MUST use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but MUST NOT be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce MUST have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the "oemid" claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel-hardware-model-claim">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname-software-name-claim">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="secboot-secure-boot-claim">
          <name>secboot (Secure Boot) Claim</name>
          <t>A "secboot" claim with value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
"oemid" claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an attesting environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded detached EAT bundle, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
                  </dd>
                  <dt>"BUNDLE":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded detached EAT bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.
A detached Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set of the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
              <t>The encoding type of the detached claims set is part of the carrying protocol and varies from protocol to protocol.
For example, a detached EAT bundle uses mechanisms defined in this document.
Other use cases may use a content/media type.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, a hash algorithm identifier and a byte string containing the digest.</t>
              <t>The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>.
Either the integer or string identifier may be used.
The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
              <t>When decoding a CBOR format token, the detached digest type is distinguished from the other types by it being an array.
In CBOR encoded tokens none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "BUNDLE", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like an EAT nonce (<xref target="nonce"/>).</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in evidence or attestation results.
When these claims appear in evidence, they SHOULD not be passed through the verifier into attestation results.</t>
        <section anchor="iat-timestamp-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EAT's may be used in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a detached EAT bundle.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the detached EAT bundle.
No mixing of encoding formats is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a verifier must implement.
The attester will select one of them.
Since there is no negotiation, the verifier should implement all algorithms listed in the profile.
If detached submodule digests are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations <xref target="sec-con-freshness"/> requires a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver MUST accept ES256, ES384 and ES512; sender MUST send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID MUST be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce MUST be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver MUST not error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and MUST use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition MUST have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the nonce claim for token replay protection (also sometimes known as token "freshness"). The nonce claim is based on a value that is usually derived remotely (outside of the entity). This claim can be used to extract and convey personally-identifying information either inadvertently or by intention. For instance, an implementor may choose a nonce that is equivalent to a username associated with the device (e.g., account login). If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token. In order to avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modifie detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "eat_nonce"</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: EAT Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Name</li>
            <li>Claim Description: The name of the software running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Version</li>
            <li>Claim Description: The version of software running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Manifests</li>
            <li>Claim Description: Manifests describing the software installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Measurements</li>
            <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "measurements"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Measurement Results</li>
            <li>Claim Description: The results of comparing software measurements to reference values</li>
            <li>JWT Claim Name: "measres"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Count</li>
            <li>Claim Description: The number times the entity or submodule has been booted</li>
            <li>JWT Claim Name: "bootcount"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): uint</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052" target="https://www.rfc-editor.org/info/rfc9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose/">
          <front>
            <title>COSE Algorithms</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-22.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest" target="https://www.ietf.org/archive/id/draft-ietf-suit-manifest-19.txt">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <date day="9" month="August" year="2022"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-19"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-22.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-04.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
        <reference anchor="UCCS" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-03.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="11" month="July" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'948f8860d13a463e8e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric version /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / secboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /       258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /     259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / hwversion /   260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /       258: 61234, / PEN Format OEM ID / 
            / hwversion /   260: ["4.0", 1] / Multipartnumeric version /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'948f8860d13a463e',
           / secboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / oemid /          258: h'8945ad', / IEEE CID based /
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /        266: {
                            "OS" : {
        / secboot /            262: true,
        / dbgstat /            263: 2, / disabled-since-boot /
        / measurements         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "submods": {
        "Android App Foo" :  {
            "swname": "Foo.app"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "swname": "Android"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  /
/ Note that 602, the tag identifying a detached EAT bundle is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardize a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain reference values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-14">
        <name>From draft-ietf-rats-eat-14</name>
        <ul spacing="normal">
          <li>Reference to SUIT manifest</li>
          <li>Clarifications about manifest extensibility</li>
          <li>Removed security level claim</li>
          <li>Changed capitalization throughout the document for various terms</li>
          <li>Eliminated use of DEB acronym for detached EAT bundles</li>
          <li>Replicate claim optionality text from CWT and JWT</li>
          <li>Several edits and clarifications for freshness and nonces</li>
          <li>Correct eat_nonce registration for JSON-encoded tokens</li>
          <li>Add security considerations for freshness</li>
          <li>Change/clarify the input to digest algorithm for detached claims sets</li>
          <li>Removed EAN-13 references and IANA registration</li>
          <li>Add section on Claim Trustworthiness to Security Considerations</li>
          <li>Removed section discussing cti/jti and other mention of cti/jti</li>
          <li>Some rework on section 3 including adding back in a <strong>non-normative</strong> reference to UCCS</li>
          <li>Improved wording in section 1.3</li>
          <li>Improvements to abstract</li>
          <li>Appendix C clarifications -- say "message" not "protocol"</li>
          <li>Removed "transport security" section from security considerations</li>
          <li>Entirely remove section 4.4 that discussed including keys in claims</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9a3PbWHYo+h2/AiV3VUszJGXJstt2TvdELal71LEtH0tO
J2dulwOREIUxCTAAaJnjcX77We+9NgDKnkxSdW5VXMm0CGzs59rr/RiPx0nT
ZuXsXbaoyvx52tbrPClWNf3VtIcPHz57eJhMs/Z52rSzJJlV0zJbQsNZnd20
4yJvb8Z11jbjPGvHi6zNmzZJ7ubP0zfHV5fpr1X9vijn6c91tV4lD9JpVTZ5
2ayb5+m3m7z5Fh416+tl0TRFVbabFfR7fnb1U7Iqnidp2lZTbUc/ZvmqvYUn
R/i7qeq2zm+a0KLZLOMH02q5yqata7G+Ds/KCh/VN9N81rSbRa7N2qLFH1e3
eXpWwo9NetzisrIW5pheVe/zMt09O77aS7Lr6zr/8DyFH0lW5xlMvmzzuszb
5P0d7FcxL3Hxmft8el3VsOgZbNTz9PDhwaPxwcMkW7e3Vf08GadFCdN/MUlf
rMvZ9SKb5TBD3u4X2brOy2kevapq2OjLfLqucZow46repC9enMCrfJkVi+fp
Yr74x0YatPR+AjugI/08SV/C2W+ypY3zc1EXs9usdi9olP+9zhbw5TK9yqe3
ZbWo5kXewHqnE9xXOIkc9vTxd989Tl9WdX5brZs8Pa2LDzjNKQwO88zK9LTI
5xXuej6H3XienmSL4qaqyyKj41qXbQ0t314ew8/VLQHkzu8P0qePn6ZPHh+k
3wE47oTFLXmK//jvbTH5d5mfX94vk/Ti29OqrOa367CTv+R1vtzEb75+iYff
PUt/yuoSzrFaz2/TN1U2syW6F7SeGW7o24Oj9LsXl9ECy6LNZ+k/AXTMqmVY
6++PjtKDw8eH6aMnjw6ePgsr/XM1o8n2l5rAlWrr4nrdMgTxGv+Yl+/TH4v6
/W21+Iuu76c6W5e31U1ep5fnV/BU4bf3Qka9hV4m19LLPzZFO7mxlhMAQB3t
6rZaZk36U9U0AOU63HG9TF8US1xp6LKlppMbbvqPWa0Hxj29LObrfJH+mC0W
cGXyumrcq+ltBu/e4H/rWVOVdgEADPIFAEN6Wd20d3ATCe80DlCm9e8RU/1j
o00n08x6fp3BBk7fp29hqvVd8ef3YcysvS1gZT/WON96FvY3K0uAjatmiptR
FvN7F31LrSette6t+3W2XqQndXW3yDdJUlb1EnbnQ45I8M1PJ4cHB8/kz+8O
Htufjw8ehz+fyJ9Pnx1ZA4Ck0ECfPj04tLYH3x3pn4+eadunTw4eyp+Pnj3V
ts8eWmfPgCQ8T+DvX3++fEodAHbO6jlej53btl01z/f386xub8dFeVNNynk2
WRaL/dXtan9W3ZULuDIT+PGHm2KRfz+tqno2vps3T492uCvGv79evHlxmv58
dnF6dnV+kl7+6+XV2cv04NnTo1H66ufjyeXVq9PJw4ePnrw7mDycPHxHk6EO
FJ3i32M+lleEfbNF+nNeNSv4kS3GiKsXi2JOWPUY/7NJd6HnPfrQMPTR+OF3
44dPcb3nx6+OJye/Xk1OFlmxbOKV48Jh3Xd3d5MiK7MJjLufNUgDlnnZNvvT
u9Yv7+THizfpr/m1EhTodi/lfrctAod3c7vJFk1u0/qlM61oXs19E/uzTExn
9svlxSs/s186M4um1pvb4OROLi7PJseLeQVk6HZo4+6d4LRq8n2/dzvYXxr6
2+nv2L0bdnULuPzn168n5y/PzocnswLuIltMHs1XK5rPLG/et9VqWc3WgJn2
L1f5tLgppgRWnZ+neQu3vplkzerjHxr/5nz2/XeHz/xKHtUzAMkyr5k7eA2X
Bn40t8UqfV1Xf86n7T8wNYIeFmk0DPNU6QlQ2/RV3t4BxksBu0HzelkAqDf/
kL5aL6/zGojMKM1mszqHPUV2BBoVM9hZ62obwD2CPYovwzPcvpPq8tfzU9je
8emE+L8mmy7HcEp3xQzfn764OB7e1fmius4WK2ATgegvaWPvVmOkYDCd/fUK
MUOzD+M83j843P/59cm702JewEG8yIGHqi9ujleruvqQLd59wEu/mt34zZS2
KTdOq5tUm7tFvKo+5LgruJrHCU739dmrLTCQlwEg4cf+67yEHheya5NVNs/9
+K+B3YExkGvM61VdAAfEJ5Duwhh76Zv839fEHuu1QGZw3GZzvRDcDb5i9HAF
r+CreQHMx+ZvvDPadfhr8vG2XS5o9MvXp/8SjWmE83U2fQ/LSk+zNkvPPgKp
LeHXLn6wNziDZjX7CLzAh6GDBI4B7srRAZzo4cP9h0/3sZtxdCXGh+NDO0cF
s8OHBGabKYokOlNDnPp4GM1N+TVMCrckGmsfjr7+UOR3+wOYys4E7tN4ldVA
luEUh04GLnxbZwWMkb45u7y6Acp9Vn4o6oq3HlB59eZsD++y9BHt2//6CnQX
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
xafTZgIA

-->

</rfc>
