<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2021" month="December" day="06"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides a signed (attested) set of
claims that describe state and characteristics of an entity, typically
a device like a phone or an IoT device.  These claims are used by a
Relying Party to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CWT or JWT with some attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>Remote device attestation is a fundamental service that allows a remote
device such as a mobile phone, an Internet-of-Things (IoT) device, or
other endpoint to prove itself to a Relying Party, a server or a
service.  This allows the Relying Party to know some characteristics
about the device and decide whether it trusts the device.</t>
      <t>The notion of attestation here is large and may include, but is not limited to the following:</t>
      <ul spacing="normal">
        <li>Proof of the make and model of the device hardware (HW)</li>
        <li>Proof of the make and model of the device processor, particularly
for security-oriented chips</li>
        <li>Measurement of the software (SW) running on the device</li>
        <li>Configuration and state of the device</li>
        <li>Environmental characteristics of the device such as its GPS location</li>
      </ul>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular it is a format that can be used for Attestation Evidence or Attestation Results as defined in the RATS architecture.</t>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb" numbered="true" toc="default">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a set of claims about an entity/device based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT), <xref target="RFC8392" format="default"/></li>
          <li>Unprotected CWT Claims Sets (UCCS), <xref target="UCCS.Draft" format="default"/></li>
          <li>JSON Web Token (JWT), <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds two more top-level messages:</t>
        <ul spacing="normal">
          <li>Unprotected JWT Claims Set (UJCS), <xref target="UJCS" format="default"/></li>
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is simple structure to hold a collection of detached claims-sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>An EAT can be encoded in either CBOR or JSON.
The definition of each claim is such that it can be encoded either.
Each token is either entirely CBOR or JSON, with only an exception for nested tokens.</t>
        <t>To implement composite attestation as described in the RATS architecture document, one token has to be nested inside another.
It is also possible to construct composite Attestation Results (see below) which may be expressed as one token nested inside another.
So as to not force each end-end attestation system to be all JSON or all CBOR, nesting of JSON-encoded tokens in CBOR-encoded tokens and vice versa is accommodated by this specification.
This is the only place that CBOR and JSON can be mixed.</t>
        <t>This specification formally uses CDDL, <xref target="RFC8610" format="default"/>, to
define each claim.  The implementor interprets the CDDL to come
to either the CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/>
representation. In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is
followed. Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
        <t>(TODO: The authors are open to modifications to this specification and the UCCS specification to include CDDL for UCCS and UJCS there instead of here.)</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is authored with an orientation around that model.</t>
        <t>To summarize, an Attester on an entity/device generates Attestation Evidence.
Attestation Evidence is a Claims Set describing various characteristics of the entity/device.
Attestation Evidence also is usually signed by a key that proves the entity/device and the evidence it produces are authentic.
The Claims Set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is validated.
Some of the Claims may also be validated against Reference Values.
The Verifier then produces Attestation Results which is also usually a Claims Set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the "Remote Attestaton Procedures", RATS.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing a device on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="use-as-attestation-evidence" numbered="true" toc="default">
          <name>Use as Attestation Evidence</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence.</t>
          <t>Attestation Evidence nearly always has to be signed or otherwise have authenticity and integrity protection because the Attester is remote relative to the Verifier.
Usually, this is by using COSE/JOSE signing where the signing key is an attestation key provisioned into the entity/device by its manufacturer.
The details of how this is achieved are beyond this specification, but see <xref target="keyid" format="default"/>.
If there is already a suitable secure channel between the Attester and Verifier, UCCS may be used.</t>
        </section>
        <section anchor="use-as-attestation-results" numbered="true" toc="default">
          <name>Use as Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Results.</t>
          <t>It is useful to characterize the relationship of claims in Evidence to those in Attestation Results.</t>
          <t>Many claims in Attestation Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the device by the Verifier just through normal verification of the Attester's signature.
The UEID, <xref target="UEID" format="default"/>, and Location, <xref target="location" format="default"/>, are examples of claims that may be passed through.</t>
          <t>Some claims in Attestation Evidence will be verified by the Verifier by comparison to Reference Values.
These claims will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.
For example, the Verifier receives the Software Evidence claim, <xref target="swevidence" format="default"/>, compares it to Reference Values and conveys the results to the Relying Party in a Software Measurement Results Claim, <xref target="swresults" format="default"/>.</t>
          <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.
For example, the data in the Location claim, <xref target="location" format="default"/>, may be modified to have a precision of a few kilometers rather than a few meters.</t>
          <t>When the Verifier is remote from the Relying Party, the Attestation Results must be protected for integrity, authenticity and possibly confidentiality.
Often this will simply be HTTPS as per a normal web service, but COSE or JOSE may also be used.
The details of this protection are beyond the scope of this document.</t>
        </section>
      </section>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>An "entity" can be any device or device subassembly ("submodule") that
can generate its own attestation in the form of an EAT.  The
attestation should be cryptographically verifiable by the EAT
consumer. An EAT at the device-level can be composed of several
submodule EAT's.</t>
        <t>Modern devices such as a mobile phone have many different execution
environments operating with different security levels. For example, it
is common for a mobile phone to have an "apps" environment that runs
an operating system (OS) that hosts a plethora of downloadable
apps. It may also have a TEE (Trusted Execution Environment) that is
distinct, isolated, and hosts security-oriented functionality like
biometric authentication. Additionally, it may have an eSE (embedded
Secure Element) - a high security chip with defenses against HW
attacks that is used to produce attestations.  This device attestation format
allows the attested data to be tagged at a security level from which
it originates.  In general, any discrete execution environment that
has an identifiable security level can be considered an entity.</t>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. No token may contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim may consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the Relying Party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) as fewer are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

]]></sourcecode>
      </section>
      <section anchor="UEID" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>UEID's identify individual manufactured entities / devices such as a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire device or a submodule or
subsystem. It does not identify types, models or classes of
devices. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEID's must be universally and globally unique across manufacturers
and countries. UEIDs must also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the device to keep devices distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID is permanent. It never change for a given
device / entity.</t>
        <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).  The
recommended maximum sent is also 33 bytes.</t>
        <t>When the entity constructs the UEID, the first byte is a type and the
following bytes the ID for that type. Several types are allowed to
accommodate different industries and different manufacturing processes
and to give options to avoid paying fees for certain types of
manufacturer registrations.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256 bit random number generated once and stored in the device. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the device and stored. It may not be smaller than 128 bits.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This makes use of the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-device identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while devices with multiple network interfaces may have multiple MAC addresses, there is only one UEID for a device) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/></td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. <xref target="ThreeGPP.IMEI" format="default"/></td>
            </tr>
          </tbody>
        </table>
        <t>UEID's are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the Relying Party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the device. Instead they
should use the oemid claim that is defined elsewhere. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Device manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa.  The main requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <t>A Device Indentifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)
]]></sourcecode>
      </section>
      <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
        <name>Semi-permanent UEIDs (SUEIDs)</name>
        <t>An SEUID is of the same format as a UEID, but it may change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
A device may have both a UEID and SUEIDs, neither, one or the other.</t>
        <t>There may be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label may name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile may describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
        <t>There are privacy considerations for SUEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

]]></sourcecode>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>Hardware OEM Identification (oemid)</name>
        <t>This claim identifies the OEM of the hardware.
Any of the three forms may be used at the convenience of the attester implementation.
The receiver of this claim MUST be able to handle all three forms.</t>
        <section anchor="random-number-based" numbered="true" toc="default">
          <name>Random Number Based</name>
          <t>This format is always 16 bytes in size (128 bits).</t>
          <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every device they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
          <t>The OEM may also use a hash like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash may be something whose uniqueness is managed by a central registry like a domain name.</t>
          <t>This is to be base64url encoded in JSON.</t>
        </section>
        <section anchor="ieee-based" numbered="true" toc="default">
          <name>IEEE Based</name>
          <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
services <xref target="OUI.Lookup" format="default"/>.</t>
          <t>Companies that have more than one of these IDs or MAC address blocks
should pick one and prefer that for all their devices.</t>
          <t>Commonly, these are expressed in Hexadecimal Representation
<xref target="IEEE.802-2001" format="default"/> also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48. For JSON encoded
tokens, this is further base64url encoded.</t>
          <t>This format is always 3 bytes in size in CBOR.</t>
        </section>
        <section anchor="iana-private-enterprise-number" numbered="true" toc="default">
          <name>IANA Private Enterprise Number</name>
          <t>IANA maintains a simple integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
          <t>PENs are often used to create an OID.
That is not the case here.
They are used only as a simple integer.</t>
          <t>In CBOR this is encoded as a major type 0 integer in CBOR and is typically 3 bytes.
It is encoded as a number in JSON.</t>
          <sourcecode type="CDDL"><![CDATA[
oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16


$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="hardware-oem-class-claim-hardware-class-claim" numbered="true" toc="default">
        <name>Hardware OEM Class Claim (hardware-class-claim)</name>
        <t>This claim differentiates between different hardware models, products and variants manufactured by a particular OEM.
The OEM is identified by OEM ID in <xref target="oemid" format="default"/>.</t>
        <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
        <t>The granularity of the model, product or variant identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.
An EAT profile may be more specific about what it should differentiate.</t>
        <t>The purpose of this claim is to identify models and products for use by protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function to make it not human-readable.</t>
        <t>There is no minimum length so that an OEM with a very small number of products can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
        <t>The receiver of this claim MUST treat this as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to change the internal structure of these bytes for new products as long as the claim continues to uniquely identify the model, product or variant.</t>
        <sourcecode type="CDDL"><![CDATA[
hardware-class-type = bytes .size (1..32)

$$claims-set-claims //= (hardware-class-label => hardware-class-type)
]]></sourcecode>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version can be claimed at three different levels, the chip, the circuit board and the final device assembly.
An EAT can include any combination these claims.</t>
        <t>The hardware version is a simple text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.</t>
        <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    chip-version-label => hw-version-type
)

$$claims-set-claims //=  (
    board-version-label => hw-version-type
)

$$claims-set-claims //=  (
    device-version-label => hw-version-type
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
      </section>
      <section anchor="software-name-claim" numbered="true" toc="default">
        <name>Software Name Claim</name>
        <t>This is a simple free-form text claim for the name of the software.
A CoSWID manifest or other type of manifest can be used instead if this is too simple.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= ( sw-name-label => tstr )

]]></sourcecode>
      </section>
      <section anchor="software-version-claim" numbered="true" toc="default">
        <name>Software Version Claim</name>
        <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme / As defined by CoSWID /
]


]]></sourcecode>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the device/entity 
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels as described below.</t>
        <t>These claims describe security environment and countermeasures
available on the end-entity/client device where the attestation key
resides and the claims originate.</t>
        <dl>
          <dt>
1 - Unrestricted:  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2 - Restricted:  </dt>
          <dd>
            <t>Entities at this level are not general-purpose
operating environments that host features such as app download
systems, web browsers and complex productivity applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
          </dd>
          <dt>
3 - Secure-Restricted:  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined in section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. Like the FIDO security goal,
security at this level is aimed at defending well against large-scale
network/remote attacks against the device.</t>
          </dd>
          <dt>
4 - Hardware:  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the device itself.
It is assumed any potential attacker has captured the device and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a proper end-device
security certification scheme such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>. The 
claim made here is solely a self-claim made by the Attester.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"
]]></sourcecode>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when base software, the firmware and operating
system, are under control of the entity manufacturer identified in the
OEMID claim described in <xref target="oemid" format="default"/>. This may because the software is
in ROM or because it is cryptographically authenticated or some
combination of the two or other.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (secure-boot-label => bool)
]]></sourcecode>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to system-wide or submodule-wide debug facilities of the
target device / submodule like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-device
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means
it is not reported. A conservative interpretation might assume
the Not Disabled state. It could however be that it is reported
in a proprietary claim.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status to the Relying Party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The Verifier or Relying Party receiving an EAT cannot
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An individual target device / submodule may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the Relying Party can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future, and it may also be
possible that they were enabled in the past after the
target device/sub-system booted/started, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the target device/sub-system booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer cannot enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug capabilities for the target
device/sub-module are permanently disabled.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a pubic key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of posession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected the same as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the device entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the device is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the device velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision should not be used.
It usually does not provide enough precision for a geographic location.
It is not a requirement that the receiver of an EAT implement half-precision, so the receiver may not be able to decode the location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity must still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/> below.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

]]></sourcecode>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim contains a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (uptime-label => uint)
]]></sourcecode>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim is a random value created at system boot time that will allow differentiation of reports from different boot sessions.
This value is usually public and not protected.
It is not the same as a seed for a random number generator which must be kept secret.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (boot-seed-label => bytes)
]]></sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requres the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess device security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance (Certificate Signing Request)  </dt>
          <dd>
            <t>Certifying authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) appication. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has posession
of a key.  This kind of attestation may be neceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

]]></sourcecode>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is encoded in CBOR according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not tags.
The OID is always absolute and never relative.
If the claims CBOR type is a text string it is a URI and if a byte string it is an OID.</t>
        <t>Note that this named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
      </section>
      <section anchor="the-dloa-digital-letter-or-approval-claim-dloas" numbered="true" toc="default">
        <name>The DLOA (Digital Letter or Approval) Claim (dloas)</name>
        <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that a device or entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
        <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity, device or submodule has received the certification in the DLOA.</t>
        <t>This claim can contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity, device or submodule received all of the certifications.</t>
        <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
        <t>The first data item is a URI for the registrar.
The second data item is a platform label to indicate the particular platform that was certified.
For platform certifications only these two are needed.</t>
        <t>A DLOA may equally apply to an application.
In that case it has the URI for the registrar, a platform label and additionally an application label.</t>
        <t>The method of combining the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]


]]></sourcecode>
      </section>
      <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
        <name>The Software Manifests Claim (manifests)</name>
        <t>This claim contains descriptions of software that is present on the device.
These manifests are installed on the device when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the device, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is that they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and/or the Relying Party.</t>
        <t>In some cases these will be signed by the software manufacturer independent of any signing for the purpose of EAT attestation.
Manifest claims should include the manufacturer's signature (which will be signed over  by the attestation signature).
In other cases the attestation signature will be the only one.</t>
        <t>This claim allows multiple formats for the manifest.
For example the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
        <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
        <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
        <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it must be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
        <t>It is not possible to describe the above requirements in CDDL so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
        <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests may be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

; Must be a CoSWID payload type
; TODO: signed CoSWIDs
coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

; TODO: make this work too
;$$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged

]]></sourcecode>
      </section>
      <section anchor="swevidence" numbered="true" toc="default">
        <name>The Software Evidence Claim (swevidence)</name>
        <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the device.
The defining characteristic of this claim is that its contents are created by processes on the device that inventory, measure or otherwise characterize the software on the device.
The contents of this claim do not originate from the software manufacturer.</t>
        <t>In most cases the contents of this claim are signed as part of attestation signing, but independent signing in addition to the attestation signing is not ruled out when a particular evidence format supports it.</t>
        <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

; Must be a CoSWID evidence type that is a CBOR tag
; TODO: fix the CDDL so a signed CoSWID is allowed too 
coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 


]]></sourcecode>
      </section>
      <section anchor="swresults" numbered="true" toc="default">
        <name>The SW Measurement Results Claim (swresults)</name>
        <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
        <t>This claim may be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
        <t>This claim can also be generated on the device if the device has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
        <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
        <t>For each software objective, the following can be reported.</t>
        <section anchor="scheme" numbered="true" toc="default">
          <name>Scheme</name>
          <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
        </section>
        <section anchor="objective" numbered="true" toc="default">
          <name>Objective</name>
          <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
          <dl>
            <dt>
1 -- all  </dt>
            <dd>
              <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
            </dd>
            <dt>
2 -- firmware  </dt>
            <dd>
              <t>Indicates all of and only the firmware</t>
            </dd>
            <dt>
3 -- kernel  </dt>
            <dd>
              <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
            </dd>
            <dt>
4 -- privileged  </dt>
            <dd>
              <t>Refers to all of the software used by the root, system or administrative account</t>
            </dd>
            <dt>
5 -- system-libs  </dt>
            <dd>
              <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
            </dd>
            <dt>
6 -- partial  </dt>
            <dd>
              <t>Some other partial set of the software</t>
            </dd>
          </dl>
        </section>
        <section anchor="results" numbered="true" toc="default">
          <name>Results</name>
          <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
          <dl>
            <dt>
1 -- verificaton-not-run  </dt>
            <dd>
              <t>Indicates no attempt was made to run the verification</t>
            </dd>
            <dt>
2 -- verification-indeterminite  </dt>
            <dd>
              <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
            </dd>
            <dt>
3 -- verification-failed  </dt>
            <dd>
              <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
            </dd>
            <dt>
4 -- fully-verified  </dt>
            <dd>
              <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
            </dd>
            <dt>
5 -- partially-verified  </dt>
            <dd>
              <t>The verification ran to completion and some, but not all measurements compared correctly to Reference Values</t>
            </dd>
          </dl>
        </section>
        <section anchor="objective-name" numbered="true" toc="default">
          <name>Objective Name</name>
          <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 


verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"


swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]
]]></sourcecode>
        </section>
      </section>
      <section anchor="submodules-submods" numbered="true" toc="default">
        <name>Submodules (submods)</name>
        <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have one or
more security-oriented subsystems like a TEE or a Secure Element.</t>
        <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
        <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
        <section anchor="submodule-types" numbered="true" toc="default">
          <name>Submodule Types</name>
          <t>The following sections define the three major types of submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
            <li>The digest of a detached Claims-Set</li>
          </ul>
          <t>These are distinguished primarily by their data type which may be a map/object, string or array.</t>
          <section anchor="submodule-claims-set" numbered="true" toc="default">
            <name>Submodule Claims-Set</name>
            <t>This is simply a subordinate Claims-Set containing claims about the submodule.</t>
            <t>The submodule claims-set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment as described in the RATS architecture.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>The encoding of a submodule Claims-Set is always the same as the encoding as the token it is part of.</t>
            <t>This data type for this type of submodule is a map/object as that is the type of a Claims-Set.</t>
          </section>
          <section anchor="nested-token" numbered="true" toc="default">
            <name>Nested Token</name>
            <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/></t>
            <t>In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token does NOT need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.</t>
            <t>Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
            <t>The data type for this type of submodule is either a text or byte string.</t>
            <t>Mechanisms are defined for identifying the encoding and type of the nested token. These mechanisms are different for CBOR and JSON encoding.
The type of a CBOR-encoded nested token is identified using the CBOR tagging mechanism and thus is in common with identification used when any CBOR-encoded token is part of a CBOR-based protocol.
A new simple type mechanism is defined for indication of the type of a JSON-encoded token since there is no JSON equivalent of tagging.</t>
            <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR-Encoded</name>
              <t>If the submodule is a byte string, then the nested token is CBOR-encoded.
The byte string always wraps a token that is a tag.
The tag identifies whether the nested token is a CWT, a UCCS or a CBOR-encoded DEB.</t>
              <t>If the submodule is a text string, then the nested token is JSON-encoded.
The text string contains JSON.
That JSON is the exactly the JSON described in the next section with one exception.
The token can't be CBOR-encoded.</t>
              <sourcecode type="CDDL"><![CDATA[
; This specifies how one fully-formed token is nested inside a
; CBOR-format token.  The fully-formed nested token is any valid
; token, CBOR or JSON (JWT, CWT, UCCS, DEB...)  The mechanism for
; identifying the type of the nested token is specific to the format
; of the surrounding token, CBOR in this case.
;
; A primary reason this is encoding-specific is that JSON does not
; have an equivalent to CBOR tags.
;
; If the data type here is text, then the nested token is JSON
; format, one of a JWT, UJCS or JSON-encoded DEB. The means for
; distinguishing which is in the definition of JSON-encoded
; Nested-Token.  If the data type is bstr, then the nested token
; is CBOR format. It is byte-string wrapped and identified by a
;CBOR tag.

Nested-Token =
    tstr / ; A JSON-encoded Nested-Token (see json-nested-token.cddl)
    bstr .cbor Tagged-CBOR-Token


]]></sourcecode>
            </section>
            <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is JSON-Encoded</name>
              <t>A nested token in a JSON-encoded token is an array of two items.
The first is a string that indicates the type of the second item as follows:</t>
              <dl>
                <dt>
"JWT"  </dt>
                <dd>
                  <t>A JWT formatted according to <xref target="RFC7519" format="default"/></t>
                </dd>
                <dt>
"CBOR"  </dt>
                <dd>
                  <t>Some base64url-encoded CBOR that is a tag that is either a CWT, UCCS or CBOR-encoded DEB</t>
                </dd>
                <dt>
"UJCS"  </dt>
                <dd>
                  <t>A UJCS-Message. (A UJCS-Message is identical to a JSON-encoded Claims-Set)</t>
                </dd>
                <dt>
"DEB"  </dt>
                <dd>
                  <t>A JSON-encoded Detached EAT Bundle.</t>
                </dd>
              </dl>
              <sourcecode type="CDDL"><![CDATA[
; This describes a nested token that occurs inside a JSON-encoded
; token. It uses an array that is made up of a type indicator and the
; actual token.  This is a substitute for the CBOR tag mechanism that
; JSON does not have.

Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]


; This text is a Tagged-CBOR-Token (see cbor-token.cddl) that is
; base64url encoded.  For example, it is a CWT that is a COSE_Sign1
; that is a CBOR tag that has been base64url encoded.

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
            </section>
          </section>
          <section anchor="detached-submodule-digest" numbered="true" toc="default">
            <name>Detached Submodule Digest</name>
            <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
            <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
            <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
            <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
            <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
            <t>The data type for this type of submodule is an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
            <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="cddl-for-submods" numbered="true" toc="default">
          <name>CDDL for submods</name>
          <sourcecode type="CDDL"><![CDATA[
; This is the part of a token that contains all the submodules.  It
; is a peer with the claims in the token, but not a claim, only a
; map/object to hold all the submodules.

$$claims-set-claims //= (submods-label => { + text => Submodule })


; A submodule can be:
; - A simple Claims-Set (encoded in the same format as the token)
; - A digest of a detached Claims-Set (encoded in the same format as
;    the token)
; - A nested token which may be either CBOR or JSON format. Further,
;   the mechanism for identifying and containing the nested token
;   depends on the format of the surrounding token, particularly
;   because JSON doesn't have any equivalent of a CBOR tag so a
;   JSON-specific mechanism is invented. Also, there is the issue
;   that binary data must be B64 encoded when carried in
;   JSON. Nested-Token is defined in the format specific CDDL, not
;   here.

; Note that at nested token can either be a signed token like a CWT
; or JWT, an unsigned token like a UCCS or UJCS, or a DEB (detached
; EAT bundle).  The specific encoding of these is format-specific
; so it doesn't appear here.

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest


; This is for both JSON and CBOR.  JSON uses text label for
; algorithm from JOSE registry. CBOR uses integer label for
; algorithm from COSE registry. In JSON the digest is base64
; encoded.

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]


]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="UJCS" numbered="true" toc="default">
      <name>Unprotected JWT Claims-Sets</name>
      <t>This is simply the JSON equivalent of an Unprotected CWT Claims-Set <xref target="UCCS.Draft" format="default"/>.</t>
      <t>It has no protection of its own so protections must be provided by the protocol carrying it.
These are extensively discussed in <xref target="UCCS.Draft" format="default"/>.
All the security discussion and security considerations in <xref target="UCCS.Draft" format="default"/> apply to UJCS.</t>
      <t>(Note: The EAT author is open to this definition being moved into the UCCS draft, perhaps along with the related CDDL.
It is place here for now so that the current UCCS draft plus this document are complete.
UJCS is needed for the same use cases that a UCCS is needed.
Further, JSON will commonly be used to convey Attestation Results since JSON is common for server to server communications.
Server to server communications will often have established security (e.g., TLS) therefore the signing and encryption from JWS and JWE are unnecssary and burdensome).</t>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached claims-sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
; Top-level definition of a DEB for CBOR and JSON

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]


; text content is a base64url encoded JSON-format Claims-Set

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 


cbor-wrapped-claims-set = bstr .cbor Claims-Set


]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the device and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the device generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-common-cddl" numbered="true" toc="default">
        <name>Collected Common CDDL</name>
        <sourcecode type="JSON"><![CDATA[
; This is the fundamental definition of a Claims-Set for both CBOR
; and JSON. It is a set of label-value pairs each of which is a
; claim.
;
; In CBOR the labels can be integers or strings with a strong
; preference for integers.  For JSON, the labels are always strings.
;
; The values can be anything, with some consideration for types that
; can work in both CBOR and JSON.

Claims-Set = {
    * $$claims-set-claims,
    * Claim-Label .feature "extended-label" => any
}

Claim-Label = int / text

string-or-uri = tstr 

time-int = #6.1(int)

; This is CDDL for the 7 individual claims that are defined in CWT
; and JWT.  This CDDL works for either CBOR format CWT or JSON format
; JWT The integer format CWT Claim Keys (the labels) are defined in
; cwt-labels.cddl.  The string format JWT Claim Names (the labels)
; are defined in jwt-labels.cddl.

; $$claims-set-claims is defined in claims-set.cddl

$$claims-set-claims //= (iss-label => text)
$$claims-set-claims //= (sub-label => text)
$$claims-set-claims //= (aud-label => text)
$$claims-set-claims //= (exp-label => ~time)
$$claims-set-claims //= (nbf-label => ~time)
$$claims-set-claims //= (iat-label => ~time)

; TODO: how does the bstr get handled in JSON validation with the
; cddl tool?  TODO: should this be a text for JSON?
; $$claims-set-claims //= (cti-label : bytes)

$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)


$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)

$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}


oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16


$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)

$$claims-set-claims //=  (
    chip-version-label => hw-version-type
)

$$claims-set-claims //=  (
    board-version-label => hw-version-type
)

$$claims-set-claims //=  (
    device-version-label => hw-version-type
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

hardware-class-type = bytes .size (1..32)

$$claims-set-claims //= (hardware-class-label => hardware-class-type)

$$claims-set-claims //= ( sw-name-label => tstr )


$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

$$claims-set-claims //= (secure-boot-label => bool)

$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"


$$claims-set-claims //= (uptime-label => uint)

$$claims-set-claims //=  (boot-seed-label => bytes)

$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 


$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]



$$claims-set-claims //= (profile-label => ~uri / ~oid)

$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

; Must be a CoSWID payload type
; TODO: signed CoSWIDs
coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

; TODO: make this work too
;$$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged


$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

; Must be a CoSWID evidence type that is a CBOR tag
; TODO: fix the CDDL so a signed CoSWID is allowed too 
coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 



$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 


verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"


swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]

; This is the part of a token that contains all the submodules.  It
; is a peer with the claims in the token, but not a claim, only a
; map/object to hold all the submodules.

$$claims-set-claims //= (submods-label => { + text => Submodule })


; A submodule can be:
; - A simple Claims-Set (encoded in the same format as the token)
; - A digest of a detached Claims-Set (encoded in the same format as
;    the token)
; - A nested token which may be either CBOR or JSON format. Further,
;   the mechanism for identifying and containing the nested token
;   depends on the format of the surrounding token, particularly
;   because JSON doesn't have any equivalent of a CBOR tag so a
;   JSON-specific mechanism is invented. Also, there is the issue
;   that binary data must be B64 encoded when carried in
;   JSON. Nested-Token is defined in the format specific CDDL, not
;   here.

; Note that at nested token can either be a signed token like a CWT
; or JWT, an unsigned token like a UCCS or UJCS, or a DEB (detached
; EAT bundle).  The specific encoding of these is format-specific
; so it doesn't appear here.

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest


; This is for both JSON and CBOR.  JSON uses text label for
; algorithm from JOSE registry. CBOR uses integer label for
; algorithm from COSE registry. In JSON the digest is base64
; encoded.

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]



; Top-level definition of a DEB for CBOR and JSON

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]


; text content is a base64url encoded JSON-format Claims-Set

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 


cbor-wrapped-claims-set = bstr .cbor Claims-Set



]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-cbor" numbered="true" toc="default">
        <name>Collected CDDL for CBOR</name>
        <sourcecode type="CDDL"><![CDATA[
; The top-level definition of a CBOR-encoded token.

CBOR-Token = Tagged-CBOR-Token / Untagged-CBOR-Token

    
; All forms of a CBOR-encoded token that are a CBOR tag.

Tagged-CBOR-Token  = CWT-Tagged-Message
Tagged-CBOR-Token /= UCCS-Tagged-Message
Tagged-CBOR-Token /= DEB-Tagged-Message


; All forms of a CBOR-encoded token that are not a CBOR tag.

Untagged-CBOR-Token  = CWT-Untagged-Message
Untagged-CBOR-Token /= UCCS-Untagged-Message
Untagged-CBOR-Token /= DEB-Untagged-Message


; The payload of the COSE message is always a Claims-Set

CWT-Tagged-Message = COSE_Tagged_Message
CWT-Untagged-Message = COSE_Untagged_Message


UCCS-Message = UCCS-Tagged-Message / UCCS-Untagged-Message

UCCS-Tagged-Message = #6.601(UCCS-Untagged-Message)

UCCS-Untagged-Message = Claims-Set


DEB-Tagged-Message = #6.602(DEB-Untagged-Message)

DEB-Untagged-Message = Detached-EAT-Bundle



; This specifies how one fully-formed token is nested inside a
; CBOR-format token.  The fully-formed nested token is any valid
; token, CBOR or JSON (JWT, CWT, UCCS, DEB...)  The mechanism for
; identifying the type of the nested token is specific to the format
; of the surrounding token, CBOR in this case.
;
; A primary reason this is encoding-specific is that JSON does not
; have an equivalent to CBOR tags.
;
; If the data type here is text, then the nested token is JSON
; format, one of a JWT, UJCS or JSON-encoded DEB. The means for
; distinguishing which is in the definition of JSON-encoded
; Nested-Token.  If the data type is bstr, then the nested token
; is CBOR format. It is byte-string wrapped and identified by a
;CBOR tag.

Nested-Token =
    tstr / ; A JSON-encoded Nested-Token (see json-nested-token.cddl)
    bstr .cbor Tagged-CBOR-Token



; This is the CDDL definition of the labels for a CBOR format web
; token, a CWT.  The CDDL for the claims is in web-token-claims.cddl

iss-label = 1
sub-label = 2
aud-label = 3
exp-label = 4
nbf-label = 5
iat-label = 6
cti-label = 7
; The following Claim Keys (labels) are pre-assigned by IANA.
; They are for CBOR-based tokens (CWT and UCCS).
; They are not expected to change in the final publication as an RFC.

nonce-label = 10
ueid-label = 11
oemid-label = 13
security-level-label = 14
secure-boot-label = 15
debug-status-label = 16
location-label = 17
profile-label = 18
submods-label = 20


; These are not yet assigned in any way and may change.
; These are intentionally above 24 so as to not use up
; single-byte labels.

sueids-label = <TBD25>
chip-version-label = <TBD26>
board-version-label = <TBD27>
device-version-label = <TBD28>
sw-name-label = <TBD29>
sw-version-label = <TBD30>
uptime-label = <TBD31>
boot-seed-label = <TBD32>
intended-use-label = <TBD33>
dloas-label = <TBD34>
manifests-label = <TBD35>
swevidence-label = <TBD36>
swresults-label = <TBD37>
hardware-class-label = <TBD39>

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-json" numbered="true" toc="default">
        <name>Collected CDDL for JSON</name>
        <sourcecode type="JSON"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp [A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+


; This defines the JSON equivalent of a UCCS message, a token with
; no integrity or authenticity protection.

UJCS-Message = Claims-Set


; This describes a nested token that occurs inside a JSON-encoded
; token. It uses an array that is made up of a type indicator and the
; actual token.  This is a substitute for the CBOR tag mechanism that
; JSON does not have.

Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]


; This text is a Tagged-CBOR-Token (see cbor-token.cddl) that is
; base64url encoded.  For example, it is a CWT that is a COSE_Sign1
; that is a CBOR tag that has been base64url encoded.

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"

; This is the CDDL definition of the labels for a JSON format web
; token, a JWT.  The CDDL for the claims is in web-token-claims.cddl

iss-label = "iss"
sub-label = "sub"
aud-label = "aud"
exp-label = "exp"
nbf-label = "nbf"
iat-label = "iat"
cti-label = "cti"
; The following are claim names for JSON encoded tokens.

ueid-label /= "ueid"
sueids-label /= "sueids"
nonce-label /= "nonce"
oemid-label /= "oemid"
security-level-label /= "seclevel"
secure-boot-label /= "secboot"
debug-status-label /= "dbgstat"
location-label /= "location"
uptime-label /= "uptime"
profile-label /= "eat-profile"
intended-use-label /= "intuse"
boot-seed-label /= "bootseed"
submods-label /= "submods"
timestamp /= "timestamp"
manifests-label /= "manifests"
swevidence-label /= "swevidence"
dloas-label /= "dloas"
swresults-label /= "swresults"
sw-name-label /= "swname"
sw-version-label /= "swversion"
hardware-class-label /= "hwclass"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: 10</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: 11</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: OEMID</li>
            <li>Claim Description: IEEE-based OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: 13</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: 14</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 15</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 16</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: 17</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: 18</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules (not actually a claim)</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: 20</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>TODO: add the rest of the claims in here</t>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a single device will be
able to know the tokens are all from the same device and be able to
track the device. Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The device obtains explicit permission from the user of the device
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The device authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the device, then
the device generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main device UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per device. Each UEID/SUEID is used in a
different context, use case or system on the device. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the device generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-01.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="July" year="2021"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-01"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-19.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="October" year="2021"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-19"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-13.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="November" year="2021"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-13"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="ECMAScript" target="http://www.ecma-international.org/ecma-262/5.1/ECMA-262.pdf">
          <front>
            <title>Ecma International, "ECMAScript Language Specification, 5.1 Edition", ECMA Standard 262</title>
            <author>
              <organization/>
            </author>
            <date year="2011" month="June"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-02.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="12" month="July" year="2021"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-02"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>These examples are either UCCS, shown as CBOR diagnostic, or UJCS messages.
Full CWT and JWT examples with signing and encryption are not given.</t>
      <t>All UCCS examples can be the payload of a CWT.
To do so, they must be converted from the UCCS message to a Claims-Set, which is achieve by "removing" the tag.</t>
      <t>UJCS messages can be directly used as the payload of a JWT.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="simple-tee-attestation" numbered="true" toc="default">
        <name>Simple TEE Attestation</name>
        <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / secure-boot /     15: true,
    / debug-status /    16: 2, / disabled-since-boot /
    / manfests /        35: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
})
    

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
      </section>
      <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
        <name>EAT Produced by Attestation Hardware Block</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /           13: 64242, / Private Enterprise Number /
    / security-level /  14: 4, / hardware level security /
    / secure-boot /     15: true,
    / debug-status /    16: 3, / disabled-permanently /
    / chip-version /    26: [ "3.1", 1 ] / Type is multipartnumeric /
})

]]></artwork>
      </section>
      <section anchor="detached-eat-bundle" numbered="true" toc="default">
        <name>Detached EAT Bundle</name>
        <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
        <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
        <t>The DEB itself can be assembled by untrusted SW.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e0b500198f50a4ff6c058
      61c8860d13a638ea0d19faf20e040ff51003181a8263332e
      310114a163544545822f5820e5cf95fd24fab71446742dd5
      8d43dae178e55fe2b94291a9291082ffc2635a0b',
      
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e0e030ff51002182381
                 585dda53574944a60064336132340c01016b4163
                 6d6520544545204f530d65332e312e340282a218
                 1f6b41636d6520544545204f53182101a2181f6b
                 41636d6520544545204f5318210206a111a11818
                 6e61636d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /           13: 64242, / Private Enterprise Number /
    / security-level /  14: 4, / hardware level security /
    / secure-boot /     15: true,
    / debug-status /    16: 3, / disabled-permanently /
    / chip-version /    26: [ "3.1", 1 ], / multipartnumeric /
    / submods/          20: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
})

]]></artwork>
      </section>
      <section anchor="key-key-store-attestation" numbered="true" toc="default">
        <name>Key / Key Store Attestation</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / debug-status /    16: 2, / disabled-since-boot /
    / secure-boot /     15: true,
    / manifests /       35: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        20 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level /  14: 1, / unrestricted /
           / secure-boot /     15: true,
           / manifests /       35: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
})
           
   
]]></artwork>
      </section>
      <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
        <name>SW Measurements of an IoT Device</name>
        <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / secure-boot /     15: true,
    / debug-status /    16: 2, / disabled-since-boot /
    / OEMID /           13: h'8945ad', / IEEE CID based /
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /          20: {
                            "OS" : {
        / security-level /      14: 2, / restricted /
        / secure-boot /         15: true,
        / debug-status /        16: 2, / disabled-since-boot /
        / swevidence /          36: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
})

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
      </section>
      <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
        <name>Attestation Results in JSON format</name>
        <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
        <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
        <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
    
]]></artwork>
      </section>
    </section>
    <section anchor="ueid-design-rationale" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p  Collision Probability
    n  Total population based on number of bits in UEID
    k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW Class claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAJVYrmEAA9y923LbWJYo+I6vQCgrJqUqkrJ8t3Py9FFKyiy5bcvHkst9
pqIjAyRBCmUSYAGgZbWPO+o3OmLmdT6svmTWfa8NgLKzq2cepqIiLZLAvqy9
9rpfxuNx0rRZOf81W1Vl/jxt622eFJua/mra+/fuPbt3P5ll7fO0aedJMq9m
ZbaGB+d1tmjHRd4uxnXWNuM8a8errM2bNkluls/Tt8dXl+n7qv5QlMv0l7ra
bpLv0llVNnnZbJvn6fe3efM9fNVsp+uiaYqqbG83MO752dXPyaZ4nqRpW830
OfowzzftNXzzED83Vd3W+aIJTzS36/iLWbXeZLPWPbGdhu/KCr+qF7N83rS3
q1wfa4sWP1xd5+lZCR9u0+MWt5W1sMb0qvqQl+n+2fHVQZJNp3X+8XkKH5Ks
zjNYfNnmdZm3yYcbgFexLHHzmXt9Nq1q2PQcAPU8vX/v6MH46F6Sbdvrqn6e
jNOihOW/nKQvt+V8usrmOayQwf0y29Z5Ocujn6oaAH2Zz7Y1LhNWXNW36cuX
J/BTvs6K1fN0tVz990YeaOn3CUBAZ/plkr6Cs7/N1jbPL0VdzK+z2v1As/yP
bbaCN9fpVT67LqtVtSzyBvY7myBc4SRygOmjJ08epa+qOr+utk2entbFR1zm
DCaHdWZlelrkywqhni8BGs/Tk2xVLKq6LDI6rm3Z1vDku8tj+Li5JoTc+8NR
+vTR0/Txo6P0CaDjXtjcmpf43//aFpO/yvr89l5M0ovvT6uyWl5vAyRf5HW+
vo1/+fYt3n/yLP05q0s4x2q7vE7fVtnctuh+oP3MEaDvjh6mT15eRhssizaf
p/8M2DGv1mGvf3j4MD26/+h++uDxg6Onz8JO/1LNabH9rSZlVa8Btz7meGPe
/nxy/+jomfz55NHRI/nz6bOH7tsn4U/79um9e/rs0f3H9ueTh/bno/v654Nn
9ufjI3vtyUMd98GzpzrCM6Af+Cf+D/55/8vl04f8uc3qJUJ077ptN83zw8M8
q9vrcVEuqkm5zCbrYnW4ud4czqubcgVQnsCHf1oUq/zHWVXV8/HNsnn6cI+H
4iv7/uLty9P0l7OL07Or85P08n9eXp29So+ePX04Sl//cjy5vHp9Orl378Hj
X48m9yb3fqXF0AB6A/HvMWPDa7qw2Sr9Ja+aDXzIVmO83qtVsaSLeIz/3Kb7
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
84yM8MJklBSNbS6NJOLjlKBTGIJpdulvHyxLCVDD82i5NyPVencRqb6ChfA6
b5D1bSYKBNUXjPsRhUAgC4CzshHgOv2JWtFpL+fB8pB+OHiXhbrxlaBFbycw
zBTNVsObwJNtfN1SVeGRQIzlNvnM2tgEAMgZ4qQTv5T0R7I6UXPbwxRPMgJD
9Cg1iSR7FS9tzDg+m89XB9zMGEfhMA0OiKN48bEIssGCtYOO0sxKRztCDxk5
Bmh4J6we88wK9tFeXWuqHJErb1X39UM6MU+cK0dxzlkjuj9q8XuAKntYAYIk
Ez4Dcof0Up6fPDp6hpLuHu59T11hyNUeP9zWK1s/H4gn3/bJRAy79akG6Dv8
hCkQdXlV+Nf4FRfynaT78ReBv2NTQoqUikAZdJADGBSGlp1GF0JNC3hYP8HB
xR2DhXb6jN/o/Ghrkm2gFLN7RYINi+LE7FwVLOSP227ERkSXhg+yqjWgH0aR
+qqB/qqbxUnpKn5bsHogozgZjBKRJyJOvYvDFmhax/OU8AOLfdGp4x90NvgH
wpOs0f7WwCvwhh1QsD2H//30+OG7ty/HvZs0+DBMMiZw3jWixwnK45NTI5ZM
MOpPRpeerdnhtuuRwACG2FoyAGDeDTpRScPHmWGFZSwlc4QH3ws/S6V+mcQG
9CdJkp3g+ZGp2QQ0lvzTJt378/H4/8jG/3Zv/OzXH8f/+oc9T4cCWgfr1SkZ
1ILlqq8FxDzK6/A+OIeFEMazyARhKmkIm0Hfrpomzfww2an8U1HChmOrMrUA
8vVoWLmOi6IDIK/75oar3sq4bFIoQeyWch4vvZvUN7z+jrEujueUZZMgIRZm
s1/yb5q/bFCy6TsA7b0fzLui3RXlZmvBbmFmL2AOsVKlfuSdlb25ua01uzfZ
Z21k1yTDNycQWryZum9CTyhPLDmsogMLra2tgta2cYoqq/Muc4wCeeL+VmwV
w37IEvxHro9MdPWRBRts4OsVJX5ogWVt6orvjrovhmkautQWyGyhNVm60CLZ
TZiGaq6Y2c9qOcf6I6EdUgE6PvbJCDhiO3sY98H9MSlNNqLm+zXY0lmCaupt
yW0AolhCS9FvuLGwOETISRAmoG5M9PtI0IMrAkhkBC+ulRIBuX2D097URdtq
OznCGzqODkQbv2QcQrqWx6btoTcZ3qZU4XNsfN0B3mjJUsmE9HrRtqWssDRB
i9tdB+R4U1fTbLq61U5VrtCAWlDhrBbFpxy7jZdLrNssd7LNlzWXJLMW2Xql
5AT4JqWX6NOhrE8tLmxtRK09rcb9S7B9aBaJZWutSU1cds3jnlgehHRIrq0S
Psu00vXZ8NSMB76due/iOuTpPofsuG2C9qa4x7TIjpzzszCq3wUbe3S0IE/X
Ir0TD4L6jQ6oPhzEPQr4JBwRLLo6O7MSzl3aackT6C29sZK+8Ens/dbd+7fZ
z1Sso+RbQ1WQ20PRDMozzlZLLCR3vfYFmdjs560ig0yFC0yc/TTq9muF77Dj
gE/p4kQ+YCtD3KOx+kYstanhGH1lPfpM1fqlKeLIiidrfTjpQ5axUeUYtH4J
jxNLV/P/0qpCIiPbuwZ8hEydtPApu7BGbmG8EgHxWlrQY9aUxj9zaQFqgUmZ
/yI9YKk67EYu7tXXVXoeGnaZK8+8PMoVJY9HmnuF6gqGkeHME29mGRqr2yzP
2sZYFGRRc9nSZpL6iGMqNkIlsyiugWG/0jb2ZaVd3zCKVzAbPQzYcJsbkCC9
xElv2UXNzTokJsM3LktqWiidELu5qWcMbZbyIeUSWdC8uBIQrN9pK2Ykoi+5
N6LWfPE909UAhKEmavzugUqqHbCZMZliq8eG1kXuQKrSkkpbvJAEYZcviDQB
fNUiTBk1Njxn/CGba4O9GyR2IPiDcG6uos/7IB6UqGwhx8GJF/aONLk0upTu
yLBNkKJ1hvKNxXHN+AgapiWGhUk+jC+07+LyQEvUamIawb3aiCtFw8OxV4Gy
jEjGI+vSrV06CoPhK4z9PR1tjxjWzj3Bt2ugcqhIy2u5BbXEznmMPhQs4UA/
zEdGz9HC4vYDuS6deEtBJ8H2mwgBxia/6i83MRjveieF1lIgyE2FM2rYBaUW
LczT3PTNCnInuxEinRRzjRR3iIYFcn9woS7m+Bto6+TiPPnnkcivMILz5AIm
Xler+dB0yR3Rlby1EFv5Of0D693wdzicLweklfuIEeb2z+HbMX7PkplTMPZd
qT4DrxihvTP7QEb4SrzIV8aDQdK0P2hk64liR8SWFZm01YT5M7v6RzRo27Vm
R7ZsCh6LWX3HPood2jDn0tJPNd1+pzE7pFSubmkADW0y409oflDedvxCzlaB
WXH0PhlgzNIduak4/5U6MK+aSr3MgtdUq02AACvGPu8qR2thhZ8ePzRllPxp
MxCimM/a1JPYXOucY0UEEVshXrGR2N9TsqVPEPtc6YM2PlnqKqhtIkIqYNeh
iy6Emo3r8MK2HHpMrZpokxqx6wkEI+w1zygJY1B3NrI0HiiH15X7WI+W/KNF
I9uzA4ARsNthaGOBKn1W6z7DpfvRo/9hDMRDsxCN7YWxWogceUJ8pb7OhDuI
rYgeEz4YyXvF2873n90JQcIlZv8CtWerAMnoRS+SnoTNj3e/exK/ey6tyWJj
B1vR4OVgRNu5OTVvhnme4zoAHuRqwZ9k4Ods9o/qgqXvytD6CQ3mXtb8/B2e
+ZdeaJg5+ToXrYxGO4lGA5EeEWlyWmeLlgqqicGgrLxSWS2sc3bjf2jsfknt
ZNOvrYke3rNbrhGqdce4vgp1LP+Yc0l5zCxWHSNe0LGyCZVkfB6y2mHw+6Fe
JH6oUB8PwQc73cd7ypkMVMmKKm+Ttr3JJcVcSQA7pTjwZl19pJWKCYLu4Ryn
CCaODPttBF6pFbiRXJg+TIIuEbEFFTS5McWV2Cv3DnWjYwNmaa0eeplZlHIL
N5L8cORXzbVqu/Gf0KdMSrLQwPYw6L/CShiDSF3VsvcDOtWxC7vRvGDWjtT7
LDENJJVgCSiKkpW/4iBnzDC/8wFeTbVoc4lMwamnKw7CtOOXKMKrl5cHzBy4
z9F1HhnUQvM7oRnvOcf0xfszKa9b5rOGym/j19NtDTwULQkHJGwNeXHwQqJa
jCrz3P/MpNe8Z1LiJAAxi/3ahMye0NOBD2ivqXQwWZGhUpHGW5kzF1VIBd3F
pxE4zEhctxTaAxPzlQjlvLj2O5ZcJTylKTqvCe/RwVUHlrJgvg9hI6GXWRQz
RAYGzji+qeB5ji8zOy27HklitVA9ty0fjNX5lmkSix3AMHJszBJCv7faxZlG
HTCYDw24UxQLYRDnvvLbIKS8fEw2jCu9nbHY1vGSm4uV6MRgBFaoLiG8+Sq4
YgMEnQzeNfoMmTRCZK14Z6Mn1eppvbNXdiZW/gHPtxOVIzXWYveDOgv6Nda6
Q3mQDw414OhSBjK4SatB8VUdgE4MtLJ18UnkptCTTiotFKGUgzlI3Vy0PY4I
+nnAHY0NG0EYvvrp9PG9+90maFbPS7go9u+j+nl0+szZcE4yktWkgZu9jIIW
CJISYt2/juZl5BCp8ISUE/NNXwpXpFt6ZWrcfqygJ5H93rT9IWscmaGlY6Y2
CIkfHNOD01sW4g5Z/WVqt90odpoDoqp78zmKTBZnKz2AQzU7Sr8PrRb4lXWC
4nctzZi4pQWz9CYesalPjpZs/Q2IHE5wQDKFF6ATGWDkKI6QYYm/F7/opFKY
e8xcyhK+kNCaC92L6tL4Wl91YH8ufdXwf39g5zAo3eTTlqvrngYJl0Jc+r/Q
GF/Eb07CvJS4kBC/7tXl264FNF1KxI7xv+q4RjvqrlX/6INv/GQqkwPzPyvn
Vd2Irw6h/SefAEvNkT9/9yG/LebS49S8u8SRpFmJYCrlu5Jt6kauplRZkAci
/7PrhILoFCXeiuDDrUIs8BT0mcMX6k7UQqnshhSZPoSaaGIaB/Z3igdGc2kf
cA34FMbaAjCyei7Fn9GwejXwJqoQ+WoR2GRoLk7pDbdreL+WNtsoN1Y4Hvso
1pwzHyi02kczLVRBss1pQVA9Bvp3u8bG115Q3T89PkYx7htj7R2AbkReUD95
6VEhRISTp9q5ye34Vd5QYyV5y7OmCIUWa0IQlLVc62LzUlhKCw0USrkgM+ik
qpDuZXAl4hCdg1pzrCZuFVoHd8fq1VqBfbFtipr4SJZRrcnuea/6czRzqP4c
z0J2fiOxI3FGWq7NJmukw8BQpR0E1oAywrwnYOlt3nIxY8VUpir7zYGWcIwO
9KI07s9uBedY6j+vVScnj+498w2SJol/iKxRhKQ9sJLnOIKC8ohgpJLhPz5Q
zZk0p3OJFIWVjbpHL8jQWxZa6aq1xO517yh5M4dLm3V3vNr5ZJ9k7KAHfWe6
qXbWtq3ehrpo/k6Yz95rGiAfNKFwBoeeavZkdMIkgTEhlq7ETbp/bLEcoeFD
hG2jv//t/z6Q9juunFw5BzkuzlkJ1ZJAT8M+UbfcQ6/a0NUdkTnFcXPxHbHp
7ZYCp4cgGScagMrPBEV6nGt5ayUD0rfGzAXsI3Ir76+YvB1ppxD1KyLrDQJN
UzmJY2MlRYSG+faZ/hNV65/vBK3van8cgFVoGE9XVWKM2TgpZajwKuOksaIT
EkyBVGwRs2NGXQ9cgkZccmons4wMC1nElwuuDybpqlTONe5tFE1UaBlyLYuK
QcqU+9ShF6EWnlR/HFGKRhjb6kettVI3oLdmK02taKS4ppjXv79ECSQ9P2Wg
cCiRkjvswsqVZDJqsU3j8+Pp/odifuBJ3CTldlTYfujo0X3pUaSxuY8wNpdG
B81ae7Zbc3slAR94bLSkjan7FhsXNCkMS7Rg3C839K0kCRxJJEqBKA2EiLtI
SnAcNkv/+fRnjnSQnnm3EdbBLveP//ncKHyfEIbSb1dD16VzJ2/UNsd7+/vf
/qNx+6ZIHjoONSkRjHjSPzL43yj4G4Eg//r5M36Y/Av8HWyVmov0Pp9ix0CY
RQQVPQTFShXeukcM9OzTI1AtPj3aMtni6urMeiT/2GyzA/eD7uAi9kWxdYeg
1YeminUxrtvFsrlCJ5FhaclKE8Bg3Fhs4OyshK+n6qkZVPrAMB0NMI38DGQN
1SyAoEIOECas9bYsjfEEqQ5rRnMRE8n31guJ2phv+UiHPYQEwHzqnOQb3qH6
PdLXXJEqPhGXDje97c3SICKhzwS/M/t5GkzuiqwkgpLI1hLVJnU7zB+Mp91W
sd3kEnnHp7JSZdCJz5mPEymCh34AX2eIrzPBV4UlykPjnyiyjAhWxFOYjxPL
7x8chkHF5RzrfBz63sa0YhIHXbcS+tezCxRC8STksQ8wqoGsJf+7s6Qxz/Dz
izvHKjDOP8JhodGWJNABcUniorjqVrhTXOuzIzBxsIh+Q7GP/SnnRdOZFb/d
llpYh03J4u+hZABEJ24KnGtOSVpNTQ9x+w7Ns92XIfMnqKtS9nUkEUwcN0Ko
0nDATnrBRtjI20N50RhQYIWIsdKfLhXR40bzIHaKVayc2maJ78vtVr5Lwigc
cHvNavDQscg45FpBXwbHgIqSKNycm3c4cXXbYjfTKR1VlEmhCky4YSz49JA1
mBoY1UG7WhTLrXX0yKj4XZf9oVGYhGjcSLfEqZA/VyQP6/onF+SI2cVQO+Sf
FZjGNTAjkj6sJcTVQ4cmcMVEub0poipb/QDpxCrTWYJ7p1/XLjR+c2FrI2Pz
DlkVmyy3KLhUhZSxGEOSt9QuJuFP6n5/Qx4+6eBqTCjQ01/m3osYNyNQO87j
lI1PXam9KCMJQtR9J0EghdUepU1oSmo1fIlUiMAubbpVOF5mW8yyz9WVEkXK
N+wuZmT3Wg/fmY9ZXWgVWM2EjKehu4O2AumCS81/19VcA/Nv4FhWtxTmhwKF
+TapJYQEe5MoVwL2YWGb1oU+ZBYlnQV1RIegEWD0bBWNQztZbjPZc9gTb8My
C6SjKLNN7nrpA6RcYnjcfbQTZBt3h/0StXidSe81Aoy3fJy5evadn9RDKyEW
rOP9bNE9mTWqPRXR108Y2sD6eB4JaS+7bRldcqUQIk08pwTTYNIjgrBgJwaX
PaJ2cdr3J24oQQFuStikYL44QclmJk8oNqlc77ppVhjDiqIWD6ub83eqS1St
8yzz4xWmvs3zODoffyEVBsEsMW+0FMEBTViwxbq0yfi9cM9tJuDrGEeAlGXD
zJ1P7qWo3Xpq2Ga8X2wp0tApstqlQIOOMhKfJLLeEcfOmPRZSUc5iRVQaGmA
63xeU4d5CT98x5ZYJDYh9RoRLb4W1gxMCt36vHq+Hhpeda1qIg42koFJaMcD
wpBiZ+QJxRpQ2+5/P3L3PNx9NbDQYcXMlV1kGCxa/JteYOwAod4+T51UhApL
FuA4F2DXmYxQZpX0tusw65TPVsgxB7M+6ZjEEWU78WVUy25UxMTSyTZp5Dd3
isqrbENrOqZc0TN589vOTixY+ZjzUjgxoTlcZxsQvrHG486fFUekeSh5TbFW
BVV/gfcyrFpbuCor5Fu7Y0CkkigDAmmmqGz/Lk2k77K59a61aWMPbq2kWD+j
bERm/2japV/ljqhtZlFQ8Xp27VGGkaW0VBzyR8m1qE4oy4xSbZBsUG243vIC
mjPGURVhNsm7snDBLk/XPdghOBRbK1RH7DpChkuOSf7HsIC994MYID/915y+
DAYvNkw+14LKnPbsKIARxZ0LEoI9zctcapgvVLMUdakr5URwe0OWFZS2L4V0
iH76LfDLFZdIxsTz39hwjR9u8o3H4YcTvMWIgJ2jejsiYssbC/ATQxWZo/CP
qJClsglO1+Ckl1fHJxLLJKFW+dwihCjD5xDxUlVOHoFCwnHgOOiQpSULUZL5
ka29fvfyZRSeuLFkR59qhnfDrlk09ojWS1hFS5a/6MsWVQJZvO8SeswhcSqk
hFgPtMUYE5W4n5NedJVHdXyFhP2h8ySeLTKihVmyG8p0b1cyComMnbhttyNn
TkKBN6ZZmoUU4MP5/VxiXP2dYmtXTqbT+HgFa6J53tEByMV3XZEvrxJw1wTr
KRtLXCiej3zsZN2uslsS5CxFQoL5eCzXA4F+pJvatIoJHDOI3W7YXMc5V8PX
2aeMhA2StBFBFTWvajWQ4dvJjBQNI/hZefOcSlEXH/HGkk375rqQtEgHkULg
7/qzeUt4mK/znhmFKPcoYFD/jh9rYHKT3Gn+NnRkQmBvqXAYxzgYqHiF5rgm
DaqhTrzOs7MGGfKyV0SqzJdVW7iGvsEiIRQvIC2ZU2xJgq+x/4sEQ4vGcTFz
ahIeDW6vE8lVhMRpy/Nqqr63TQGNkTmXfE8p1BHmbzuBo5pOKRGiKKNmbMGy
gE3uGK5pu4zOZocPOhreNfj7upgW3GJs29hCujEqPQvqpRDRz585dMUHPmTa
vJPK5rNzr5dZMhwi8lV/ypCDb9DkxcPBz73ind1YaCJHWhm08/6u5SyrEMtN
UYyIKsVKwectST3IFesCld62ogQMpRkmhQOv+gr0R5ExAI/xBkPskGA6T3DP
nSnat3ME/5GzZhFwAsXdC+cQd9YokfzknAQ+ZMtsuNMmQeJnICvXcAhAL16Q
YEHlZTllXe0njKuqqZD0xE549AiXLIOpFRoTP0GPKltNk0dOydGxpNbfSsAT
5oq5chgdbmldOxFQC10iXanZdQGrm2sRDBEVyrARtrbcHfrjs8hNsAAGsBW+
XOk8qXSJlYYcBAGNNe3bh4iqaqY8BbxkwHyREmoHIVhbhDxYDp+L09IMb+S6
/6Y5uMXnt09yHNwKMslVB10N/Ig3VPeitFoVmu4Rh7TUCpoqsmsI2Ni7xS3G
Ti08IunNiyUJ4CrflDYGoDA2B2PjY6dQdle1LrRZmGrUYnHZYdGp6u4bdMP+
+B6B14gsqDb9QKJYfj07fj0+ehApC1fZshkU/YKruWsacQYGUuxgCOuDK2Ro
dRtTk980JomqrRuULeOsOwZBu2gcx/zKRPQulp5z8bEyeEiQe/vzSfr0wbP7
QXAJr4WesVr9iKqvif+ByzRi4G6ppmJNPyQC7NIVvafb8pI6/rxQZphj7/TA
Xll3Q+oTPdyR9GuniS50DRL3aoAK1utoEmtdFPd7aya9W0AiyLKS4Lgm07lY
26cCMhuzyDOj9cvgo9TF4OMboyoTiXh1FVZPqtVKcsjQavb5O1WwvyRqeMdE
PgB6RmL1SlV2uwucAHUV8e24WiSFZlvHcbXq+owLDb+m7yif0ht2ybjsKyRy
0UqJkUW0OuA2V5m2+VYHvBWEXVkuEYWaNwdBOKUpaFEqqHRLQHZyAthg61IU
CI6arq0WGtAYQc/Gb28y6yE+5/gCivGQQrzwHGk2+lT2Ecg11SQR3akt1lZU
IdjtaYwmTEuGFze371FPCXPdAdTrg47JZR7vk/K7XPCPFZuwW6sLB3k1ztUg
dxu2bQAyTVb1kCRFsVVms34ha+XFYYIiyAQhX10DUbX+Tu6zrfScpDb99NZr
kC5McLKzKzidQLwYLYqsLcG1xrMmZ4hV2cfqu60rNkkjMJlo13a/8bpERdR6
V4Z6IvLBaWXXXr6G9WtSA/onMqX6W2xwtc4k1LD1gEJDSADwq1BzRVH69JqB
JKqRuMozTK6RCvyGrXSepIbLObsQGI5RA/bRiVF7xkqVVWKTYMHkO0fRThHj
rE1F0UiMhGTN0G2itBaXAs7TPT66B8MfbzBXvviUngIQNMzuDUhAMKGGrnAK
pJ8IL+i44ADaqKAkHc2mml1LESV8kPPFMCqDimgmi1VFxZnGmwqHACGZO7ar
Ee9dSUo/F2sR96q0Ihyl796eN1ZkhqJb3p4TC+3t79nDZ+hzvNKqNOywD0WH
hbpq+HaGI/l8FX5qXNXjbV1oTobb+o/pd48nR/vw54H1m/2OifV5x7EKPAZz
PcTfCmyGngpyi6IVdn0ZPJwzSuXW6BgSW5LgImNKTqec1VEOGCeh+/qlv+f8
kPHY0LqXrwLP4Cb9MzokDPUa7m9dzE7R7hOFTKlmch/xzmHwBMaLYTk8MJvs
L2o80G8euDMcHSI/8+DZ08f8TFXM8Rk3lVWBDY5sYhw+IXdeYV3X8RzIFPp2
Ad2iNBW6WIhMe0eT+5P7j+5NjvY01usl8dskQY8U896Rq/AnlIXSbIiNUmQY
VWMZicEZQZxRiVDMl/wo0fUkcJF4LoUAGk65CR69MiRQKY73ntAK20q8S0dK
NVd8waVguKx/sDP5YoRxjx2XCapBejK/rElMxCoIuWbrywKDb4mXk9k0qnGg
sYpyXPJlI2ZFbj2IBTUKcY6T9R3TRU3dCyVlJKyRQdS9oUCoCXLcQChUIBMT
RexHDUFAlSRYTKw2OgYJ11K3lqtFmkUYrQQFpYVn5d//9h+t2KGt04SrajcY
mdGLL2HQlbDCVVZ+yNs4tAZWznEjvOPIVcJWXZiPFsqOdRGXBARO9eSiFYAa
IKVxGrwbyORFa04Turyzpkl9OwuRqzu2au5tWDE44hAbSl6haLfqjpAVca7N
VjkqjqaqDOyYkLRrPOOu8Bap0nCDdxdw0BmDIhR41QOuclg0blLTF6zugDY/
kBAMCbmU9CclQD7uk+oOSDCYaDQegQ5DtdXF0LsZYNgmmxWYOMaVCCbdlAdx
kMTbi9GHTLYWBLpQbcNMZOygzMPhcIJvdIjvmlCdqgtKCp1frymqXqCjAmvI
MFcrSy8kCnGLOHptsXBtFDeiXIN7j/F1BfTACgzbtrMYNpU20tuB5jlx8Jde
Nx2P6O+ds7Q7nLPu6joeTo6Mf7FsoiQs7PFKTIrqsveOz4wPgaudiTV7wKmK
r4t/jGC0bTjhg0gRBbMBd8Od/j69a7bgYE6juAKJwsXaIM3wPh8gO+zsdPfS
vj5PsfiHlq186K7lPvgHlmt8rrvMy6puJXKF9jG91QjdbzhzfoR8kqDK0EA0
6Kn2FW5aX/wo2tmlIVz3GPqTw5A/ZQ0MRY0nqCrNEJAeTR70sVdlLr5yfisG
Nd0KcsV0vpWwMQpvAFg0hywcccApt7h7d/Xz+GkIiGCGHew1rImQeE4yt/Rz
iDrEB7tNL828U7GZDQjAKrCOkiSqhJaIQiJpjWOSwdJNVoDQReUaLKWECgn+
II0MuTlFqTX9pbKe2YxNbkM2qgIaRzXDx6pcwtubQNC4lQ2/ItXUWc10Izup
0KD2A4HEBMfQR5AsGiOeksMSffQ503hSI6T4veUBaLJJlJ+P2m0A6I+SXP/7
dKD23Uh+YlmX5ON0ssjZo7xHmaDABbgo3h4m5cNiky8yvjz/o6s7lfwm7cxh
SKSOP+kb2INFzemTXMlMrEzaSoANJgAcFpe9OUBT/cVoFCrdYT8BNHo7Odc9
y94C0gv2wwkfdFaDx3LTMqgaqsKvNdFYRpYBrdgW13mMRsTNxDv8S2dEBNlQ
CcO4lFz4nd66o+ohCE6h4iEe4MGdFRK/+dlsO//mZ/NPm/DsvyOi3PFwOV18
+8NF1vYeRpy7OL14TuYtsjziAZDujc0cQRqZr5yOTtRPmsOLiQsPGqAKQlW1
+qdURhOpkwQq0ndJB10Imv3TjmOjVQIpl1U+5+Sag90HRtd1n4rbhp3xR+ll
/Of0/u/9N9gQ3H3UMhQN6Ezp/tPJ5PFDrGi5c3HbvHAnSZ9wHHjH/u6M+WQy
efDgji0AHsGbDu3kswzrPhnpCjVBbFIkQkmVr+HjhlpKFBhVzl8Ued5Z1AP9
CQTiebWOfzx6fBcAuEs1vWwrtmIl0aCHqZteP8DikjuAIePProsN9hdHX1+Y
5vrGvqMtf32caZXV8/+KgVgV+qaROl/5xt/45fPUdfvmUhrw1e/0Ff4Ga7ZY
lXdYTWMIwNlmglpHgFr370Ktzhhh2f2x7xombW6otbcjYYgud14U3p/2tqZY
6AGE6Tww2IS884z1H0dg73zf2s1vS9B5scpJi03kpe+8/0o6z7PDYux/kSb0
Cqzn6cOBKftd5f2M1hd+4KvejPaLzrh3F9Xgt6dV5Wg6fFp9CzJPt8sx6uHb
ZuBMop/9iUQ/RMew4xU7hLxErwuA9J4UPSoa+eIo/mJMeYu0KzsZ+w2U9XVW
ksfQDsd+5NJ+/0973/7cxnGl+/v8FVPYuisyASAM3lA2vkVLdCyv9ShRiu4m
11ENgAGJGMQgGIASY3n/9nve3T0zIEHb2ezeMms3Fmam392nzzl9+vtA8oSf
9SvVqw6Y1M66X/OsPPBqV33nFVt9WVu7u4ZXQyLc+NgTWa3Bb9saVqmEVuA+
SMY39xNebKl98b9dNEb1DdJfpbPbw2lahz/BS3qo51VeFBt0wVQeozoCQ3S9
MeUE9WMr8JLqt8dtDbY618w4Qcoq/d2IvIbGXXqlDxqRa2ncw1f6G95YM+I+
vZHfLo3X0njgJ265b63J8RC/kJ+NSFoMejw8pR+NyGtuPMbn9gDKxMbGEyrl
EqXAHfrIhnrKaSRsSByWACQwiizztu/7lCxew2gIkPGzL1x5JjSCt77QCF4E
QuNAEhMa5Hdczjyhfcm3YmkXFeFAMLi4c0JHm1CYFVtY+fJBvnkSDyrlVaWA
FOdJbFecPfSLs4dQnPsg3xDs2d19OV/lqSd6/wwaHT4SDZVElv1U/QGffNBK
Qfv+E3Yh92IDKwAtqg+U6RNWt2Xt0Ady+I2t8b8hdLjDtdWbkc5qQCv2cfyf
+XJ+74yxKBuX3D3SWRA+wdb+FkwDfSpodMV3aKe8sMOzpzmeg9u1X8pL7RiB
dOVPimiWFx9RRwZzubUsWqnMtPSy9ekTmuPMxsZf/dsMDIMlzA5Okl5+gU0s
1yV+bGoYgdfdVYIzrygUnlGD0FEBxlL0u/vzvnj3/O2H8zUoGvkm+8DUcfdr
XR81kMkzKtwz053CR9r13uM7O9+CpShxlRHPWr5YfnLBRQg9Hw6Rj+IJvRIf
HrEjhquu+kePV3znUig+ShBnuG71sbMu/ejslrysEW/BZ2sQytv92mRd8BKd
uexOTRE/u1vzCcaReiorqxsKreBkId4bTsNXg2Z0oM5VEVlXZZN8h6tc/wlX
2d6FVXbytFJlEq9BThxKuLyp3UUgrfXqYrm9Zk1e+vD7bLtGSdjTzWR5A5W6
9LqMMRlaq+W0oL7yuvFJPKz2natLtfugKq65UhV7wFXxNhqtirMXXFXK3YMq
QjgRPavTVY5zeOIZoFbdJ/G9XeoIOu9rcTNWKwvqU8q5siA8S+/OWdjU7cwV
iDYptyb6Lop+pV75lXrlV+qVX6lXfqVe+R9BvfIrzvY/GWfb0UqXbxpoz5d4
zXxojcqJtQ+ur5gXAcd1DS14/G69Kz+NqDdxX/PjSOoKcEegTr5i/FmlHFy0
798q8bbSidfU5/ckaY76EOnLS99FD6s0Kw9exWs6Q6tur7Ssum+1+sd+jE2o
fBvJSKtprRTSKDP0kqzjLUiDGVXtZKw+8qbz0w9aSF2T9FN9/sHViFrlPqsZ
I5xKtU2P6j6mI/dhJzmpTXMqieoq6C+f6gzQjLsndV17yklqsq2RapHbMMIL
CBTI6bPY7HT/ls13SYESpGTQcCustkc7GqQP9uwlw5DSIS/KMtZ9An3sJIRb
aFI8bbt9ylkHShlq055apiH+Ru5ZKrl8tcdCEQ5rZVQzvZnMeGK/I5VYSce3
WVrkDnBOVQGneC39u0t68QayEE2uBMCpq1ViVySW1hEJm6JG4Fs7JVMpt1Si
gbiBTb2YnQqDzTes7PjUK9TJ0sEpA4BA+hJvjYX5GCGGL6L97FBv8zZINH3K
LUEVAK3E+kawneTFkGg0Uh0lPd0TCkBJYXJ6ci/QoX5P4p+2u8cxjmTQDcGn
J0WW8ZbMVePNnyI8Tvn01218FRkeRWWDseYOkRe+xNG2ftTMx2zqlgipsrK8
gtAdF48CowJJuJKyQUs0ihd0EieRF1YSdyMvcCTuRV5oSNyPvNiPeBB5wR3x
MHJBFL+PRyLTvYsYXgSPH72z2WattBAVHAbq+dnLszan5rspqhnorRm+yHTy
1LtBdRokwF0Oas3KBQZA85U2NTKWGPvOMBuCSU+R/m++etrWMA3rmU7kB1/E
SRIFYQhx0iufzdqbflRzXBong6juKBQDIMrHb3Eyikq+8DgZRyVLPe52dAOV
2wXGhaCdKgh+GC/OkaO30iXtIB2dVfDVAPQqIMhv3O2T9cgB83xnMd5v0HKB
IYV6EZGTBEdZ3IjW7N/efvmsO/giqous4JfDL6LacAl+O/oiqo+B4NfjL6JS
jAA/n9DzuiS9zhdReHjFjxOsRumIit90v4jqzqD4Ze+LKDhU4af9L6LKIQS/
GXwRVd3k/Gr4RVTx9fIb6IT6iAp+DY29W6dmI8aLBz2j8DdPrzKwUwQ1J7v4
nALYEDx6Vo4GR0EEmZifSnU2XytrYyxqTVoWehTGGaKqItiQ5iMEeRT9KOxf
09CSgU9wAmaIKq34SHGj3Wh7sYfClnlNeCw+11txC7rQJxS0+QLNVL/RjF+8
rL8imvPNFrkNCpMdetHTp8gEU2OpZCv93/Z9D9zGoBd5sW/reD7ZLyGj1zRP
I44HZLHmOwaXhJOPu8cet9IdMayHQEG44x/SMq0qHkKMr00wuTmeQBem+pX3
etH9nu/kus9a8Nr0zIaoxPcb8ZbS7s/3GAk0cS4ThZH0PEWSt06GscKj8J0j
Djd3VwiujGGlvp5FWlZFA2B7nurxJG7A0DbwIByzpH9gb9E/QCdqkG3vb/+Q
xJ8Mzmft/r4c9t+9+bZVY9bVfIwqO3XnXTn6AyhuAKY1xIlIfVQtjLQX9oI7
tUWHBDKoEuvFIWL6Us/bEKjBnb6hDYXowwkOfOVQjh8hqNs0Q2ijKntfdLB7
7vNC/BSFynPxlhWqb34ZhaoBPxqBUtWAH41AsWrAj0agXDXgRyNQsBrwoxEo
WQ340QgUrQb8aFSULcKZJIWL2et0J4gDxwDu2Z5+A/Z5A382wo38MVUfHzQC
9Qif0+9GoBThY/rdqFeNKLtsRo8aNTqSvKeApzpdCd/Pp5f4rFHWmfCdPmqE
Wz01jh40SloVvsmgj+Vpo27Hx2/gMTxoVFQFfIfPCoqxCdUz7jt64off4GMv
9qasL+Bre9aoKg2Uqz1sBFoIdQ/+blQ0Ck4mzxol5Ylf4oNGVX3il/KsUa+Q
4DdXH+lJwwuWoiHhodIgKR4lDFKy4Ch8BD+8oCh6Mptta8Oh5POWfKAxUFSF
MACKas7RTx7JH9oYFXYBwiYSaIDAB0zo6iJBPUiNU9k1IRX5tZd4+f9piF8g
GBeOQM1j42AONCzMgwgp2A/hI3dUSmnGP/xAVhLaf/zWsBHo+Tfe8yaVray9
8cucwJuoA9QfHy0Lj20I3Yke9VtwRFPGYnNkdnS2sLUqMpImllSTFWFQ/m3P
MCzuqugdmRnASvwU5h5oBaBX4i2vOkBsYXK53C/nqV4Uotbh+7BG4RGbDAhf
aubSM6NWYKs0erHn603UFVYE/psjueQc0IcO1GtEejDG9dPKOPAUAwCia/IV
lATMOGTFe7Vd6mXhyDihp1vUoi9z1JoIIe7srV1yEnI+Vpn9vJaZ3FPna7dE
Eok9AMuc0CY8rIwmhlPtFykhhBAdAuiUV+t8lV/eOjpWuhJKBz/sINpdEdvj
8pJiM9qxVddVlA8cp3r1d9Xa7LcbHI8AeLD2jjQ2j5kx1TmAYw5jCqoTx3tS
Exw9Ot/x8rAYCz2/JTqN1CHeGmCQNoqugHlskNwCgiMrDZh6EH3gHLtHlV0X
2eoGlzKqpHRX1yNtpItodoRIJlHFCEuFAFHrscoXUCjVhrAIoOI4sXc+eh1N
jpUinDGu6jZb7MtHKy74IPWHd53tdzI72tEFovzjFmYsEIiL5peqlEqiiNhQ
GaZJtX/IF0jzhhAHD/W+ACHyXT9q8ja7phgLwpDhZaZVkQX1aqMXyi+E8gR6
6a1r3EtunElwJ5ec2FKij53vafJdyIh6YOUo2R75pbwb8QEi0DXUcIkREzxd
r5aXV2KpljMquGNcn0BTEf0xLEClzoFSGK88gzUxRy3wQBn2uRTByBs4JAb7
NM12HzM+cAv6SzAa7uizoL/ii/c+PAIhbG6RPOX6mjEt1pf79DL72cWgC4oy
dywWBusbV4h2bv1i/ioRDmQI8BkrzVW6I/r1+5iVU9swHALHfq3QvgpyQaEq
NUnMm0IfTBHcNfu0JELttVWe4mFs8H0pLPghqIMKDgkozVRIGEdU3r0J3oRa
zbl769SstfL2H8gAWlgXouTH39K0tXX0An2OvswloPybjLckx29r/Egs/wj9
hK0CB5kfIOYxUwP1D0IL86fnK4+yGWb5lmiJ5gL6w60sdOeGZCZCBNFOdX4j
WEdqnvxjS00YryU2UNBHtF4r31RZjmA58lhe51PC2GB5hq5Y7QnuFyaXQvK0
ypz35js20tNQJKDI2IY9GMhbBQFEKc+kCLZPrYRhj/3q+dpuPTGNBDHPugWj
MUGuNmskXJmt9kW4bXgIjR64VMCdHvSst/5V+zE9/PwT8o8xvBaT2RSEWhng
YcyCbiJQhxUofHNHBUzgNA64phnQcApXB++o7EMhlDDHkyZTE88UoDcQY3W/
Y0BhUyxZdzTgRSb73eY3Eh5TwqtheMuMGyfV9yFuvFWXrks4fFVFgPtW4eYF
H9/gNxy+XVoyayS10ZAqQnsdGM0899ERMFxxhVDR2xQ7xzDnWfrIj8WB6hZl
6h/DaiVuht2OcdwV5PMOPQhFbRn2Vc48asku5/HTN99WeJfBdF6KskPHGXyU
KFNhm3HwZkW9++jA9oiq+QZFxmKbhviGNj8EeBP174NcnFw9D/x3A/Xb4ZEy
CwJG0BEMotJpK6aWNbPxEppNUWKdMfnj6fKBMPIdyzU5OnlJSxqbGujp5JNH
eB0sJadNS6gh011d4SCRfeeuUh84gYoz5hp3FJbBNTVSHZTGBNkACt4NaUPJ
pzeE+COYSTQSiJh3JZDaFB7HU6880k3tVzWOAqHiXIO24hSZwzfbtf3USMfA
VYNblc7nRQmt58aI2fF5I3RJyCbRMGs+AGpT/ETBS1SwJPJse26N0MVw24jq
8mAMxnZ8jmcyCOmJCxZ5WxgpTQH4yIAODXjEF0AImkgdquQ2VE4sQwoRoe1t
bAsN03SQR8E7sJ5PRftpsH/gGR1aEGJbowkP+ej3KehtWzwb2zaoDxoXQZ/r
gEAviqPmWqnK3emL1l2RO9Fy930UXiX+PbuVcvg3EREyPORJcdqwU2319NjQ
4WIKckJ8igZ1TuhTKqdsGuTjN95TySqEu6DswhCTXaXAdU1ejqqVZfs5OU3O
6JSZpjPiPJ/DJMi3Tw4ftgvcFWPnOF2CSVfU2xLM/0i/Tp2t6WjTUA/xeQS9
ABUnGZBbiWqbWm3RQyWBzt5SwzNFom70qga2ZX5jnMglhVrrRpotacwnuEdm
xqnymJDo1qeVChDj4VYii2SVJt2OwXK6HO0gX8EOQ+1PqFaqXa1+Kgfo9p5o
SHbEdOEMbznurA+ZqGSrp0DudNTsLhwannNlhBVdMF4QyOFIDYJecqmfxC9R
XNgzb4m7V2GBT/RkIj45LFVOLUeozxOM9dDfbr3Ccn3iawX4SVmkPImfn1/8
AVGtaoUKZfHDD6822fr5M0gFs3X3NEcGgmb84UMwQB8+RNG/rqfF5nflHkCa
4voOwN5+t0bkuwK5wWBEd0QQX9MlfLbzm3AgnmBQyz+u4Ue38NX5i0NNfH5+
fi7BP/DVgcbJkVM4pL3/ypbFh5oWWsj1bXR+7b97izdzJhnzZBjXDqF2Skh8
XXe4E7awR/qHekSC+H+53sCI6rs6JIu/zPPdgRGv448k/wbCorN34ECr+dww
bPTgUKOhBqssXf/DJ/cz8shckNvnnhaLbwidoZQINGRUQ/FwqabBdhAaNnj4
XzXKhxr8rRzCHpZZl5lyJBvKRF0D3Wlu2MLRoRZep5t/eOuElPXukXRU7ArL
qWCAde0EM/GDHUCHTR3/M5t64SCOBTvx8JCqLuTdg/MQkk/o8oFSY4q38bR2
FeuBedAP3YP78y/bD6jlviUf+pnqXWp+891yMHRoaLeZO7VxWiH6poyUizxj
FwSvVLYEd74lGP/wL6qfyCE7YzL9CHYvntSSI0K1SiItVmczHSIyAKOo3A3j
L0H+mLASQoneqNqIfC+eeKjfUuC15Vow+RflwrWCB0mvNV9egiJ4vkdbGXcm
9BPCJH/J6Ks//MCcOJgjodPiD7byipxoojTulk46mW4RFJhSNrDNMRy2wgWn
fLsJb9TPM/HRlGonoUBnF0+fP+dwqBBFnyGdqT7UhqLpXLpEQMYUbJstCsu5
YlDeXSZdg8QD/pXnGYJCyFujlj1iAjv1f8tXcktnDzLSxJJD7nDfQwMjn08F
kN97QfXik5s/XCQwgp9RCGWf4s/l4ccFBk/DBfE5hgQDCir7DFbKGjsm+Psc
h/QUn5UTGpTS+N2bl0fObFQ/99v1vXM6tMhwJoJAYOhNneLPzv9IBV/IC8/7
sSeM8YbAEoekaI12zJDWYGtNOj1Cs4W2Sy7QTk+kVSPuyp3yxrBI+TfkhE3k
H1WV3DzO1ZzK3fuZ8fjo3QXotQ7A6c58D40TygG0efTOj0dPSH41FmbSfxJC
ovgUFEFSO14ys8mc9PgWMOCPpiLmGn/19KuLuNiks6zpxQzL8a87jOLA4NAR
ZlCvNEbYBuoPOgp4TmeVsXaQ2LE1g4Qpv3w27HThQw5A9bq9pj+MrvEzBwq9
RhLP2W0pVggm9YZfBBixBYKyZltaoF7Yi7ible5nB3r+99QPIAMZplyYVTjK
I6JjFjTpmxUvvDgltFRGIpoz5RXVp0V9u71Bu0ZpofjaOZ2u8lib73ZfeKcb
eHgQx+d6VPYRS4qEXYVcsojjLuIzJE8rNMzpUSE1opZG+7XFH9NJH1Yb2Rsk
oIfEBxFu0b8OdjUuhUPdfca54GlrwYoFBW5XOqMdn61vFbW4FPoSkQND8OML
41vnY1AkGZGQIJrVqdx8UCe2eJ0jPWnHnY2DZYRvR8jcbUnQNiOJsfF4Vs9p
Izcz+D0GtO+JHoNd3zxcxRJUKO4bavvNMl+huhld5iAZ1oLuLF2A63q/Ygh0
vHXNrD+VjFLOChsTyRGUT182k0kNgzvfI/0e3ZGfbvOPhbGjo5dLSzU/b8an
ElsKBKeuMnpT0prSQt1H3Ft2BobOr0hqJZkVmdysExb4Cx150ijuG/44OHGS
A6eIfGyL7CMtJe4wR2Ow1m7hBUQHcBJcggOHNyNxudIDdonZoTZrUVth+xAm
bQL2AjGbeWFLnlwodnKAoVNps99FWH7hFgnvgNRXTxTuXeYSKwbKDAT1wT1j
ySvWJh+ORRilFXknbVjCYypHrlLImdzuasvcnTgBrjd88c6o6dwHEVJDzKBu
0IbLbcYUwaUIcntROO51UOzweHKarr9HuUWrYguN3NIs5UMkqMzy8mpnhwQz
nOx6MpP6Vdd+cY+U0dCOn1M/DoRiOj7tStEh8H1EJ09yydClnzKrbRCL1y4N
hi/3WI8LQ/ewiTpZCjqOg9kHhqFXZzo0N2IJr2ZhwaXu9YqKuCgORqSjaHH8
8tk3vkJCabXCafXIWQC3gu9hRl5En1/lmkqGbZyiC5tviaYYcZ0vsnIEI4kc
UQowfkvLCUbToX14YSKFyZpYVjnvR94aM3KVyMKZKqsJOaVU1tKxVs2kwfkS
ucAbmS5Nx/WB05hDyvJ1IL0txkTXX3SzBG1W1l/QFR7gCgcDrjO3P7JwIfkQ
Xa7yKQ3V3hTBdLbNiyKwFGSHVS/M4b1VN/JD++sfql4aur2DNpncx/fiW6E7
C7k+qAEWJMyWaz75p6tHxiGPW0dZoVmlH+18Q/YtEKu0sdl17m26LlSy+bqI
Cx7UbUdGgo5Omeul0CgCen5PZZgAy/KHDgaBRAqrc8qFh9tZJaIunBN38NqU
LEHa8CVYaHNFZikLXyfHF0xHrV1B+5CcBRWyXwV9g3PC+aIrU0E9zTMe+be+
8zmcF07J8xg1xo4Cw3H16Uu8N7sIT6I3G5Y3FGzCQU9+0DtOmCau4Q3jbq1u
eQ93NG+RKcd5zdgFRiSvBmTmfu1haUYRLQuQLsg9AtOTYksq2zLFsK7nj3F0
1iQyVV1GWKCo9DlLcvoCWTz4Oe10EvQdZkV6GbQrItkG+/cOA8rFIxFGWksM
EotuusNLIftaVGQN0JuRq1uNOuEm65euqWJOc54RDEG2Wsj9Jyh7sffKJoAp
LltveCGP0nSlISegGPLmTSOqUPwIQDkTNnNQDIytE7Pb1PU+qNLFfonOqVvv
mih8mm8lcMPG71B7Iqmn155lIZHHHL3EUTksPsoZpGtID2YNDCJdl6NJ22dW
F4oIDyKlG/Jt47SpxxJl+VSppWljWo7RhO04iFD6EZYIRblgHymjMZPgoZxF
X8l65mjLazozWorOS/xGxGhF5y4FrBhUraBcDr444dgV7PRTVnK8aYGhoMgg
VGhw3ttSA3FdvdAiozd0bYCGp/TdAzqhGVV6DWf8Ji0K00YJwWKrt3IR+DGb
L1OLxdiKJPTb75FcnzQwd4KLwNtCp6rrWiwBn2MHbeAJpV/CIAicSYZ3rrcw
J0mJ4mAVnG6oHkcYzYdVRXVoD6sKFTKo5JbF2Y4uJ1LcEeoS1RhL5DO6hn6l
+/eo3Oe0iOrmlfQgl0JMjCplQLPEgCpardcZ9NgtApa9gP7JLYyek+m6xWZj
kqp0mcMCmuHFHWfR8qzSgWS2siUf1cm1IvIXRfMMQzNEUTuQyF1V4XVOtpRO
OqqR7mBgBBYc5HznPtSMG8FWpuBCFNqyQvN/v8H5uZZlpDMk2NnxhmsDukxY
2Ev7YRRsZrQPF+LWUoyOMNwYTyhAXoppgIiyGBxFhgxHRrGk2xFZ+SWadeTD
XqW3VIc1uQ4oK5mL2s3T28j5kkjQ4gd0S4Fj6pwLwlBxrGOti9IiknqRu8Zz
EDVLK03LV9Is8pRsl/NLMJ7y6+v9Wpx5hd4X8AWdXLmhMqBdZ9hbrLRLiEn0
5vzpqxcvzl8+O3/GrTEmTKubbILScU2LcBPhtSLbW/isuW9TDBxiu0MQpuS6
uHAV2cYsW3WkO7eG+2bmLoui+gnhtBtR1oRFkmcEXzI+WyGd9CWz2QSn/KT/
aMU9JAAM1zt3tTv55v35aXBHMbpQ4AR8eXEaRhYWTd+QCAgG8YYI7tRc00jP
Lam/ePm9UBNK6f/Ij1eKymyWyD/JB6oDVTNTCBMq0ptb3sTwtGLPI6m+SJ+X
ympCrKzsm8Y4ekJstLdCFlams+KTnbV4Pt+jsWumokvL1yel1pVAV/be8tKg
OQtaKYpaDqwj6Y20KZ4F5IQ46kRodHqLADTBgMg4DpaRraKaatqWIVeqJeZX
VcpmqBr79z7Wbpsw+A1xihOshCuMg4lh7obDKq5TO+8+Adsvp9zYr9/gD+i+
maRDfWmesTaNqr/AfzT1Hh8+82BAYEfFWblmDcCu9tBF0l1wsy4XF2c49hme
ZXKMwUljnn9E+sosvXZfNU49ycry3pcEGlssoYCRGHvVdtUNmtbOqksXxW6j
mnroKJrYSnWjVAWQN3ZcXQRuwcCdKsJbsEMQ8yVLE5iSbXQif3tx2ozcjRfo
wv21Gy1TIDMOkdapscTbLVCL7Yy8Q+Tr5OnqNUYgFeqa4i4V+/CuKF9Sb6Wy
ubGu24b8LcP1NFajbgQ1ipGJbeySI2FYvMSGQzZ4mbVZn5o3X6uWDoRYurYx
w6j+bc/Oeum+nd5y4bzY2my1WvE0nX2PFrfJrx/+Re8hsXldeBeT6JYS4/Aw
wh2UzyfkFKkN2+3lOscbz03FpFUMGDxCBjkaGM+WLV90dZZnsLtJ/CWFp8q9
bwKXsdSii9HscNCMrNJEbwkTRyJobw0HmCinKXbf9EMfsYZv4zm0maYX/q2X
VG+RBwPWGdFdkMeHoSr9RmvdTBslOzstqpXF3TaK3p+9efn85R+exKV+J9d3
yn3DMAZ6YbiComXQZLQhXjDO9dvzc4nJk3vY3i0G/sKnH6YKYRI2oXk/K/gw
n8AeYoeeoo0QwgK+T0t4PNRGyOVRYXfi2gJu8NiDyKFu5xlKdy4cmE9hdW/H
j6MIUSkZk/axzPLH3hFq0nkSXz2a9MeL8XjYmSe9tD/sZY+akiCE+MCUSR+x
7fWVzzUlODb2hgL6uKxk8AREwD7TbH3cD/4kGSKCPr6qEiNZxui1QMwM14Ie
ZPznGvic4M91Wx2WIH9yfx7hiNHBAZOQy3gdk4ddckQgDt5MNNIEp+hR9aCD
93XqrlRS8BnrfkvUqO7N4+pRPE8HvcGoP+n302GnM+z3esOk1+31O7NO0kmG
0/uygL9+MuwN58NBtzPo9wd9+G9/Meh14Emv1816yRFZwGf9TnfcTbvJOFkM
p+Usj8mCSk3GXah2XTbHNMQqT9l0O8M0SRL4/3EyHmbDYxrC5Q0Wo/5wgP/F
HhgORuPh4NHB1N9FPzKmpCKXyBI/K8sGZ/3RcF+8l3vbbYIGlpgi8soTCNZj
yAM3y/TaRAmkaZLO5U+2Fd1AJqf2WiYRiRL8wzyu6ZbkfqOZkDBJepNxtzvp
JUOTKe94z5TKwv/R4gSx0uil3X5DlzyS12jxtnyTrhFpuMVBsDX2TQIZnc2u
uR2vLhqVr/1Mkx4W207arlwxOnyZh9PmCLGBfw7MW3MKa2d/vfp6csptvsrc
r3JKqHMiHURDjbdKjqnbj83/Ri3o+kPysGbc99F3OpS6LioVGD4Jmtlut2k6
V75LRv6H7uOirku6sNE1UuiPD7ss+9BrZ5+yxi/Snh9x4TtQR9zDX7PDiNa4
p2/EX+sN+S9XOaqbZS2gdMOf73RuvMxSxCOYYuKg1ZCH4K+0pvvlSvT8wC5/
pX5i/zIfX+ApNA/SAVF6+FqQuEXWeOguGhuF0qoCPEOXratH1eFosABQJy2h
RVBfih3heTopD/aGpvEC9D2w9PojIWfyqERIzz4Z880QcSYlQ/5JeeBx7OnP
V5joVDeYSEmCCTrJZLwYdNL+YjGcdQbjYTLT9MPeOEstA7ooE5YIy2vY7/ZJ
PdIzrXN01G22eFtdYmkD7auisvUxsfWsgGWqKfZzFbdeoLh5dJSWs48Ry+m6
kO7PJKwbMBLxd6ilCUo0eyTS7W6NxttyBrkgMY1bMocjHTE09fxLjjYwbOzK
gvCnKy0OPg2oo6OpJEfhSKf2BWO62GH4zPnoPevBmYAIuMvl4HNmryj4YNQV
R2AFWTaXGCLhuJBsdSnzdelUbzSrCCidOAf19pNz7J8Qr4lZubvaF+oZ4iN0
nAmVpO2InSjkZjZvJAXryJV1rrCtZbOGwi6lyCIpQ0LScdjkBEaMPzDNsmuc
UViL/RqmIZnvF+/rzKG5PyWYtSVGzPxTMi9jXtfdkz9HMiG/Wm4Ljrvh9Ois
ZHPK3YsXpxNFw4lzee2sHA6keoGhEuYUxOOhZWD6OSIlZ/s9tsUkdZZeM1uZ
pWBxpRp+A7qxYTgYmTOIlmsna+V6Rvue3cdEL+fw0/80B4bUoF7TGBeoFpmn
gkBxohQ8pxSkmLIf2eWA2ivhvQVIpN4s1Xsa5Fmv1uHq0XzS6Q4m6Rjk67gs
mjvTQacsfWWLLgth+NdkkS66nazT7ywWg6TTAZsgScfdYQ9VeknWA1sj6adg
ZbCZAhrxAv6nkw1mi8lgMe/2F+l0lPT7w1G/O5+rGTOe93vzNEtG4wxMhKw7
nfS7kySdwP90xt3FYgalDNLO9JEqXvQf01fQMgjIP+qMWReXjEwtZKQ+dhkY
V5lOJT6Kz8TNh4v14EDDH09D3M3SQW1PZ52edBtYYt3euMZ0GowH8/uMT7Tf
qinvsjV9Q7Kass60rLMbqynvSBWYiTW1BcPxPqsQNMXvwAQMzT9aTirSbcDq
xEhJfDRjVmRqpYjvlGMn3m2c73cE7ryzBdymDF7t+EpmurbCJDf2vdeonBw7
vZYa+JtQnfp559+vCtg/SQHDLGo0L6kY39nzeqXbKdtSdX8kMrCc6m7HWR5n
I8atZIj1u/j6rNUdDI9MdPWoTiIflRTaB4K7LLGPTFor2I9Mi/L/3k+/u/OL
H0vaMgbwPKb/vdjhxhs4tKsWZcWjzeAQFIyix+/472LHuziv+fAqi0Q1c4xD
IbQUa/LsL3fMOuNnUZOBQjbZYsoJDhXDcT7Bo9IVLszAxxnUGDnPqHTIi68u
mnxqKHIslQzIxxVWTe8ayrX8O3QrzOBn/VENVIGisKbSQNS0gmKJbVGj5MXY
ehQe/+qhBO4LjXIPdgG3pQiiG40CYwPi3RB30CjSSnYEr39cd1kT6Pmjojyc
LsoMjRk8LkeDaM8BK19/i40Bi0BqgDWVSxIWFLA7Sq/9RUbhzKY6tFdoC7wx
oOBc7wYAvqJDNqwvjwLGpXrN1T7DKyR0Gkfd5oHW74ykRdaCRivxVkMX7IS+
QmmnaOjT+Op2g5syW5+uCaZH030Zo61VaCs7bq7t1F9oKnM9C4mggW44W8+3
+XJOkugs8DVVM/hnHFv9xEOp+/dsw3q3Jhx1bIV2Tagpj3ujYXfYBVuk38N/
D4/YVECpBvNnOOmDkj2CxMMFqKYTVElBfe4de0yDJhHovKwpjwb9CWTSHw1G
vVF/dMy2OJyAOjwD9TmBRH2owxxq04enUBtUp49pSPf+jRGNJCI2EueoWEpy
NkEfHJNHFaSKbx/oB8fkEeNBjSAePE2303y9RNryh+eBd7whj6TdbZQ/ODqP
p+yQf1LzwXF5wF/j+Xq+x0WD1/j3u5zDnRr35mHu++zTZskRdLYO+ghmApMZ
dOsRKchdsBxbSaeVDN4m4yeD0ZNB/09Oh9W4bnQGcx5DySAZdcadcgbDJ4Px
k07nT/UVbI1hYXSQD2axRKgxAgRo1J6p0KcJfPoD+TtYmreQeJq4UVCg+Zzj
ruO+906eEpEl50/hP9kKr6HPYhAdN8IX8Ak27duaqkIuS3fm0UW51xsORwNY
TcPFBKTBcNYDm3sxAAk4AtVzls0fVVvxWIqifFpaF34Gi+X1AbX6cfypNcvz
LVWgRYUPBxmIpTTpDkajWXeaZuMuCJfRIuv1xiMwpo9RdJNOmqa90SBLptPB
dDDPQFGeZ/3eZNYZDwZJfQNuvZr0sCZJNuhmcxAonQQmwWK0mGT9zny+mCx6
/WTamx9Tk9lkmsIOki5GWWeWjuD/skmWzeadzrg/Tyazksz5sakORLGI3K7U
7dAEuavQBmo6DZlHYv/g/h+odf4o1G1992x+lrJ+D0xw2PfryvYXJrtjO7MP
f+quhn/VnW3U642ONJGGg96o1x9OR+PeWHa3GgdM7V8fdivYciZgzZsH6cik
g26v2836fdoKe50Drqbav+Qr2jHP3Y45nBzb1ppd89iktrketXPi352753E2
9+HdEzefo/Pwd89npDXiwuGXD8pDds833faz7oN2Xy+P+t3zAXkc3DzvzeNO
S//gSfOPGloif/hvzyEATXqRpRijfK1o9wjUk7+NGValJszNY4bji9pTcRqD
lYQJ5U4soVPr4YfMGzkEuKYSrUCOZOHzMPmQTf46r7bYQ1wJMszo/IhiKPFa
sYVPUmGl4yF0idNpxFIYwtZejRX+x2x/3+iONZamfJKmX28zo6sTU1qREbAE
EOUn+G8OpoF6wgNpuVcBdbESfJaC3+nBORR0yvUi29qKKTvyw2I5BR1UYj9x
z+OpPWbi1Y7umu0lCOjanxHS4Vagb6P9/xVSWO/tvXo0nvQHKegh8ArxKeOn
8BVjVPrnfz/N0RybChFqEMc4VRuiQHjhLtUOpcr0pfW1W31dj1Z79VDPHtm7
UpAxmfkt7Q2P1RX8U9464XCcHAbzQ2vhBXCiW0reH5kLHqhkJsFoWWOsET05
Phd/rR7tzC6pTGD2DOXgrDfozI7VRUBZHs69c61udw66CVgP8N/FsbpQ5ehN
HAPd+qO72j8uv98FlaZH/wLVBt0SqCEdrZWNunyE1+nhYdy4l+J57XiU8OHb
0QrlAKo+QL1wMerDfxcjO6lLjlW3krTT6fenvf6kMxp3OwkeCHcgr2mvO5od
49+g5vSm/WTSnc67s1426/bHaXfS7SaDLJ32B8d4e6g5STJdjFJQj7PuYJZA
bfqjyaQz4L45enRAS4WxgL4YwL96+O9uNurCk96D+qQz642nieuTWdLvTifp
ND36IAaU/P50Op6NYJSSYdrvzSaTQXc4BFM3PcrahL8pmIqTwQis5MFwMp2O
5jOY8IvJ+GF9AgKclPA5atYwQ2YwY7pJH5vZPXba9+a9qeuNdJhO5rP5Ytob
g72ZHjvtYWftZ/0sycbZeNiF7hjPuvPpbNTpjvpHj06/l06SHizfeTbp9XrT
bPjzT54Ov3FnUhrnvC6LZIt0VnWGw1HftEBUtnDf8yKhVZXhT75EoBY9pWnE
J3SRdLHEgJg9h0IXeAPs+U5v/IgydF1SgyW++iT3j8BVKYQnF+9P9SpxLOGL
Agbz0NhomLvd/uD+6OguKUbatBZuOKj5EdzaHo+gnYp0d/i09eIvFkB9b2Sx
iygOx+fewOKHh0T/aLWt0TUgw2MChDE6+DiV5OgYYi+IePthme8+5AXFETer
GRR4jzSuhGShRtgfgHjpD2oSUXhHNVF8dEvsL3n48br9gc5rGx3vYA9LD60s
7XgPTa87pG59D01f3iqP9Jfg390SUf+Oi9V/6MQC1T7fbxHpaFvMHjipxp3O
5B88p37mpHKaAqsADx3Ussrw4EkpKobqDg9NX9Y1/odMKsZibq+W0wfOqG4P
ZlTvv7OY+onalv2V1a6Hpg/VtP6xKqP9PVxfs78jZ9TPVgCDqy3+VZY3zEuO
riWPnc53NdINYPEW1vkbKQJxv0NyPopm+CMBNWSCTigYANncjGu/dLv1fk3g
JoyexRH5XAMPgdHyRbBXvETC6JgWruIuBTNmt4/pifgFfth4KYTGLrsoypFE
h5TQJtF9Z7UwRHVFmlRYagZ7N2VZdFkMkCeo8nxthJleQM3sKmMQ2mtx1mKH
12FYerQ/GcX4b7Hq5hlUnnlubTtqvMXwfFC2/+jBZxQNjaDy76sa5CcVwXAb
co3Wr3qgnOsw0RzBCeNfucD5ZFHRXoQTw7C6MHK8Oy93yNRHzLJR2YSQkOL5
b5//x8vz4Zu/9n8v8s+RrcTMQRL6KL2viJwk9j1oxuCBSWs8ZZqY3JD00fLd
e3uKLkZ6ePanvyZPv3/c/fjV1dUt1e8/+lau0CkEXsGwzpXKHq7wAyrNmXxc
E6XYATNDvlEbA78LJb4YG/bsuyCdTLJqsuq2cWACVrfIRrpa1T0muJqWTMd5
eNXPpN53EYtIE3LsBn7GXNhvhOYgY4bAfLViZL7X23wqdIMyj2HmzgQAk5YI
Xv9H5KXlOlOgqqnHNJ7CNNbM8oXABkvQGR2MECa0MnaJxbbJN1qExm2uhXZh
wSB6RgzvST9DIDQ0TDy8mzJL49urbZZ5NMWFMa9OmWZdgDIYMJTPIaxMheuM
EJaVsURjkoIrhMKcYzAcrMOWoowauiexP6eEg4Kc3yBYYUNAoA95jzB4GHVY
sLgqrvINPGv6KJ4sx/Lt9wwBiGzDYMc3I+IT1woz9bWhCK1439mvpkU7PvMp
fQm92n25UkgjYqqeCtV2GGOKHSwoJLOUeC/SyIf/tAhNAm+Zm/TlO2aFGwSP
aBl2TwJqTTr/S0UrNHE1R5h2N/Su39uxw9q1IYsECJ0uTDl8pxR6GwpioH7k
sRPKaphqc6KGfkvoefxJiz9xdSQlUYYUD5LT4ra1y1vL6/QSJzjd94GlQBjP
dn9pns3SOdYSs/7bPp0fyh3vu8u0SQk3CIbqerljZmS5r0Al0Z5Ho21oL1NC
nsTdYEZ67pzhvLHIpNPxi6Xy5logRmhAQoQmoo69IYDAq3SD0+8mXxEi/zpd
51BEvlNUIiS55+nchDrewDjiTYiUIP+YTDe/RtA8ws+PpsvtXOeBHKIyc0a+
h09V+4B1ubotkBfXg07GF0R9LF6hOV/FEmB3QgYw3PX4+WuEWUW4f0LbUaCY
YELPmMhOKA1oiHa4fmh0bg2XTr+KKFSXiF5WsGQILOxmmQqfL7R9/T08+RL0
lV2eEyqXLEGF71wWkTJcEnwdDtUqu6YT0eXfcWW6WiMmTvQ5fp3lm5WSczwT
WfAYHpNgIdoPZb1/LO+FX4IG9XW+FXoUe3Qhto38fY4+t7y/37YqfzWPWvGx
H8obaEnSiacy6T7TNAz+6H3l7zMt+9IjW7MnSecvSffUvakppdnxS3pAKf4i
oYIGp1YK1t4rBcvwy3lAKeXlSCWNTrEUZzQItiLPWS/UGOfRl8vt7gqEFe2+
OJcYhPJaVNLI7Uu2cU4lCcxVQb/uDQcMOvi9abK2hW5oAprkRjX9qPqA7YBE
EFSdyPZ18z87E4fM5sV+LYCVpc2VZfCGuIzJbALBZMaAUxdCTSNSRWYT/z5O
4lac/eWH1vd/6T4+6a5PRbWxL+IDKox8gAESb0PNw+07+hFe/DojVjD/pUMr
0wqTrKTNTmlQWa6KKBPuJG2mcSgtQJlHuO1ok4P8QZSzGdcXBba68B271E0K
I8KQ5dYxuaCGg+1BDOnQSYrthAi9n5bXpqYhCpVyDOlw8mgicbL1LXUudCqG
o65jBurblbS+J/Kxl+bu3sbu1t62zZ0jEuAfbjJPl2xkE6Vo7EbhtUtFKp9u
pyhKD0rAOOmOW5Aja7nwc9L1f3YHQ+9nKC7vkn/3/IzukmTd+DcgG/7SSgb0
cyw/e/xzID8H9DO6S1hpRp1JkFF3EmTUn0hGh+WRZRTWqBvWqM81il4SuwBa
4jIZ7lf4Z2BxinZKaBu3WboFJS8SMHq9p6UjqkCgFV0y1M9Iy4jwUggxbhDU
rhgKaaBUWjJF/0CBg3VoB+QUUUVn9JRW0r9I+/B3CCrTzw9JGiIqNi8yfX0l
wVDkr3HdNr+jz9RdQF2w0eWbon5c7Foz7gP0oSx30k3ijUAExIi7otx62m6w
peQ8Am3JeJfskpmBLFIObURpEF3X7u3s1+gXYqY7Lkd71Se4N7L1fAtmDhRp
g7zIPqpGLjuAz801xUgUh0pGcfKkl4FMRQiFJd7isrC1Uv9F/qQzycLfTzPm
x4E8ocVX4U5YHscoLW2VZkOI98hZlE4C7mhDehyfnHwP/5t0TmHdbDCK0d7H
b7E53AqvqlGN/PRbhjsMCSic9ZHJw2f+YniAEIx/OTH48wThkDUr7PBCNKa/
dPv6m3723c87ReEY/ZT5el445esvSZhVL8jqsDAcx9dLJCyR/DirJMzK/Yyi
pysiTm9iJ8veZS5X1Q3W8AnoQTumF9grphCpAOShoKVLTpGIHH2Ey7snTHjN
1iibKNQySI3F4HEClU72LS7OOyzQwmwmIzc3IA5XU2b/opuVcsUeIYzADHYz
t+QFSlkLIiEVMztRfKbZ7TdzTyrZTT6kuQJJhtRZWbVfcmtYk5UbW/vl7ovK
XHSeV1sBgP15LhQ0L/P4HeNfv3sH+oZH2EbxrPRUOBaSLtKGTJltZEZicnaV
o1Wm42ySLHJMYJgBq75k5LNBanOFsQ4UBH2a+TOHqQGo8yIl86FpgCPcDNmR
WjDaJCy20K0gzBUllOjdTGkkOc/KZPT09TtWG/VKv3Bq2Q1/hMc3JPi5od12
O2ABYToMAGpHr0p8MpxnUDdo+HTLcOxEwubfK4UCI1cBBO5GCkfGobHBhobt
Vjg3JbKmNNJou+OQ7Lb72Y6dbdILoohTsw0lWk6cZWtYbpHmEHpVmUj7MY/Y
PJdrsFiiQKRT3vX9HoUdzyQLBECLM+aaaRywP9mWyolybcXTK+KqK28CbhLU
iQQ7wW2QwXEfLsncWucRs+BSVxEc7Hyu2/ynJfJvPd9JsDm5Awl32KD9PROS
iY9lUmJIeYZDv7m1GVxkYIFC7UkHmuJMmGcCa0OTdZatYYzzQqxUcug4ApyI
kB3Ng0NgRTNmQo7Ni+ZfgMcOYDDjNU4WUqGIrMJGWiF8l0YwCnOPPYFtXsQ7
AoAk4wx5rUhK6GRrOihTYbxxbDbMV5nTLLUDL2tMxAJi7UHooiOMvoNFw11e
U3Q4caLaBav8S7nhuqfzZWD3peILhrdO4rH8NiuRsIZhfbulTY5+vEfwJlsZ
yB2GhbfHnW47OXujlPcBLS3U7gQePH92KtqoEmg7sF7lDpwj/NGaO4C0JBZs
eFUBg8+fUzbI3eqVCcJ0m62YgS5niHrnxmd6gpCCE5pRyYFRFbC3yMlIylnA
gINX4MOr/MiCgihhRMIL+b/gGwINPE50LUP6RK42i7Rv9d9CUJPNmx4BEN3p
ILlGtKUEZx0H2Udn/iEFn6aSa3shhIRMo5Gyb4X55IxlRbCn53paK1kjmS42
Vj3ARJy6Y0cPpD9UfZofSi6Qb4gOhPw14iO12/Vy3ySECiDXJwjCtlDzFpn3
PfY/1w3myjZz1ITGVCX3LYhxytxLRL/HhkNR5LNlgFfA+aErmI/FFDecx5qv
7URf3rI8SRFHCGc6d0xRaRPTkm0JvjsmSDZ4DRvRWvaktIb4jtWa3RWTOrnr
LtL5ON/LE7MdvUQyJpV6tPEhgMxyRTsPzi7k32ryvWztU292HZhc7YgYWgpH
kossSdhAuQh0gzst20PumAtUQDn+KWtJIH4usVm8RzKZj89DhCuoUFYARfDA
8xyawYW999LQuby1nPuICbWOnv9N4oUA4ecxCKc6Sw+wvsEkIAoT6CyZMYzC
hwKYsddpW1xS41FLRVh/mZuXGcXL4mTnz7KdMKo4gH3tQBWNEgXQFkBHLPEd
5vYexwFqQvw/hHKhQmUezsy0Ojex8hURh125frRrR3/E8olUUTLiF9bFuJxr
h9nrFEwDVf46IwBRQltzKPqV+jAXmpM2JjlY3gQrfYqELbLp+ZfQ8Kp5IAKQ
/8RPzxSShb/C0aeAV+koS8rxHAGji0zAcdYGKalRJm2HnzlTS0KngxMirIaT
+wIlKZ7kHBhgilxRWFY5BeI9+lQFH3Ml7dSvTnvVCUyhC0Zi1a+45BMlAKB7
qdaWU/N1afFBWe4YzV1o+yvqGVC91fyggOTImMKdF6bxZZ7PsWkp58RjqYbL
tewrdnoVViLfmoXDepVsQj7Co04FLx2vjK9B0glCMMetIx0NmG6gt+Iw1usd
7BjCwprCo4zjKMwpXnTSq/MXsQxr5vKUqSE3EcvrFs8mTA+v9Gda15tvaZcr
UaZvM+WJTwnFXLqOcuI9V8wPn0yZC68rRavCAl5ZkoUjESkKKbzDEx6eoIeh
hLfKf8NykFtvDF432W3q6PgKJcthFtwbYSu8VqDKkBRULo2WFzUJUFsHAbs0
rTyyOiA/8aUxcZhScaNVlhVXtOuSd1f8Cx5Aq6sk7YrO1uBzaSzDihSWjxkB
HjHiEm3XGqOFAp/tDLSuaO784fWF8Y9Cn5kss14rTxwZ2foekz6qo8TUhY2y
j5LQ7EvLUwwniTcdPHoa6rk52yVhIeTTDErB2bLGDjK3LLtNtPbQQ7gr80sk
CMvVKW9iU/lYJGNrP5PNF6XJoQKWFyfN7bB+EsVy24ymPPlJ7DLNeU1x3jwh
Umj+aLpkwlhZtmKtShVqK4akKldLYQQzbYSpmW5J//ILZ13MIQKr+UeKmdBR
lvtDlrfT0hVzuKTLKOdoaU/WQByUXNQWUoSKUup29GqtxPKUCzEqERg40oGI
e06I09gcFReS7N3TtFjO6soXieTb09iwLR8OeLYjH0SgL6QQgGFM5xufpo4X
SDPJ4T7aHD1a5d3gbB3/n/agM8GDFwyTJT1JNis9g6VYMtFowJxkalaMjfQl
MIVBSV7BQqrQjXuJLBL3mm/eQs6cw00P0oA+XbAiyRWi2Cq/VsVuv8Ad4uMV
3vkJoGwVINhDYJZVXlPF6PmCR6fyToArxFyGlrDZJofHqmGla15s0jn7wqk6
nFAV2kqIDb8mLiRm2ZuWrMGSrRcqgoSB5+w3t+OyNod1cB7qnRy5BMRHlp1E
26ToMdDJQzNvI3T1rFM7nYD0sdeCCzoTtPQMI38x/sGeN73uC8HbhBF+uY5d
YLAEFbEwdH6o1XKRhWKVGgjbCzupcwklI2eL7YK6XaBNjuvglkIcYMIbXbtf
m7UMreYsVTAFHuvQmt3OcD3fSABx1TIwb8U1Go9U5WXhdQd2PGxny0IJ/1io
yK5YZNn3HFJNhWMjsELSfV4uSmaldgwX85FiqFgAVaqG/kkFvHyAb0aM2OMt
RdF2Sga5lBhkVGMS0UIgiwcfkC2cefGGOuvRZ+2/PCComctqT3vsox13GFfH
68qlN20PtQgyelSUusrPoghysUN03q28+UPTh31/T0UZIDP/tZ7yPtumi11R
PoUla2RFE3xBcftr0yWqB8VzykKj4CgVhcKtWyhKYArsKNiQ764iNUImM/Eq
W21izAWs8y25l92GjMJwvYvUfzHL5LDmKyyeSmxBk4sWqEetThJFv4nP5iiF
aaGxWzreaihzTNrBfPmpnAX05/w2vfay6vi3ORbpEr2QHNIjS0SsMJ7ZgZNq
ns/2OLmYC3INgiX7qNuOc5mnWM02VvhCAV595k0aP/QHUeip+BGfPnv2bRtT
4LHeWpVtZj4AKfzN+7fwEs+wUPHa8D6lpwSkOuX57oMLjlCVVypX7hQwKRbl
zn0KfeAi0oUXl25T0G9UyRmFhLKEBC+Wa/TvbbLVSon9eMdaLD9lBQ+Xp+xR
sib+h7g1/7pbSk53162LdXsD05YMsPN3zwviNOSNFzVaNlZvNxl+yCHnIsmI
mxsHDqPBYQe73F0VdILbxKNxPt4aDNtuZukcIocOVBKb5c825iX9e8ZjK8hq
hFsK68chCgmBY6YXhFQ7v9WK4V0EcvhFsZx/yQuNbHZVz64xtuA38bc5B2ZT
36qCjJPG1f6Axyy6p4N71BgwRHf+JKLu9cFXWOogxIpctbCp9RvYwxHEV58r
LBdic/NNJyRMgX9apNuXOahW6f1V69O85EX5/MX58xaHe/Ags4KqqhkpLUm/
RUw5DL1CiaGHoKJQGKpvGz5txV62l6LyLniR8bxHHCZqGK4+ueplIENsqHrl
KMQLjUSQm84EJPYRBpMb8+55nxPuk9FP4LfFqdFowmOxOHgyubV6S6SRe2K0
JAVlTdTml96HuAT1PEcMepqmdK4v7+0sWG/Yu4HFUBX2TlNf0f77EZFkVtSq
toDwcy87YUHr401Gt6nCOUNav8Pp+Z2JA3a4m89d9PTpKmMxGlxPY5Kn2i+f
X5M5GXJO47oJBSI723nNu1cEZDy71Q7T/jEf/F59FffN24HNLpk8y6JAIxIv
QmOsKHctdRdku7WrctA732plXpcrc3eRQycHcLm2CjxGl8riWJD+wwYlquSk
TkjkkZYQWw7Qh4wW5DrLqnFnLUZY2Fc6PYip1NsXCn8vccG4aPbizCevLwwV
XY1D+GX+8CPsL7AIQJ6BiZ7PbXbeXZOxJzqkOdIakRvM8gX2wptvY4ZbewWC
3pdSabwjAgARJneXN9HZcsEBPvLLdhQ8bkhJWjxX643NYk966ypVn+25gkRg
F9ZcUtXOVoUFV7c4UT3nc2G+7lm63GE4o5veb4hJGjUdvIfir49CFuM226xS
wZTj/ItKAa4RDmyTr07I2buhXTjJQoKJxacgjKM2yYV7kOP7QrDv6DIue+q9
19cZB8BUFvgplnF+9rKV9JDbQyRbIXTD8DFC6ZLPXxQ0vh8av2SPEXMpg7Is
TnnaXQQeRaVkMYPNOWvfMzGSDtbk67KIRR05ncs2i3Ntu03Jybv7mAeTEH/7
8tgpZNjDsKrJYbZkscfDTYEagcQsnCSgfg9vxerj+SpPdcm3WvEzmBM79PN/
y/xdULkzjDS/SVd48cBsB+fYYG3DSb7YI+p2nS58CdLvsK36ExJjgyBflAQS
jcPXDfNVfince2/O3l7ExAeOJ5Hk+xet/MgMfI5qTVr4q8GCnVhBJ/xB9BTO
0Wn8O5bXuH4hoyblgl9UqyWHm7SBodqxzfLtJSyQv9umdCFrnvTvF8jpbqGz
ahI1Ra3E6lARZ14RTWUpINPiJmvbUCqJicNiVCY31uPkNaqozEJWEA1ZQevm
JdSAvYyMnEla6X69JLVlJROfY7RYstyqz5q0MXHzGpE5aSPUQpzxqIzJXXja
jmgkcHETlSL6Wq5BxZ2HCk1q3jZzi1muEprpppRNP84W8icnnqoEbHvRNTTW
XckJSTe2nQqGquCp9qZlmMpRxMq/vk2uL5COzJiO+TTDmSFi/m2+Ef3F8sOZ
KGoThWwtiJ8uJ7huTCIHX+hUUn0GT4cw6dfvmTUB/33xnmTMe/0ejQnU0+j4
7vX5yzveasxwEJ9EsvPTRn3+xg1Y0ov80KqS7ogCE69Txo9lEFZ06Y4uJGL7
SJLeJznV5Me6Q38XnriSjd1pTtSbOJ1wE6fcsJw3Xz2NJ51JxxOd7NzHUxhW
ItdsEmgbo+j/AVJelljBQwIA

-->

</rfc>
