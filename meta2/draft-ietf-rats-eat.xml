<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="August" day="01"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC9052"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.</t>
      <t>The key material used to sign is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>The hardware and software that implement a server or service like a web site may be an entity, but the web site itself or the organization that runs the web site are not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where otherwise explicitly stated.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Evidence.
Evidence is a claims set describing various characteristics of an entity.
Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Evidence.
The Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.</t>
        <t>EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Evidence.</t>
          <t>This specification does not establish any normative rules for the Verifier to follow.
They are a matter of configured policy.
It is up to each Relying Party to understand the processing rules of each Verifier to know how to interpret claims in Attestation Results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of Claims generated by an Attester to be appraised by a Verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an Attester's various capabilities such as Claims collection and Evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
Any new format that plugs into this socket MUST be defined in a IETF standards track document.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for Claim Keys.
JSON-encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a very simple free-form text claim for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the SW for the entity is needed, the manifests claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the design intent of the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>This claim is only to give the recipient a rough idea of the security design the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>While this claim may be forwarded in Attestation Results as described in <xref target="relationship"/>, this claim MUST NOT be used to represent the output of a RATS Verifier.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level may have only minimal SW defenses.
The most secure level may have specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
(Note only Section 4 is referenced. The other sections, in particularly Section 3 do not apply.)
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains broadly interoperable. In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-count-claim-boot-count">
          <name>The Boot Count Claim (boot-count)</name>
          <t>This claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, Verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= spdx-json
$$manifest-body-json /= spdx-json
spdx-json = text

$$manifest-body-cbor /= cyclone-dx-json
$$manifest-body-cbor /= cyclone-dx-xml
$$manifest-body-json /= cyclone-dx-json
$$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, <xref target="swevidence"/>, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Evidence or Attestation Results.
When these claims appear in Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are not a substitute for the nonce described in <xref target="nonce"/> and do not guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
floating-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="claims-that-include-keys">
        <name>Claims That Include Keys</name>
        <t>This document defines no claims that contain cryptographic keys.
When claims are defined that include cryptographic keys, they SHOULD use COSE_Key <xref target="RFC9052"/> in CBOR-encoded tokens or JSON Web Key <xref target="RFC7517"/> in JSON-encoded tokens.</t>
        <t><xref target="RFC7800"/> defines a proof-of-possion/confirmation claim named "cnf" that can hold a cryptographic key for JWTs.
<xref target="RFC8747"/> does the same for CWTs with claim key 8.
These particular claims are defined for authentication and authorization.
Their semantics don't translate to attestation and they SHOULD NOT be used in an EAT.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The profile claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A profile should specify whether or not a Detached EAT Bundle <xref target="DEB"/> can be sent.
A profile should specify that a receiver be able to accept a Detached EAT Bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>A nonce is always required by EAT.</t>
          <t>A profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>By default only the nonce claim is required by EAT.
A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the nonce be a certain length or the location claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The manifests and software evidence claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver MUST accept ES256, ES384 and ES512; sender MUST send one of these</td>
            </tr>
            <tr>
              <td align="left">DEB Usage</td>
              <td align="left">DEB may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID MUST be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce must be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims. The general EAT rules apply. The nonce MUST be present and the receiver MUST not error out on any claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and MUST use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition MUST have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= spdx-json
$$manifest-body-json /= spdx-json
spdx-json = text

$$manifest-body-cbor /= cyclone-dx-json
$$manifest-body-cbor /= cyclone-dx-xml
$$manifest-body-json /= cyclone-dx-json
$$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="deb-security-considerations">
        <name>DEB Security Considerations</name>
        <t>A DEB (detached EAT bundle) is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  The attached claims set is vulnerable to
modification in transit.  Although the nested token does contain digests corresponding
to the unsigned claims set (as a submodule), these digests themselves should be protected
from manipulation during transit so that a verifier can detect tampering of the detached claims
set.  A suitable singing and/or encryption method should be sufficinet to protect the nested token if transport
layer cryptographic protection is not feasible.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message that is sent to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-13">
        <name>From draft-ietf-rats-eat-13</name>
        <ul spacing="normal">
          <li>UEID length and type clarifications</li>
          <li>Address comments on SUEIDs</li>
          <li>"Attestation Evidence" -&gt; "Evidence"</li>
          <li>Wording clarification for "entity"</li>
          <li>Wording clarifications for DLOAs claim</li>
          <li>CDDL type for CoAP Content Format</li>
          <li>Move Claim Characteristics to an Appendix</li>
          <li>Rename odometer to boot-count</li>
          <li>Correct/clarify section on JSON/CBOR labels (Carl's comment)</li>
          <li>Wording clarifications in Appendix C (Carl's comment)</li>
          <li>xxx encoded -&gt; xxx-encoded</li>
          <li>Clarifications for cti and jti claims</li>
          <li>The 8th bit in a 7 bit text string doesn't contribute to entro</li>
          <li>Improve SW Name Claim description</li>
          <li>Update commentary on UUID vs UEID</li>
          <li>Remove most of section 8.3 on CBOR Serialization, redundant with profiles</li>
          <li>The 8th bit in a 7 bit text string doesn't contribute to entropy</li>
          <li>Improve SW Name description</li>
          <li>Don't capitalize composite device</li>
          <li>Reword encoding exception sentence</li>
          <li>Wording improvements in section 1 related to Attestation Results</li>
          <li>Lots of rewording to make profile issues more prescriptive</li>
          <li>Sync terminology definitions with RATS Architecture, include Endorsement definition</li>
          <li>Plug-ins to the EAT format socket must be an IETF standard</li>
          <li>Link to RFC 9052 instead of 8152</li>
          <li>Improve introduction to profiles</li>
          <li>Improve CDDL for OID in JSON</li>
          <li>Move Endorsements and Verification Keys to a new Appendix</li>
          <li>Move privacy and security considerations to before IANA section</li>
          <li>Clarify that security-level is only the intended design</li>
          <li>Clarify that security-level only references section four of FIDO AROE</li>
          <li>Remove requirement that manifests be a byte string in CBOR-encoded tokens</li>
          <li>Add manifests for SPDX and CycloneDX</li>
          <li>Add a standard constrained device profile</li>
          <li>Added DEB security considerations</li>
        </ul>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-22.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-20.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="July" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-20"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-04.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
      </references>
    </references>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9aXPcSHYo+h2/AsHuiBZnqoqLqNVu+bJJdg/b2q5ITdtv
XocCrAJJjKqAMoAiVaORf/s7e54EUCTt8Y14H26HPWIBiVxPnn0Zj8dJ02bl
7FM2r8r8ZdrWqzwpljX91bT7u7svdveTada+TJt2liSzalpmC2g4q7PLdlzk
7eW4ztpmnGfteJ61edMmye3Vy/TD4flZ+ltVfy7Kq/SXulotk+/SaVU2edms
mpfpD+u8+QEeNauLRdE0RVW26yX0e3py/nOyLF4madpWU21HP2b5sr2GJwf4
u6nqts4vm9CiWS/iB9NqscymrWuxugjPygof1ZfTfNa063muzdqixR/n13l6
UsKPdXrY4rKyFuaYnlef8zJ9dHJ4vp1kFxd1fvMyhR9JVucZTL5s87rM2+Tz
LexXcVXi4jP3+fSiqmHRM9iol+n+7t7j8d5ukq3a66p+mYzTooTpv56kr1fl
7GKezXKYIW/362xV5+U0j15VNWz0WT5d1ThNmHFVr9PXr4/gVb7IivnLdH41
/1+NNGjp/QR2QEf6ZZK+gbNfZwsb55eiLmbXWe1e0Cj/e5XN4ctFep5Pr8tq
Xl0VeQPrnU5wX+EkctjTJ8+ePUnfVHV+Xa2aPD2uixuc5hQGh3lmZXpc5FcV
7np+BbvxMj3K5sVlVZdFRse1KtsaWn48O4Sfy2sCyK0/7qXPnzxPnz7ZS58B
OG6FxS14iv/rP9pi8h8yP7+8Xyfpux+Oq7K6ul6Fnfw1r/PFOn7z8CXuP3uR
/pzVJZxjtbq6Tj9U2cyW6F7Qema4oR/3DtJnr8+iBZZFm8/SfwXomFWLsNY/
Hhyke/tP9tPHTx/vPX8RVvrXakaT7S81Kat6AbB1k+ON+fDz0f7e3gv589ne
E/vzyd6T8OdT+fP5iwNrAMOGBs/Cn9bg+e6ufra3bz3sPTvQPx+/0B6eP92z
ts8OtLPHL57rZy92bbQXgGBeJvD3b7+cPae+4K5n9RVu9tZ12y6blzs7eVa3
1+OivKwm5VU2WRTzneX1cmdW3ZZzOIAJ/PiXy2Ke/zitqno2vr1qnh9scVd8
m3979+H1cfrLybvjk/PTo/Ts38/OT96key+eH4zSt78cTs7O3x5PdncfP/20
N9md7H6iyVAHejnx7zEDylu6y9k8/SWvmiX8yOZjvPnzeXFFd/QQ/1mnj6Dn
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
DXp0dPhDs51GswqH0dhoxJkV0mOc7zcuLQrbssyKukmvq0ZSVjuZMwUODNFX
hLw6AOV6NsUFzg21bo+Ozj5g0ukncuogVMD/va8aSV8the8jPNXZ8Q2gjG+m
FN9Vop4RgZ87X1rn6aP31fttfwUn6ZuK02VOiyZHbiJLoQ3rHdnPJXXXIHFF
IsVKF5jRni/y+IbEYzKs0GzCfWlyqvqL1sswvYTYIth/vX2fC/ZX8SuWfS9z
TDnQIFsAE6GBiNYnd4IeJt4NXBAT/8/52kgQL97vz4NCLD2WCBQzeqrFl/oP
f2RiCjh9uApShJ52hjNu+Zu0qc20qTeMsKyWSaKT8JF98sxqV6dYvNrNxspW
h2dS8SiakDTzz6SuEc7J/pNm8KxbcQEm2GsGz3yzJ75okaqoyN3gVNDdv+br
ppsNTvUqwKT6gBELIon8RLi4K6mPgmgfl1xX1Nr/MNYoISlAf4BPMCl2tXux
i2koSR/Rc4Jt1HEx/S2/SO2TZ0/2nvEnA06NALjc6PnuLjTShWZphBbgMHYo
eYGmPWEuR3jSaXnpqrdcV/NZz3cGL49wqzAki4DPDnBa5Itv+kPKqwdtmHjx
KPjtc83J69Od9zeXSGhcmpfsnEwHNMn5OWd4zRdYdmeKx4xGI0Jlc9IEVDHu
ZFWMHYrP5m8Ja0kaHHIpbEAIRBMYSm8z//qCfa8kK4vmEApGKAlNGUtoSlD7
iCC/nK+aIUtVKlUzdClSndX5H2UuNIlIlPiXuXgCPir6QFhZVrdS8niyhlC3
oal20nBDk/80UQlL840PWlGLIacnua2gPUeYmJsOG0GJcFmsjpu7D8foPGUL
EUdEYPlb1CeF8FKyHJuf6YC/1FCHwjaynD3kJmxrvsg1UED2Brk5VnOSIbK7
NaiQ43iAsWEJ1nMD3hf3rTjejl14TERQUmWOA8OhH43pLZHfn5hNCd1lwya7
yNuuR8CQGTOE6YlH8IBJ2+xHcoB0bJYNDkGgF9lBFovYQW1zFEe3qzjyYaCr
js8pFc7GmW1aZDf3vRpQBGWh6kyCheiA3wIsF1/EPde8WjUNMukMKHbDtCZ+
LFoedUP+KF1vZ6QQ2VV6/tPx0939biUx02YU4vZX4pjzlI2RyK8wGibNY00m
MbORk5frb9cW3TdwYzW0QVQeoQXOqI39HYp22Nej45+rV905pEWnEFngyVEp
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
8xwQTHxKIb8o79IQK0MN/MQHX1NUxmq6bpXAzYtlcwfrGsirtVSdYVHeVHNK
cGfbRyERZU7lpTfUblC1hcTiqAYdrwpOgguHhuYayNdpj/VGJ092X0QeW9dw
oTG36JoQMp4M3QA2jSnt34x9yThMisfgit1SVigykgLAjhFoNbFx0Dz2N28j
ue1AMmwm9c2u5lQmx+0E4xOmMxL7MRLEMS8uc6zlJtUoMJkjpz5mf3lyCu9K
Elm0y1aJ62EzNVuxKwBjh2Ab7zJ/5F+A4WycYyaxLgPY0BipgRVkNPv+SSue
RYpAYDF40HAm7GffWxUx75Za9CEnGmwLDqVpSJC77RRBJJVqvdIWr6apdGeK
9k7KWVU3THi66E9MCwSCyA6JqdHUI8Bz/9ljhD4KjQWOBVWFbyjvhZ4qApyb
gwe4EMwwSf7E4dy4yyKBbJ64N8iMxI85G0QwbAHhuMn0Zw0Uo9SgFGcWzNoh
D8C9jLKSP0NJ1FcT88KnLoijVxtZPgjsHWGvu3A8c56UGqPTC8z0V4rPIH91
ziNipg+J+uAOCRcv8oyroWOmQvXxkAR6OBpstuQuoZCGiqkyBtHJdURHL5ej
qLNHFomJxx4i83Cfp3CFLbmX4yR/Dq3K4ey33i7kUnuYqNWIjVBsizQOmV3k
4MXh70MwuTXDWmqvgTZmnANMN6aH61aQFWlZnJ/tAImXcGod1XO3IS/tCi88
mZA8oyQZ+zXVfceqhelcea2qK4V9zyK4qXOSn0UHGlzs/tHBI9bNmjj/PDWm
ES76ifY4o/JC5dyCs6cuQqd3BR82D8qIsA57EM/LGSY5SoDH6JkpzBggJkJS
hqlQ0oGITdBAsfXzJr9lT6tN4nDHHMm7wOQC6A9OQVRwms9HTZBaFZojQcSb
lAIM5hhFO6OYo86Ct5bz1dUV8tJbPF8r5Eeg0qvt7CQHqWImFaJDRfsylK5K
47pmPGSusQQS1D7isRTZKDsmpZnPT07ep2+i3lkFYMWm70DEKMrqxDcJzr3P
NyFYdzsfJpH/zHzvSKQQFgXRDikBNlKuzPLQqPOhyuh36upwadZXE4tR3azz
woe75sVAzVW/FeIueu9GuC7v3otE4ruOnFHtmA3tZ2oVF/tZYvkX22JaLDMX
HEQpxEXdSnVd1DkmcvZFxEr117CF9x8x+/i5Ty3gSkeyLTvaBGSaMPW4ddj3
hIgs77jInu23aHyQ5tZ12y6blzs7t7e3k/pyOs5nRVvVk6q+2oGf+P/nPx1v
4a79nY2J6d+DHTegnr/Da1Qh75Dt7u9i90PsqW/MogFv33ktvqIQMpFkmhk1
viQP7kRNAYMfRxp/7WGTQt0J6NRBrL3Vr51+MK4WTB8FxRS0/6BgS86aArgn
Z/tPno7gn8fPD2jxJ2dP9vb/SVlqakrKgaDSgQPGvlH/8ZF0cvw34mpJ8EBK
AAkmd8eNX93DI0NfJ4Vp+FlAKmaK3cnTRF1Ney6dqmkIIvkkBdaSpASmsTnz
j9gQe23JfYyCnBkx4wQj/vvvEtuvjgiaQ6xEz8fAcjsYxy7eEpX6O5V4udVy
P+IKwRRMtSW0Bso/QrwoWzQ0wolOnUkF9hm5QRXiIFKpagqXxk4RVEVq6mrc
UHKLyPfGebvyS56V7qzFlnflKWqAZ8y5YKk4G7tGxFwSuk84JglWkqBVkXJg
AtbOPpPw2cxJS81ZmrRcFIls5nIbEFbgxfuSC901aAtTvKKli1+tOzlLdo9d
+34NFdkRRuyOor3GpD/uV0iMYlqxjznsSZzZglbqHBS9JsNxojM28BDcu1OG
k0vOqCCeZ7JoGb0qKIPrSL4L+IqU/5Y9g3LTf/1ODaTfqEiliDaXcHQZ2Z7n
8+AlwoG4+N2kw8erU0JDggw5BaMzNt9gHEdicTQcQDXC9Aw3Mv+CECcCC9kJ
hYISLocWAE5SKQdtatuMDoTCysfkSi+bAbOW5uTkDB8Yx0FD0KTsZDsFmjt+
GhMXBkXO8bSP2IFE4qhjY5LQU6016PK8oLDUCRnpVyQU8zS7aW4IrrJh+06V
nQ9UUkGXs6s8XlflI3tIThXbrJkozZ3ysBMVQP5pMABFk2NSlbi0tzryhGlh
XlUQgtW5L7C+mgU095E9eiKhkpJabxDZsB4B0cCmutey18GfSKJLtBaD1hlR
3396GIsvbr0KMhLEKGP01/jA2xDlb+7dCKrXy+dE+ZxlOv18va6EBqr0NBpe
LqltptXdQ54WLoDUAa6jvMJKhYrSx20MBPCMJF9DhlEbUibKgJEVcDchmM8l
e2eH1ccv9iUhkXf3LUwus3Cb5DuHsI4RwKwKGxE8JNerkLeC3T2chMnDPd3D
QL3D5RJIdPElBbnJcdX5nGU/0nWQs68bCDBilIEioeQ/46J0NZimmg4u72Vu
YX/hkMKmk2IlzgHjcmQElIN0S2yAL3Z5jwiRKOTSqrMrtU4MBzmSMYFQp8DN
O9Vdd6pyaKYI2gXNPb1VlhP+v8kE2e6PJeXDYz9WVp1qrvsRJuVoTPFDHNqH
U5pg71DIaVkykeEHpFB2s+kEjGKaltMofMNOggIv9jARxnaS+LSLHM/aCT0Y
UYDBK2gZP9dKGZM6v4K1pVt/ORz/P9n4b7vjF59+HP/+xy0J5OXUHNI3BTzA
z1H6n/jwlYRAcIO4u0d/2R3v/7796NH/O9nd/jv871/2xi9+h4cvfv/D9vYf
XPeYB+RHl17yP/HBK6xkmi3HolfQSjk/pivcggngoqdPnjx+4urp8YmfdvXc
X7/DKYr6+xsn3ndqd4UcLDs5eHtOgIcuiUMxFXYS/DiZklpuV4dFaJyo3PEf
ONQD6/cK3ukFmUEbymnl2ljBhSZ9izH8xfSYLA6+NpgKr/udiIIJ9MfQNa5q
2ufhjtnj7V2NwPvgjjvdEcBym8cvnj/lNggY0MYNlenlY3YKr8xtjtasBj3F
OAPwrMIqIuMZ0BH0GoarxWyuskDX7GWcbu1N9if7T3Yne1vbgk3oPDQAfQth
6tWWIREsr41OHBSe2oScJkLmWH/B+jXOp0IkgOiclTnigNOsvlqpGGJc3qXG
VqvYIIGThWNcJBIBwfU1sWYJx+FggkXm1UZKoP6VYr3px/gtx4eRC4cW1eaY
f3FP5uxmlGorhDx0Y7+JfAqy0cn2UKdESnYSouIfsJ0p7SetxkLkfKq7K+Tx
zSqlub/CuKFQt3m8dS8s15lQK0jIU20aJFYR6HEy28QZuQiD9wIjqJB7u+4E
RViRTfP19678DYIv8b2RwMDTfp+t5xhrwU+oo8BI5YHVQ2niqKMNzma819SA
oplj9kuYJOWRvn7Fnj/Bwj4By4WT6vOjS5mOsOMjy/e0rFp2OZprVuMQM+x2
IPDTMbRryGxXUzl4OfhWwn17FV/BiAx21+L2bkW+psQ9iPgsvGxUIiUEwzR+
3+iEm+GJ2WWkuem0WKSKs1HiaMgYx4XKxK0QFYEhqF3N15R7nNqJODxU/ykN
ScF9Ub3uMN3qb72Su/+XGbifGdiYWYViNh+RliekVeGfhEZ30r+k+3/wT36H
/XQ/ZU60qgbQT/pob3cyeXawPZIATn74fDJ5erD96o6ZPFrlxSzMgX7hCDCc
/c2jdc9Ix92fTA4OttN44GeTyePHOPAdZY6he1flWH7L2O4XjM7xsyF21maW
fLtjBPqoyhd+ffxzSVWR+e8iz3P7UcO1qBYJTCA0/BEJhz6g1rQd4fcY4Wzk
uhtj9OyrpPPAYmtphx4nnQ76UbrS8kDH5sn50flJNL488jNwj+I57D1Nev1s
nMb+wR1QJJttNTUQqQCSCPvee0OnB/s8+MKireXhy5SOngOj/yVtptf5IoeH
3+tH/ARjoO+GBhuN4iYHpsfPe5MLj++8Cwd0FTbEb+N/GATf2M2BO7J/5x1J
m9sxxuKHidIN2L7rWt32N9890+t1+5D9vme70zv2mxGcpUvjkCg3o/g555BK
k2ToOaDVEngi0lcDQRrO9ITZpO5toscJqM33GGVf8m8sPRRmh+o0tw/6zdN0
/5WBjhtePtA3PsnT4zsxJenfxpiOOOwg/JrfBQdAwC9WV2MMxVw5LBs91dRd
/Yc/poB88xKVbJu2E9UqD3g9poISNPn7WgLTvchK1hff05QTDQHW8h/BQsKk
h/6TA5AmsP+7QMptHcP/yTfaCj7acx/51W3+yLWSLGKDa978vWsl+cXu3ole
B4Ottu5AVNF/mKlsM6Spi0cAMnsi2Cb6beQcU82i4wexPqQ/4/lgqu7BF/9i
viIDbzCHE4a3b/xmvLnJdZ6Ruq/3olliue3e45CbGV79p/K+NuAVzQ95QWRP
bJnd09UXHg8gbIX1dz/QF+4LBCbble4H+iLCNPiB7kTvA3nRTVM3sIfxCGP3
JSas0x3tjSAv/ADpU/iAdzrtf0AvouZp+gw+CGfQ+cBeuI+e4xqu8jT+T9dw
lXf6T9MXd0L8aklnHphmFnc2M0eEuhtYiMPfQTa6C43Tl1Sp+cHD/d+sjf8/
ydp4Dy86m1eZo8x/AfkGH4m4h+xn+Kn8GT75pOurX/rc1eH9EjALiqSfqO+X
rJwU5EQNXBpQ3+ZO9vm/kjb7noWbO17oLDxS1jt+ghvwR2slAvfvoVUQwXmf
VDLHb1/S7564Pooa8jOuKvX999btRTVbi3i1kVZ2m5Oc9Yo3c+ANbINIAfRz
pTmpplVzW8x635BMtjOQwekhnZ99PD3/dFICK13Brv7DXTfL2Rf6amNXoYX9
hcqXO3vFOI2qzMeb+h5o92Ux3ziF+7obaIfddT7TWcetUlsMhpKPZ0WNyrCb
fCz+7eNZjmaavCQKuffivpvQ3KoPqhfW7Jnehc4jvgzuoV2H3rP/qQvhOg5X
4o4b0W3Pd0IExsGX916LoSkMQu8dhJHRTyj2Mq45Q03YfVsTouOhlld1tVqm
vyPt3PzaksW5Fs26afPFS6fIwLf1Kvr+JY37/7X3pcttW+mC//EUKPXMWOpL
UiS4u29SRVGSI8eWHcuOk86kXSAJSrBJgk2QkhXHU/MaUzVPN08y33rOwUKJ
6iR9+96yqjuWAJz9O9++2OwU8hzIwc+eV3ys4+jo8YT7B4Ts8BcV55vHvv2d
gKFCh+I8gE4p1/YqRu1puqGSFSA/FIi189UUo7PueL8AJma1KZb3dveH3OSA
Tnnlo/uWI+SHhtoiG5Cfi/mRNvjQJc9Bto3OL9NGHppmyCCUTDjThp/ZkUhy
ulMJSgXNLPx9Qi0nacC/dkqlfQZos3995fqMHGZNEof+1iKKOJE/sMLil4SO
/7kSOqo5gUHP+VEtSbh+R18gNDdQU+JYCkq+x7cG8IM2CXWuir/QgN9Kk6CN
Qp2rrC82oLc6RNBGoa5Un2uFzRt6zE2Cdt9tkFOSagN5jE2CDi66qHzLrCEa
i1YHR+iQaqeod3MaTEaX+EobNEnez+hPcovWt9Qi6LRYmHFY8bJz04o5laDT
pnNwsUzxHOitTgkPLq+Hze0rvKXn1ARuKMKGKxIXYYPeytFxg7xInG2Ab1MV
/LlBiVDrNIC38DwzgitfFadEbxWYuEFW2V7Ypht8mRmhoGvPNXCAiRvkJZ9s
A/PWNigwiLkR9C20kBG2MzcyCDIdUbrnV9yDcDUMhYOgl3ZOro8TuXVcqMcu
24KNVRiRLX3ApOkr4AvtI8bbSrScNwan8zsknltafYX+BTm6cdfXRSqT6Tw3
sHRfIFZ3tignb1nj+le8a+4zdjKpZj8jMkA+MfSgekZWfHdHmZ2yD4qfSMfb
OsgQhy07xy5qd3RB9C/v+HYnUNgODVA4Y3CCyFTPpvgGN/opHE32RMq/2+1A
qG32QAqPlGEgHvmxVC8/9PdwL+gXqmKOX7DXheEpnKmWKryKJ+TsT1mDMm4G
uYU7OyphGeTE/JeSGTab/4ayO9OLbGqMzzCQhHra1Hn5tO7rVTj+wK4qNwtO
2yEez2vKT+SRIw+W8KzkUuuZZC+mlCNnLeIsWzSfKrntrq4xGZ7mxVLBe60R
ONm6Z+qhjKG5TsGoGxzJ02hUzEWyknpCWPo5E7qaqkf9o1TzKFElrs3CKd8R
TUxtI3Yqs7l4L+i3rVuNvNC27R5wL+TXxlWaydG+sBlcQ1MSWb+KZpQc4iXm
SI2wfCcFTVLgUGqSSuLDK+QZF+LPRh7PmRywcmgS2eip3z2G4Psm65uJr7Mp
9CVHpZ64kxXHY+iIOQJ9Q3kJOXxRsmjH641sDC38Ok4weVLqXWLm7AVHwph8
xqvocjOTkk9nknyl2FHIXeEqPAmKc9MNafAynOxkg3l7qbLIaJXcpOjBSPtE
zoQyqqeO9hiJB0C/osyztEcJZZKTes7irBg6IeycSJoLbcusbFbhFVBn9q0a
LARkKOwwTe49ez+bsYZTxHDZ0Gl0E9kE0DbJ8EK3hW8PBXZQbT12D8N4Cbyr
N7bEAqt511rJV2J3NUkdKd2jS1PaLocU0nUuGeFys/Zw/NTeEI7+pb0iF+XX
VwaIkhHH+pkMzmjKjPm6GqjDs8iWxvIkFZrGKx7SOFL7UMujS/YcCnSfL20e
Yc04JR94mCR3TIXiw8tVxFm3fD8bLK8vUlu8OFnM0J1vFC4w/syj67CCRa4I
SrnMX2qSxHE24DGliTeRd87UdV/sI+PzqpUaMjfYlJ5c5fKfewgqtNZM+9Et
ORi6GOS2ljsMF+mxT2LmczpQBRYuWbPC6seeM2eKOJhq6Jgzs+zAue11hvJ4
qDGRC8TJWhKZA0PwVb5wmw0qw/fU28KzDzJTLplkdo0jrCXPtWxCLkoHO5j9
hFCOuB+Te62MkzlNm7jSyRCSGlzjyy2XtJ72jokSMF54Jq1K4TZhHEEkBf5O
sKxMCdAgvHg2clHApWIzVSAYk/ZSiav2KIlvKub+eddxdKP3L7MVGuuvJXkR
wgxxlPotiB+8y1kyoqPaLGLyTZ354XiVYPKYcLGZhhROpeT1mdLorYRVqfg2
4vrElPa2BB8RA3rBS7YKbcNhGWnCIV4a2EnILF6wvpyTaSpDg6Qjz83MwhvN
CKh0C4P4kbCZokhY10sxm8uIcN103GolO1rugFPGrXC/2L1dcMo9k+GgB9O/
UyAT9hnd32PKhDGNJPyPGLol7R56ApfAhN4gXYtTliyX+oEIvlv0IBXka/H4
lPM66VYQHZLC76nQq8zeMEwcoTPOBboTbAUKVS9sAwpEdLYbk+Qlgp0gew+W
cvYpQsSs2wk5N7kzkGNYcBl5Ck3jgqOG7zUxk5qX2FQ6irO1MNndznHbL6H/
tPRXnOzIyUqAwKDb8OlPnAxp26qRnafDTv3AlKY2ZRIku4pExNM4TiLZfaKU
lGYf/S88ZA8XXDEFG+yZdEp7B4+5MDG0O3y/jjUxjLjFO2l1tDyr+52nMbGH
FEdKJdbiaCY5OISaa3qt2a0NaBQ3dlyixLrCEzFae0KcFJKJc5XsGfFC0pk4
IE6NMbR8TWWdZJ65hEAUhejhCXCQiYmmVT5OB11Fc9hFDJFONmvy08+wLwfc
fRqVSFoeVc5AbprDoKUOn0VSVTc/ooOjNKY0XoQTwBlrdhrDwItbFpyYnSbK
y0sdRxUPy04rNkm4eCtX2cDsP3BCukIMmIc1S+LJkO7yglOyZUthcbYi2meJ
pcJQmc1i7c2Sy3iBSz9z6mfIxksVZKqF0VxNqkuitGsbJ+Ssc6xxdaXJKdJk
sxpna2JLJXqZR+mM+TuZsOTw1O9pmU4AEh+yhewD5tOTFbzA0wuvMTyBoz7x
7LSEr15wkzbWWZMNCXavEWcDN8mMKsJD0O1IPRtgqGDHqB+wWDiTAJJkFV9i
imbML8xS4Hq1iTR7LdM5cUGXcFfB9cmKd03CejzeVlwGf0750WiIG84TRHLA
PIo0fnZ1Cb8KNXHTLRDGKeAaRHWAmKUYbgG3q+p6bFG5qZybq8Vj5HjY0mIV
JCdM2pRpani5Gkm2DMqA4toxFMiJRqcYsApyakulHAwBJoDTc65UkUBnQm8Y
x2OOFreotue9dOr9mrLXedlL8k1jVgxN0S0IEcPyvdznDtxiJlWbF8VJ3+x0
xdjibOERA6sYg4Eww7blqhYTCqHMnTqUZxaQRnCxQ8KMUt2Il6xf2qXGLgPi
cb0nQcr5sRFIZWzFVuNwSaBNtw6lf5bQuCYSHwfmpcFs3NkKe+Gai9CU7f4o
8oSoG8hF7rGsPvi29XhKbex6JM+Jpr6inRMeMd9BuID2gArgEPeB02GYbXGl
KqrFmQnz25Nv9w4qku3ByzOhhVkakVvHyYhWjF88LhS0SpYYrReZNPlSUQfN
I3DpBedx3pziZiLN54qjEhHPM6SS1yg/w7hMovc5cxNu+oFN1CdggSVbQ3Ic
kGjP17kF4r16rkN6r6JLzBuDx5P77gGbUPEKu4YQvwwJH7LKwS0ERFHh82gS
UwBhzTPMYnb9Ltu1h72T2Re9GA+cIuJcvYCjhDNrYIDSL+EQpF4vZQpfAUyO
OSssRj9SzRzg7DykHFzF0b/awK1CyrrCpDaEzXCZM+RYVyQwqqxnqc4cgG0O
+wrbs6BqXwldojK4kh3kUYjK2vIGHuaKpts6B65pRcwRlnlPSAi1zfTe4rI1
vXQWu7DrFhYXNfpKhio9SI7Gjjk1jGQXJnYGuEWsGSqc+ZZGgk7NPSeFmQId
zUgJmOcNUq7oficZqvh7GUomO4ekBokzcNybJack5WukEJIR3zB91x5smabO
zZJDL0PLSNiy9VJhIGho5H2mdmvCl6L/GSP3sVxzqXtmRdamcoQfXqLubi3U
nOaAXwie1WTWss2jW89aCwxnz5KSSRfObDpZY3AzzMaaLQpTT+ZFCnnHBFDJ
3TQd3yTxRF34Kp5cRugkNN8sTDYsjel1EJ0w3jQGrGuQUgpT1MyIiOe9Ohm+
eP785Pz45JhXYyLSzdyECMrGVYw4JMhrRgrWSzfnZojRAMyUUla2nJyWrYEB
pNpTyo2FJSzJ5XTB5QBhmRuRyKU4GEPEU4KIwWzNGaaRYrnQSR/4OnEGEVPp
/cTObv/p25MDGx4Nb70LLXSBLy8Osvmn04qrLbKlJ/nUKD05z9RTeY/2i6/f
c9WTUSy8Wmo8zM/C6RO5xlA2jJ+sXHpQJZBCsTUeZZ+/zQCGo/pwbE5qbXJK
UBmbkeeUwoZhU8qYZN5yxnunmdasxHx6C7FtYZi85ySc17ZuAlmtnGkztrF9
jq8GwSxwpYhqWYQj7I0hixkRUpE48kSoWXQuAXCCmQwlfuYamVtUMk1DMsTx
RqpAGSE0yxpr9Uw1L2oVHKf0POEy2CFnTyQJnz/IHqsYx4yeYB9ExWTNaUIQ
uvf4Ay3Ciu2QX5LqCcT5S+6Dii/QgM9M2RaiqB7JqcQBmERnXLovdbP1JmLH
yp59RKVPKf35/t4kucGMF1E4t1/tHTiYlfG9iwk0OymqHFAZP3Lru7jrKjs0
nZ2ZLhLDxa1XMg9Tx0TRVqiE0tRJIsKOtwsRoofpFiwKrwKFwE4EmwBI1qKa
//rZxUHF8wwJgi3czO1pGQYyuqZSmgoagCk0/T6likKDFoOrsxit7VKylNhS
f5MKgdgwL3RuKosbizIy5JIMu9M4jbITNCpBTc9okj77/jkuHLrB/E+V8tZM
fM209CC08I8SZsl9iaZY2b615oHivoy0SUVVymVtNEzj6/2SkuAHtG9Y7YKs
Ss6sqEiCpKCgnEZsRofru1nIlbVFyfHqcSYkrsciUh1g1nytdcoJspktiP2n
lblpLOno8GjidY5mZTK6cZ4+TXmlxWfGyQrl94QUzp5Sw5LJ7mdrzx+oDkY7
gr/mwHqj/d1yxkY69IgTRR+wpdgF/MlmZSQQzLGfaKaPay3Pg3wmbD/lSAd4
j1ZOPchcRXpAqLR4q21GCa1UlpcSK26dy80U9jJeRGuXqSvsX+wwYh7f4mxB
7WzVNwT0aRRSvkDS6pwNzgcFKCO9tlNJPMMs+Ozdsu/oXA5sznyKk0LmWPLU
FDIxM8TPlzAW7ojo+BIZzEkmmSaG31bVTmGUCsAprqCGzDK/NWn26PlT53lF
KDLX6cB0spibljZA4rtuPYt70CFg5taq3J7HnewDmBuG3hGruTJT5GJsOFJJ
V4QLAS+QMtiB0O2deZ8+0XreDa9C1EID/KWYxrJY9iDHWZJ0wToIzMdqKhdI
zsHM1qr0QvoPWymY02RnSpMAz5FmVWaaj0pu7V4WbAQq9syOZ9J+abpE1fQJ
S04OXw7oZcHgds8r64OFODHBYsJOpAtaCtpqA0nwyG4yUEpKQGk8Tlw7g62H
Jk4DK7tjUoSd5Xi8abl3AKSapWyP1uAf05Etxdt4b8i5SuE6gpw3mwG3Q3uw
d5HZcz0Q2EW5THMxOzlmAJ27poJisdXCkTOJb6NbGYf//p6MJ5QNcj894EG0
O6ebW1L4ZHrCJGWUbC3M3vt8y4pJlvjUeSpdmYtuu8uaN9aFARclfbmlPAj3
hCu4Y4MUiQiBM5asPKFM648NnxEv0M1pMzKl6taZzPDmgnJtRddEYeDf06/D
1FQDXSQUYs+FyjJV2Cd4exeXG6yC4woXEc02NLNFLJImldxVQ3Ut4XlnasJp
CpxpUurcSshHaYQ80r6k2paTOmQL6kFhAmRvEfVcIre0EdRNQkvbI7eB/jQx
HVveDVph9Vpxq6X8g1MshStmrcnBxObrFSoGwhCreFG65nuDtavy3arsapPk
mpIWeDQMc1mQS82FMffDZvgsDlsjYXayCqdrv1rvkFjEmzczpvIbN6eiqYQj
Nah45TCr0macdpY4IuJOtUbURPK3FRrx/qdOYmy2HaX2KlLWaVobZxzc1hUB
L1q8N3PSq5v6VGY66KNkd+4x5303zxz0Zl9lN/sxRn2hOz3as7dh1APTI5zF
Y3KKd+CWjb2Nuv3KYjBAYI8pylHSD+IneST72D87uXgCb8rRLHXx6dML4JzP
jqEV3N/1MMFCQxX/3bsMyL5753n/YzFKl3/J7wv63ZRvC8LCG+N3c8KKDPq4
sFEU74O9uKC5ZTuCdueP3I+dF85OUeVLv4jmsc2O4uuXhXVL2NLOK+9uXfk8
XP7hK/5G0xC9OHm+7dDdb7YcNode3QH4Zrm9XQ6aahhyNs5/3g48x1iw8h2g
V/nKKCZbVMl+aGTZDqggaPf/JWDf7MP3HJV0DyzIV6YcCJ1UyT5ojNMuO9HZ
jhWpxMsff/9ZC4WuXeXLP5NU2pm65uTAhdRPTKNlSEHiALO7EHSCbeuFKcyi
cPGHr/gYoxEx3/p6swXvmSVzyCLSfwphdFwAy1asgYz5FTe3rViz71JZjn8K
xKtz6HZSd1l0/ixbq4nB3AnIW/+hCF/rVN151qlRm9oidRwNUbZ8N6J0px1o
b90BzMkNAPCCSdEfe9dt2Wkxqm6HA5VERPVHzq2meTkTwDGzO23Hdt7n9wUI
8mqgcIWBSj0scnre/klegoK25y9e+1mBa+04Gtb8MtdhjN4g+kBCC7sA4uwP
7kS5yEU+w4jh8iOw2qNfHOkra+0GQcZUNkcUosezBRtzfHLheP51kNMbCoku
3w/zrsh0cyD1zusyaup/FrdlvKa3ICDlJlBTTnSVqjSXLdWEgO+8WMof84ev
8EwDC9+k92JZJwjRDUEsW64EsP8LQ+zxsxeDLTzE0NSeJu2uWFLJcnocX8YY
rvcsWq/FQjVAjzBAjqVsBYXl77wL/yS28S39sp1+kNuvnC98vNosFk5BF3Hi
KENUnFNg5+X+MxgImP+dEgKuV5h+XPLDlrtVWvgPXrGp4bpFPjQlXkVvpn6b
0JRcE2YzGz6wff02wcO/HoCfSCaJLRtg00qkFtAr4oaHfNM0vtxIGkbyvsAy
efduiJPA4l9vR3jNxCy94kwa2y+EpNogJwlOKwUAAn3M3X2jetZab5D10eWb
Ir39x+0J85KqAriQ8KOsOW7tmuMotojfyhXnmKXPnkcmTamQrbZio1Ulv4Ab
4ZQFf+xdaIHm1+FlbhK88HSvaKjjasFSxiNye03ZYJ7aSCp40GhWJ0iZ/JMN
VntB7hLjT0ESOufYhk+fTgbn1UYTe6RSjPiHCcY24U3QkCrGsD8o0LlcN+Ta
m67FLkYsOHI+5GuHdc9I1Z2bnRT5GFwMz844GVi2Uhm74dF8aA3iZ0/+kBRH
xyHoyxXyCGIVum9MKptEGvVba0aCQTK6fCyNaSUIKlpaqOdsa6GnRe9/9Gsa
ST0x5wXNiz1xn1w0alRZGNimj/6v+ePHKwJPs9CMdVnblBnjVx9OEvcl8yNF
Y42F/FeBbwo/ffPqfEfARr3vZrW4F6SzVjGqOLsZcU0uhfDjk+9p4At54Vig
qUwrfMFhUdlivHs1ZK21IF2TCl/B2qUXLPtr8VIxbUh+U14ZXER/Q0e4Qn5X
tAFY3Wiho/zu/sq1POhdXqt+R7/bjgmxAAqnx66bkWZ2O1PHKtk+8bSgbGhY
mxTtIqXHJXBNgqxTQA1r5RmXcP90eHrhp8sQHQ/NrdBqvNbjgv0Ds74IBtPT
EeEaaD+otuEZFZDydYPElFhyRtjy6LhTD+BDwvHutpfsh3GU0r17ji7OUkvx
DijXqubODolhEmjJ4CURFPhMEuvQaVy8PP6BTZOcIRX+GonN1TGZKcCX9AJA
D/fCHJwEzcrXtor5q5OL15j/8WRxHa+SBVPS/WHy6uQAA8sBH6BY4VygnxgA
klWEkYHy/mdKJmF347Hv5EA+xFy1/0bJYv9syl1qfkN4dHasxNdcGbTB4Q58
/uwyEG7/11SP+vB6MalJDlkYAxPNPmQIs7cPHOfBa8kMhFWK1Vv5058Et2Ms
HZWG078588eV0EGK6c+UVHUC/qgcn1sXLDSVwSrkQgiPphuuOeuWBGOg5DEI
Xm/I+5qLbtFVlD7jfEFbiTzD+ZKrP4VskIsCR8pin1Tg03gjajnTeE2GHyZW
6ZUkuTHeSRfozGS2AAix2wPnwEm57hzGKb4dvDo/O3/yWCJ4TTuaf8g1oDnp
mlrF0ap/S46PoriBq0oAzY5RWutNz4dv+QXFEPqvT05ER8aabFtUDstlL2eZ
aHx2ysQmHAjHXukpE2aSUkyEnD07ZrI4QJD9B2h3oJdH6OfFbJsUBvMOfTM+
R3loL9Sv9Q8zs4Nuav6h53FyzUPxdDp0EGKj/ti/etRv9aa9Xqc+aTTDVqcZ
PapIg2zWQngQdBqP/aACvxWqw8jXWpkEHwWd4DHFvGp/bipH+iToNKW/7eVN
DnEDWVjUqQddaPbTXcU27nxJKw8aOKyLR33MYjOgt9sK3mR/DrlE/WZJYQ0b
oDoz+m3n5uRLJXBJLmQMDnBk9zZVUEAdXVWMwJKt1N9tCYc5KKxh3ppLzmbF
MLhLHwqkpLJhLKGcMF7GneZBrIGr8uFC71yTGGM9dujjE0DyXjMMWoXSE/rJ
/X0AUDz2G1va79qHDzdkbzCe8w6+uMjPZ6d5NHExtUZty2p2mges5adPzeJs
mtB5A7i4nTrBn22dBJ9/3rGXDpDEuz7ZdSaN7taOdu4Df4LWY6zNMo/eraPo
XbMWfYz2HtLH5zs+2amPOzrYsY+7e9ihj6tHftip1zutZrPTaAbNVn1cb9Qb
ndEOuKvV6DQ7k047qLdbrXYL/m1N2806PGk2g6jZ2KEL+KxVD3pBGDR6jWln
lO9yly5o1EYvgGmXdbPLQszkqZug3gkbjQb8v9fodaLOLgvh8drTbqvTxn9x
Bzrtbq/TfnRn65+3vv3Z+0zvNKGkEP9Bnmuw0Z2qOmXeFYgY8W4kf3BqFAzD
OPSI4BCeVQSPKkeMqXJR9iyW2AquuRurVyX+YB9SpX6pnRCL0Wj2e0HQbzY6
+8ptvOGYGJkskjV8btG0fAZsmyb9tXeUEbHyFUJiKJmwxQV5nJT/2u3URajy
nQQVumjBZ6S5C/G2+cq1p+zszE8RdzotV8kssn/lWyKelg2io0621ffJ/Xze
qQzZP2kFgXskD1vGfR/9rEep96Iwgc7jzDJrtRqBc+E7oiuZ4fjjtGxLyojH
77Kez97nAyfrr+NvgbzhUQJSFF1QVmVlhQKNzkMBK1XrqHW5MLW73YBTus3h
KNmwYmJ8FS8r/sgMk1AOypkkFKoVpout//GfQ5q5JPFzxSjmiQtJgnB29i9s
PXz5hr3PxVq21t5eXNQkBeMNp2NNNV0B+35T66Ubak/iZnGF22f+29fN+0wZ
MycR516yLt2MxzliWhdf09Yvo9VVuEw1ahvlZ63tdZa85o7L1/L7zFwTecnY
JuqWFECUb0nlXLs0bl2+QDf3Eh5yok6Czjp++8y/idjHxgFwWYhzSwBHYd1w
AonbJYW3cmtJqRS5OjPX6V9p8KvB6wufQmMxKg/1L7Ru0Qpy6JCJDKVEZvGk
eFtrzswfLLz3rPhO+vgM39vuYJN6o9+btuthazrtjOvtXqcx1h46zV4Umg6+
eSsuzNpL0O5hBz0YNGg+QgH67ASJwpszX+oj6fe2B/YF1j6Cdh97aLf6k3E0
HvdG/V533G12R61W1KpPu+NOsz2OenfzTtRzmF6ReRBhhpyHmbU5dCb/fYav
CDqwYT/tNWpNkqsaKL1IBoNwtV5gwC+AsWEbpBvxVbD7GHQNQXTYjovCaF3k
JYDpaNfaPNpvVJM0cbpG818VhYlvJmoLOO4D7jzAhnDajXbQabcCOLGHKXVe
XFi9Dvvm0Zc5ijqwUIsk5irBbGQUnsiRSQ51iVfjTbyW62cZgD16sOc/9gsU
OAt9Anr9UTTtdXvdaBQ2mlEw7k07UXc8ao0a01an0VfYzfTiQKCAXxT16tN2
2OmMG9NRv9sK+v1+2JtOwlG/We/1m/eBXxEMeV2yFS4gZmbigIhAY1Crh1hT
8WfUJuVg8d8oSvijs1vA2t2z+4WNz5Jxd+f5ya5b32mAjIhA8vLk3D/NXnZ/
l5W26thDm/7TwbKmuGQxuwry2B8B7oTDOnCXLNV7PgtrRLwRaj9fMgUn3Oto
aa3H/dEsGX8o0526WS5EQb50Ogtx/iNsnFkVMg2bFQbgV0ebeCY5DjI5SV5o
jiw3ppT9OVPtg4xhKFm5TI/EPS7QNi3syorqQglxHOOdsvMoJlsy1bFR8y8j
VKmCDKzschXO506WJ+qDM0GF/hTIz0HNb3WlXFyENg62NFEk2X6PoyokkU6j
w39SH0hgDn6bivk30yiKw3F7YGhtBS1CaZrL7wStFstVnBpPgsM78SFhW7Or
/Mq4z/5WjXczo/EulummG3RdQrxIiKWS2Xh50GBFfFaehh1inWS5LnRfMBfb
If33Yo3xmRmrxhfjwhfjQrbpF+NCto8vxoX8PL4YF0r7wJ8vxoUvxgVeyBfj
whfjgvvzxbjwxbhgP/5iXPhiXPiD1v3FuPDFuPDFuPDFuOB/MS58MS58MS58
MS58MS7wzxfjwu9rXPgHbAuFkAlO50g1SzQlLP6eUmcKlNma1swESu5j5ru5
1CIyrjViJN0uSjrgenWhPZ9kFUcU3QkS13iTC/jDDhz2zJRScq5IfHklZ/zi
osLJ5QURKINK2ozs1DQwVfKw3CEk/DYeVWegBUOJiuYOomQVFINkWZZDLjuN
8Pg/JKUVw55KRJlwJUs9JMCIToElJsyMZPPRywUwAonZH7tdZgn0/FGaP05b
jIhq0oEc6hCpb57hYtLElxngTKVgsqkdsd5JQPtdTmFgQB3r/3FqE+cMqFCn
Uw0YX3HdS5gvnwLGVjrL1T2DdXGcFG0b5/50shCF9i5oURvGXhSP6ZNpjBV7
sQk/u7pdYt2EtUgrugQTnky1szEGjG4ylpSYIKeiVQlKN/V3AmWeZyqFVmAb
BovJCov/ISYaZChnsYP/EmbLOGO3vN9sST8/3WOc3NG86N9hoHxIF1uMlDt1
cfWIbAy9ZrcDu9psNltN/L2z0+j1cb1eb3T6rWan0YXmHWD1O33Us9cnneZO
VgayMwT1qN6oi6WhC5IndNPqtkHobHWDnTrp9DuNzjiotxrQrAXzmMCMWvAU
ZoSGg92WE+wgVWy3CpgfQE8jrPstvKywa3oq/k4Hc1iSN5tLLesHu/Thq3AM
8vAwXI2SRbwmQ9pD+0BhAfpo1IK9/Ac79zFk3fLjkg926wN+9s4Wkw0iCExq
sVknrCi93zRoZPvo4zKWjDCKr1ogg3cA7oEf7ZL8FNSDRrVRrzbarxu9x+3u
43brrwZnmPqGyLtzHx3poNGt9+r5DjqPgdut1/9aPsFqD25QHQS8vWmM2c8p
PcZeqXmAPm34aF89NDS9WgWUgxV13iHGzst5POMPjhFFsezJEP6JZpiVYewD
dr2WMhMfgSu5LZkq9BJb9X2AyL3Z6XTbcOU60z4gjs64OW03pm1A891RvwWC
2qPiKg5lKOqnqnPhZ3BZXlZBtCgd/GN1nCQrmkCVBu+0o0nYDhtBu9sdB6Mw
6gWAhbrTqNnsdeuNcJf73qiHYdjstqPGaNQetSdRo96bRK1mf1zvtduN8gXc
OjNp4kwaUTuIJoB16g0Agml32o9a9clk2p82W41Rc7LLTMb9UQhkMpx2o/o4
7ML/on4UjSf1eq81afTHObSkOgZX8SM/QadDEHLXqHvIy+0JIHEPnFrYZVzd
Yygj8PeQeNOynNIT8dwsCrQ+2+wOkm8+3ELC79wA+vkvRMMtFe82m90dx+y0
m91mqzPq9po9oeO9HZu2gCoDYe2DCG/cCnZs2g6aQRC1WkTym0zyd2zaOCXO
4MRyBp3+rmst4Q12bWpYCOAO7oeqnfiDuxmEXU58K3eAxHW3DlzW4Jh4fkQK
/HL3DoQveBXUjoMH8RV3MwW7drCVIbi3gzuPaash+LOXeYW/u1ock5/N5qTD
VFzJa2MRLiS/kNQiVE4U8O8a05KQ2hJEW2wotl3KOqLZMARQRCU7NxnhnCR4
XEBDPmQ9TZkfogixUvkMpWlMFMK5TajYWHi5SLB4Eg2Wy6HhOrjGqczambTm
+DI6G1dZIr4urlbXeKsYFYtTt8xU5sD+gTztk0sie7uQRVnX7oyvVk4UsE2i
dNXewkgHPC3WiZiBJN1yqor67MDcBP0saKsklV7qixXSTpBqSW/ETyeTcU82
3YyYEa7/CzgDl+t7ySbZDifWJjmEr0Zh6kzpH1c1+4YhyvJDeYNY2c+ecEOO
3aawk9zV1t3csqMlu7plZ/0dd1cGMhkq3ZV2Wzu6Ru30Ef78Hi7Ydta/yRXb
dvMPu2RLe4uCyzDiro7h5gAc12xUoMr7HXuBFleRQduEydD/iZ7s3ouLnR7G
MILU2hHn0ma7Pt6VEwNZpzNxHDmDYAKcGQh/8O90V07Q8UZlV1NR/wTY8a7c
GY3fgpvZbdJvwNih+gn5w5150m7AHqr1JrqW9pphE51Lu40OLXBndroNU28j
VzzttuDfade4mTZ2ZTYbYb3eao2arX692wvqjTb8pw59jZpBd7ybDguW0xy1
Gv1gNAnGzWgctHph0A+CRjsKR632bno95Jgbo2k3BOEgCtrjBsym1e33623e
m51PB3h0OAvYizb81sTfg6gLElqn+aA9qY+bvVHD7sm40QpG/XAU7tpJACJO
azTqjbtwSo1O2GqO+/020IZ+axzupCyAnxFI+v12tzFttzv90ag7GQPAT/u9
h+0JUCwSQSYoVwCEjAFigkYLlxnsCvbNSXNkdyPshP3JeDIdNXu91iTcFeyB
h2hFragR9aJeJ4Dt6I2DyWjcrQMh2fl0Ws2w32jC9Z1E/WazOYo6uzlm3C8l
3f3FdlfNz9ayqm7Zizy2No7Zytuxs9CrKmDRKnIDjuO2snX8yRHwK8bUuOfv
U13MaYyFOjbsuZ1iteuztVY3ToVJLU1V7e8n4lknVrtQi0lcvD3QRNW+eBSI
k+dDXbkBwINW+35n7oBM3rq0KtKiNSe7HCcbNM1bxvFub2+zi7+bv/e9jtDW
ATp7Pvf6QT/cg/uzmW2RA8MOd/FnRmfm3XiwnV2eHZ/n1bs4Wb9LUnJ7zns4
QQdp/AsDVa4DAJZWu46+PyWNkFEpaeTvvBLzQxzlxTeDLbreO39AEjDUkMnc
w9rDKnNk8aHtlYwqfXxo+zw93dWNzd9NsbRraMFDAQsEnmSzGkdpbZWOHwhU
vXq9/wfD1G8EKstOMJ/w0EPN8xUPBkrhQ5TBeGj7PEPynwSoOPt8bRaPHghR
QRMgqvmvjKb+QZbM/OR5s4e2z/JyrV35SvPzjzF19LMjRP1m/s9E4pDm1XUv
lboYqGejyuqsJ3V1r/i4KurTTIi+UcGSX+5mvdyIV8730YrzwXMVYiziEHJG
cha93fHVZy2ezzEl9jrCAguo76/JHNDZJx5v0OXG9Iu1G9C1M9lcXjluVzZ7
Mud+xqTV4na1DFOjo5zFH6K8K5hxQV1frahX8XJ6BfNBjcdLmIUUFDezMGUk
UvlUk/FzhQvDLws7O0EeFuszJAsOuFhMXMew8VU0/oDfz0V/jVueFifhOwWn
o5UpnWwUpVp6hFdb8/ZerzYpas543lLgaU89Ad049TRaIduc8hDXvM5U2W8z
9Qx/rmpuRmdUaFDqLwPSev9h0vv2WbX31XezXy6Vd7W13XwmlqIddF5TIU50
5LaqQFOtEh/vlej8tDnXufXJRrIXv3lrXlC1Y34O/O9f3zeGH94FN6dXV7dn
P56fdH608+OSTvRpKZfuVEHy87hS2HTzTHwp9nDPVlgmwm2Qa6on5ZpFcti+
iJh/Ak52BntZwZKG5KG3l0MH5i/+5ees7zldb7WqvSbbBpkiLjZaPHHLAWNV
zbMq7d2r950XmW3WXX5a3OXO5Vdf5Y+6/KQzB+14FWvrmL/Bn3xYiIWxHIj5
8lqKP7oCyJ668w2WS/80SUoiCTLduhZ5e95uSMOeFKs9YcdR/4TBN3fq6Jae
O+W94Lh5cXXy4mpwEV6+fRImww/xm/etq8v66+WTl1cfjgang6P5yzffvn43
Grx98s0ZvXn//u9PvjsZPpmubuHf06OjD0dH12/+OvhufAx/n1zOn//y7P3J
Efz+bfL2/M2rN2+HzxqXl+1x9ft3F68764+vnkyGze/fv3kZtn54P/uh+m37
u+WT5bevhsN3vafv316uf/zuZfjd7c2Ls782q/On3543f+hPn32EaS7S+VFY
fX69/ObVLy9uqj/eLKqd7uj66ez9Brbnl8HL41Yj7bwbrLvno4vvm3+/eTr7
eLb5+5PpTdRqROlXmfti9+9ZvNh8VDfLvbxp4sGnsRmlt0Ab5v7TvYLXw97T
t6/zpxDdPq1HPwziF/HTb79vfBc/Gz69Gj0Z499nb345a5zHT/s1+Gg5bj6n
j569Oa1Pnnz/C/z/9iy+icO3p/Wz98nH8/dvPp7/Mq6/OP6xBZ3Mom+g03m7
MXpyk57NTxt/HZ51zuKz9Gxx3vgxxt+h48v3N63F6fOrZ8unbzYvf7h+/vKX
bxtPnr+/un369+D67Q+XjVaj88O36S833znbx6vKxJf4p1jggK92turAUZjG
YyqCLs9LbK4nw+OLga/FSN++VlaAg0yL/vZcTiH/oZo3AW/eas/MTMxq6Ijl
RM/CKW442PA6TmOkjmrhJLIktIrcuC5gVg1S43udxr7f6O3L5bp6NGjUG0Hn
0R3ZT/xD9eeHhV1F4QSLNwj3+unz3Q2j+XKNhX6KHYhTGUwgqB+1OvWgNegc
1fvd3vFJfdDqo+tIPag36616u96pd+s9nqIT9S3t+0f9o+C0fdLqotPbaQf6
G/YGrUa7e9Tudpqnw1b76KTbVm63P2g3KQVFu9HtdnrDoDE4PT3qtdqDdmdw
1G53T6B5v6vM7aAOvG632W8Ereag2x+2ur12JziG5p1GcALC/rATBI2OivyD
o6DZ7Pa6j+7YFbs7CCwhh4v63s/+ge/GgW+vAYTVbE6OGAgYaHI2b4pkcu3i
FNXEXNlEu3UCAgrNyRLNbNcMQ2CB3+OK8ehsLhyfU4nD1klhhlSN2ZP4kpyo
MNWEMxz2PI2iiQAqf6XdagxWjRYbAm+KxTQN+2v1mbyyvKnfhHA55Vjw3nL8
yibVC0qVUYjqFJrWvAtxuI+cExpjQB3zeDJhE2FiKotkt5S9HngMKdWGxwab
Ec2m/jhc0OzSNJoj4cZZbBZr5GyIAy7DGBMXJEZcBmkf+jxAVWONNbrnyVp8
FOBOcWImLL/Cxzcl9jjkedgKLE4VI0I/VEUKcUU92P9JvQJP41UqIQUWfeFE
HLzlCg7saID77Briaz5V1gHYSVbrELmUCgV+2JosTmyjKcqiPZgNkCO4uYrH
V8qhX0lIJunV4Uz2dDppZN0IhPuniDsphc3OF4gnncI96P6UZvyHtIdP5jf6
Md4Tp+g8cNxoDlqd5smjSuYrx+PgtA3o7fS0MySPg6E26jR7J4NCKyeizX2O
LgOtip97qB4BuccSd5Z5VucQ5YaGQ2deUtamzBp9nzcUmYH8C/ypNjqV0hew
5pP28LTfPj0OWsCKdRutVqfbCo6P273jVvN4cNIob+f73d5Ju316Ehz1W0G/
MejDf+q94PR0CCtqD+pHjwoNf848+ez89dk31OK41zwG7N0CbE6Eb4DH0Bn0
4FB6+UNs9OuqNasDFbrv9PDzetDonw5OlRzQo3a9Rf92Ttv0b7fepH9bPVhK
sxmcNGEm9GSgVKQBa6R0SL0ASFsvqN+9i9LspHHfprV7LaCQ/frwqN7sqXGx
0+2eDjpAf5vdLgzRHR4NWyfwYf9k2O81OkcnzeB00Oq2us3mUf20r82GQff0
aHByfHQ07Pc7zaP+8Kh9MhzWm8PmSbN91BycDutH3SP4tdVvH5/oJIf1fr/b
CIKTQa/TPa13j3rH7ZMj8TYyfCvGYiG/bwSuMq8KRD58xatwxclZ4tB2kPe4
SjfxmnQIXJULkXbJj+mAMQje2hB9hHp5/yg5Wj7KEgP4VA87wH8ps1TQ6HX7
7V67pwm4iq2yKbnK820VW+V9HsrSaxVbuX1uy6a1Q6tC8qwyP4u7c2V99vyf
Dzw/a2DN5Lcxh1lGHXJUoeIzJSwlDplASOj1OrpFlVwK9JE5K8kJgx28cM2o
PJj0xgbWknhy4gnChczAZVTKYsvv/PkSXf27R1df3dwXXY1dlIRVy8RYGfIg
N0D8sbSzwMBIoMRupgAmsw+0H1w9itrjab89nQStaTgS2rGj5j2YTNq9Sas5
CSOgLRFc3WhX4+aISFAoJGg6HSMJ2rFtWB/dbxu4V5XvbdXe3SlaCV+9JmEa
wXR9k5RJTWnF3xteNPaIxYXfgj0WfLDItRQUBQhdGUFc+r2i/EHSmxUvnGxE
xElbH77iIC+OXzymdHzUL403Xm8o49/I6rlZLU0UDz5RcYLF/p+yapz/bAqc
n3Pcgr832EzixLeKKz4m1HdFN8nl2XDg/j8ezfubH4M3sBJ5Nv/49Nv67K+v
P7wJ3syT4PXtWTqMB7l2T5c//vCdbXN80nj+/sfG+fFZ68Xr7751v51+l3zl
6Mj2ngDDcoV1b/+xCT5NLy7WT9++aZ+ez57+/fxDL342KLaRI7hnckf9PSG5
P5vrweTiOEJo9F9Jde/I//QnfF7l559JQTYEuSgm/PlylYzCUTzDavesCxuH
M7Q+aQ4HKpwJ1GEeL6SAqW3BFHNsOkumHg6VajQ9BQ+sw5m/TFLWbIkXzzJZ
6hCakGIhxcenHn0TR5I+wjGHSWPOQ0EKZgxqQSdxEstXUeSkKEML8cR8wIVO
gU9ABgHleJIVzZjiP5V6QG0wR1OK1ZDRLAZXkXJToYy9qPKbUJPxIBcDnAmG
DKzCKeZQm6GFMK14+p60e4nUFb/F0IklPKv403CMGxjri5tk9YGWi9qMxE8W
FS/CHdQJI7eMeQyu4wngBx4GENFslKK7tQQ0zMNbQDfXkWe/RNsi2wcniJkY
ZtNs8gzc4FROMqTq76E3T0bomLS8ShaRST2RpkBHnTLLpFFK7SEAwpvNaAYw
qEeFbBv1/65oE5Y4mzxK3aO3+15z1B3myLw1p/8jdDtPKP8bZjeB3YaBuGA1
IMkJcpcxKZ4m4a0oaPSTKn9i50iOA3KkGF0VprfVdVKN5+ElAjgmXMWrgEoi
q2CYRONwgrPErv++CSfbeseUrQI2sAW0SfE8JtJxo5wnjUToXKr6on6LLxUj
/nBMvg8TNCEzKWrU6+6wNN5EB8TATGiIefxoY2H7l5picHGdzK4BeLxFuEhg
iGTNVtqI1NIMzhWY4zWcI/K04QKmN+PsegmmI0PzaTTxRjHm8juTjN6k4uEC
8skGM02KORru5ew2jdFEao8TX8RUPJw9BSes3R5HKxQEKLkt6a8Ibs5e+uFk
ssKsGzAHj/KSJ2s/A9BwJxasgjZZl9Z4f+h0bukWEPWUrzzKQQIIDO/taANw
VfGvY0xLQ1Fhs3jxAZ4czTbROkF3TXMFa75q7DycA/EBaDvGo5oB5seYofgX
vJl21lgB2vvVfxklS/En/FWCu5C/fcmI5VdLPvApv5c663SoL5MV3Q/n0YX4
u8jPr96vVefn36qFn5JHVX/XD+UNrKRR90cCdL8SGGZ+6H3h51e69rlH5s7u
N+p/awQHzkoKg1Tq7kAPGMS9IzRO+0AHwbk7g+AQ7jAPGCR/GWmg7gHVr1cV
7xgFvaXwck4CFQSio3i1vgJMRaQXAemGLsRcZFLPEiVDNUfSBAA1nN3Av36z
064QqH4wfg2Gfi4J+gzaRu31TvMZrIGb/cDT8QxRNw7J1uGFZPDpZkFa1wJl
ZQQMtwRpKZrEACsZ1xDLK2TZDGO1XPpfgfxW9aO/fap++FtwuB8sDj47b/0t
vIt8gBL76yzLYQmOfoSy+4A4bfel901yg3ixYiZLSJKoHGb63ESKUAWHVVjO
0CWuor9vYiT101kSYul2b5kA4oGdiMY8X8TUqohg9zakE9chnAZONLabkqzY
XebiLeIiHMbTcuhL2NmP8dzwZ4DRADVfAO/z6ZMeJZ/k58+1zLbCdqL8Dis9
pQVmeb3H7ibft8e6xYaUc6Qe/GKhdxSzlxVyhM7Ov7SNiL9T2ol4cyu68xtB
rwodMocLf/YD90+Qop0/s7jxLmR3z5/eHWjLD/w/Ayr4W7XRpj978meT/2zL
n+02o5/tqMl0VO9nOgr6mY5afV+R5Rb0YzvKzijIzqjFM/LOgbGpkB+WwMD9
3P14vFkJK0rBebdRuHqUenjRnWRzeqAVTQSW5xuzvBhxFB5mtorCyS2lO4tE
KAgzDKRppgkZEb/gFGqYztIkzPIK/KHDoBKvRZyGSw9oTLe/E5DqPRo2SSN9
rXmoyTZqd21yx5apSx9twdKkx0ZeOF1Xx7wHqBKM17JNYkqNcAK8FfnVE3XB
lZLnIHBG0TJaoFHQ2jEB41xTxAn1UEONiPC1JvnYZoG2PUQ/8pXZVWLixccR
uJqYD3YFIg0MaQ55Gt0o9y0I32YaIO186pSioVw4xIMBGpXgzrWN4s7un+eC
nEEr/Pkowv4R9DDY9CpL9/LH6IU5wmjEBbEdOsIjX+o10Z5Df3//A/y3UT+A
K7M8sG/917gQnr8zS68EbbprQnJCmAnh3TOI8Ni9Bg/Afv7vh/9+GwbsMAeF
e50KZ/S3oKV/058t++edOLCHyuJkMUktk/W3RrarZqar7Viw58/j8SrR/rir
RrYr+6fnDWfwK1qvYZOFZhlPW2UEFvAJMDyk4CPngzUleCV6T3oIurSk+vDI
U2EegyC1mSPQabd8TRjmF0mmNQ6DimAanaRYvJZ3yJmpkYyij0uWhYw93M6U
UklyYkgxiWA+WRB2LeTmdD3irkToyUf0BDLQQLvbLCcOPjKJCEHe8gCHAYJJ
o+K+JGZhFeZkzK3Pb5+XzTeZus7MsPwI5VoXznFD//Qn/zzx33D+9TdvgM/w
BnwJNK8DPQXO6NXpsNUIgs+f0T0DmdUxIcjxVYKyl56zwWEeLge+gjGwA+Zx
SZRnsdPACtumUObE4UaRCzmUApQ3z8MzwA0lMMATrvjj1e1yjbl9UaVYhdMm
ZLGCbQU0zkiLx7UcImF45hy94cs3zCOqGabG4qqxytyEiOnWxq8GpOQoWvhB
HSQdbIfxoTXvBRNvQKsqkeK7zNxg4aNVuIoFp2fSYgJjascfwo7BqUbsDWLO
Gta1xqTakYRU5g4aBXQ8EfKCY42abIIw3bRqNuZghQwONRKiEANiv0E6q/mq
Wz4f2CSRJJ44osnQD32XbruX3XZO9A9dAMiOUKWwXDLbIyKT5uQmkLPue3g1
kELQDpKNkFcgJ2M/jEmoWiQevWeFCPrvAL1V6v4RZkUiHHsfkcYPyDUIWFr1
whEU2WwgEIlWhwjPfanKsAlrhOWOuPqlVIQy2X1D3jccMCrORuj7T9dmPooX
htNLI9oF5yNhXjR1r9XtSLSrT/nQx5gFWEZYACDVSGcMXMMHmc51DMyFcIss
S9vZMfKcJZgNjyAqmlQQ9zlaYkV5O9wvLrwh4taKtH+T2JXJKDKhbGYK9BVb
QA86PgRYm4eLzRQPhDhlWDldFgPzgp4W1t+UlG0UjQFXFo/M4/zor6KZSS6O
GVFqvXpQawxe+eJkLXqjs4moxffhwdnxgbCc4hPllJXU85rEKdx3Ho14IcZh
mJwH866cUTeAMt0xAW+ucDpciQZmV3F2HINIEl4XyazkHuZ5hR44/zPuNGkN
iQWLpkApDdwt8kmHgT6hS13o7/GsnnNKnD08FruyK7jmPG3GXs/0d7THofod
YMQ6rlIiI0JhEdbuEEc6t3tv4MITW7dJVz2NFpjl9xI9GNaoWQ8pggVh/sq4
KY6v4uiayQTxAtx1nPJiVaUbc74UdfItm754FqKAL97Ei1tVdpr8v6ivB7Eh
DS8jCWWqsQUU8xHrR5K/O/MZQzRPDoBlxb6ONBjMnBBGKA4LSMuszggvs4gH
UufHSa3M/aFyl0Nv1AzKh83JqrwjIsHrVYg+HgjqykwA34usgU5UnTVSYSXC
bGCQqVZJYg1VELIZnWSzEb7zgFjzzmFFVFMNByeahpbceEZUBaEJaw1VOKEq
6YPJzGOgaQsw1TzsjuTZNYpktJF0WOoLjkSUhURrpwLuTivy5BggQFWXuCym
fzGr5mVovTEw7tpkqCb9EgAmQWxq3jttCJ/Ryu0eEVjtDu+IbklWF6zO9weH
IZogPiCqD+SlwJnj1kjxKwQQBm3Ep7iJQvRiWjwyoFfAqAgoXkbko4NmKf4s
Im5FABGpSmhKGikqlLgu5hB5xDfY21s8B5gJsImSf9tUAGJA5B1BGCzcM5x8
AaXhVi4ewZX7HsdHn5RQOuIXZosRt5Ues7Mp2Aam/E1EhRrIKY63yTFy2PkQ
sDvYxaAJxi+Ziw0kMZkLDXN9mTBHbObGw6Cp2558xzG0zl5oVBRgvjjqkno8
wVpQaSRp+xfGA1zjBmvWJ2OsQoKCg8UZzGGTTgIxJ5pithww8SNa/kLMOEzP
DxT3Uf/xWnXjRJv2AYQuuOKFfsUj79MWhJJt0azlwCiwTKUpdyxrB7MZ294j
EYfpASXYhg851jG1Br/Qv0ySCS4t5J74LFUmmQsdMean7CSSlRFemIsSouP6
UCsoOO34ZnwDmE4qsXAyEqxLDVIZcKV4jOV8BrOUOFiFt5OLzdEldd3GpbYM
Hmtk+xTQkGR7+XuL9gXDZBf2MyzbzddE6KwHKd2ZVbRcRQSKIVXSlK2jnpgW
imhBl0huGQ9eNopOhRE8iNwzYGKRGydGH1aILvS3DvJwED0cJbyVyQke5NUb
3vs6uqWya3xcqSm+NCJzvpTGm2vAg+R9ka2TkIf8pSYEau5Bqnyu0iiWKaA/
0ZAlpuobK+2mMLurBVlh11Z14MRT2EkSVbTp1tiwTGRVh6ywi8OYSjFwLQgi
1xp1iwifze0oOxHsPHl5ATw+R+7CnhlcZnYtDzhysuU7JntkGXMWmpx+CPdR
E4K+MA9iCCQOOCAikxRAtHMT5vWzg5CmMjMKQssCN8joWlkjorOHHUKqzC9h
2ReJKtoN2sSJOh2b9V+hI/UizQGHIli+nATb2fmJG8ptxRsx8BPaJT1F2XAO
nBATyB+N0DrPFJlAkWVRmULpxGBtb6/Qv0QpJXEjXIjwlvgvd3DmxayHnYpU
xJgBP4acYn4/5HpbrlxDhHK8jBcu+IpkabJ60iDmorUQI5TmWte8F+wxgkZ9
7AWdC7joErofihgqZR5Z1hPtkNDuEUUjlowvGMlIvlgzBxa2Yo2/1fiIdYFi
XCSEB9uZ3twCnNATSs3E88hy1ETK1GCw8H+otet9LQ5GfJIQK7WlkjOYcDQg
PuLf7IvpYmDyY5K+MhfJNdMY7CSNTG6FOccEQM/cw3UT2gA/nTIjyRMi5yh3
Vul6M0UKcXOFiZwyEQebheABG+Mkt7xkit7ZlE+n8E7SMYt4DCthMU2MwMph
hQu+bLI5m9SyOtxQGdqCjwy/niNTCvI522Bc0S9fsCbLCFJ1HiuuWYrL3BzO
wSqf12JIUb5H7H7SnbjLhKghUOAhyFtySgjhqS1PQPzYS3HTHosHboS5HNCH
wTyvONuXLSsTGqWITfUgmiNGhr5xx5rF0yiLVmmBQF5Y/5yILxiZ1g0VtCVP
JxgzndySmwIA/IUqi93ZLORotWeZgmHgcQ7V8e0Y7/O1pIQoSgZGOzFH4ZGm
HKfOduDGAzmLUfZl6ZaQitGhRR84SQYNjovACcn2Ob0IqrCVTGmYG3KCYgRU
mBpqH7UU1wN0MSLE7i4pCreTE8hlxExHJSIRXQSSePABycKR4zCoUI/qaPfl
FkRNVx8NN7Bdj9a8YTwdZytjB2y3rQg6epTmtsrtIs30YizjqVuwFuGHwId1
fcPj42ecqlbCW9ER/NOf8PE7ePwOHn9GAHt1Ouw1+2jCQM0+lXRLr0ixP0Xf
SOoG31hzgYmVRQDnMr8srizRPsalpbAZYmY13sKn1JNQY3xE89J6xaxzJdAU
KzRDnJYRFp6NCBN1JP5HJujWCdvBRaNLu88yBUZuVlnNOMH6vVFqBCLuaWWP
jdQ6sCP9ejsgPxe2fbAHD87z/MVrQohULPuadVhqssoeHy6PJ0I1E2k/xIMp
JaBwz2UVcbQ2cUPat+1PvPOxE+8vJuAXxJEZO1KyLmeyCqfrKkgI0yqAR1rd
jMcpGiLNxnwlLvF/9v/bf7OPq/yrvKE/qs+wBJlfm0bMG+0RqYQDqko8HZUo
2/O/+hq1PN5nz231FSJ6TG8IjTwOyasmqyqwhvCKHnolw/uHh1/5+7CslMfg
IXCEbBf+wR2tQaD6Da3DzeQ3tAb5Ld/6f5HocVejxWj68EZxuH54o/E6zjfi
wp4HnlfYdP/p8N/34CkGPX3tFXaVXsNTLFD7tVfYNnoNT+F182uvsC/0Gp7C
69bXXmEH6DU8xVKwX3uFtfLUwjW87nztFVbFPNqL82c//nv3a9//i/9+HVNO
rrevHzvaUcrWRHiM4JGif6jR069xCAfy3wMXvufZXof4wdD5YDxKVnseXMsj
FOhXXHIXCch4Mpn59VqvFvR9KXQTqVqFAyCQDnmwnqcV6jUzi0PfHdNNLitY
YECIQ3XayLxyTdgQnl8w5jkh3z/Ap8h0saIm/oVpISrroRPDiWlkuxv/iJbX
srbiUPqXYtqPiu1n4UQvVcjxyB91WpvVzFQeQU/svxirnmSW2KvtiVmTyQWS
cLSUrsdXZCRaSsBgegtU/SMRwyn0klm08X0SFiEjZiTs8m9Qsge7WH0uu8j4
ya+toksAUH/vp0H1r2H1l3q1/+6r6s//9j9r9z0AQIDZZDlw3RJSNRE5SF16
40QoI8Tg6qEh9OKQE3bOmrPRjiRBIhwAL7UiYJgCi6hIpV0ULo5V6kMbfwbb
KcyWeqT/hTbMkKCaD7TQR/bAuAOXUCehdrCXQ7uXKV4T+PN1eHkJdEN3+JAe
voHDcx97NO3MVq2Fcr97biFcnJRdGNWWYy4UIAEnuEYYmLk9acWpPjCLA4zt
lUztK/9PnVqnsU+j8jsd/ACHAb5+I/OmASQiwHaK8Afb55WtEHfDWU1qg6to
Lf4QhG+4aXDPMDgiRUYNn7/LPf+cd4pj2QP1TJebeEL6PsQwXC8O3i+iG0cc
zptXyQ+RhfuyHB9wos9dKcMMoaq/eMy6SlKHEEc2cn22WVLi+elkHLbIKC9B
8jtD2ZD4WvFuw36z+fpekHAhTtVatna0Qni5TEIRWNHSYDSvrNFh1OL2ZYLA
WJk4I7kGNgCYuBmqgAT8kFes5PR7gLyj8dUimSWXtzk9HPFgbPQmUROEIYzI
sbr50JmnOh7qFKpSQ1zCMkUYz5vujF6ZvrpltQOH3rA/ufr3sIZYVG50nsRI
w+j8iE9tMY0vNypJYCeWQGoxG2SXa04yK1oB9B7nz8ukPoT9IgiGB6KDQQ1o
Gs2uMUQG0QtZyPR7Bo0KUwXCUJR5J0+rQvF003nMkikMSrNhRwf0ANnMWOJl
UznDBjm3oEsY9i1K9RzucvRL7ukuos1agKPmXQAyRR6L5BX1Zc2MKtcwlPLu
5qis0aCwP2QIJrAh9fa23TcBBNgBLZnFBdFX8SXTqfB1su5XFxxPipv02q7t
nNem0oGj0VTKRLZpqzdRx0CVx0SjkeTcvES34bgtLElGEeprvK0YWp3af/mO
xD3Lbsk1m9CyAyjK2TJKOkc7TQRXYoIMx5YxzOcyBO0VGRzY/E9WSXJyq+X3
S5zz7tizzH5h3IVbjBxuHOCoy1U4n+NAs3BxuQlJR//bhgH4X1LnVhVidbt5
bemtOwpdTTELuiSVeIlv3krVcEMsrPxuHL8N20OmsZImVnOMH5BvGenWUtbI
8NzJ4d+cvYuCxfeMsj+w8kOrmUfORSZyNUnGG9pndqPK5uNwbikqOUcRUSrD
lVEHGQyA1+pC/RCeEdCaW/QcfR1chKsBq0SOjMkK6RDtpJbewVhWsVka/0oO
FBTnL/bap+0BHJTJgimWijmmEAC8NmGbmUm1JjTbwR55LxL1YITVAjNRNT4W
dh3mlEIOBy1+kwMnVCcvl3yQEuvrBBHrPvCuIHnDQ78pXisH1nGNDmsi9h60
cKQc/cpuHOYiiF2UHAwsidKC58bvP5u1mAz39rKoj6mdzQL1v+PZJs1SDOsF
LaPT9dnwGGxTyeysc/eF7XkViQ/pyUfS16KvvhhKUrRm4TRUfKmYTEU8L2wZ
zlYa3qKeTuzOzbGxlYwXJeXVU1pKpJRdEMPJdYjsqoFL9P6GzUgjazk3DCXz
jOrrRfs8F6tdnieAJb6YArChoQUXJ9On25FDaWzbMTwAatVKWADe2hEZgq3D
A6aLXrHu0BiRMjKStjauD2QfZWaxwGKJgUDcyFGfPAMQS1Yhbg6LritVu8of
0y3TTdlDhW48XSjy/BCxQfIWijGHdn07B4RoNs3dNbE+FQxKPLnhq2eGDwbs
sIrJJFONhc1B1Y8otwQUVhEnUCowdgZfi7kMK4gupuhkp27HGYGDKhAy441/
3jG9GidVfQmjoVsD2utFEynOBDPNCO6wa9hYrszSaWhEiSw6stjH4eEzqEgT
M9Eqiz1abEkXGleaYdBJZyFuYTCnaWTyRYbrssFdVjrdLDHJYTRxsCnCyxyJ
CSPgkgm5cVQRoEG0vJJhA2lJMuIALTET0jmgp4QqsHH+Anj5c67otqpMlEEp
uhvOfROPYuvYxCfrZkf3v41uUZT9EN3GExFdTdZ3ks0Rt5HT/5VNTGMcTeCy
wPxs+vZs9MBScueIqT1zLOTFVREpSX0oUP4+fIqyulFMHdTu82om1QHaLiU/
pi++oXYsmG7NDcFZk2uFjWNB7KHRy/mGmuzTqBLI/DLGVwi96e0cmq/4gS+h
H8yUsmMjK//FcEDeHMTbpGPAcuLzcswu4INFsridI2y4RQP2jwcD2APv1eD1
hT9YAe+F+jy8058+4bOa+yxjfdS0E+pJvXAhwYFyNIojEcn57vnqU7tJOXg8
Q9VJ+F4RfMzCsSEPrnOfLU9A7kWGw4rXRBhwQyUnHOvgzL4W77AjibJKNzE+
ToW+CrUJUItLIr/jc8CB63MAULaDL50sT5mRBU8WRkGaFJtbV1E9DXl3IEMQ
phq+WFJcATerpDBFNk6M87oiojGAyjRrPz3QmrqZA0WXFM1DTTUrGGKJIBe/
l6MvcYRwPyI+hYC0sK3CVzi7kCdm8WKLI4f1dazkj16AoeiD4Tqy5u8oBZgp
G5UFmfyKZ1u/LGKMLfgg25ok0RQDX+P0ikXGqdyM2Dri6Z0wddzwcFQ0NiIH
8cnzKGQ10qJwwhK9H7mlNfb1mlXMza3knOVrtdoBY51MRqVJNUJrvAOHktiK
wu5mMfmoWhq0prDujAVcuNy8+1Zxy1LL5AKefcMIRfxnlFoqGlglVBnNSIac
69OZeXHGop/MHsxzwuqpl7VwIzSzasuYHBj9E1Yrni8mWTKSe8le4TlGcAuS
W7qqSFeMMydMHP/Gq4yDSu6IQtC0hn9n6fSq5BKkWQcfa+U3nnTYmKO2XRd/
x3kadzMzEPoZrsXqRQyxfybhcjl8IajFekBWSFnsSi+Ge6czJfCm0D9WX0uz
GmfzY1L/9gIZEB/DN9UPwKI7tljh0YOAu5bJ8+f+/od4cuCiOE2EYTwDxG0f
/u62G+3PwNtQ77MoVPfFjKIPH3zgvgHcF1ViKQntj20acgnGJQfVZJXNYlFx
fK9zXIJDYUP/2+PTijp1JSRzulCH/u2Db88Mhi8iQoQqdiN7XXZdcnfyRnU9
vLZHqbNq0jVxasW3XJecdoiH/IY3/6Vufir7x28/fcI/aj/A77Vj9GmQ/SZZ
7m008i/iSxhF2BQ9AoVJ5dzyBwzY7GN7XfE/tjeMtHATVkJ4ROhE4nK7VWy5
ZY2DRuYqbDB0FfdSmbospJtrZcbSbAgY81jGK1G4pnRGCoayk2P9Rg6nk2WM
FDjFzRBlySTrnqvZfTZL43dbREuq6RayY3k6N6Uf7ZNeR5TGh87W0GGXAQGQ
nhWbbHiFBDfY+pyNjtkTcRx3gMzlR0kRkOBZDZ8pINGepJy4U4FV0n8Bw7Ym
nE2yoB2flEHkC+VGzklcRyYEQdqkjtucLcGlo1piJR7kHGtcBq9jhNexwKvu
JXk7HJEii9BVhqIwFSeCXzw4TPMkek8Bp1VUNYvJYYps9hM6aHJq5ADbmfNp
KtqLtZrtshvGkWoR4uziKH6WYrjjq++VpkcxSiriP0uYJZMoaZG4d4q9XHLs
0tzE3lLgBNoJikNiruDsqPh0s5CCXuz5OxeNOaZBRC1XHHLMBvs4AFAkIyOF
OOtOTQkJ52Fs5mllVTGJVyRhHb0Vbwsx9RCBHWYC47g2xmxm9biYCUxnitBB
GgJdUilPxZKpWSsRfbncSnSJE4XzXV9JSbeSU5F+SJuOKgh2VRcJUUi52ucN
r7pZV5NpdcTRpeirGqdzIzKy16deMOZ6CrBq1Qwmbx8ZO43js79CC0KO9mEg
A3HQuBCJ7zA9CfYLJxgzma4pvtuoOLdR0xz2Z+klddJOEkYvFxHyqvUSEkPe
7WRp4Jg7hFR278dKyixH5abgtMmLXTXUOIv8JP4e41DlqNzFVWgyXkd5ZyCf
eRjXA8YarmLh9RyFDucnZrfhxArgqklAXTrRFes7bhJ9cEJU0eF0fFY85Vl2
LcwoDITI+g4DIW6zEkNDpsGXmvGIqEda4nxhWX4sYLgwITjFpEnknZlq9kdq
RSkgF1Vl1sTlRkgwimpEVa6i2dLHXqIbpApp5MTs4OoWa09NZeNIkMKp9Qcl
V1Bgjqv1huf92R+QKZRQudDxlcnoS0E1k/hjvgsgk5PbcO50VXdt8dMwRm8S
tumKZ7mcfGJ9Noy3hDCTlAwD1k+Mvsj4BJVkigsnxCHDhC/EQUwqOVrBmNQH
lHJVwu3ZoQtaoPi7UHtX6LicwEvM6oLXfMnhHarDXotN8Z1NFKaRYjK5/KZY
P1u7uUCcndqQ4mVBWk3jYsGZ86lLaPA8XiC9XgJ5VOW5CEzxxyjl4xK/K/LK
x2ZkByL3D/Rt5J7unluAc3uVEK6d+SdvzgDbYooBsuygFMkxnrfLCD/kVMvC
6xiZE7MgA59zub5KKadRBZNFccKXdqdmIUthiBCbaF9daGPHwF8iPlvOmM8a
Mrg/ts7PgpMLR1r3TIPabnVi6MHJPoS+0Dd5oajVEZfnONazhE3ZtLOKYshl
zsx9S5i5d8/2NmkpyxkgNQeEaHPdWgXGWl2VIgQGsP7sH5MVW5/HEjOM9QWM
1zreU5Pm8ShJZqjKuW9qLYJKvpJnz0/OqmwB5SNmIm7cMfGqNFpVxzREjdGB
cIyDoaFiyQQa99i8FEONeN0z1L8ZDi9oYXj3RLh3UtgjH+yMoxVb6CQyvSkc
OO7y1yYk3vkcx/P3TUgWfJseGOd6eCxhegxK9qbektsek00yOeBwHHSoH+IF
VNKi3NFCTMH63tjutXqEPVhM3cZUkfaK2JcbgEHSmseLmrJvtMsWVdDteBWR
m3IWZkjIsuUt/mKQgUNXOYMX6URHs4iRaKZKLwsBpV+esTU3G3iB9yaLDpmz
4BtvXy2x7sf4VjdM98cY0TYa4Hsf3LYNdBnNUIp6YSwJj4lSeWtpu6KJkeJp
d57pZF7mJ3P3kB2LB/C6VtNIdc98FiTHcBRm3kSaXS4n8kDFSerslfnmzkl0
sY9ThQ4utGaJQuoSEpuIFkNFEfBVQcwepWR7ww9J9gK2CmBzjSkBFDjvnknP
wRyqBxKfmSTD97159UwY3ReA5V0khd50FHbIuOTu8foKLBec707+MuSEDSqU
FlsjHjmU1EHeekk1z8EJph/QKnMlNhHdbOVWREVHWveMGtNwkvE6WbjH/Sqa
JxQFxK6ezvVQxygM0gmlACH3nxYGsIsATiueUk3EjBtQpAuxiIXwEmNPCn3g
SgI8uDxQBx9imYn35ewWzut5ZPxFs/f7AMc4GZxXG0104hLEloofoGbKCo37
vlTJ9s9ZTc/uMMApSyILIi7D5OItbK8iSbZS1u4BjEYdZ/JNHsMigwxShoTc
wgCrVchOqDdJBgjxbxcdW24MdxguNblciA8LHzf7c7gIM7WIgPY9WxtcH09A
yNErX636xwATqA7wn7HFHSY3wCzL1+GMNDEqOFiBjpkNi/g4bII7tJvOSb50
34GqugBJeoCUckCJPZ9ldnb7JKmEjL2ha+xVlnzHDtzANW2aurfB+Fkyd25c
QiaYaOEvjK4pkuHt6wrXp0Fn78K0JCEQ0S/kOlZRsrqEC/KLoUkXcueJ+X6e
XBM14hyyKg9VhKfE6RTM3BUOS56aeAdzlKYCj6knpsVKmY2T18ifcuGelCpt
pnRvzmEGHJm/Et8MVLYuYuJaZmqep5yFTtnNjA8Q6fmF+SFmhFaIEI+8mJi9
s15OIZmuMVoGONxJlp9RNxcypDMxMb1KplILUgb8uFtRwVaNpcr6lzHrSmr3
N08zHBhygge6m6ZD63HvRCWqUxfycBXqp5KFDEHzr020Sia0Vbgm8vOeUjRo
QuozbCLJYtw40pm48XzzllVq+PvFW8Ixb/V7lCSQTSOzzMuT8zveagrdTP4/
wp0fl6ogNz6ZObbITfGXYx0RYWINEf9QDmFGlSZIB47rI0x6H+ZUeR/nzjfR
oCsh7JZxot1EcEIiTr3hOBj906/36w7qZJ1luFYeUvzbIlMPG8H0A3n+au5M
9vdfKP/gYuemv89eUhVgutAsRyLzVbw8cPCJMMdzwc6EgvAR1cvjEUnZLHAs
dqA91kjvGZcx9L3D7yQsIBcLo9nHsKIWT2mPp4AegdwxCjqWH6bdElLK2txZ
KOucxBMMBzeRzAZEXTl0FSnxIThBrVxEUTKbpaQ8s6hN25SSK0f31cwtSny9
BJHb2C31NHcZftP3wpXUpOdcv2SMTyTl4+UmTq8ksFoCfhiJOUeYK/dHZ5jf
VIVWEpYTrBOz1txP+krli6x8LpY84LNunZx0992OwICq0jkA7KfDf//ahDZR
1geyR1mMQ6ayDF7kVQplcnzQoXXLcOy5/dNLPtISN471xD40GPqclD96QMBa
pJQYWCKxRBE6cQQFFz5caXcluT9TcbK3DvOGwyT/DGZu6DBh0TfhSo9TO8o4
VKbAYI6vjKKHIEFPDJV7DmfOy9IgTqZJpNwwjvhZUqPEzT6RsFC1ntjOTAoG
ruwken48UAcOs4E/pDUgdQURHWbV6Q6s1UrAwwGekbrkxgdiahJ3m0WkVg+U
QfsEC25grI27VN0WrYemY5ZhXKts9fTFLWOw/bM1pWRYUKoucUK/TTbiTaAa
Yh3SnnK8Jp9RRH5cHYYa0Yi0XqCnhHix/jdqRjQlXeq/PsrKdqjy8ElxVJDU
qCcURiy+cRgAS/grLiOJvew/Iw1ykc1z1cbAbsUz3kaN58hYTtCyh8IqrQOV
vcNk8FJjWVSbwOKji75U8JLgH7kM6ubuEAdC+xhBamW2xIm7qDCGyHBmoqcy
GiAQAOKJeEtrHhCMU3JI6JsFi/TQPekA8I4z9+kQOjwTrTmgu7MfLqQSBZZm
0IRV5D8OdxG9DdGXWFqZDZQJWZfEg4wqKIu8DUbOiUGq3JoDiG0kA3tBTnLM
pJh02mSQvqPRPXi8qTprUU/zDUOcMs5o4+XACJ0bZiJZOPqGPVdFoLqDPb/6
tf///vf/NX/jl28FFWdGIACHL4Xv2Pod06vjZy8Gzr4QbNCsiRNDmB0KzHI4
iEo4W+KFWQoeGAOO0R4aQkrZL5N1lcqlOQzdoSoQHTSNUHvoMjj7Q4C4//e/
/4/ZuoM7lhfbifjDLU0/fvxoNM+wwfCnJtYqsaNQgME6ppM1Ng86MrTH9eDM
kQUnubhLv1IUv2hHNGUqpQaOR5s1p3PCTOYukF+89c9xv3h72b68VLbkDdco
kAVQZsEFJz2/TrkQkSUx7IhvGbherYlf025euFEdFcq6vpigmU/DD0hr+NsX
trwtW1puUcfJAo4FbdLLeI2zEtfPFEQ7iV0wms+JlUyjj1jyixQ4mOtpwV+9
vYczbfgmA0+yTRVX5IwxmBM5NFVAihaYMC4yZryca1Zx3y7GGV2FpfUSAl0i
/mvmyIxbsmmH3b6cbS6rGBhjjdLGoMFsgVrCKdP561PjYkhLihcfrCDVDlxK
0mu0A/eYtKgCbQtHbxhw0G8MIX3Bic2UvBBm2CEWg5wEkSdzMQU1VtZadNVl
djDW/JJjDxElV+3kGiFy9AJ9+hfi4m8sAYz572tK7awux0DTNNmQPu307PiF
P3j14sS5f4X6KVanShK7a3eKF9mcflmzj21ISoKXxz8w0387noGUd/yD4Xys
V6nxvYhMWi45RssvIHO11dL4/wFP3lkr1KgCAA==

-->

</rfc>
