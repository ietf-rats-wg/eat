<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="July" day="31"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>Some of the goals and fundamentals in the security model for attestation are not the same as other security standards such as those aimed at privacy (e.g., TLS) and authentication (e.g. FIDO).
The security model for attestation is not described here.
Instead see <xref target="RATS.Architecture"/>.</t>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC9052"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>The hardware and software that implement a server or service like a web site may be an entity, but the web site itself or the organization that runs the web site are not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where otherwise explicitly stated.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Evidence.
Evidence is a claims set describing various characteristics of an entity.
Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Evidence.
The Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.</t>
        <t>EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Evidence.</t>
          <t>This specification does not establish any normative rules for the Verifier to follow.
They are a matter of configured policy.
It is up to each Relying Party to understand the processing rules of each Verifier to know how to interpret claims in Attestation Results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of Claims generated by an Attester to be appraised by a Verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an Attester's various capabilities such as Claims collection and Evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
Any new format that plugs into this socket MUST be defined in a IETF standards track document.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for Claim Keys.
JSON-encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a very simple free-form text claim for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the SW for the entity is needed, the manifests claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the design intent of the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>This claim is only to give the recipient a rough idea of the security design the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>While this claim may be forwarded in Attestation Results as described in <xref target="relationship"/>, this claim MUST NOT be used to represent the output of a RATS Verifier.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level may have only minimal SW defenses.
The most secure level may have specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
(Note only Section 4 is referenced. The other sections, in particularly Section 3 do not apply.)
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains broadly interoperable. In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-count-claim-boot-count">
          <name>The Boot Count Claim (boot-count)</name>
          <t>This claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, Verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= spdx-json
$$manifest-body-json /= spdx-json
spdx-json = text

$$manifest-body-cbor /= cyclone-dx-json
$$manifest-body-cbor /= cyclone-dx-xml
$$manifest-body-json /= cyclone-dx-json
$$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, <xref target="swevidence"/>, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Evidence or Attestation Results.
When these claims appear in Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are not a substitute for the nonce described in <xref target="nonce"/> and do not guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
floating-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="claims-that-include-keys">
        <name>Claims That Include Keys</name>
        <t>This document defines no claims that contain cryptographic keys.
When claims are defined that include cryptographic keys, they SHOULD use COSE_Key <xref target="RFC9052"/> in CBOR-encoded tokens or JSON Web Key <xref target="RFC7517"/> in JSON-encoded tokens.</t>
        <t><xref target="RFC7800"/> defines a proof-of-possion/confirmation claim named "cnf" that can hold a cryptographic key for JWTs.
<xref target="RFC8747"/> does the same for CWTs with claim key 8.
These particular claims are defined for authentication and authorization.
Their semantics don't translate to attestation and they SHOULD NOT be used in an EAT.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The profile claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A profile should specify whether or not a Detached EAT Bundle <xref target="DEB"/> can be sent.
A profile should specify that a receiver be able to accept a Detached EAT Bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>A nonce is always required by EAT.</t>
          <t>A profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>By default only the nonce claim is required by EAT.
A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the nonce be a certain length or the location claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The manifests and software evidence claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver MUST accept ES256, ES384 and ES512; sender MUST send one of these</td>
            </tr>
            <tr>
              <td align="left">DEB Usage</td>
              <td align="left">DEB may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID MUST be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce must be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims. The general EAT rules apply. The nonce MUST be present and the receiver MUST not error out on any claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and MUST use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition MUST have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= spdx-json
$$manifest-body-json /= spdx-json
spdx-json = text

$$manifest-body-cbor /= cyclone-dx-json
$$manifest-body-cbor /= cyclone-dx-xml
$$manifest-body-json /= cyclone-dx-json
$$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="deb-security-considerations">
        <name>DEB Security Considerations</name>
        <t>A DEB (detached EAT bundle) is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  The attached claims set is vulnerable to
modification in transit.  Although the nested token does contain digests corresponding
to the unsigned claims set (as a submodule), these digests themselves should be protected
from manipulation during transit so that a verifier can detect tampering of the detached claims
set.  A suitable singing and/or encryption method should be sufficinet to protect the nested token if transport
layer cryptographic protection is not feasible.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines a message format for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-13">
        <name>From draft-ietf-rats-eat-13</name>
        <ul spacing="normal">
          <li>UEID length and type clarifications</li>
          <li>Address comments on SUEIDs</li>
          <li>"Attestation Evidence" -&gt; "Evidence"</li>
          <li>Wording clarification for "entity"</li>
          <li>Wording clarifications for DLOAs claim</li>
          <li>CDDL type for CoAP Content Format</li>
          <li>Move Claim Characteristics to an Appendix</li>
          <li>Rename odometer to boot-count</li>
          <li>Correct/clarify section on JSON/CBOR labels (Carl's comment)</li>
          <li>Wording clarifications in Appendix C (Carl's comment)</li>
          <li>xxx encoded -&gt; xxx-encoded</li>
          <li>Clarifications for cti and jti claims</li>
          <li>The 8th bit in a 7 bit text string doesn't contribute to entro</li>
          <li>Improve SW Name Claim description</li>
          <li>Update commentary on UUID vs UEID</li>
          <li>Remove most of section 8.3 on CBOR Serialization, redundant with profiles</li>
          <li>The 8th bit in a 7 bit text string doesn't contribute to entropy</li>
          <li>Improve SW Name description</li>
          <li>Don't capitalize composite device</li>
          <li>Reword encoding exception sentence</li>
          <li>Wording improvements in section 1 related to Attestation Results</li>
          <li>Lots of rewording to make profile issues more prescriptive</li>
          <li>Sync terminology definitions with RATS Architecture, include Endorsement definition</li>
          <li>Plug-ins to the EAT format socket must be an IETF standard</li>
          <li>Link to RFC 9052 instead of 8152</li>
          <li>Improve introduction to profiles</li>
          <li>Improve CDDL for OID in JSON</li>
          <li>Move Endorsements and Verification Keys to a new Appendix</li>
          <li>Move privacy and security considerations to before IANA section</li>
          <li>Clarify that security-level is only the intended design</li>
          <li>Clarify that security-level only references section four of FIDO AROE</li>
          <li>Remove requirement that manifests be a byte string in CBOR-encoded tokens</li>
          <li>Add manifests for SPDX and CycloneDX</li>
          <li>Add a standard constrained device profile</li>
          <li>Added DEB security considerations</li>
        </ul>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-22.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-20.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="July" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-20"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-04.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
      </references>
    </references>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9aXPj1pko/B2/AiW7yq2EpJZWrzPuXFmSHXl6uy11PHNz
XV0QCUlIkwADgFIzHee3v89+ngOAkmYyU/V+uK6ZtAgcnPU5z76Mx+OkabNy
9imbV2X+Mm3rVZ4Uy5r+atr93d0Xu/vJNGtfpk07S5JZNS2zBTSc1dllOy7y
9nJcZ20zzrN2PM/avGmT5PbqZfrh8Pws/aWqPxflVfpTXa2WyTfptCqbvGxW
zcv0u3XefAePmtXFomiaoirb9RL6PT05/zFZFi+TNG2rqbajH7N82V7DkwP8
3VR1W+eXTWjRrBfxg2m1WGbT1rVYXYRnZYWP6stpPmva9TzXZm3R4o/z6zw9
KeHHOj1scVlZC3NMz6vPeZk+Ojk8306yi4s6v3mZwo8kq/MMJl+2eV3mbfL5
FvaruCpx8Zn7fHpR1bDoGWzUy3R/d+/xeG83yVbtdVW/TMZpUcL0X0/S16ty
djHPZjnMkLf7dbaq83KaR6+qGjb6LJ+uapwmzLiq1+nr10fwKl9kxfxlOr+a
/69GGrT0fgI7oCP9NEnfwNmvs4WN81NRF7PrrHYvaJT/vcrm8OUiPc+n12U1
r66KvIH1Tie4r3ASOezpk2fPnqRvqjq/rlZNnh7XxQ1OcwqDwzyzMj0u8qsK
dz2/gt14mR5l8+Kyqssio+NalW0NLT+eHcLP5TUB5Nbv99LnT56nT5/spc8A
HLfC4hY8xf/117aY/FXm55f38yR9991xVVZX16uwkz/ndb5Yx28evsT9Zy/S
H7O6hHOsVlfX6Ycqm9kS3Qtazww39OPeQfrs9Vm0wLJo81n6bwAds2oR1vr7
g4N0b//Jfvr46eO95y/CSv9SzWiy/aUmZVUvALZucrwxH3482t/beyF/Ptt7
Yn8+2XsS/nwqfz5/cWANYNjQ4Fn40xo8393Vz/b2rYe9Zwf65+MX2sPzp3vW
9tmBdvb4xXP97MWujfYCEMzLBP7+5aez59QX3PWsvsLN3rpu22Xzcmcnz+r2
elyUl9WkvMomi2K+s7xe7syq23IOBzCBH3+4LOb599Oqqmfj26vm+cEWd8W3
+Zd3H14fpz+dvDs+OT89Ss/+4+z85E269+L5wSh9+9Ph5Oz87fFkd/fx0097
k93J7ieaDHWglxP/HjOgvKW7nM3Tn/KqWcKPbD7Gmz+fF1d0Rw/xn3X6CHre
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
tZFWdpuTnPWKN3PgDWyDSAH0c6U5qaZVc1vMet+QTLYzkMHpIZ2ffTw9/3RS
Aitdwa7+0103y9kX+mpjV6GF/YXKlzt7xTiNqszHm/oeaPdlMd84hfu6G2iH
3XU+01nHrVJbDIaSj2dFjcqwm3ws/u3jWY5mmrwkCrn34r6b0NyqD6oX1uyZ
3oXOI74M7qFdh96z/64L8f+196XLbVvpgv/xFCj1zFjqS1IkuLtvUkVRkiPH
lh3LjpPOpF0gCUqwSYJNkJIVx1PzGlM1TzdPMt96zsFCieokffvesqo7lgCc
/Tvfvjgd2ytxx43If893QgTG0pf3XouyKZRC7x2EkdGPLfZSXXGGGrv7Zk2I
jsu+vFwlm6X/M9LO7a9Nsjjni/Q2XUfzx44iA9+uNpn2j2lcm51CngM5+Nnz
io91HB09nnD/gJAd/qLifPPYt78TMFToUJwH0Cnl2l7FqD1NN1SyAuSHArF2
vppidNYd7xfAxKw2xfLe7v6QmxzQKa98dN9yhPzQUFtkA/JzMT/SBh+65DnI
ttH5ZdrIQ9MMGYSSCWfa8DM7EklOdypBqaCZhb9PqOUkDfjXTqm0zwBt9q+v
XJ+Rw6xJ4tDfWkQRJ/IHVlj8ktDxP1dCRzUnMOg5P6olCdfv6AuE5gZqShxL
Qcn3+NYAftAmoc5V8Rca8FtpErRRqHOV9cUG9FaHCNoo1JXqc62weUOPuUnQ
7rsNckpSbSCPsUnQwUUXlW+ZNURj0ergCB1S7RT1bk6DyegSX2mDJsn7Gf1J
btH6lloEnRYLMw4rXnZuWjGnEnTadA4ulimeA73VKeHB5fWwuX2Ft/ScmsAN
RdhwReIibNBbOTpukBeJsw3wbaqCPzcoEWqdBvAWnmdGcOWr4pTorQITN8gq
2wvbdIMvMyMUdO25Bg4wcYO85JNtYN7aBgUGMTeCvoUWMsJ25kYGQaYjSvf8
insQroahcBD00s7J9XEit44L9dhlW7CxCiOypQ+YNH0FfKF9xHhbiZbzxuB0
fofEc0urr9C/IEc37vq6SGUynecGlu4LxOrOFuXkLWtc/4p3zX3GTibV7GdE
Bsgnhh5Uz8iK7+4os1P2QfET6XhbBxnisGXn2EXtji6I/uUd3+4ECtuhAQpn
DE4QmerZFN/gRj+Fo8meSPl3ux0Itc0eSOGRMgzEIz+W6uWH/h7uBf1CVczx
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
GdGK8YvHhYJWyRKj9SKTJl8q6qB5BC694DzOm1PcTKT5XHFUIuJ5hlTyGuVn
GJdJ9D5nbsJNP7CJ+gQssGRrSI4DEu35OrdAvFfPdUjvVXSJeWPweHLfPWAT
Kl5h1xDilyHhQ1Y5uIWAKCp8Hk1iCiCseYZZzK7fZbv2sHcy+6IX44FTRJyr
F3CUcGYNDFD6JRyC1OulTOErgMkxZ4XF6EeqmQOcnYeUg6s4+lcbuFVIWVeY
1IawGS5zhhzrigRGlfUs1ZkDsM1hX2F7FlTtK6FLVAZXsoM8ClFZW97Aw1zR
dFvnwDWtiDnCMu8JCaG2md5bXLaml85iF3bdwuKiRl/JUKUHydHYMaeGkezC
xM4At4g1Q4Uz39JI0Km556QwU6CjGSkB87xByhXd7yRDFX8vQ8lk55DUIHEG
jnuz5JSkfI0UQjLiG6bv2oMt09S5WXLoZWgZCVu2XioMBA2NvM/Ubk34UvQ/
Y+Q+lmsudc+syNpUjvDDS9TdrYWa0xzwC8Gzmsxatnl061lrgeHsWVIy6cKZ
TSdrDG6G2VizRWHqybxIIe+YACq5m6bjmySeqAtfxZPLCJ2E5puFyYalMb0O
ohPGm8aAdQ1SSmGKmhkR8bxXJ8MXz5+fnB+fHPNqTES6mZsQQdm4ihGHBHnN
SMF66ebcDDEagJlSysqWk9OyNTCAVHtKubGwhCW5nC64HCAscyMSuRQHY4h4
ShAxmK05wzRSLBc66QNfJ84gYiq9n9jZ7T99e3Jgw6PhrXehhS7w5cVBNv90
WnG1Rbb0JJ8apSfnmXoq79F+8fV7rnoyioVXS42H+Vk4fSLXGMqG8ZOVSw+q
BFIotsaj7PO3GcBwVB+OzUmtTU4JKmMz8pxS2DBsShmTzFvOeO8005qVmE9v
IbYtDJP3nITz2tZNIKuVM23GNrbP8dUgmAWuFFEti3CEvTFkMSNCKhJHngg1
i84lAE4wk6HEz1wjc4tKpmlIhjjeSBUoI4RmWWOtnqnmRa2C45SeJ1wGO+Ts
iSTh8wfZYxXjmNET7IOomKw5TQhC9x5/oEVYsR3yS1I9gTh/yX1Q8QUa8Jkp
20IU1SM5lTgAk+iMS/elbrbeROxY2bOPqPQppT/f35skN5jxIgrn9qu9Awez
Mr53MYFmJ0WVAyrjR259F3ddZYemszPTRWK4uPVK5mHqmCjaCpVQmjpJRNjx
diFC9DDdgkXhVaAQ2IlgEwDJWlTzXz+7OKh4niFBsIWbuT0tw0BG11RKU0ED
MIWm36dUUWjQYnB1FqO1XUqWElvqb1IhEBvmhc5NZXFjUUaGXJJhdxqnUXaC
RiWo6RlN0mffP8eFQzeY/6lS3pqJr5mWHoQW/lHCLLkv0RQr27fWPFDcl5E2
qahKuayNhml8vV9SEvyA9g2rXZBVyZkVFUmQFBSU04jN6HB9Nwu5srYoOV49
zoTE9VhEqgPMmq+1TjlBNrMFsf+0MjeNJR0dHk28ztGsTEY3ztOnKa+0+Mw4
WaH8npDC2VNqWDLZ/Wzt+QPVwWhH8NccWG+0v1vO2EiHHnGi6AO2FLuAP9ms
jASCOfYTzfRxreV5kM+E7acc6QDv0cqpB5mrSA8IlRZvtc0ooZXK8lJixa1z
uZnCXsaLaO0ydYX9ix1GzONbnC2ona36hoA+jULKF0hanbPB+aAAZaTXdiqJ
Z5gFn71b9h2dy4HNmU9xUsgcS56aQiZmhvj5EsbCHREdXyKDOckk08Tw26ra
KYxSATjFFdSQWea3Js0ePX/qPK8IReY6HZhOFnPT0gZIfNetZ3EPOgTM3FqV
2/O4k30Ac8PQO2I1V2aKXIwNRyrpinAh4AVSBjsQur0z79MnWs+74VWIWmiA
vxTTWBbLHuQ4S5IuWAeB+VhN5QLJOZjZWpVeSP9hKwVzmuxMaRLgOdKsykzz
Ucmt3cuCjUDFntnxTNovTZeomj5hycnhywG9LBjc7nllfbAQJyZYTNiJdEFL
QVttIAke2U0GSkkJKI3HiWtnsPXQxGlgZXdMirCzHI83LfcOgFSzlO3RGvxj
OrKleBvvDTlXKVxHkPNmM+B2aA/2LjJ7rgcCuyiXaS5mJ8cMoHPXVFAstlo4
cibxbXQr4/Df35PxhLJB7qcHPIh253RzSwqfTE+YpIySrYXZe59vWTHJEp86
T6Urc9Ftd1nzxrow4KKkL7eUB+GecAV3bJAiESFwxpKVJ5Rp/bHhM+IFujlt
RqZU3TqTGd5cUK6t6JooDPx7+nWYmmqgi4RC7LlQWaYK+wRv7+Jyg1VwXOEi
otmGZraIRdKkkrtqqK4lPO9MTThNgTNNSp1bCfkojZBH2pdU23JSh2xBPShM
gOwtop5L5JY2grpJaGl75DbQnyamY8u7QSusXitutZR/cIqlcMWsNTmY2Hy9
QsVAGGIVL0rXfG+wdlW+W5VdbZJcU9ICj4ZhLgtyqbkw5n7YDJ/FYWskzE5W
4XTtV+sdEot482bGVH7j5lQ0lXCkBhWvHGZV2ozTzhJHRNyp1oiaSP62QiPe
/9RJjM22o9ReRco6TWvjjIPbuiLgRYv3Zk56dVOfykwHfZTszj3mvO/mmYPe
7KvsZj/GqC90p0d79jaMemB6hLN4TE7xDtyysbdRt19ZDAYI7DFFOUr6Qfwk
j2Qf+2cnF0/gTTmapS4+fXoBnPPZMbSC+7seJlhoqOK/e5cB2XfvPO9/LEbp
8i/5fUG/m/JtQVh4Y/xuTliRQR8XNorifbAXFzS3bEfQ7vyR+7Hzwtkpqnzp
F9E8ttlRfP2ysG4JW9p55d2tK5+Hyz98xd9oGqIXJ8+3Hbr7zZbD5tCrOwDf
LLe3y0FTDUPOxvnP24HnGAtWvgP0Kl8ZxWSLKtkPjSzbARUE7f6/BOybffie
o5LugQX5ypQDoZMq2QeNcdplJzrbsSKVePnj7z9rodC1q3z5Z5JKO1PXnBy4
kPqJabQMKUgcYHYXgk6wbb0whVkULv7wFR9jNCLmW19vtuA9s2QOWUT6TyGM
jgtg2Yo1kDG/4ua2FWv2XSrL8U+BeHUO3U7qLovOn2VrNTGYOwF56z8U4Wud
qjvPOjVqU1ukjqMhypbvRpTutAPtrTuAObkBAF4wKfpj77otOy1G1e1woJKI
qP7IudU0L2cCOGZ2p+3Yzvv8vgBBXg0UrjBQqYdFTs/bP8lLUND2/MVrPytw
rR1Hw5pf5jqM0RtEH0hoYRdAnP3BnSgXuchnGDFcfgRWe/SLI31lrd0gyJjK
5ohC9Hi2YGOOTy4cz78OcnpDIdHl+2HeFZluDqTeeV1GTf3P4raM1/QWBKTc
BGrKia5SleaypZoQ8J0XS/lj/vAVnmlg4Zv0XizrBCG6IYhly5UA9n9hiD1+
9mKwhYcYmtrTpN0VSypZTo/jyxjD9Z5F67VYqAboEQbIsZStoLD8nXfhn8Q2
vqVfttMPcvuV84WPV5vFwinoIk4cZYiKcwrsvNx/BgMB879TQsD1CtOPS37Y
crdKC//BKzY1XLfIh6bEq+jN1G8TmpJrwmxmwwe2r98mePjXA/ATySSxZQNs
WonUAnpF3PCQb5rGlxtJw0jeF1gm794NcRJY/OvtCK+ZmKVXnElj+4WQVBvk
JMFppQBAoI+5u29Uz1rrDbI+unxTpLf/uD1hXlJVABcSfpQ1x61dcxzFFvFb
ueIcs/TZ88ikKRWy1VZstKrkF3AjnLLgj70LLdD8OrzMTYIXnu4VDXVcLVjK
eERurykbzFMbSQUPGs3qBCmTf7LBai/IXWL8KUhC5xzb8OnTyeC82mhij1SK
Ef8wwdgmvAkaUsUY9gcFOpfrhlx707XYxYgFR86HfO2w7hmpunOzkyIfg4vh
2RknA8tWKmM3PJoPrUH87MkfkuLoOAR9uUIeQaxC941JZZNIo35rzUgwSEaX
j6UxrQRBRUsL9ZxtLfS06P2Pfk0jqSfmvKB5sSfuk4tGjSoLA9v00f81f/x4
ReBpFpqxLmubMmP86sNJ4r5kfqRorLGQ/yrwTeGnb16d7wjYqPfdrBb3gnTW
KkYVZzcjrsmlEH588j0NfCEvHAs0lWmFLzgsKluMd6+GrLUWpGtS4StYu/SC
ZX8tXiqmDclvyiuDi+hv6AhXyO+KNgCrGy10lN/dX7mWB73La9Xv6HfbMSEW
QOH02HUz0sxuZ+pYJdsnnhaUDQ1rk6JdpPS4BK5JkHUKqGGtPOMS7p8OTy/8
dBmi46G5FVqN13pcsH9g1hfBYHo6IlwD7QfVNjyjAlK+bpCYEkvOCFseHXfq
AXxION7d9pL9MI5SunfP0cVZaineAeVa1dzZITFMAi0ZvCSCAp9JYh06jYuX
xz+waZIzpMJfI7G5OiYzBfiSXgDo4V6Yg5OgWfnaVjF/dXLxGvM/niyu41Wy
YEq6P0xenRxgYDngAxQrnAv0EwNAsoowMlDe/0zJJOxuPPadHMiHmKv23yhZ
7J9NuUvNbwiPzo6V+JorgzY43IHPn10Gwu3/mupRH14vJjXJIQtjYKLZhwxh
9vaB4zx4LZmBsEqxeit/+pPgdoylo9Jw+jdn/rgSOkgx/ZmSqk7AH5Xjc+uC
haYyWIVcCOHRdMM1Z92SYAyUPAbB6w15X3PRLbqK0mecL2grkWc4X3L1p5AN
clHgSFnskwp8Gm9ELWcar8nww8QqvZIkN8Y76QKdmcwWACF2e+AcOCnXncM4
xbeDV+dn508eSwSvaUfzD7kGNCddU6s4WvVvyfFRFDdwVQmg2TFKa73p+fAt
v6AYQv/1yYnoyFiTbYvKYbns5SwTjc9OmdiEA+HYKz1lwkxSiomQs2fHTBYH
CLL/AO0O9PII/byYbZPCYN6hb8bnKA/thfq1/mFmdtBNzT/0PE6ueSieTocO
QmzUH/tXj/qt3rTX69QnjWbY6jSjRxVpkM1aCA+CTuOxH1Tgt0J1GPlaK5Pg
o6ATPKaYV+3PTeVInwSdpvS3vbzJIW4gC4s69aALzX66q9jGnS9p5UEDh3Xx
qI9ZbAb0dlvBm+zPIZeo3ywprGEDVGdGv+3cnHypBC7JhYzBAY7s3qYKCqij
q4oRWLKV+rst4TAHhTXMW3PJ2awYBnfpQ4GUVDaMJZQTxsu40zyINXBVPlzo
nWsSY6zHDn18Akjea4ZBq1B6Qj+5vw8Aisd+Y0v7Xfvw4YbsDcZz3sEXF/n5
7DSPJi6m1qhtWc1O84C1/PSpWZxNEzpvABe3Uyf4s62T4PPPO/bSAZJ41ye7
zqTR3drRzn3gT9B6jLVZ5tG7dRS9a9aij9HeQ/r4fMcnO/VxRwc79nF3Dzv0
cfXIDzv1eqfVbHYazaDZqo/rjXqjM9oBd7UanWZn0mkH9Xar1W7Bv61pu1mH
J81mEDUbO3QBn7XqQS8Ig0avMe2M8l3u0gWN2ugFMO2ybnZZiJk8dRPUO2Gj
0YD/9xq9TtTZZSE8XnvabXXa+C/uQKfd7XXaj+5s/fPWtz97n+mdJpQU4j/I
cw02ulNVp8y7AhEj3o3kD06NgmEYhx4RHMKziuBR5YgxVS7KnsUSW8E1d2P1
qsQf7EOq1C+1E2IxGs1+Lwj6zUZnX7mNNxwTI5NFsobPLZqWz4Bt06S/9o4y
Ila+QkgMJRO2uCCPk/Jfu526CFW+k6BCFy34jDR3Id42X7n2lJ2d+SniTqfl
KplF9q98S8TTskF01Mm2+j65n887lSH7J60gcI/kYcu476Of9Sj1XhQm0Hmc
WWatViNwLnxHdCUzHH+clm1JGfH4Xdbz2ft84GT9dfwtkDc8SkCKogvKqqys
UKDReShgpWodtS4Xpna3G3BKtzkcJRtWTIyv4mXFH5lhEspBOZOEQrXCdLH1
P/5zSDOXJH6uGMU8cSFJEM7O/oWthy/fsPe5WMvW2tuLi5qkYLzhdKyppitg
329qvXRD7UncLK5w+8x/+7p5nylj5iTi3EvWpZvxOEdM6+Jr2vpltLoKl6lG
baP8rLW9zpLX3HH5Wn6fmWsiLxnbRN2SAojyLamca5fGrcsX6OZewkNO1EnQ
Wcdvn/k3EfvYOAAuC3FuCeAorBtOIHG7pPBWbi0plSJXZ+Y6/SsNfjV4feFT
aCxG5aH+hdYtWkEOHTKRoZTILJ4Ub2vNmfmDhfeeFd9JH5/he9sdbFJv9HvT
dj1sTaedcb3d6zTG2kOn2YtC08E3b8WFWXsJ2j3soAeDBs1HKECfnSBReHPm
S30k/d72wL7A2kfQ7mMP7VZ/Mo7G496o3+uOu83uqNWKWvVpd9xptsdR727e
iXoO0ysyDyLMkPMwszaHzuS/z/AVQQc27Ke9Rq1JclUDpRfJYBCu1gsM+AUw
NmyDdCO+CnYfg64hiA7bcVEYrYu8BDAd7VqbR/uNapImTtdo/quiMPHNRG0B
x33AnQfYEE670Q467VYAJ/Ywpc6LC6vXYd88+jJHUQcWapHEXCWYjYzCEzky
yaEu8Wq8iddy/SwDsEcP9vzHfoECZ6FPQK8/iqa9bq8bjcJGMwrGvWkn6o5H
rVFj2uo0+gq7mV4cCBTwi6JefdoOO51xYzrqd1tBv98Pe9NJOOo3671+8z7w
K4Ihr0u2wgXEzEwcEBFoDGr1EGsq/ozapBws/htFCX90dgtYu3t2v7DxWTLu
7jw/2XXrOw2QERFIXp6c+6fZy+7vstJWHXto0386WNYUlyxmV0Ee+yPAnXBY
B+6SpXrPZ2GNiDdC7edLpuCEex0trfW4P5ol4w9lulM3y4UoyJdOZyHOf4SN
M6tCpmGzwgD86mgTzyTHQSYnyQvNkeXGlLI/Z6p9kDEMJSuX6ZG4xwXapoVd
WVFdKCGOY7xTdh7FZEumOjZq/mWEKlWQgZVdrsL53MnyRH1wJqjQnwL5Oaj5
ra6Ui4vQxsGWJook2+9xVIUk0ml0+E/qAwnMwW9TMf9mGkVxOG4PDK2toEUo
TXP5naDVYrmKU+NJcHgnPiRsa3aVXxn32d+q8W5mNN7FMt10g65LiBcJsVQy
Gy8PGqyIz8rTsEOskyzXhe4L5mI7pP9erDE+M2PV+GJc+GJcyDb9YlzI9vHF
uJCfxxfjQmkf+PPFuPDFuMAL+WJc+GJccH++GBe+GBfsx1+MC1+MC3/Qur8Y
F74YF74YF74YF/wvxoUvxoUvxoUvxoUvxgX++WJc+H2NC/+AbaEQMsHpHKlm
iaaExd9T6kyBMlvTmplAyX3MfDeXWkTGtUaMpNtFSQdcry6055Os4oiiO0Hi
Gm9yAX/YgcOemVJKzhWJL6/kjF9cVDi5vCACZVBJm5GdmgamSh6WO4SE38aj
6gy0YChR0dxBlKyCYpAsy3LIZacRHv+HpLRi2FOJKBOuZKmHBBjRKbDEhJmR
bD56uQBGIDH7Y7fLLIGeP0rzx2mLEVFNOpBDHSL1zTNcTJr4MgOcqRRMNrUj
1jsJaL/LKQwMqGP9P05t4pwBFep0qgHjK657CfPlU8DYSme5umewLo6Tom3j
3J9OFqLQ3gUtasPYi+IxfTKNsWIvNuFnV7dLrJuwFmlFl2DCk6l2NsaA0U3G
khIT5FS0KkHppv5OoMzzTKXQCmzDYDFZYfE/xESDDOUsdvBfwmwZZ+yW95st
6eene4yTO5oX/TsMlA/pYouRcqcurh6RjaHX7HZgV5vNZquJv3d2Gr0+rtfr
jU6/1ew0utC8A6x+p4969vqk09zJykB2hqAe1Rt1sTR0QfKEblrdNgidrW6w
UyedfqfRGQf1VgOatWAeE5hRC57CjNBwsNtygh2kiu1WAfMD6GmEdb+FlxV2
TU/F3+lgDkvyZnOpZf1glz58FY5BHh6Gq1GyiNdkSHtoHygsQB+NWrCX/2Dn
PoasW35c8sFufcDP3tliskEEgUktNuuEFaX3mwaNbB99XMaSEUbxVQtk8A7A
PfCjXZKfgnrQqDbq1Ub7daP3uN193G791eAMU98QeXfuoyMdNLr1Xj3fQecx
cLv1+l/LJ1jtwQ2qg4C3N40x+zmlx9grNQ/Qpw0f7auHhqZXq4BysKLOO8TY
eTmPZ/zBMaIolj0Zwj/RDLMyjH3ArtdSZuIjcCW3JVOFXmKrvg8QuTc7nW4b
rlxn2gfE0Rk3p+3GtA1ovjvqt0BQe1RcxaEMRf1UdS78DC7LyyqIFqWDf6yO
k2RFE6jS4J12NAnbYSNod7vjYBRGvQCwUHcaNZu9br0R7nLfG/UwDJvddtQY
jdqj9iRq1HuTqNXsj+u9drtRvoBbZyZNnEkjagfRBLBOvQFAMO1O+1GrPplM
+9NmqzFqTnaZybg/CoFMhtNuVB+HXfhf1I+i8aRe77Umjf44h5ZUx+AqfuQn
6HQIQu4adQ95uT0BJO6BUwu7jKt7DGUE/h4Sb1qWU3oinptFgdZnm91B8s2H
W0j4nRtAP/+FaLil4t1ms7vjmJ12s9tsdUbdXrMndLy3Y9MWUGUgrH0Q4Y1b
wY5N20EzCKJWi0h+k0n+jk0bp8QZnFjOoNPfda0lvMGuTQ0LAdzB/VC1E39w
N4Owy4lv5Q6QuO7WgcsaHBPPj0iBX+7egfAFr4LacfAgvuJupmDXDrYyBPd2
cOcxbTUEf/Yyr/B3V4tj8rPZnHSYiit5bSzCheQXklqEyokC/l1jWhJSW4Jo
iw3FtktZRzQbhgCKqGTnJiOckwSPC2jIh6ynKfNDFCFWKp+hNI2JQji3CRUb
Cy8XCRZPosFyOTRcB9c4lVk7k9YcX0Zn4ypLxNfF1eoabxWjYnHqlpnKHNg/
kKd9cklkbxeyKOvanfHVyokCtkmUrtpbGOmAp8U6ETOQpFtOVVGfHZiboJ8F
bZWk0kt9sULaCVIt6Y346WQy7smmmxEzwvV/AWfgcn0v2STb4cTaJIfw1ShM
nSn946pm3zBEWX4obxAr+9kTbsix2xR2krvauptbdrRkV7fsrL/j7spAJkOl
u9Jua0fXqJ0+wp/fwwXbzvo3uWLbbv5hl2xpb1FwGUbc1THcHIDjmo0KVHm/
Yy/Q4ioyaJswGfo/0ZPde3Gx08MYRpBaO+Jc2mzXx7tyYiDrdCaOI2cQTIAz
A+EP/p3uygk63qjsairqnwA73pU7o/FbcDO7TfoNGDtUPyF/uDNP2g3YQ7Xe
RNfSXjNsonNpt9GhBe7MTrdh6m3kiqfdFvw77Ro308auzGYjrNdbrVGz1a93
e0G90Yb/1KGvUTPojnfTYcFymqNWox+MJsG4GY2DVi8M+kHQaEfhqNXeTa+H
HHNjNO2GIBxEQXvcgNm0uv1+vc17s/PpAI8OZwF70Ybfmvh7EHVBQus0H7Qn
9XGzN2rYPRk3WsGoH47CXTsJQMRpjUa9cRdOqdEJW81xv98G2tBvjcOdlAXw
MwJJv9/uNqbtdqc/GnUnYwD4ab/3sD0BikUiyATlCoCQMUBM0GjhMoNdwb45
aY7sboSdsD8ZT6ajZq/XmoS7gj3wEK2oFTWiXtTrBLAdvXEwGY27dSAkO59O
qxn2G024vpOo32w2R1FnN8eM+6Wku7/Y7qr52VpW1S17kcfWxjFbeTt2FnpV
BSxaRW7AcdxWto4/OQJ+xZga9/x9qos5jbFQx4Y9t1Osdn221urGqTCppamq
/f1EPOvEahdqMYmLtweaqNoXjwJx8nyoKzcAeNBq3+/MHZDJW5dWRVq05mSX
42SDpnnLON7t7W128Xfz977XEdo6QGfP514/6Id7cH82sy1yYNjhLv7M6My8
Gw+2s8uz4/O8ehcn63dJSm7PeQ8n6CCNf2GgynUAwNJq19H3p6QRMioljfyd
V2J+iKO8+GawRdd75w9IAoYaMpl7WHtYZY4sPrS9klGljw9tn6enu7qx+bsp
lnYNLXgoYIHAk2xW4yitrdLxA4GqV6/3/2CY+o1AZdkJ5hMeeqh5vuLBQCl8
iDIYD22fZ0j+kwAVZ5+vzeLRAyEqaAJENf+V0dQ/yJKZnzxv9tD2WV6utStf
aX7+MaaOfnaEqN/M/5lIHNK8uu6lUhcD9WxUWZ31pK7uFR9XRX2aCdE3Kljy
y92slxvxyvk+WnE+eK5CjEUcQs5IzqK3O776rMXzOabEXkdYYAH1/TWZAzr7
xOMNutyYfrF2A7p2JpvLK8ftymZP5tzPmLRa3K6WYWp0lLP4Q5R3BTMuqOur
FfUqXk6vYD6o8XgJs5CC4mYWpoxEKp9qMn6ucGH4ZWFnJ8jDYn2GZMEBF4uJ
6xg2vorGH/D7ueivccvT4iR8p+B0tDKlk42iVEuP8Gpr3t7r1SZFzRnPWwo8
7aknoBunnkYrZJtTHuKa15kq+22mnuHPVc3N6IwKDUr9ZUBa7z9Met8+q/a+
+m72y6Xyrra2m8/EUrSDzmsqxImO3FYVaKpV4uO9Ep2fNuc6tz7ZSPbiN2/N
C6p2zM+B//3r+8bww7vg5vTq6vbsx/OTzo92flzSiT4t5dKdKkh+HlcKm26e
iS/FHu7ZCstEuA1yTfWkXLNIDtsXEfNPwMnOYC8rWNKQPPT2cujA/MW//Jz1
PafrrVa112TbIFPExUaLJ245YKyqeValvXv1vvMis826y0+Lu9y5/Oqr/FGX
n3TmoB2vYm0d8zf4kw8LsTCWAzFfXkvxR1cA2VN3vsFy6Z8mSUkkQaZb1yJv
z9sNadiTYrUn7DjqnzD45k4d3dJzp7wXHDcvrk5eXA0uwsu3T8Jk+CF+8751
dVl/vXzy8urD0eB0cDR/+ebb1+9Gg7dPvjmjN+/f//3JdyfDJ9PVLfx7enT0
4ejo+s1fB9+Nj+Hvk8v581+evT85gt+/Td6ev3n15u3wWePysj2ufv/u4nVn
/fHVk8mw+f37Ny/D1g/vZz9Uv21/t3yy/PbVcPiu9/T928v1j9+9DL+7vXlx
9tdmdf702/PmD/3ps48wzUU6Pwqrz6+X37z65cVN9cebRbXTHV0/nb3fwPb8
Mnh53GqknXeDdfd8dPF98+83T2cfzzZ/fzK9iVqNKP0qc1/s/j2LF5uP6ma5
lzdNPPg0NqP0FmjD3H+6V/B62Hv69nX+FKLbp/Xoh0H8In767feN7+Jnw6dX
oydj/PvszS9njfP4ab8GHy3Hzef00bM3p/XJk+9/gf/fnsU3cfj2tH72Pvl4
/v7Nx/NfxvUXxz+2oJNZ9A10Om83Rk9u0rP5aeOvw7POWXyWni3OGz/G+Dt0
fPn+prU4fX71bPn0zeblD9fPX/7ybePJ8/dXt0//Hly//eGy0Wp0fvg2/eXm
O2f7eFWZ+BL/FAsc8NXOVh04CtN4TEXQ5XmJzfVkeHwx8LUY6dvXygpwkGnR
357LKeQ/VPMm4M1b7ZmZiVkNHbGc6Fk4xQ0HG17HaYzUUS2cRJaEVpEb1wXM
qkFqfK/T2PcbvX25XFePBo16I+g8uiP7iX+o/vywsKsonGDxBuFeP32+u2E0
X66x0E+xA3EqgwkE9aNWpx60Bp2jer/bOz6pD1p9dB2pB/VmvVVv1zv1br3H
U3SivqV9/6h/FJy2T1pddHo77UB/w96g1Wh3j9rdTvN02GofnXTbyu32B+0m
paBoN7rdTm8YNAanp0e9VnvQ7gyO2u3uCTTvd5W5HdSB1+02+42g1Rx0+8NW
t9fuBMfQvNMITkDYH3aCoNFRkX9wFDSb3V730R27YncHgSXkcFHf+9k/8N04
8O01gLCazckRAwEDTc7mTZFMrl2copqYK5tot05AQKE5WaKZ7ZphCCzwe1wx
Hp3NheNzKnHYOinMkKoxexJfkhMVpppwhsOep1E0EUDlr7RbjcGq0WJD4E2x
mKZhf60+k1eWN/WbEC6nHAveW45f2aR6QakyClGdQtOadyEO95FzQmMMqGMe
TyZsIkxMZZHslrLXA48hpdrw2GAzotnUH4cLml2aRnMk3DiLzWKNnA1xwGUY
Y+KCxIjLIO1DnweoaqyxRvc8WYuPAtwpTsyE5Vf4+KbEHoc8D1uBxaliROiH
qkghrqgH+z+pV+BpvEolpMCiL5yIg7dcwYEdDXCfXUN8zafKOgA7yWodIpdS
ocAPW5PFiW00RVm0B7MBcgQ3V/H4Sjn0KwnJJL06nMmeTieNrBuBcP8UcSel
sNn5AvGkU7gH3Z/SjP+Q9vDJ/EY/xnviFJ0HjhvNQavTPHlUyXzleByctgG9
nZ52huRxMNRGnWbvZFBo5US0uc/RZaBV8XMP1SMg91jizjLP6hyi3NBw6MxL
ytqUWaPv84YiM5B/gT/VRqdS+gLWfNIenvbbp8dBC1ixbqPV6nRbwfFxu3fc
ah4PThrl7Xy/2ztpt09PgqN+K+g3Bn34T70XnJ4OYUXtQf3oUaHhz5knn52/
PvuGWhz3mseAvVuAzYnwDfAYOoMeHEovf4iNfl21ZnWgQvedHn5eDxr908Gp
kgN61K636N/OaZv+7dab9G+rB0tpNoOTJsyEngyUijRgjZQOqRcAaesF9bt3
UZqdNO7btHavBRSyXx8e1Zs9NS52ut3TQQfob7PbhSG6w6Nh6wQ+7J8M+71G
5+ikGZwOWt1Wt9k8qp/2tdkw6J4eDU6Oj46G/X6nedQfHrVPhsN6c9g8abaP
moPTYf2oewS/tvrt4xOd5LDe73cbQXAy6HW6p/XuUe+4fXIk3kaGb8VYLOT3
jcBV5lWByIeveBWuODlLHNoO8h5X6SZekw6Bq3Ih0i75MR0wBsFbG6KPUC/v
HyVHy0dZYgCf6mEH+C9llgoavW6/3Wv3NAFXsVU2JVd5vq1iq7zPQ1l6rWIr
t89t2bR2aFVInlXmZ3F3rqzPnv/zgednDayZ/DbmMMuoQ44qVHymhKXEIRMI
Cb1eR7eokkuBPjJnJTlhsIMXrhmVB5Pe2MBaEk9OPEG4kBm4jEpZbPmdP1+i
q3/36Oqrm/uiq7GLkrBqmRgrQx7kBog/lnYWGBgJlNjNFMBk9oH2g6tHUXs8
7benk6A1DUdCO3bUvAeTSbs3aTUnYQS0JYKrG+1q3BwRCQqFBE2nYyRBO7YN
66P7bQP3qvK9rdq7O0Ur4avXJEwjmK5vkjKpKa34e8OLxh6xuPBbsMeCDxa5
loKiAKErI4hLv1eUP0h6s+KFk42IOGnrw1cc5MXxi8eUjo/6pfHG6w1l/BtZ
PTerpYniwScqTrDY/1NWjfOfTYHzc45b8PcGm0mc+FZxxceE+q7oJrk8Gw7c
/8ejeX/zY/AGViLP5h+ffluf/fX1hzfBm3kSvL49S4fxINfu6fLHH76zbY5P
Gs/f/9g4Pz5rvXj93bfut9Pvkq8cHdneE2BYrrDu7T82wafpxcX66ds37dPz
2dO/n3/oxc8GxTZyBPdM7qi/JyT3Z3M9mFwcRwiN/iup7h35n/6Ez6v8/DMp
yIYgF8WEP1+uklE4imdY7Z51YeNwhtYnzeFAhTOBOszjhRQwtS2YYo5NZ8nU
w6FSjaan4IF1OPOXScqaLfHiWSZLHUITUiyk+PjUo2/iSNJHOOYwacx5KEjB
jEEt6CROYvkqipwUZWghnpgPuNAp8AnIIKAcT7KiGVP8p1IPqA3maEqxGjKa
xeAqUm4qlLEXVX4TajIe5GKAM8GQgVU4xRxqM7QQphVP35N2L5G64rcYOrGE
ZxV/Go5xA2N9cZOsPtByUZuR+Mmi4kW4gzph5JYxj8F1PAH8wMMAIpqNUnS3
loCGeXgL6OY68uyXaFtk++AEMRPDbJpNnoEbnMpJhlT9PfTmyQgdk5ZXySIy
qSfSFOioU2aZNEqpPQRAeLMZzQAG9aiQbaP+3xVtwhJnk0epe/R232uOusMc
mbfm9H+EbucJ5X/D7Caw2zAQF6wGJDlB7jImxdMkvBUFjX5S5U/sHMlxQI4U
o6vC9La6TqrxPLxEAMeEq3gVUElkFQyTaBxOcJbY9d834WRb75iyVcAGtoA2
KZ7HRDpulPOkkQidS1Vf1G/xpWLEH47J92GCJmQmRY163R2WxpvogBiYCQ0x
jx9tLGz/UlMMLq6T2TUAj7cIFwkMkazZShuRWprBuQJzvIZzRJ42XMD0Zpxd
L8F0ZGg+jSbeKMZcfmeS0ZtUPFxAPtlgpkkxR8O9nN2mMZpI7XHii5iKh7On
4IS12+NohYIAJbcl/RXBzdlLP5xMVph1A+bgUV7yZO1nABruxIJV0Cbr0hrv
D53OLd0Cop7ylUc5SACB4b0dbQCuKv51jGlpKCpsFi8+wJOj2SZaJ+iuaa5g
zVeNnYdzID4Abcd4VDPA/BgzFP+CN9POGitAe7/6L6NkKf6Ev0pwF/K3Lxmx
/GrJBz7l91JnnQ71ZbKi++E8uhB/F/n51fu16vz8W7XwU/Ko6u/6obyBlTTq
/kiA7lcCw8wPvS/8/ErXPvfI3Nn9Rv1vjeDAWUlhkErdHegBg7h3hMZpH+gg
OHdnEBzCHeYBg+QvIw3UPaD69ariHaOgtxRezkmggkB0FK/WV4CpiPQiIN3Q
hZiLTOpZomSo5kiaAKCGsxv412922hUC1Q/Gr8HQzyVBn0HbqL3eaT6DNXCz
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
AgA=

-->

</rfc>
