<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.4 (Ruby 3.2.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.19.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Mediatek USA</organization>
      <address>
        <email>giridhar.mandyam@gmail.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2024" month="May" day="24"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <?line 164?>

<t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <?line 174?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>
          <t>Make and model of manufactured consumer device</t>
        </li>
        <li>
          <t>Make and model of a chip or processor, particularly for a security-oriented chip</t>
        </li>
        <li>
          <t>Identification and measurement of the software running on a device</t>
        </li>
        <li>
          <t>Configuration and state of a device</t>
        </li>
        <li>
          <t>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</t>
        </li>
        <li>
          <t>Formal certifications received</t>
        </li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like Trusted Platform Modules or Secure Elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <t>Following is a very simple example.
It is JSON format for easy reading, but could also be CBOR.
Only the Claims-Set, the payload for the JWT, is shown.</t>
      <artwork><![CDATA[
{
    "eat_nonce": "MIDBNH28iioisjPy",
    "ueid":      "AgAEizrK3Q",
    "oemid":     76543, 
    "swname":    "Acme IoT OS",
    "swversion": "3.1.4"
}
]]></artwork>
      <t>This example has a nonce for freshness.
This nonce is the base64url encoding of a 12 byte random binary byte string.
The ueid is effectively a serial number uniquely identifying the device.
This ueid is the base64url encoding of a 48-bit MAC address preceded by the type byte 0x02.
The oemid identifies the manufacturer using a Private Enterprise Number <xref target="PEN"/>.
The software is identified by a simple string name and version.
It could be identified by a full manifest, but this is a minimal example.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>
            <t>A Secure Element</t>
          </li>
          <li>
            <t>A Trusted Execution Environment (TEE)</t>
          </li>
          <li>
            <t>A network card in a router</t>
          </li>
          <li>
            <t>A router, perhaps with each network card in the router a submodule</t>
          </li>
          <li>
            <t>An Internet of Things (IoT) device</t>
          </li>
          <li>
            <t>An individual process</t>
          </li>
          <li>
            <t>An app on a smartphone</t>
          </li>
          <li>
            <t>A smartphone with many submodules for its many subsystems</t>
          </li>
          <li>
            <t>A subsystem in a smartphone like the modem or the camera</t>
          </li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>
            <t>An identification and type system for claims in claims-sets</t>
          </li>
          <li>
            <t>Definitions of common attestation-oriented claims</t>
          </li>
          <li>
            <t>Claims defined in CDDL and serialized using CBOR or JSON</t>
          </li>
          <li>
            <t>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</t>
          </li>
          <li>
            <t>Nesting of claims sets and tokens to represent complex and compound devices</t>
          </li>
          <li>
            <t>A profile mechanism for specifying and identifying specific tokens for specific use cases</t>
          </li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <?line -18?>

<t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string between 8 and 64 bytes in length.
In JSON, an EAT nonce is a text string between 8 and 88 bytes in length.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries, as described in <xref target="UEIDCreateRules"/>. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="UEIDCreateRules">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The EAT consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity; changeable MAC addresses that don't meet the permanence requirements in this document <bcp14>MUST NOT</bcp14> be used for the UEID or SUEID) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>
                <t>UEIDs types vary freely from one manufacturer to the next.</t>
              </li>
              <li>
                <t>New types of UEIDs may be defined.</t>
              </li>
              <li>
                <t>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</t>
              </li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="RFC9393"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="RFC9393"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to privileged software that allows system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GNSS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="RFC9393"/>.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="RFC9393"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>
              <t>A submodule Claims-Set</t>
            </li>
            <li>
              <t>The digest of a detached Claims-Set</t>
            </li>
            <li>
              <t>A nested token, which can be any EAT</t>
            </li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: 
  CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: 
  Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector socket.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be authenticity and integrity protected</t>
        </li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> be a Claims-Set</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> use the same encoding as the bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</t>
        </li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag 602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC-NEST-SAFE<json-wrapped-claims-set,
                               cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="full-and-partial-profiles">
        <name>Full and Partial Profiles</name>
        <t>For a "full" profile, the receiver will be able to decode and verify every possible EAT sent when a sender and receiver both adhere to it.
For a "partial" profile, there are still some protocol options left undecided.</t>
        <t>For example, a profile that allows the use of signing algorithms by the sender that the receiver is not required to support is a partial profile.
The sender might choose a signing algorithm that some receivers don't support.</t>
        <t>Full profiles <bcp14>MUST</bcp14> be complete such that a complying receiver can decode, verify and check for freshness every EAT created by a complying sender.
Full profiles do not need to require the receiver fully handle every claim in an EAT from a complying sender.
Profile specifications may assume the receiver has access to the necessary verification keys or may go into specific detail on the means to access verification keys.</t>
        <t>The "eat_profile" claim <bcp14>MUST NOT</bcp14> be used to identify partial profiles.</t>
        <t>While fewer profiles are preferrable, sometimes several may be needed for a use case.
One approach to handling variation in devices might be to define several full profiles that are variants of each other.
It is relatively easy and inexpensive to define profiles as they don't have to be standards track and don't have to be registered anywhere.
For example, flexibility for post-quantum algorithms can be handled as follows.
First, define a full profile for a set of non-post-quantum algorithms for current use.
Then, when post-quantum algorithms are settled, define another full profile derived from the first.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT to provide an algorithm negotiation mechanism.</t>
          <t>If not, the profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "urn:ietf:rfc:rfcTBD".</t>
        <t><cref anchor="to-be-removed-1">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST NOT</bcp14> be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence. (It is assumed the receiver has access to a database of trusted verification keys which allows lookup of the verification key ID; the key format and means of distribution are beyond the scope of this profile)</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>For CBOR-encoded tokens, OIDs are specified using the CDDL type name "oid" from <xref target="RFC9090"/>.
They are encoded without the tag number.
For JSON-encoded tokens, OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>
              <t>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</t>
            </li>
            <li>
              <t>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</t>
            </li>
            <li>
              <t>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC4517"/>.</t>
            </li>
          </ul>
          <t>The CDDL generic "JC&lt;&gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC&lt;&gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.
Note that the JC&lt;&gt; generic uses the CDDL ".feature" control operator defined in <xref target="RFC9165"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC-NEST-SAFE<json-wrapped-claims-set,
                               cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label                = JC< "eat_nonce",    10 >
ueid-label                 = JC< "ueid",         256 >
sueids-label               = JC< "sueids",       257 >
oemid-label                = JC< "oemid",        258 >
hardware-model-label       = JC< "hwmodel",      259 >
hardware-version-label     = JC< "hwversion",    260 >
uptime-label               = JC< "uptime",       261 >
oem-boot-label             = JC< "oemboot",      262 >
debug-status-label         = JC< "dbgstat",      263 >
location-label             = JC< "location",     264 >
profile-label              = JC< "eat_profile",  265 >
submods-label              = JC< "submods",      266 >
boot-count-label           = JC< "bootcount",    267 >
boot-seed-label            = JC< "bootseed",     268 >
dloas-label                = JC< "dloas",        269 >
sw-name-label              = JC< "swname",       270 >
sw-version-label           = JC< "swversion",    271 >
manifests-label            = JC< "manifests",    272 >
measurements-label         = JC< "measurements", 273 >
measurement-results-label  = JC< "measres" ,     274 >
intended-use-label         = JC< "intuse",       275 >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: 
  CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: 
  Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>
            <t>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</t>
          </li>
          <li>
            <t>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</t>
          </li>
          <li>
            <t>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</t>
          </li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
a claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.
The "Claim Value Type(s)" here all name CDDL definitions and are only for the CWT registry.</t>
        <t><cref anchor="to-be-removed-3">RFC editor: please see instructions in followg paragraph and remove for final publication</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Nonce</t>
          </li>
          <li>
            <t>Claim Description: Nonce</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_nonce"</t>
          </li>
          <li>
            <t>Claim Key: 10</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: UEID</t>
          </li>
          <li>
            <t>Claim Description: The Universal Entity ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "ueid"</t>
          </li>
          <li>
            <t>CWT Claim Key: 256</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: SUEIDs</t>
          </li>
          <li>
            <t>Claim Description: Semi-permanent UEIDs</t>
          </li>
          <li>
            <t>JWT Claim Name: "sueids"</t>
          </li>
          <li>
            <t>CWT Claim Key: 257</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware OEM ID</t>
          </li>
          <li>
            <t>Claim Description: Hardware OEM ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemid"</t>
          </li>
          <li>
            <t>Claim Key: 258</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or int</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Model</t>
          </li>
          <li>
            <t>Claim Description: Model identifier for hardware</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwmodel"</t>
          </li>
          <li>
            <t>Claim Key: 259</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Version</t>
          </li>
          <li>
            <t>Claim Description: Hardware Version Identifier</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwversion"</t>
          </li>
          <li>
            <t>Claim Key: 260</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: OEM Authorized Boot</t>
          </li>
          <li>
            <t>Claim Description: Indicates whether the software booted was OEM authorized</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemboot"</t>
          </li>
          <li>
            <t>Claim Key: 262</t>
          </li>
          <li>
            <t>Claim Value Type(s): bool</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Debug Status</t>
          </li>
          <li>
            <t>Claim Description: Indicates status of debug facilities</t>
          </li>
          <li>
            <t>JWT Claim Name: "dbgstat"</t>
          </li>
          <li>
            <t>Claim Key: 263</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Location</t>
          </li>
          <li>
            <t>Claim Description: The geographic location</t>
          </li>
          <li>
            <t>JWT Claim Name: "location"</t>
          </li>
          <li>
            <t>Claim Key: 264</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: EAT Profile</t>
          </li>
          <li>
            <t>Claim Description: Indicates the EAT profile followed</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_profile"</t>
          </li>
          <li>
            <t>Claim Key: 265</t>
          </li>
          <li>
            <t>Claim Value Type(s): uri or oid</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Submodules Section</t>
          </li>
          <li>
            <t>Claim Description: The section containing submodules</t>
          </li>
          <li>
            <t>JWT Claim Name: "submods"</t>
          </li>
          <li>
            <t>Claim Key: 266</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Uptime</t>
          </li>
          <li>
            <t>Claim Description: Uptime</t>
          </li>
          <li>
            <t>JWT Claim Name: "uptime"</t>
          </li>
          <li>
            <t>Claim Key: 261</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Count</t>
          </li>
          <li>
            <t>Claim Description: The number times the entity or submodule has been booted</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootcount"</t>
          </li>
          <li>
            <t>Claim Key: 267</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Seed</t>
          </li>
          <li>
            <t>Claim Description: Identifies a boot cycle</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootseed"</t>
          </li>
          <li>
            <t>Claim Key: 268</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: DLOAs</t>
          </li>
          <li>
            <t>Claim Description: Certifications received as Digital Letters of Approval</t>
          </li>
          <li>
            <t>JWT Claim Name: "dloas"</t>
          </li>
          <li>
            <t>Claim Key: 269</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Name</t>
          </li>
          <li>
            <t>Claim Description: The name of the software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swname"</t>
          </li>
          <li>
            <t>Claim Key: 270</t>
          </li>
          <li>
            <t>Claim Value Type(s): tstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Version</t>
          </li>
          <li>
            <t>Claim Description: The version of software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swversion"</t>
          </li>
          <li>
            <t>Claim Key: 271</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Manifests</t>
          </li>
          <li>
            <t>Claim Description: Manifests describing the software installed on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "manifests"</t>
          </li>
          <li>
            <t>Claim Key: 272</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Measurements</t>
          </li>
          <li>
            <t>Claim Description: Measurements of the software, memory configuration and such on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "measurements"</t>
          </li>
          <li>
            <t>Claim Key: 273</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Measurement Results</t>
          </li>
          <li>
            <t>Claim Description: The results of comparing software measurements to reference values</t>
          </li>
          <li>
            <t>JWT Claim Name: "measres"</t>
          </li>
          <li>
            <t>Claim Key: 274</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Intended Use</t>
          </li>
          <li>
            <t>Claim Description: Indicates intended use of the EAT</t>
          </li>
          <li>
            <t>JWT Claim Name: "intuse"</t>
          </li>
          <li>
            <t>Claim Key: 275</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s"ueid:" b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references anchor="sec-normative-references">
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC4517">
          <front>
            <title>Lightweight Directory Access Protocol (LDAP): Syntaxes and Matching Rules</title>
            <author fullname="S. Legg" initials="S." role="editor" surname="Legg"/>
            <date month="June" year="2006"/>
            <abstract>
              <t>Each attribute stored in a Lightweight Directory Access Protocol (LDAP) directory, whose values may be transferred in the LDAP protocol, has a defined syntax that constrains the structure and format of its values. The comparison semantics for values of a syntax are not part of the syntax definition but are instead provided through separately defined matching rules. Matching rules specify an argument, an assertion value, which also has a defined syntax. This document defines a base set of syntaxes and matching rules for use in defining attributes for LDAP directories. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4517"/>
          <seriesInfo name="DOI" value="10.17487/RFC4517"/>
        </reference>
        <reference anchor="RFC9393">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="J. Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay"/>
            <author fullname="C. Schmidt" initials="C." surname="Schmidt"/>
            <author fullname="D. Waltermire" initials="D." surname="Waltermire"/>
            <date month="June" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles. SWID tag representations can be too large for devices with network and storage constraints. This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags. CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9393"/>
          <seriesInfo name="DOI" value="10.17487/RFC9393"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="http://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="http://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="http://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references anchor="sec-informative-references">
        <name>Informative References</name>
        <reference anchor="RFC9562">
          <front>
            <title>Universally Unique IDentifiers (UUIDs)</title>
            <author fullname="K. Davis" initials="K." surname="Davis"/>
            <author fullname="B. Peabody" initials="B." surname="Peabody"/>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <date month="May" year="2024"/>
            <abstract>
              <t>This specification defines UUIDs (Universally Unique IDentifiers) --
also known as GUIDs (Globally Unique IDentifiers) -- and a Uniform
Resource Name namespace for UUIDs. A UUID is 128 bits long and is
intended to guarantee uniqueness across space and time. UUIDs were
originally used in the Apollo Network Computing System (NCS), later
in the Open Software Foundation's (OSF's) Distributed Computing
Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the OSF DCE specification with the
kind permission of the OSF (now known as "The Open Group"). Information from earlier versions of the OSF DCE specification have
been incorporated into this document. This document obsoletes RFC
4122.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9562"/>
          <seriesInfo name="DOI" value="10.17487/RFC9562"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
          <seriesInfo name="ISBN" value="[&quot;9781504450195&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
          <seriesInfo name="ISBN" value="[&quot;9780738192192&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="4" month="March" year="2024"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50% while also significantly reducing memory and code size
   compared to ASN.1.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 Certificate Signing Requests, C509 COSE headers, a
   C509 TLS certificate type, and a C509 file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-09"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="4" month="March" year="2024"/>
            <abstract>
              <t>   When transported over secure channels, CBOR Web Token (CWT, RFC 8392)
   Claims Sets may not need the protection afforded by wrapping them
   into COSE, as is required for a true CWT.  This specification defines
   a CBOR tag for such unprotected CWT Claims Sets (UCCS) and discusses
   conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-09"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>Linaro</organization>
            </author>
            <date day="2" month="April" year="2024"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-07"/>
        </reference>
      </references>
    </references>
    <?line 2583?>

<section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t><cref anchor="to-be-removed-2">RFC Editor: When the IANA values are permanently assigned, please contact the authors so the examples can be regenerated. Regeneration is required because IANA-assigned values are inside hex and based-64 encoded data and some of these are signed.</cref></t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                              [
                               258, / CoAP Content ID for CoSWID    /

                               / This is byte-string wrapped        /
                               / payload CoSWID. It gives the TEE   /
                               / software name, the version and     /
                               / the name of the file it is in.     /
                               / {0: "3a24",                        /
                               /  12: 1,                            /
                               /   1: "Acme TEE OS",                /
                               /  13: "3.1.4",                      /
                               /   2: [{31: "Acme TEE OS", 33: 1},  /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                             /
                               /       17: {                        /
                               /           24: "acme_tee_3.exe"     /
                               /       }                            /
                               /    }                               /
                               /  }                                 /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         270: "Acme OS",
    / swversion /      271: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest either come        /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for an IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896',
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    273: [
                                   [
                                     258, / CoAP Content ID         /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8xQk",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-submodules">
          <name>JSON-encoded Token with Submodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token. The payload is the    /
/ attestation hardware block above. The main structure   /
/ visible is that of the COSE_Sign1.                     /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A60A4CD79B964DDD5471C1393C88881901005001
      98F50A4FF6C05861C8860D13A638EA19010219FA
      F2190106F5190107031901048263332E3101',        / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="cbor-encoded-detached-eat-bundle">
          <name>CBOR-encoded Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag. /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE.                   /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block.                                        /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "Audio Subsystem" and "Graphics Subsystem".
The JWT at the start of the bundle has detached signature submodules with hashes that cover these two Claims-Sets.
The JWT itself is protected using HMAC with a key of "xxxxxx".</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
    [
        "JWT",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlYXRfbm9uY2UiOiJ5dT\
c2Tk44SXVWNmUiLCJzdWJtb2RzIjp7IkF1ZGlvIFN1YnN5c3RlbSI6WyJESUdFU1QiLF\
siU0hBLTI1NiIsIkZSRW4yVlR3aTk5cWNNRVFzYmxtTVFnM2I1b2ZYUG5OM1BJYW5CME\
5RT3MiXV0sIkdyYXBoaWNzIFN1YnN5c3RlbSI6WyJESUdFU1QiLFsiU0hBLTI1NiIsIk\
52M3NqUVU3Q1Z0RFRka0RTUlhWcFZDNUNMVFBCWmVQWWhTLUhoVlZWMXMiXV19fQ.FYs\
7R-TKhgAk85NyCOPQlbtGGjFM_3chnhBEOuM6qCo"
    ],
    {
        "Audio Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJsSStJWU5FNlJ\
qNk8iLAogICAgInVlaWQiOiAiQWROSlU0b1lYdFVwQStIeDNqQTcvRFEiCiAgICAib2V\
taWQiOiAiaVVXdCIsCiAgICAib2VtYm9vdCI6IHRydWUsIAogICAgInN3bmFtZSI6ICJ\
BdWRpbyBQcm9jZXNzb3IgT1MiCn0K",
        "Graphics Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJZWStJWU5F\
NlJqNk8iLAogICAgInVlaWQiOiAiQWVUTUlRQ1NVMnhWQmtVdGlndHU3bGUiCiAgICAi\
b2VtaWQiOiA3NTAwMCwKICAgICJvZW1ib290IjogdHJ1ZSwgCiAgICAic3duYW1lIjog\
IkdyYXBoaWNzIE9TIgp9Cg"
    }
]

]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC9562"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; Same as JC<> but with unwound generic nesting as it seems to cause
; problems. Perhaps this is the nesting problem described in RFC 
; 8610.
JC-NEST-SAFE<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-24">
        <name>From draft-ietf-rats-eat-24</name>
        <t>The changes from draft-24, not draft 25, are listed here as draft-24 is what was accepted after IETF last call and draft-25 was kind of a false start.</t>
        <ul spacing="normal">
          <li>
            <t>Address some small claim data type naming issues that came to light when IANA completed the registrations requested by this document. In particular, the CDDL type names are used.</t>
          </li>
          <li>
            <t>Remove all dependence on SUIT Manifest to break schedule interlock with RFC Editor. Use of SUIT-Manifest is peripheral to the core of EAT. It was mostly a content type pre-registration. The modification consisted of the removal of one sentence, a few more words and two lines of CDDL.</t>
          </li>
          <li>
            <t>Reworded full profiles description to convey intent without using "may not"</t>
          </li>
          <li>
            <t>Upated references for UUIDs and LDAP to non-obsolete documents.</t>
          </li>
          <li>
            <t>Removed some non-ascii quote marks</t>
          </li>
          <li>
            <t>"<bcp14>MAY</bcp14> not" -&gt; "<bcp14>MAY</bcp14> NOT"</t>
          </li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <?line 3592?>

<t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
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
YG0KbhW30SZKR4rIWk4ziP+KAqwTaoeAIPZJxeyRKZ6cIuCyr1mdzwovNd6z
OYHxKCLJGs1TXkmWnKC2ht22iCRUhA+VRwWuo6C5UyNTZuGaMtp4Qp0Zvm/E
dugJLQmrtBZiX8QsagPictwSHaMNEwR8DJTlFsjHPMgN4zywZ2IUEh3OVcsE
ID2w4ZJJo3EuLbcRHkN0D+rVEGyIglXe5jeoPfB+GG9Qcpuu1Tcidlgw9q13
VpHKG3GUXs8gfQaPBJPDmM6hKjBTkXTgPRfgGmbLCfs2ONcF9aUBFobPiMWV
xp8F4zm/ADUcTxHUl5PGpPARXvNvYEMWbFBBM+oYZpPDadoNwP78Xr2Vld99
U7nvPqOUKbbh7To33CLR9CCfiVQO5Qn4j2BmU8GsBQPbHWqZz2X/R6mcV1hA
EAmKZe+Rwd7n7npfo/sXG2Thks/gOlfLoJmNttU/+LZOV+WimJBvkfLeevbU
r5C2qAcEEP6MOD12ewBclINgPYBPF2gVZNwv1r2JeB+zCsMOhSGyWK7WjfCM
ePdIh4EIcyOr3boHpD4CyWJixAgXjkzfPM8WZL5jC/a61nvT64LjDOV1dF5y
jsTXV3xj20hErjDPCAbh60sm9hZqUP30CvDeg+usWGxZF5wFm1sIxwDryEZG
Vl86pKYKMJ0sGRLHRDxuswpv83oJpIuV3H24Zuv4xAJJN2IXAv6UZFrpxwFQ
y8hKJy4w1UVDQYLK2K3ruh8ecZwPy/IWthM5OAItpEBoYAl+NsErpGh0vmoI
NojFM6Rt2PQ0HrAdSwEBRVanjlyhTQImQ+dYfeQFXntvzFHaf1RufDoWhPD4
2LYCNHlBTTmMQJT6AXAF5nkjECzXCF2whEUJDPoUPZKIwwbBIxuTxTIC9Ka9
Mc6JYMXWA7GSCRK8Z7KAW+QkGNvjDMgjyhRJYpCTrkQsiAxUe7gU9e3wN0/5
8CiCItgycTLjRVHPyZ5pzF9amfYxWimsjnm7geCcmj15MnQJk2gCdEFZGOTy
qbKDHalcYzBG2Wc5BamgUYzqkBxPAvXE+KGfBEE0uhwinLGdK2/uR/TExUpY
BwbvbRi6kXUDeguy087Ld5dXOwP+b/rqNf399vxf3128PT/Dvy//ePLihf2R
SIvLP75+9+Is/BW+PH398uX5qzP+GJ6m0aNk5+XJf+ywyWHn9Zuri9evTl7s
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
xbMTn6yAZuStoRpOeRfctYwgcYQLKXCiUhJxhLYWgnMDG0BEVdF9VDcWy2T2
uSfJ1oUrhv7u7cUeh+Gmr9kmc9EqlQ43T/VPjNjgE+bGggeyy2Y3jSmHLQIg
/TWnOvgzsn6ZVm123Lnui30jTo4UOoz+GlwoScRF7K2p8pZc5QukWE0U9sCy
KWIKA8qgiBo1TvY0FvkM0xjeoME9SmyzZfe3lHh1S7CAJrVVSRX41tnKxojM
lI3rckH8DZr0SVzR1McjhSYuQ0TevQpRr8V5B4/HSY9f9qFWeDUbsssQlT6w
X2UxjXIqwj1DpLZL1S/xoryrQ2JVcnsQGpIDwSg3Ts5Haf5TwxHckibOfJCi
Ul+cJHqHR9pJ2gGSloBPrDhyB7hANII+cSAmQNIk12izSjy1lksfRTYToiKG
CdVNnD4zSvfFFWOFL9ZKwVxUQIu6WgrpOAKECn02xaL4Cye/GCWPQoSji1zQ
VbdLMzCfwiU3YFIoPJvUqtPXEPWosAeHoOI2CGmUwUKCR9Rlhrg+2CNGexQW
8RyhoJigilf+jDgwl74y3ii+sk5ypKNJXN0nlP/geq9Xw6ZEy76LhKRKRfVN
HtLVevGK2cSLJqF8GxJbG0KjCtc5X5fFZsgH6+Znq3wIi3wrWdLwDa70HMco
cuerpyl0zNuQNg1dJZGPVoC3yZSJCZaxR28rm1jlBrZsYikDpoE/yOFNbHgz
BOe7FuplEK/JX/Fkxyxo2FgaM/IGZ4mUEfqPFq6VY/S9MlcBpgWKkN/k+XEW
JLqKiZ43rMUYR/WU/EDsPaUSXYSSROgMDzeU8Tdgd0UCBjk4I9V4ZMo9CaRo
sKMBEJcjiQNqV1QNSou6yaI1jOXUMmQCmazrNdYGwg05jfJ+SpFS2qHd05N6
L41m1eO+vCteCSiho1v9jCThFHj1yQeuBy4RlNoJ870E6Cr0SPIdXOqUla/q
Pr1HcZZYRXiKpYA5DZyJX4WsI84Rm7NXOO6fVwO1ANO1tyRoOEXUje6eXr5F
DfkjgSAQh+D/3pS1ZDvGfTtpoeTW6W25EviGvFoAbrEG3Eo7X1nn6e6b8s2e
v8qj9GXJ3rRYDZkyvaXQhjVKbOphrTPfi8SV9bOIKuWgO8qQIW81xSnRbMLd
q3Oqz4qKnTC9hLhSAHG9xR+K5bSdMVr2PXj5wTxCjrTkXijGDKyBx2KmAm9U
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
2fOfToKf+5MXX2Cq82y2H9Zf3iyenf726rb+7nb+i1PvdEc3z6ef1tEq/m3w
+qDlZZ2Pg1X3ZHT2Nvj19vn0y/H616eT27jlxdkPauc+6J17kczXX1w5gI0b
r56XN349kqo5zws7/vzyPLfh8d3zZvzzIHmVPP/prfcmeTF8fj16GuH344vf
jr2T5Hm/AS8touAlvfTi4qg5fvr2t/EvztO3d8fJbRJeHjWPP6VfTj5dfDn5
LWq+OnjXgm6m8TPodtb2Rk9vs+PZkfd+eNw5To6z4/mJ9y7Bv6HrX5yrT7et
+dHL6xeL5xfr1z/fvHz920/e05efru+e/+rfXP585bW8zs8/Zb/dvtmxr27O
eZ7qyug7m08bAtJ6ElEScvm9wgQIT+tizGNLnGQ30Ybew+HB2cCUmKpI/kGV
tUodsbHKstFZyhbbGKdd3dlFn+m5if/jmg1r7TyJdUVHXLeMqI6QInLjwa3w
NsW3OR1v1/V6uwIU148GXtPzO4/uS/PwuFRiKFOGgK/f7m8YzxZYDXhe7kD8
jGACneagNTzo9vf7ndbBwQG60g/RlX6IrvRev+k1m+1mU8kr/d5RGxocHXWG
ZNIaoknrwAsGnaB3OKDXfa9/NJDXj3z6qXPUpn+7zYD+bfX8DjCd/mEAyzeL
tyJlZXYwq33/qH3Y6qKX1VFn4DeHvUHLa3f3291OcDRstfcPu23FO/cH7YDC
9ttet9vpDX1vcHS032u1B+3OYL/d7h5C835XscqDJnDO3aDv+a1g0O0PW91e
u+MfQPOO5x/6fX/Y8X2voxQIg30/CLq97qN79twsRde0xL3+4O65duwsYl5N
6SpSOUl2LMwpVk6kVDP2JL4tBTMyxZrY0E1A3ZD68NJdPq1SvjmxpczoTTGw
cKoqYEWmRLCVDcjkjmI2WNmHuXodU2hrOOx5EsdjuTtS4066VVEyDa7lhhUS
kTdWBN/oT3Vt95z1XAfZWCmqVJGM1fU6U4iF0iAReSw1bThn4gUdW2cYYXQT
ow+ZsI4b0NmN8lvKjgQ8htQLqix9aGr7cXUU4DOnPKv1fCVRBvckParsdBVe
kRK50/R3/6ZczY6SZSae2gZhUn1Hw2nZAgdb3nGnlFIYQ3MaLuUL07VvsVh1
ksvsZIWK6dROqgc9WdlEXR+R4404uI0kAtjVHbuGo/beVNVDv6xUSm5G1FRt
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
9SZnAKfrJZU4tMXMURN84vwfiQI8LlR6AgA=

-->

</rfc>
