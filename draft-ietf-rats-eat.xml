<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.15 (Ruby 3.3.1) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.21.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Mediatek USA</organization>
      <address>
        <email>giridhar.mandyam@gmail.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2024" month="June" day="25"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <?line 174?>

<t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <?line 184?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>
          <t>Make and model of manufactured consumer device</t>
        </li>
        <li>
          <t>Make and model of a chip or processor, particularly for a security-oriented chip</t>
        </li>
        <li>
          <t>Identification and measurement of the software running on a device</t>
        </li>
        <li>
          <t>Configuration and state of a device</t>
        </li>
        <li>
          <t>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</t>
        </li>
        <li>
          <t>Formal certifications received</t>
        </li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like Trusted Platform Modules or Secure Elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <t>Following is a very simple example.
It is JSON format for easy reading, but could also be CBOR.
Only the Claims-Set, the payload for the JWT, is shown.</t>
      <artwork><![CDATA[
{
    "eat_nonce": "MIDBNH28iioisjPy",
    "ueid":      "AgAEizrK3Q",
    "oemid":     76543, 
    "swname":    "Acme IoT OS",
    "swversion": "3.1.4"
}
]]></artwork>
      <t>This example has a nonce for freshness.
This nonce is the base64url encoding of a 12 byte random binary byte string.
The ueid is effectively a serial number uniquely identifying the device.
This ueid is the base64url encoding of a 48-bit MAC address preceded by the type byte 0x02.
The oemid identifies the manufacturer using a Private Enterprise Number <xref target="PEN"/>.
The software is identified by a simple string name and version.
It could be identified by a full manifest, but this is a minimal example.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>
            <t>A Secure Element</t>
          </li>
          <li>
            <t>A Trusted Execution Environment (TEE)</t>
          </li>
          <li>
            <t>A network card in a router</t>
          </li>
          <li>
            <t>A router, perhaps with each network card in the router a submodule</t>
          </li>
          <li>
            <t>An Internet of Things (IoT) device</t>
          </li>
          <li>
            <t>An individual process</t>
          </li>
          <li>
            <t>An app on a smartphone</t>
          </li>
          <li>
            <t>A smartphone with many submodules for its many subsystems</t>
          </li>
          <li>
            <t>A subsystem in a smartphone like the modem or the camera</t>
          </li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>
            <t>An identification and type system for claims in claims-sets</t>
          </li>
          <li>
            <t>Definitions of common attestation-oriented claims</t>
          </li>
          <li>
            <t>Claims defined in CDDL and serialized using CBOR or JSON</t>
          </li>
          <li>
            <t>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</t>
          </li>
          <li>
            <t>Nesting of claims sets and tokens to represent complex and compound devices</t>
          </li>
          <li>
            <t>A profile mechanism for specifying and identifying specific tokens for specific use cases</t>
          </li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>.
To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set either includes a received nonce or uses some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <?line -18?>

<t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string between 8 and 64 bytes in length.
In JSON, an EAT nonce is a text string between 8 and 88 bytes in length.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries, as described in <xref target="UEIDCreateRules"/>. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="UEIDCreateRules">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The EAT consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given product and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity; changeable MAC addresses that don't meet the permanence requirements in this document <bcp14>MUST NOT</bcp14> be used for the UEID or SUEID) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>
                <t>UEIDs types vary freely from one manufacturer to the next.</t>
              </li>
              <li>
                <t>New types of UEIDs may be defined.</t>
              </li>
              <li>
                <t>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</t>
              </li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="RFC9393"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="RFC9393"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to privileged software that allows system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GNSS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform <xref target="GP-Example"/> and those based on Common Criteria <xref target="CC-Example"/>.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="RFC9393"/>.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="RFC9393"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>
              <t>A submodule Claims-Set</t>
            </li>
            <li>
              <t>The digest of a detached Claims-Set</t>
            </li>
            <li>
              <t>A nested token, which can be any EAT</t>
            </li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: 
  CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: 
  Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector socket.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be authenticity and integrity protected</t>
        </li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> be a Claims-Set</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> use the same encoding as the bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</t>
        </li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag 602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC-NEST-SAFE<json-wrapped-claims-set,
                               cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="full-and-partial-profiles">
        <name>Full and Partial Profiles</name>
        <t>For a "full" profile, the receiver will be able to decode and verify every possible EAT sent when a sender and receiver both adhere to it.
For a "partial" profile, there are still some protocol options left undecided.</t>
        <t>For example, a profile that allows the use of signing algorithms by the sender that the receiver is not required to support is a partial profile.
The sender might choose a signing algorithm that some receivers don't support.</t>
        <t>Full profiles <bcp14>MUST</bcp14> be complete such that a complying receiver can decode, verify and check for freshness every EAT created by a complying sender.
Full profiles do not need to require the receiver fully handle every claim in an EAT from a complying sender.
Profile specifications may assume the receiver has access to the necessary verification keys or may go into specific detail on the means to access verification keys.</t>
        <t>The "eat_profile" claim <bcp14>MUST NOT</bcp14> be used to identify partial profiles.</t>
        <t>While fewer profiles are preferrable, sometimes several may be needed for a use case.
One approach to handling variation in devices might be to define several full profiles that are variants of each other.
It is relatively easy and inexpensive to define profiles as they don't have to be standards track and don't have to be registered anywhere.
For example, flexibility for post-quantum algorithms can be handled as follows.
First, define a full profile for a set of non-post-quantum algorithms for current use.
Then, when post-quantum algorithms are settled, define another full profile derived from the first.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT to provide an algorithm negotiation mechanism.</t>
          <t>If not, the profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "urn:ietf:rfc:rfcTBD".</t>
        <t><cref anchor="to-be-removed-1">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST NOT</bcp14> be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence. (It is assumed the receiver has access to a database of trusted verification keys which allows lookup of the verification key ID; the key format and means of distribution are beyond the scope of this profile)</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>For CBOR-encoded tokens, OIDs are specified using the CDDL type name "oid" from <xref target="RFC9090"/>.
They are encoded without the tag number.
For JSON-encoded tokens, OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>
              <t>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</t>
            </li>
            <li>
              <t>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</t>
            </li>
            <li>
              <t>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC4517"/>.</t>
            </li>
          </ul>
          <t>The CDDL generic "JC&lt;&gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC&lt;&gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.
Note that the JC&lt;&gt; generic uses the CDDL ".feature" control operator defined in <xref target="RFC9165"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC-NEST-SAFE<json-wrapped-claims-set,
                               cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label                = JC< "eat_nonce",    10 >
ueid-label                 = JC< "ueid",         256 >
sueids-label               = JC< "sueids",       257 >
oemid-label                = JC< "oemid",        258 >
hardware-model-label       = JC< "hwmodel",      259 >
hardware-version-label     = JC< "hwversion",    260 >
uptime-label               = JC< "uptime",       261 >
oem-boot-label             = JC< "oemboot",      262 >
debug-status-label         = JC< "dbgstat",      263 >
location-label             = JC< "location",     264 >
profile-label              = JC< "eat_profile",  265 >
submods-label              = JC< "submods",      266 >
boot-count-label           = JC< "bootcount",    267 >
boot-seed-label            = JC< "bootseed",     268 >
dloas-label                = JC< "dloas",        269 >
sw-name-label              = JC< "swname",       270 >
sw-version-label           = JC< "swversion",    271 >
manifests-label            = JC< "manifests",    272 >
measurements-label         = JC< "measurements", 273 >
measurement-results-label  = JC< "measres" ,     274 >
intended-use-label         = JC< "intuse",       275 >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: 
  CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: 
  Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>
            <t>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</t>
          </li>
          <li>
            <t>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</t>
          </li>
          <li>
            <t>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</t>
          </li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
a claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.
The "Claim Value Type(s)" here all name CDDL definitions and are only for the CWT registry.</t>
        <t><cref anchor="to-be-removed-3">RFC editor: please see instructions in followg paragraph and remove for final publication</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Nonce</t>
          </li>
          <li>
            <t>Claim Description: Nonce</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_nonce"</t>
          </li>
          <li>
            <t>Claim Key: 10</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: UEID</t>
          </li>
          <li>
            <t>Claim Description: The Universal Entity ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "ueid"</t>
          </li>
          <li>
            <t>CWT Claim Key: 256</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: SUEIDs</t>
          </li>
          <li>
            <t>Claim Description: Semi-permanent UEIDs</t>
          </li>
          <li>
            <t>JWT Claim Name: "sueids"</t>
          </li>
          <li>
            <t>CWT Claim Key: 257</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware OEM ID</t>
          </li>
          <li>
            <t>Claim Description: Hardware OEM ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemid"</t>
          </li>
          <li>
            <t>Claim Key: 258</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or int</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Model</t>
          </li>
          <li>
            <t>Claim Description: Model identifier for hardware</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwmodel"</t>
          </li>
          <li>
            <t>Claim Key: 259</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Version</t>
          </li>
          <li>
            <t>Claim Description: Hardware Version Identifier</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwversion"</t>
          </li>
          <li>
            <t>Claim Key: 260</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: OEM Authorized Boot</t>
          </li>
          <li>
            <t>Claim Description: Indicates whether the software booted was OEM authorized</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemboot"</t>
          </li>
          <li>
            <t>Claim Key: 262</t>
          </li>
          <li>
            <t>Claim Value Type(s): bool</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Debug Status</t>
          </li>
          <li>
            <t>Claim Description: Indicates status of debug facilities</t>
          </li>
          <li>
            <t>JWT Claim Name: "dbgstat"</t>
          </li>
          <li>
            <t>Claim Key: 263</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Location</t>
          </li>
          <li>
            <t>Claim Description: The geographic location</t>
          </li>
          <li>
            <t>JWT Claim Name: "location"</t>
          </li>
          <li>
            <t>Claim Key: 264</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: EAT Profile</t>
          </li>
          <li>
            <t>Claim Description: Indicates the EAT profile followed</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_profile"</t>
          </li>
          <li>
            <t>Claim Key: 265</t>
          </li>
          <li>
            <t>Claim Value Type(s): uri or oid</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Submodules Section</t>
          </li>
          <li>
            <t>Claim Description: The section containing submodules</t>
          </li>
          <li>
            <t>JWT Claim Name: "submods"</t>
          </li>
          <li>
            <t>Claim Key: 266</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Uptime</t>
          </li>
          <li>
            <t>Claim Description: Uptime</t>
          </li>
          <li>
            <t>JWT Claim Name: "uptime"</t>
          </li>
          <li>
            <t>Claim Key: 261</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Count</t>
          </li>
          <li>
            <t>Claim Description: The number times the entity or submodule has been booted</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootcount"</t>
          </li>
          <li>
            <t>Claim Key: 267</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Seed</t>
          </li>
          <li>
            <t>Claim Description: Identifies a boot cycle</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootseed"</t>
          </li>
          <li>
            <t>Claim Key: 268</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: DLOAs</t>
          </li>
          <li>
            <t>Claim Description: Certifications received as Digital Letters of Approval</t>
          </li>
          <li>
            <t>JWT Claim Name: "dloas"</t>
          </li>
          <li>
            <t>Claim Key: 269</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Name</t>
          </li>
          <li>
            <t>Claim Description: The name of the software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swname"</t>
          </li>
          <li>
            <t>Claim Key: 270</t>
          </li>
          <li>
            <t>Claim Value Type(s): tstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Version</t>
          </li>
          <li>
            <t>Claim Description: The version of software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swversion"</t>
          </li>
          <li>
            <t>Claim Key: 271</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Manifests</t>
          </li>
          <li>
            <t>Claim Description: Manifests describing the software installed on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "manifests"</t>
          </li>
          <li>
            <t>Claim Key: 272</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Measurements</t>
          </li>
          <li>
            <t>Claim Description: Measurements of the software, memory configuration and such on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "measurements"</t>
          </li>
          <li>
            <t>Claim Key: 273</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Measurement Results</t>
          </li>
          <li>
            <t>Claim Description: The results of comparing software measurements to reference values</t>
          </li>
          <li>
            <t>JWT Claim Name: "measres"</t>
          </li>
          <li>
            <t>Claim Key: 274</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Intended Use</t>
          </li>
          <li>
            <t>Claim Description: Indicates intended use of the EAT</t>
          </li>
          <li>
            <t>JWT Claim Name: "intuse"</t>
          </li>
          <li>
            <t>Claim Key: 275</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s"ueid:" b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references anchor="sec-normative-references">
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC4517">
          <front>
            <title>Lightweight Directory Access Protocol (LDAP): Syntaxes and Matching Rules</title>
            <author fullname="S. Legg" initials="S." role="editor" surname="Legg"/>
            <date month="June" year="2006"/>
            <abstract>
              <t>Each attribute stored in a Lightweight Directory Access Protocol (LDAP) directory, whose values may be transferred in the LDAP protocol, has a defined syntax that constrains the structure and format of its values. The comparison semantics for values of a syntax are not part of the syntax definition but are instead provided through separately defined matching rules. Matching rules specify an argument, an assertion value, which also has a defined syntax. This document defines a base set of syntaxes and matching rules for use in defining attributes for LDAP directories. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4517"/>
          <seriesInfo name="DOI" value="10.17487/RFC4517"/>
        </reference>
        <reference anchor="RFC9393">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="J. Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay"/>
            <author fullname="C. Schmidt" initials="C." surname="Schmidt"/>
            <author fullname="D. Waltermire" initials="D." surname="Waltermire"/>
            <date month="June" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles. SWID tag representations can be too large for devices with network and storage constraints. This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags. CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9393"/>
          <seriesInfo name="DOI" value="10.17487/RFC9393"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="http://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="http://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="http://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references anchor="sec-informative-references">
        <name>Informative References</name>
        <reference anchor="RFC9562">
          <front>
            <title>Universally Unique IDentifiers (UUIDs)</title>
            <author fullname="K. Davis" initials="K." surname="Davis"/>
            <author fullname="B. Peabody" initials="B." surname="Peabody"/>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <date month="May" year="2024"/>
            <abstract>
              <t>This specification defines UUIDs (Universally Unique IDentifiers) --
also known as GUIDs (Globally Unique IDentifiers) -- and a Uniform
Resource Name namespace for UUIDs. A UUID is 128 bits long and is
intended to guarantee uniqueness across space and time. UUIDs were
originally used in the Apollo Network Computing System (NCS), later
in the Open Software Foundation's (OSF's) Distributed Computing
Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the OSF DCE specification with the
kind permission of the OSF (now known as "The Open Group"). Information from earlier versions of the OSF DCE specification have
been incorporated into this document. This document obsoletes RFC
4122.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9562"/>
          <seriesInfo name="DOI" value="10.17487/RFC9562"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
          <seriesInfo name="ISBN" value="[&quot;9781504450195&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
          <seriesInfo name="ISBN" value="[&quot;9780738192192&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="4" month="March" year="2024"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50% while also significantly reducing memory and code size
   compared to ASN.1.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 Certificate Signing Requests, C509 COSE headers, a
   C509 TLS certificate type, and a C509 file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-09"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="4" month="March" year="2024"/>
            <abstract>
              <t>   When transported over secure channels, CBOR Web Token (CWT, RFC 8392)
   Claims Sets may not need the protection afforded by wrapping them
   into COSE, as is required for a true CWT.  This specification defines
   a CBOR tag for such unprotected CWT Claims Sets (UCCS) and discusses
   conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-09"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>Linaro</organization>
            </author>
            <date day="2" month="April" year="2024"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-07"/>
        </reference>
        <reference anchor="CC-Example" target="https://commoncriteriaportal.org/nfs/ccpfiles/files/ppfiles/pp0117V2b_pdf.pdf">
          <front>
            <title>Secure Sub-System in System-on-Chip (3S in SoC) Protection Profile</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="GP-Example" target="https://globalplatform.org/wp-content/uploads/2021/01/GP_TEECertificationProcess_v2.0_PublicRelease.pdf">
          <front>
            <title>GlobalPlatform Technology TEE Certification Process</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
      </references>
    </references>
    <?line 2594?>

<section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t><cref anchor="to-be-removed-2">RFC Editor: When the IANA values are permanently assigned, please contact the authors so the examples can be regenerated. Regeneration is required because IANA-assigned values are inside hex and based-64 encoded data and some of these are signed.</cref></t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                              [
                               258, / CoAP Content ID for CoSWID    /

                               / This is byte-string wrapped        /
                               / payload CoSWID. It gives the TEE   /
                               / software name, the version and     /
                               / the name of the file it is in.     /
                               / {0: "3a24",                        /
                               /  12: 1,                            /
                               /   1: "Acme TEE OS",                /
                               /  13: "3.1.4",                      /
                               /   2: [{31: "Acme TEE OS", 33: 1},  /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                             /
                               /       17: {                        /
                               /           24: "acme_tee_3.exe"     /
                               /       }                            /
                               /    }                               /
                               /  }                                 /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         270: "Acme OS",
    / swversion /      271: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest either come        /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for an IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896',
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    273: [
                                   [
                                     258, / CoAP Content ID         /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8xQk",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-submodules">
          <name>JSON-encoded Token with Submodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token. The payload is the    /
/ attestation hardware block above. The main structure   /
/ visible is that of the COSE_Sign1.                     /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A60A4CD79B964DDD5471C1393C88881901005001
      98F50A4FF6C05861C8860D13A638EA19010219FA
      F2190106F5190107031901048263332E3101',        / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="cbor-encoded-detached-eat-bundle">
          <name>CBOR-encoded Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag. /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE.                   /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block.                                        /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "Audio Subsystem" and "Graphics Subsystem".
The JWT at the start of the bundle has detached signature submodules with hashes that cover these two Claims-Sets.
The JWT itself is protected using HMAC with a key of "xxxxxx".</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
    [
        "JWT",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlYXRfbm9uY2UiOiJ5dT\
c2Tk44SXVWNmUiLCJzdWJtb2RzIjp7IkF1ZGlvIFN1YnN5c3RlbSI6WyJESUdFU1QiLF\
siU0hBLTI1NiIsIkZSRW4yVlR3aTk5cWNNRVFzYmxtTVFnM2I1b2ZYUG5OM1BJYW5CME\
5RT3MiXV0sIkdyYXBoaWNzIFN1YnN5c3RlbSI6WyJESUdFU1QiLFsiU0hBLTI1NiIsIk\
52M3NqUVU3Q1Z0RFRka0RTUlhWcFZDNUNMVFBCWmVQWWhTLUhoVlZWMXMiXV19fQ.FYs\
7R-TKhgAk85NyCOPQlbtGGjFM_3chnhBEOuM6qCo"
    ],
    {
        "Audio Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJsSStJWU5FNlJ\
qNk8iLAogICAgInVlaWQiOiAiQWROSlU0b1lYdFVwQStIeDNqQTcvRFEiCiAgICAib2V\
taWQiOiAiaVVXdCIsCiAgICAib2VtYm9vdCI6IHRydWUsIAogICAgInN3bmFtZSI6ICJ\
BdWRpbyBQcm9jZXNzb3IgT1MiCn0K",
        "Graphics Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJZWStJWU5F\
NlJqNk8iLAogICAgInVlaWQiOiAiQWVUTUlRQ1NVMnhWQmtVdGlndHU3bGUiCiAgICAi\
b2VtaWQiOiA3NTAwMCwKICAgICJvZW1ib290IjogdHJ1ZSwgCiAgICAic3duYW1lIjog\
IkdyYXBoaWNzIE9TIgp9Cg"
    }
]

]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC9562"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common computing platforms.
In particular, hardware randomness sources were introduced in CPUs between 2010 and 2015.
Operating systems and cryptographic libraries make use of this hardware.
Consequently, there is little need for protocols to construct random numbers from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; Same as JC<> but with unwound generic nesting as it seems to cause
; problems. Perhaps this is the nesting problem described in RFC 
; 8610.
JC-NEST-SAFE<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-27">
        <name>From draft-ietf-rats-eat-27</name>
        <ul spacing="normal">
          <li>
            <t>Random sources clarifications in Appendix B</t>
          </li>
          <li>
            <t>Minor wording fixes</t>
          </li>
          <li>
            <t>Add certification examples for DLOAs</t>
          </li>
          <li>
            <t>Clarify nonce source in section 1.3</t>
          </li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <?line 3598?>

<t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y963rb2JUg+h9PgaPK95WUkNTVLtvdVYlKUjmq9q0tOdU9
NXWqQRIkEVMEGwAtK4r7WeZZ5slm3ffaACg7yfT5dfx1p0RgY1/XXvfLcDhM
PjxLj5OkKZpl/iy9XuTpxQp+3KWnTZPXTdYU5Sq9Lt/nq3T34vR6L8nG4yqH
j+BHMi0nq+wGvptW2awZFnkzG1ZZUw/zrBkuM+wgmWTNs7RupkkyKVd1vqo3
9bO0qTZ5UjdVnt08Sy8vrn9IinVFj+vm6ODg6cFRksHLZ+lVPtlUMJ3kdv4s
fXt6fZW8v4XuivmqWM3TzM1xMi6rJFkXz5I0bcrJs/Tru7z+mn9M83WzgCcn
+LsuKxh4VocW9d1N/GBS3qyzSeNabMbh2arER9Vskk/r5g63jZvBv2zTLMrq
WTJMixX092KUvtispuNlNs3hE96rF9mmyleTPHpVVvOwWDyGsrpLX7w4g1f5
TVYsn6XL+fIPtTRo6P0IpqQjPR+lL7PV9C67sXGeF1UxXWSVe0GjvMynBRzN
+/Td1Wnofi6tRzfc+g9zfO6H+HGUvv76vFyV88UmrObHvMpv7uI3NMy/brIl
fH2TXueTxapclvMir9PL1WSE+wknkMNeHn3zNP0hq1ZwduVmvkjfltkU9x/W
+My/oDOZ4qLeHZ6k37y4ogebVVNBu3erosmn6b8ARExLXOZ6Ua6g7e9OTtLD
o0dH6fHj48MnT8Na/1xOabJ/+M+mGP2nzNMv9WyU/pQtl9kkrPMsq5buIS3x
LYz6R5jFNL0qZ80tQOxAFygjTeCrP1T5dIGtamlEI+FtaKpivGkYXniUP+ar
9+n3RfV+US7/osP8UGWb1aKc5VV6dXkNT/UKdl7IqAvoZTSWXv5QF81oZi1H
AG462vWivMnq9IeyruEO6XCn1U36orjBPQ1dNtR0NOOmf8gq3S/u6WUx3+TL
9HvYH7iQeVXW7tVkkcG7t/jfCjZhZeAOkJYvAd5s+9Kfyup9HUa9mVS/Q6Ty
h1qbjiaZ9fwmgw2cABzDVKvb4s/vw5hZsyhgZd9XON9qGvY3W60ACq/rCW7G
qpg/uOgFtR411rqz7jfZZpmeVeXtMr9LklVZ3cDufMgRB7394eybR4eP5M8n
T0+ePmMcxa8ALkOrp9rq6JH9efxUGzx5fHgA306nS/n9jb06fvrksfz59MB6
fAoIVP88fPyIv10vNzU/O3l88kRenzw6/EZbHj89tj+PT54l8PdPz6+enOBD
wKJZNccbu7NomnX9bH8/z6pmMSxWs3K0mmejm2K5v16s96fl7WoJt3gEP34/
K5b5t5OyrKbD23n95GSHu2Ja89Prty/O0+cXr88vri/P0qt/v7q+eJkePn1y
MkhfPT8dXV2/Oh8dHBw//vVwdDA6+JUmQx0olsW/h3x+r4gIZMv0eV7Wa/iR
LYeXqyZfLos5IdtT/M9dugs979GHU8CBgIAODk+GB98MD57gei9PX52Ozn66
Hp0ts+IGEAE9mNw29vLH9ss/u5dnr68uRqfLeQk4ehE+L+scm1wvAOc9f/Nm
dPny4jLeVN3TNZCmbDk6nq/XI1jW/jSv3zfl+qacbuBe7V+t80kxKya01tbP
87wBmK1HWb3++Pvav7mcfvvN0VO/88fVFPZplVdMOd/AScKPelGs0zdV+ed8
0vwTY23oYZlGw6TPAR+v07MSLuurvLmF+5rC3YTm1U0B+1//U/pqczPOK0DG
gzSbTqu8rolUQ6NimgNvoV1tO8pj2KP4hJ7i9p2/eH3av2vzZTnOAL6zZgYX
kDbudj1E/ArD7W/WCI71PvTzaP/waP/5m7Nfz4t5ARv9Igf+oXo9O12vq/JD
tvz1A0LaejrzmyVtU26clrNUm7tJvio/5LhqnO2jBKf75uLVljPOV6MiW2U0
T/ix/yZfQY9L2ZXROpvnfvw3VfEBxkC2LK/WVVHnssPpLoyxB0ToPzfIZykQ
Io4ZNtm8hhuc4PWMcdLTR48VTZwgTlKMcfyUbjzQnmYxze6A+8sm75/5iegr
5LrgXe/iYG23xftijSwGHwT82tcvf+UvR27jZgAydDsuLy4uRk8OjkaHp29h
019fjg4PRoeHB0/38c3V9fkItvbJ6MnJ0fE3T08IOR2fjeC2v0BeD/9+e3E2
nOfAaPBGDk/fXA7hm+PDgyNq//rd5ej5BmAwWhU9WRZIFWCr0newvXDEFx8B
dqZA3oG3gO1NLwVycdcv3l3uDdLX1TxbFX8RtLO862v5mloi5J8h87i6Sy/P
092zy3OPgU43c2B6EXC+6d1S4G9XUyScoyLPc9pUBe1pdrOPD4fWJrTev83H
gIwnmxtoWe83yGcAUqz3801BIC478qIs32/W0ZbghgNYzQvg0vjSn9ItJamg
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
IcJRu/LE+b8vaHUXmHkCAA==

-->

</rfc>
