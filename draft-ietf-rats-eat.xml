<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.15 (Ruby 3.3.1) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.21.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Mediatek USA</organization>
      <address>
        <email>giridhar.mandyam@gmail.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2024" month="July" day="07"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <?line 175?>

<t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <?line 185?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>
          <t>Make and model of manufactured consumer device</t>
        </li>
        <li>
          <t>Make and model of a chip or processor, particularly for a security-oriented chip</t>
        </li>
        <li>
          <t>Identification and measurement of the software running on a device</t>
        </li>
        <li>
          <t>Configuration and state of a device</t>
        </li>
        <li>
          <t>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</t>
        </li>
        <li>
          <t>Formal certifications received</t>
        </li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like Trusted Platform Modules or Secure Elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <t>Following is a very simple example.
It is JSON format for easy reading, but could also be CBOR.
Only the Claims-Set, the payload for the JWT, is shown.</t>
      <artwork><![CDATA[
{
    "eat_nonce": "MIDBNH28iioisjPy",
    "ueid":      "AgAEizrK3Q",
    "oemid":     76543, 
    "swname":    "Acme IoT OS",
    "swversion": "3.1.4"
}
]]></artwork>
      <t>This example has a nonce for freshness.
This nonce is the base64url encoding of a 12 byte random binary byte string.
The ueid is effectively a serial number uniquely identifying the device.
This ueid is the base64url encoding of a 48-bit MAC address preceded by the type byte 0x02.
The oemid identifies the manufacturer using a Private Enterprise Number <xref target="PEN"/>.
The software is identified by a simple string name and version.
It could be identified by a full manifest, but this is a minimal example.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>
            <t>A Secure Element</t>
          </li>
          <li>
            <t>A Trusted Execution Environment (TEE)</t>
          </li>
          <li>
            <t>A network card in a router</t>
          </li>
          <li>
            <t>A router, perhaps with each network card in the router a submodule</t>
          </li>
          <li>
            <t>An Internet of Things (IoT) device</t>
          </li>
          <li>
            <t>An individual process</t>
          </li>
          <li>
            <t>An app on a smartphone</t>
          </li>
          <li>
            <t>A smartphone with many submodules for its many subsystems</t>
          </li>
          <li>
            <t>A subsystem in a smartphone like the modem or the camera</t>
          </li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>
            <t>An identification and type system for claims in claims-sets</t>
          </li>
          <li>
            <t>Definitions of common attestation-oriented claims</t>
          </li>
          <li>
            <t>Claims defined in CDDL and serialized using CBOR or JSON</t>
          </li>
          <li>
            <t>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</t>
          </li>
          <li>
            <t>Nesting of claims sets and tokens to represent complex and compound devices</t>
          </li>
          <li>
            <t>A profile mechanism for specifying and identifying specific tokens for specific use cases</t>
          </li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>.
To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set either includes a received nonce or uses some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <?line -18?>

<t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string between 8 and 64 bytes in length.
In JSON, an EAT nonce is a text string between 8 and 88 bytes in length.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries, as described in <xref target="UEIDCreateRules"/>. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="UEIDCreateRules">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The EAT consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given product and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity; changeable MAC addresses that don't meet the permanence requirements in this document <bcp14>MUST NOT</bcp14> be used for the UEID or SUEID) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>
                <t>UEIDs types vary freely from one manufacturer to the next.</t>
              </li>
              <li>
                <t>New types of UEIDs may be defined.</t>
              </li>
              <li>
                <t>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</t>
              </li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="RFC9393"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="RFC9393"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to privileged software that allows system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GNSS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform <xref target="GP-Example"/> and those based on Common Criteria <xref target="CC-Example"/>.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="RFC9393"/>.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="RFC9393"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>
              <t>A submodule Claims-Set</t>
            </li>
            <li>
              <t>The digest of a detached Claims-Set</t>
            </li>
            <li>
              <t>A nested token, which can be any EAT</t>
            </li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: 
  CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: 
  Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector socket.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.
The "intuse" claim provides an indication to an EAT consumer about the intended usage of the token.
This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
The possible values are in the EAT Intended Use Registry defined in <xref target="int-use-registry"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = JC< text, int>
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be authenticity and integrity protected</t>
        </li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> be a Claims-Set</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> use the same encoding as the bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</t>
        </li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag 602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC-NEST-SAFE<json-wrapped-claims-set,
                               cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="full-and-partial-profiles">
        <name>Full and Partial Profiles</name>
        <t>For a "full" profile, the receiver will be able to decode and verify every possible EAT sent when a sender and receiver both adhere to it.
For a "partial" profile, there are still some protocol options left undecided.</t>
        <t>For example, a profile that allows the use of signing algorithms by the sender that the receiver is not required to support is a partial profile.
The sender might choose a signing algorithm that some receivers don't support.</t>
        <t>Full profiles <bcp14>MUST</bcp14> be complete such that a complying receiver can decode, verify and check for freshness every EAT created by a complying sender.
Full profiles do not need to require the receiver fully handle every claim in an EAT from a complying sender.
Profile specifications may assume the receiver has access to the necessary verification keys or may go into specific detail on the means to access verification keys.</t>
        <t>The "eat_profile" claim <bcp14>MUST NOT</bcp14> be used to identify partial profiles.</t>
        <t>While fewer profiles are preferrable, sometimes several may be needed for a use case.
One approach to handling variation in devices might be to define several full profiles that are variants of each other.
It is relatively easy and inexpensive to define profiles as they don't have to be standards track and don't have to be registered anywhere.
For example, flexibility for post-quantum algorithms can be handled as follows.
First, define a full profile for a set of non-post-quantum algorithms for current use.
Then, when post-quantum algorithms are settled, define another full profile derived from the first.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT to provide an algorithm negotiation mechanism.</t>
          <t>If not, the profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "urn:ietf:rfc:rfcTBD".</t>
        <t><cref anchor="to-be-removed-1">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST NOT</bcp14> be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence. (It is assumed the receiver has access to a database of trusted verification keys which allows lookup of the verification key ID; the key format and means of distribution are beyond the scope of this profile)</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>For CBOR-encoded tokens, OIDs are specified using the CDDL type name "oid" from <xref target="RFC9090"/>.
They are encoded without the tag number.
For JSON-encoded tokens, OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>
              <t>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</t>
            </li>
            <li>
              <t>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</t>
            </li>
            <li>
              <t>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC4517"/>.</t>
            </li>
          </ul>
          <t>The CDDL generic "JC&lt;&gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC&lt;&gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.
Note that the JC&lt;&gt; generic uses the CDDL ".feature" control operator defined in <xref target="RFC9165"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = JC< text, int>

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC-NEST-SAFE<json-wrapped-claims-set,
                               cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label                = JC< "eat_nonce",    10 >
ueid-label                 = JC< "ueid",         256 >
sueids-label               = JC< "sueids",       257 >
oemid-label                = JC< "oemid",        258 >
hardware-model-label       = JC< "hwmodel",      259 >
hardware-version-label     = JC< "hwversion",    260 >
uptime-label               = JC< "uptime",       261 >
oem-boot-label             = JC< "oemboot",      262 >
debug-status-label         = JC< "dbgstat",      263 >
location-label             = JC< "location",     264 >
profile-label              = JC< "eat_profile",  265 >
submods-label              = JC< "submods",      266 >
boot-count-label           = JC< "bootcount",    267 >
boot-seed-label            = JC< "bootseed",     268 >
dloas-label                = JC< "dloas",        269 >
sw-name-label              = JC< "swname",       270 >
sw-version-label           = JC< "swversion",    271 >
manifests-label            = JC< "manifests",    272 >
measurements-label         = JC< "measurements", 273 >
measurement-results-label  = JC< "measres" ,     274 >
intended-use-label         = JC< "intuse",       275 >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: 
  CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: 
  Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>
            <t>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</t>
          </li>
          <li>
            <t>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</t>
          </li>
          <li>
            <t>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</t>
          </li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
a claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.
The "Claim Value Type(s)" here all name CDDL definitions and are only for the CWT registry.</t>
        <t><cref anchor="to-be-removed-3">RFC editor: please see instructions in followg paragraph and remove for final publication</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Nonce</t>
          </li>
          <li>
            <t>Claim Description: Nonce</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_nonce"</t>
          </li>
          <li>
            <t>Claim Key: 10</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: UEID</t>
          </li>
          <li>
            <t>Claim Description: The Universal Entity ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "ueid"</t>
          </li>
          <li>
            <t>CWT Claim Key: 256</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: SUEIDs</t>
          </li>
          <li>
            <t>Claim Description: Semi-permanent UEIDs</t>
          </li>
          <li>
            <t>JWT Claim Name: "sueids"</t>
          </li>
          <li>
            <t>CWT Claim Key: 257</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware OEM ID</t>
          </li>
          <li>
            <t>Claim Description: Hardware OEM ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemid"</t>
          </li>
          <li>
            <t>Claim Key: 258</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or int</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Model</t>
          </li>
          <li>
            <t>Claim Description: Model identifier for hardware</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwmodel"</t>
          </li>
          <li>
            <t>Claim Key: 259</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Version</t>
          </li>
          <li>
            <t>Claim Description: Hardware Version Identifier</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwversion"</t>
          </li>
          <li>
            <t>Claim Key: 260</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: OEM Authorized Boot</t>
          </li>
          <li>
            <t>Claim Description: Indicates whether the software booted was OEM authorized</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemboot"</t>
          </li>
          <li>
            <t>Claim Key: 262</t>
          </li>
          <li>
            <t>Claim Value Type(s): bool</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Debug Status</t>
          </li>
          <li>
            <t>Claim Description: Indicates status of debug facilities</t>
          </li>
          <li>
            <t>JWT Claim Name: "dbgstat"</t>
          </li>
          <li>
            <t>Claim Key: 263</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Location</t>
          </li>
          <li>
            <t>Claim Description: The geographic location</t>
          </li>
          <li>
            <t>JWT Claim Name: "location"</t>
          </li>
          <li>
            <t>Claim Key: 264</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: EAT Profile</t>
          </li>
          <li>
            <t>Claim Description: Indicates the EAT profile followed</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_profile"</t>
          </li>
          <li>
            <t>Claim Key: 265</t>
          </li>
          <li>
            <t>Claim Value Type(s): uri or oid</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Submodules Section</t>
          </li>
          <li>
            <t>Claim Description: The section containing submodules</t>
          </li>
          <li>
            <t>JWT Claim Name: "submods"</t>
          </li>
          <li>
            <t>Claim Key: 266</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Uptime</t>
          </li>
          <li>
            <t>Claim Description: Uptime</t>
          </li>
          <li>
            <t>JWT Claim Name: "uptime"</t>
          </li>
          <li>
            <t>Claim Key: 261</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Count</t>
          </li>
          <li>
            <t>Claim Description: The number times the entity or submodule has been booted</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootcount"</t>
          </li>
          <li>
            <t>Claim Key: 267</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Seed</t>
          </li>
          <li>
            <t>Claim Description: Identifies a boot cycle</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootseed"</t>
          </li>
          <li>
            <t>Claim Key: 268</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: DLOAs</t>
          </li>
          <li>
            <t>Claim Description: Certifications received as Digital Letters of Approval</t>
          </li>
          <li>
            <t>JWT Claim Name: "dloas"</t>
          </li>
          <li>
            <t>Claim Key: 269</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Name</t>
          </li>
          <li>
            <t>Claim Description: The name of the software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swname"</t>
          </li>
          <li>
            <t>Claim Key: 270</t>
          </li>
          <li>
            <t>Claim Value Type(s): tstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Version</t>
          </li>
          <li>
            <t>Claim Description: The version of software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swversion"</t>
          </li>
          <li>
            <t>Claim Key: 271</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Manifests</t>
          </li>
          <li>
            <t>Claim Description: Manifests describing the software installed on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "manifests"</t>
          </li>
          <li>
            <t>Claim Key: 272</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Measurements</t>
          </li>
          <li>
            <t>Claim Description: Measurements of the software, memory configuration and such on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "measurements"</t>
          </li>
          <li>
            <t>Claim Key: 273</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Measurement Results</t>
          </li>
          <li>
            <t>Claim Description: The results of comparing software measurements to reference values</t>
          </li>
          <li>
            <t>JWT Claim Name: "measres"</t>
          </li>
          <li>
            <t>Claim Key: 274</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Intended Use</t>
          </li>
          <li>
            <t>Claim Description: Indicates intended use of the EAT</t>
          </li>
          <li>
            <t>JWT Claim Name: "intuse"</t>
          </li>
          <li>
            <t>Claim Key: 275</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s"ueid:" b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="int-use-registry">
        <name>Intended Use Registry</name>
        <t>IANA is requested to create a new registry titled "EAT Intended Uses".
The registry uses the "Expert Review Required" registration procedure <xref target="RFC8126"/>.</t>
        <t>Some guidelines for experts:</t>
        <ul spacing="normal">
          <li>
            <t>Each intended use should be clearly described so a user of can know what it means.</t>
          </li>
          <li>
            <t>Each intended user should be distinct from others that are registered.</t>
          </li>
          <li>
            <t>Point squatting id discouraged.</t>
          </li>
        </ul>
        <t>The three columns for the registry are:</t>
        <dl>
          <dt>Integer:</dt>
          <dd>
            <t>This is a unique integer used to identify the intended use in CBOR-encoded tokens.</t>
          </dd>
          <dt>Name:</dt>
          <dd>
            <t>This is unique short descriptive string that is used to identify the use in JSON-encoded tokens.</t>
          </dd>
          <dt>Description:</dt>
          <dd>
            <t>This is a text paragraph or more that sufficiently defines what the intended use means. It may also be a reference to another document.</t>
          </dd>
        </dl>
        <t>These 5 values are the initial content of the registry:</t>
        <dl>
          <dt>1 -- Generic:</dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>2-- Registration:</dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>3 -- Provisioning:</dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
          </dd>
          <dt>4 -- Certificate Issuance:</dt>
          <dd>
            <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>5 -- Proof-of-Possession:</dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references anchor="sec-normative-references">
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC4517">
          <front>
            <title>Lightweight Directory Access Protocol (LDAP): Syntaxes and Matching Rules</title>
            <author fullname="S. Legg" initials="S." role="editor" surname="Legg"/>
            <date month="June" year="2006"/>
            <abstract>
              <t>Each attribute stored in a Lightweight Directory Access Protocol (LDAP) directory, whose values may be transferred in the LDAP protocol, has a defined syntax that constrains the structure and format of its values. The comparison semantics for values of a syntax are not part of the syntax definition but are instead provided through separately defined matching rules. Matching rules specify an argument, an assertion value, which also has a defined syntax. This document defines a base set of syntaxes and matching rules for use in defining attributes for LDAP directories. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4517"/>
          <seriesInfo name="DOI" value="10.17487/RFC4517"/>
        </reference>
        <reference anchor="RFC9393">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="J. Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay"/>
            <author fullname="C. Schmidt" initials="C." surname="Schmidt"/>
            <author fullname="D. Waltermire" initials="D." surname="Waltermire"/>
            <date month="June" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles. SWID tag representations can be too large for devices with network and storage constraints. This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags. CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9393"/>
          <seriesInfo name="DOI" value="10.17487/RFC9393"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="http://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="http://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="http://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references anchor="sec-informative-references">
        <name>Informative References</name>
        <reference anchor="RFC8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <author fullname="T. Narten" initials="T." surname="Narten"/>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters. To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper. For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed. This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC9562">
          <front>
            <title>Universally Unique IDentifiers (UUIDs)</title>
            <author fullname="K. Davis" initials="K." surname="Davis"/>
            <author fullname="B. Peabody" initials="B." surname="Peabody"/>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <date month="May" year="2024"/>
            <abstract>
              <t>This specification defines UUIDs (Universally Unique IDentifiers) --
also known as GUIDs (Globally Unique IDentifiers) -- and a Uniform
Resource Name namespace for UUIDs. A UUID is 128 bits long and is
intended to guarantee uniqueness across space and time. UUIDs were
originally used in the Apollo Network Computing System (NCS), later
in the Open Software Foundation's (OSF's) Distributed Computing
Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the OSF DCE specification with the
kind permission of the OSF (now known as "The Open Group"). Information from earlier versions of the OSF DCE specification have
been incorporated into this document. This document obsoletes RFC
4122.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9562"/>
          <seriesInfo name="DOI" value="10.17487/RFC9562"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
          <seriesInfo name="ISBN" value="[&quot;9781504450195&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
          <seriesInfo name="ISBN" value="[&quot;9780738192192&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="4" month="March" year="2024"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50% while also significantly reducing memory and code size
   compared to ASN.1.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 Certificate Signing Requests, C509 COSE headers, a
   C509 TLS certificate type, and a C509 file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-09"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="4" month="July" year="2024"/>
            <abstract>
              <t>   When transported over secure channels, CBOR Web Token (CWT, RFC 8392)
   Claims Sets may not need the protection afforded by wrapping them
   into COSE, as is required for a true CWT.  This specification defines
   a CBOR tag for such unprotected CWT Claims Sets (UCCS) and discusses
   conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-10"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>Linaro</organization>
            </author>
            <date day="4" month="July" year="2024"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-08"/>
        </reference>
        <reference anchor="CC-Example" target="https://commoncriteriaportal.org/nfs/ccpfiles/files/ppfiles/pp0117V2b_pdf.pdf">
          <front>
            <title>Secure Sub-System in System-on-Chip (3S in SoC) Protection Profile</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="GP-Example" target="https://globalplatform.org/wp-content/uploads/2021/01/GP_TEECertificationProcess_v2.0_PublicRelease.pdf">
          <front>
            <title>GlobalPlatform Technology TEE Certification Process</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
      </references>
    </references>
    <?line 2602?>

<section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t><cref anchor="to-be-removed-2">RFC Editor: When the IANA values are permanently assigned, please contact the authors so the examples can be regenerated. Regeneration is required because IANA-assigned values are inside hex and based-64 encoded data and some of these are signed.</cref></t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                              [
                               258, / CoAP Content ID for CoSWID    /

                               / This is byte-string wrapped        /
                               / payload CoSWID. It gives the TEE   /
                               / software name, the version and     /
                               / the name of the file it is in.     /
                               / {0: "3a24",                        /
                               /  12: 1,                            /
                               /   1: "Acme TEE OS",                /
                               /  13: "3.1.4",                      /
                               /   2: [{31: "Acme TEE OS", 33: 1},  /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                             /
                               /       17: {                        /
                               /           24: "acme_tee_3.exe"     /
                               /       }                            /
                               /    }                               /
                               /  }                                 /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         270: "Acme OS",
    / swversion /      271: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest either come        /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for an IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896',
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    273: [
                                   [
                                     258, / CoAP Content ID         /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8xQk",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-submodules">
          <name>JSON-encoded Token with Submodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token. The payload is the    /
/ attestation hardware block above. The main structure   /
/ visible is that of the COSE_Sign1.                     /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A60A4CD79B964DDD5471C1393C88881901005001
      98F50A4FF6C05861C8860D13A638EA19010219FA
      F2190106F5190107031901048263332E3101',        / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="cbor-encoded-detached-eat-bundle">
          <name>CBOR-encoded Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag. /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE.                   /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block.                                        /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "Audio Subsystem" and "Graphics Subsystem".
The JWT at the start of the bundle has detached signature submodules with hashes that cover these two Claims-Sets.
The JWT itself is protected using HMAC with a key of "xxxxxx".</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
    [
        "JWT",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlYXRfbm9uY2UiOiJ5dT\
c2Tk44SXVWNmUiLCJzdWJtb2RzIjp7IkF1ZGlvIFN1YnN5c3RlbSI6WyJESUdFU1QiLF\
siU0hBLTI1NiIsIkZSRW4yVlR3aTk5cWNNRVFzYmxtTVFnM2I1b2ZYUG5OM1BJYW5CME\
5RT3MiXV0sIkdyYXBoaWNzIFN1YnN5c3RlbSI6WyJESUdFU1QiLFsiU0hBLTI1NiIsIk\
52M3NqUVU3Q1Z0RFRka0RTUlhWcFZDNUNMVFBCWmVQWWhTLUhoVlZWMXMiXV19fQ.FYs\
7R-TKhgAk85NyCOPQlbtGGjFM_3chnhBEOuM6qCo"
    ],
    {
        "Audio Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJsSStJWU5FNlJ\
qNk8iLAogICAgInVlaWQiOiAiQWROSlU0b1lYdFVwQStIeDNqQTcvRFEiCiAgICAib2V\
taWQiOiAiaVVXdCIsCiAgICAib2VtYm9vdCI6IHRydWUsIAogICAgInN3bmFtZSI6ICJ\
BdWRpbyBQcm9jZXNzb3IgT1MiCn0K",
        "Graphics Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJZWStJWU5F\
NlJqNk8iLAogICAgInVlaWQiOiAiQWVUTUlRQ1NVMnhWQmtVdGlndHU3bGUiCiAgICAi\
b2VtaWQiOiA3NTAwMCwKICAgICJvZW1ib290IjogdHJ1ZSwgCiAgICAic3duYW1lIjog\
IkdyYXBoaWNzIE9TIgp9Cg"
    }
]

]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC9562"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common computing platforms.
In particular, hardware randomness sources were introduced in CPUs between 2010 and 2015.
Operating systems and cryptographic libraries make use of this hardware.
Consequently, there is little need for protocols to construct random numbers from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; Same as JC<> but with unwound generic nesting as it seems to cause
; problems. Perhaps this is the nesting problem described in RFC 
; 8610.
JC-NEST-SAFE<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-27">
        <name>From draft-ietf-rats-eat-27</name>
        <ul spacing="normal">
          <li>
            <t>Random sources clarifications in Appendix B</t>
          </li>
          <li>
            <t>Minor wording fixes</t>
          </li>
          <li>
            <t>Add certification examples for DLOAs</t>
          </li>
          <li>
            <t>Clarify nonce source in section 1.3</t>
          </li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <?line 3606?>

<t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y923bb2JUo+s6vwFFljJISkrraZau7KlFJsqNq39qSU7t3
7TpukARJxCTBBkDLiuL+lv0t58vOvK+5AFB2ku7zcMb26E6JwMK6zjXvl8Fg
0Pt4mhz3enVeL7LT5GaeJZcr+HGXnNV1VtVpnRer5Kb4kK2S3cuzm71eOhqV
GXwEP3qTYrxKl/DdpEyn9SDP6umgTOtqkKX1YJFiB71xWp8mVT3p9cbFqspW
1aY6Tepyk/WquszS5WlydXnzrJevS3pc1UcHB08PjnopvDxNrrPxpoTp9G5n
p8nbs5vr3odb6C6frfLVLEndHMejouz11vlpL0nqYnyafHuXVd/yj0m2rufw
5AR/V0UJA0+r0KK6W8YPxsVynY5r12IzCs9WBT4qp+NsUtV3uG3cDP6lm3pe
lKe9QZKvoL8Xw+TFZjUZLdJJBp/wXr1IN2W2GmfRq6KchcXiMRTlXfLixTm8
ypZpvjhNFrPFHyppUNP7IUxJR3o+TF6mq8ldurRxnudlPpmnpXtBo7zMJjkc
zYfk3fVZ6H4mrYdLbv2HGT73Q/w0TF5/e1Gsitl8E1bzU1Zmy7v4DQ3zr5t0
AV8vk5tsPF8Vi2KWZ1VytRoPcT/hBDLYy6PvnibP0nIFZ1dsZvPkbZFOcP9h
jaf+BZ3JBBf17vAk+e7FNT3YrOoS2r1b5XU2Sf4FIGJS4DLX82IFbX93cpIc
Hj06So4fHx8+eRrW+udiQpP9w3/U+fA/ZJ5+qefD5Od0sUjHYZ3nablwD2mJ
b2HUP8IsJsl1Ma1vAWL7ukAZaQxf/aHMJnNsVUkjGglvQ13mo03N8MKj/DFb
fUh+zMsP82LxFx3mWZluVvNimpXJ9dUNPNUr2Hoho86hl+FIevlDldfDqbUc
ArjpaDfzYplWybOiquAO6XBn5TJ5kS9xT0OXNTUdTrnpH9JS94t7epnPNtki
+RH2By5kVhaVezWep/DuLf63hE1YGbgDpGULgDfbvuTnovxQhVGX4/J3iFT+
UGnT4Ti1nt+ksIFjgGOYanmb//lDGDOt5zms7McS51tOwv6mqxVA4U01xs1Y
5bMHFz2n1sPaWrfW/SbdLJLzsrhdZHe93qool7A7HzPEQW+fnX/36PCR/Pnk
6cnTU8ZR/ArgMrR6qq2OHtmfx0+1wZPHhwfw7WSykN/f2avjp08ey59PD6zH
p4BA9c/Dx4/42/ViU/Gzk8cnT+T1yaPD77Tl8dNj+/P45LQHf//8/PrJCT4E
LJqWM7yxO/O6Xlen+/tZWtbzQb6aFsPVLB0u88X+er7enxS3qwXc4iH8+P00
X2Tfj4uinAxuZ9WTkx3uimnNz6/fvrhInl++vri8uTpPrv/t+ubyZXL49MlJ
P3n1/Gx4ffPqYnhwcPz4/eHwYHjwniZDHSiWxb8HfH6viAiki+R5VlRr+JEu
BlerOlss8hkh2zP8z12yCz3v0YcTwIGAgA4OTwYH3w0OnuB6r85enQ3Pf74Z
ni/SfAmIgB6Mb2t7+VPz5Z/dy/PX15fDs8WsABw9D58XVYZNbuaA856/eTO8
enl5FW+q7ukaSFO6GB7P1ushLGt/klUf6mK9LCYbuFf71+tsnE/zMa218fMi
qwFmq2FarT/9vvJvribff3f01O/8cTmBfVplJVPON3CS8KOa5+vkTVn8ORvX
/8RYG3pYJNEwyXPAx+vkvIDL+iqrb+G+JnA3oXm5zGH/q39KXm2Wo6wEZNxP
0smkzKqKSDU0yicZ8Bba1bajPIY9ik/oKW7fxYvXZ927NlsUoxTgO62ncAFp
427XA8SvMNz+Zo3gWO1DP4/2D4/2n785f3+Rz3LY6BcZ8A/l6+nZel0WH9PF
+48IaevJ1G+WtE24cVJME23uJvmq+JjhqnG2j3o43TeXr7accbYa5ukqpXnC
j/032Qp6XMiuDNfpLPPjvynzjzAGsmVZuS7zKpMdTnZhjD0gQv+xQT5LgRBx
zKBOZxXc4B5ezxgnPTk8Mozx6LFijBNET4o8jp/S5QcyVM8n6R0wgun4w6mf
k75CBgzeda4Tlnmbf8jXyG3wmcCvff3yPX85dHs4Beihi3J1eXk5fHJwNDw8
ewv7//pqeHgwPDw8eLqPb65vLoawy0+GT06Ojr97ekJ46vh8CBf/BbJ9+Pfb
y/PBLAOeg/d0cPbmagDfHB8eHFH71++uhs83AI7RqujJIkcCAbuWvIOdhtO+
/ARgNAFKD2wG7HRyJUCMB3D57mqvn7wuZ+kq/4tgoMVdV8vX1BIvwTnykau7
5Ooi2T2/uvDI6GwzA/4XYei7zi0FVnc1QRo6zLMso01VKJ+ky318OLA2ofX+
bTYCvDzeLKFltV8jywH4sdrPNjlBu+zIi6L4sFlHW4IbDhA2y4Fh4/t/RheW
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
fUYqy81Cl4+Vq1QVkotC4m5hsQqh3YyH0mQH6+/tuGswd6mGFS9qnhZy3WUM
JJmHueCxaVsIoZBmhnO3VqjfKJVccKdEi9IJaRjx0tVDncqa5xjPRiwUwNij
Qw8ZYDTrr16+RTYFWgwjjbnSXDObjp6CL0zjLAiaitoRa/Vg4umb1tPWkGtN
9FBnXhNbs1JSdtvu7E3ojfP6MJ4S23E0uqABXKmOh656eAlkDFwhnqvyYSYl
ar6LqMgxPbzjwuGuBDCfZV8PktyB59n4A5eIgMs7X6GTHh8wYdaQpdF3yqsa
NmYkZkgy9tZFRMtsFlT5ES42cd88juExUVKJd0B7NMUdDf9CumdaJdsNRflU
OBuXyGCBDHHE9Nhc1LjaH3Q0K9gF0bKysXVBk0JZBQTpuNXPA5i6VW3IS88N
4KnIcR4XO81u2ZeB91giXTFJLV5QwXNUlEq1wIINnd0lNZI87L1eUaJ7oNhj
inOno8BdRrpkxSCsfrbmWQ+5dHSYaXT2FoZL3UjuJgpg1iTgNftdswYeiz2n
lap0MKUfcE4f/TBhxRWLpnwbHEkIHqiAFgGGWanVaORSe6vloxH76zkeYp5A
OhlQQcbN0qMHEY0ZdONonGeoEOzrzNNoazQ7AwsdqPzYNgBFf3NpYTwvwh8U
bQtYdds37MJZ11Q1W8cXv41oFnCBqIyNqUdIiSkE44WwJ3rBrog1aUYiR5wM
+VCR8u8n/J8g69ExsNJRGThGSToT4XWE0VF74DtGyyI5is4SqYYn0PJpyJ6c
mYqzLwFRQmqUIyBH560dtHE88Tlj9rqE3bN026GpIHSN+hc6AA81b17g5UKN
FmW5giJdov6baqktRIyvoUmzze8E1jVCJlIuGlO6lorQyp7SttNOv0zXNJ8z
cnm8lC+/YuNVsBuIYEc+k9X+Ml1jXNnqgdf/8EE5BsWdV0PA/FuOzZUDco4R
RAOFOVNRmjQMZA+w6K5IPhBeZIlaDhOF+roWy+tFou5DW+S2hlSjm7xOycDq
ju6aFcL/wJmxSrnzvOTVf9NZmWZWlNp/46H93Vusq/qa7X1j9XWvvaD/Fdss
yT1EFaK9xOoC9T2vJHaWlA4P7OuDW+pKAa8m+6Jn3zYyFruvW5y+Ho6m7qB5
RVxxtDk36UxoxBf2IrhJOTmXrhN0YQtnMwBfLjbtiFKL1UH1l8ehb+t05rXe
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
JQOkzCU6cuEoza3GVraYXiKMQYEDeISg0yzI0gT9suzY5aozuOh7zC4csrBw
YpLLep6bIJ6rV9qldxpfRUvm07nnvmIRKl5h1ZDibyJSztg451bnpFx44PsJ
5SjWPHO1ys7f0ct2d7B1CmnB6Oc9W4NPCsXwxSUzByYofdIKG/KNLIEmyabE
QoHKkoH+4yGb50Ls/vUaThXq4UsUSaTzkHsBGSNzULWKWBV4BsQ2g3VdLQj5
7NPNgg5RGV3JCnIvdIewlWM8xLCn0zqDq9USblCuFmdf03OL01bY+yx3GcMB
GuHVyNr4map0IzlpU6SGVqPEu483Bvav1RQ2vWSgvuSck3B0kbFZQ85hX3tU
hQYZD0pFSso3RTRKEaKJlaA6tlKd3a3iwTJb7q4ChY7Ql6Y4SPogmLWFUd+k
uLPWzUgs58XrdSWHv51woeRFodSLe6fAVXqlhj9KyFafk4dimvHUuOpWNpec
1Tt+VonbLZlKSSieFCB1GJVry/H9Q0W/VYxfpyab8X6Rn0Ryd9FfRrBB5lsu
mOC8pmW/ERdxLhcFzNX2nIoF+q4Ll6zFx60eYRRZsbXgFQNPBF/L6ZBhmlrG
HqBnDUUXXRCkLxbYGfQMQmhZz7U3zZEuGaY52R6fANFMrUkhc89RrDP1hGod
KLLpUZ0o2j1cIWdNaNlglP3storOZOw5u3D/X6wYtALF5o51C+p7KNak+Abd
DCUB35Sjxc9M4SJifB4ZH4hRm3xrLnucutjUC1UbM3sfU/V4wv3f3Rkv7hB2
IY5m9qkd5FsMZYbkTMCbTvUMhb8V9Fdv6FY4cudVtmkG2E2Hizxrfu+VjIM5
zJTcXFdUp8cx82RbNRxAJbjHnPnccNiX0T20qPaAPSAIY0Z3auTihhlRH99S
PXKlDmAPWsOBIJPQSWevtFp1WgoclcwmsXzaZMCTwPQi57CyYigmG/MpGaJY
LmbJs+hr4QNJQmh3vJaq0qknmwhX0gXmptF9oGyUu+s5eWFLl0CRAoS+YL6e
YjBFfqYHRj1Tc1xJR3tZ0+ymjTKHPEthuPZllGvsu6tlQuLTQLv7/gnuNjSD
KE6V8rfJ5+esurARK+RYegjK6WrhKc2sFM2J2zImkzLgXInr3mCawoCD0iJB
KdeNIZNubpi4Gu6mIKthWCKqX4Q8aoq7dHWtN0Ru3nkDATnW0zlppzQzAtA3
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
AdjyE47Hre642RhHcdDpxnBc4690ag57zbAXRD34T70bTiajcOsoLPlpRfXh
1h6CR+363kaz34OXIVVvufz1kqtLlFxp0oq/01+Pk4VvTDFSU/w5w/umzhd8
YaHK5ALuu3LAkKXL68i5itlrgYPNQvqzhPwRJ6Irg+Rd4jid4dkuRf3nK5jc
0dcpCs7vXvUHGkCMiUIwnp1P9LNT+yNmULY8WKNUziaFJqmcCQptRqetEdqP
Pt788G7AJqnpjz+cToaz3vrH8AIfbo3Pf/ZG4fnHZvPsh3eXJ7MLtGb9Nr58
sRqGp78df7jpHH88Cn56Pr09PjoJfpyftEaN0+nw7Lh9ef/i8OxifHSBFrCj
n700uahf7788l84//nR2etm8fzc9bUTnH1ujy5OT03dHv/04+7Q6f3c0fxUe
B8Pwpx8vnrdevwr2X/x42Rq8OvzZa52eN14lP7yrQwvj+x9/2F9Elye/Pdx3
vmdoJXzVOPn14t1F423wU/306PRjVD89v5heX46Ofjo4uTh59e5of3A5e/f2
8vL6/OXF9eLd9KfLVz9gz0Fv8rZ29GP6s9c5rZ5/f33V/9htndwPXr95Ox2u
nj//cPTqfWN0Pb/eP3y9ftX+dbBgE9svOQWrhJixJuXd4up40L86nr27Hh/1
1sOw9eEnmNHx4EV6drZ6cXnROjqZvvjZ+/XkYzd52Zen5++m0eVb2LF+8vby
9PXZ9KI+DKY/jo/e3b09Wx3HBye/vj0f3Z4eHSaDpI/vJMPw3c/eSt+K3r37
YTw4Tp1vVz/OerdjJJDvTu/HlxfpsentpDGcHa1kXD97++PL05vh/f7b0az3
4acfTn4bNo6vzoNXyWBe/94lw5KD+sikf7qUSf/swbQfmPS7C9i/07fBybtX
8+vLt7PVu/Hz6Xz83UVj+PzCTPpnDycmbzVOzvt3rwZ331Nrgxe3P10GMPEe
Wl6vxt+9CH46u7vSN0eN8frHy2CK3/3sZYjvsHd+fHXTG1ztiE71i+WEXNHm
IEbu4p+SQhJhAZW/4OdV/pzroAzgdkuI74hXMoyGWIT2XnjCKJqi71EREghE
GeT+DFiDJHybN1gnGpnGFhOPahjVP9UDrsetSeeUIYF1CBHsnCyfiqu/uNHO
FPhBKlVCY7EWFCCYBsctKi87qP+YvoPx9MTZsHKIheJKqUSxPsBQ1wgtD8og
Wlbc6phUmJecgR4yP/h/inD86CAFnYQgeTAXYl7lbyLFqkm5hBrmRSwjLMoB
nPTqGqSIp9+TDXghtSvuMT/kBj6rOBWAxbm5WH6k6RLMtr+YV7wYV1AHrKUc
bpPxGrqfskN6PR2mNbhEmWoI98DSb2PPPok+ZvYTY7k3ORBpRWrHsBTABU5l
TyMuYO/NFkMMTbu5Xsxjg9CQIiy/qZoRs40vtZsAUmc6pRFApx7V0gjq/64C
EaY4HT9J3a23617zTxYrUfvNlnkrhrkjQar1T5Ak4IYItEcVE0aL5RgFWkKm
wHF0r3Vk5JEqP2LHSKEjsqWYRxal91hLJJlFV0jqCCyKh0JlMBuMxvEoGuMo
self19F4U+sITSpkA0tAi5TMElIK7vSWQT3RJZV2m4vp8PGaEsY/lTOAIRKw
O80mqNfdbjP9YfImvIdwdbSutwQwz0h689vFFOtCePNovoAeFispGwSzuxc6
r8AQb2EbyX8xh9FNGURugXBbVMxh7A0ThKw7FkBrsthx3TQqTKFRCXAsp/dp
QiV0zG7iFwmViOJQUXQlLLlWBNz5CMOV0oyIbI7f+NF4vERsChiDR7jcVJ7E
oWc4EnOtmCI7tMLjQ5tzr3USzFMeIXUAJ8NjO8RSTBX/NkH0F0p/A9XnI3yy
P13HqwXG65oTqMUYktTDMZCCh+EDuFPTeEZ5UclveDDtqLEsgfe7/yZe3EhA
6e+Sv4aekzfMV363ogk/lWpxXE2LNvXNYknHw/noTAKe5Od37/eq8/Nf1cJP
yUdVf9sH5RuYSVD3h0JzvxMVZn7o+8LP73Tqcx+ZI7sb1P8ehHvOTAqdVOpu
R1/RiXtEqJ/WnnaCY3c6wS7cbr6ik/xZpI46e1qoTHasinymajwcUrNMCudl
t1XdnlisTM3zIzQI3KyY4lNgISj+hN73k+XqGjgdCXGkRC6bNBP7hWeFmpG6
Q3kFKD2a3sG/fqPdqhCtfzSxMUb+3hD5GraP/oitxtNfwT3nIw/HM+qBCWm3
gVNkr5ms5yMuXJyTzMzA4ZihLEanLLA1E2RktY6swmLyvG78b/zAr/rx3z9X
P/49fLobzve+ON/6G7QgeQCtO+dZlcUKLH0Isdj6I1wN90vvu8UdMtaKGSxx
WZKSGivFHFmYYIUvpzpFU+ZqMl1EKyplQxXTuEgNeZuB1avRSqtU+dFtBLtB
XmW7KFg1hDmZRDJRCRFYJi21gcWgPyUzo+9hKRitUKkbyvtJN0BncWFRgWuF
MN8jmmZWd3zmLvVjK60LbRQCTo2EXywNDxOO1kO90ln/N/Yl0hL13CH73cg1
/SDsVqFB1pjhz17o/hm22s6fWRb7EM985E/vAe7nh/5/Akf5ezVo0Z9d+bPB
f7bkz1aLudhmDmcaQm+L01DYyzTU7PnKczdwMdtQdkRhdkRNHpGp8knsbnHD
B9ot9Ul78Jq/QA53AvpUhUIAhWgev16MRuulaMAEVngfR8snqYf8wcGSUwqo
KExXXl3NqoCkyXiIOxVHYy2bxHeRKKO3mtcUOxHZEg6hhjCTBs7KK6iljl5M
Kh5pOK4coj7d9rDWokfdLtJYv1aYZ3KS21UbP7BkauehJbgx6NOogqer6ojX
AC3OyUqWSUxPMQ4gU0HK1TQxGnIaU+AqaGTxDdaymjsObWBUt5TqRC3U0Pom
6rSBBlvP0UVMdY9kyXVV6e4gIbagTSW8sUu4SUGXZpMnVICTlH6RE2750yGK
WlsEBiEnWfcD7ote8WQqJkAuG5RZP88lOcOH+PFhjO0j6WF+8XVWXOa30Yty
8tTcUsQF7dxZmQusSGQ99Xd3P1LC+h6csZs9+61/jhPh8Tuj9Er4rDsnlEJ0
BJHePcM5D9xj8BXs0v/nMcw/xjLbrLnhWqeikf09bOrf9GfT/vkg0+xiKMBi
Pk6tcvf3INtUI9PUZrbZ9WfJaLnQ9ripINuU/dMyTrOdVXfvXA5aKkWRlQ64
qGsF90nkpIkVVxVkDo+Y6mkYyMIh1qRpUBViZo858w3Fv8wSuA2uZ0jB2gGf
OT5A84XbDnWITg4aB93E8Yw/cFdOzfXOlMA0MRp2zIQaKRXM2IWHOLJwYbfH
IGe5iljtIl7nI6+Di1xfm1vfjB3mZjAH4dLoAUNcUgW23AqhrNKJVaQUm7KQ
zGOwkF4WWjJ1A/O5SGOcOTQpl047WVBlYhjVxQVoOV6fT5QCcNjK28A4JZnT
qb29iy/tSWXxVjv88gWDgFChHhE3Hl0v8IKpFGEZJk53QXVosQXWw8lcwXdr
Q1Xsa8WLNQ4Ha5ZaGiM0UF5cD/cIF5zIBCmgkq2NWAVqIOpewrKDzGAOKdX2
jBZL4oS1W5I4a6pjegMbTDkCJFasTbBiQzC51TkaDyQhjXMGEqw3z9FeiCP8
5gK3ZXUXx3M/rMO1D0kMk6Zr3mvWKKA7vZ7jd5k5wAINl9GSy51+jBXjnkhT
R1LzBrCsWPiSw5wMwcDkV4i7HUt2sUJdkrkVN4zCRfPLQwvCrk4shCFTY+GU
gIC5Q3n/TtylTZ/3crwQqE/sxwDxwzaW7oiX7ZLx/KEJrBeMJpWbG1a/5Man
iN1ErTbGFdcBJRUtGkXT8a2nxoYU+2BCd8L5wqPv2SB0jxF+47FqGZ+kXq+E
w5HBc4rlQE1xC+eeG/FdjIkVPV8xbvnNvQmfI9O4HC/XvJbKnVJW3qgZWkva
HjI6UTMsK69PpTGtgvOQKFGKEGxtW1o61FZulh6QWGseHfYVVR+iWyPWBrel
iTOjY747XSBiINERVo5M3ANhuOUWR8+XkpELOYTAEMaJe6Wk5JyykSmpV+wN
Exp+inWqo/l6ghtCGruUJ7aQu8LZ5k7VRzQ2UlqSf0fmW7Id0rbLImA5ZRZR
Ib++e3hx/PRVf7BHlISXYAUMpzqwS+FfbYkCwl2vkacEfcOn8dTgnCMmT61b
D2tB/9SXtAexxzGDhRXbhQ+Av4pKLaGDToFIpQNTC53sK8lc2CYCOyHyzzE1
A1za7RNY9RKHw4VsYHQVZyenVOOVJoxrdEZRlJ5XaIHhq3EHyRpLKiZWBU8M
Pc/zkMdYphajWf0dHtUrhlPawe22M7sG9sHDZkb4Un9HewJ6NbBqqfE+EwgW
5fAYV3TkZ5r3+i6dMt4guQAm8Rwxhq8wCGiFDouIksPwLJlS83AzSeJb3llS
T7hpinTGEuhiKU8YAkgD7MuGLyGzVPyW/eTzezUiG5ZMJdex0u5VLHBhNY4m
QK+85dsEP555jE8KDw6IZRlnSsMTI4okRBbFpzWlIZOQ64+UCXKAnbk9tyCz
zXFQoDNvn6T+ahlhmBSSuuo3oNdT6dTMQE3YUypKTpRNvTPFMOn25pS5R44m
a45knqfHGhzgJVdmwzFQdSaMgEimJLSQqLBiUcWpK0tONENUG2iq5mFzTlFm
HDPtmQQ73KJY5ruw9QKC3ql1fXKqGXDCK6rMTuI1Yc+HdK0HB/pdGZhssr4B
fRLhpuZ75x1ilzRzu0ZEXduTPXJzMkmI0OBjhN2QyBHQc7WW8lRg63FppIQW
0glTOLJrrtJNMjWhyaNqjIWJhSKvYop2Qz7Jj8Wk/zj1riNTGEk5omROsu7K
PV5ga5e4D1jJ3esLCLipI7QNPeL4C8wNV3P+BA7fOxwCacHclnxhVhm5XOlO
szLDw8SXYNjfxVQ+gkJLeak4f7V4PBw2Y/gFM5rMCQeZu5iJkHTjAk2RbT36
0GXqvk/ZEkBibun00TVmaHCT1CLVlEpjKT8wNzkPmqFbs4FOIzKAUeZTX7MX
TF+k3pP1BXkoOrs27DFfK6QmhzjKWGPYUy5I7ScrdR6wWAYqOuMyHPoU97yr
1eIJuNNMZs+Y6kzJKrcv62m0uH8fUE2A4U3HGzkjJxSn1qMa+VeLxRinFnFL
vJl6IZqJRDEOvuwgFktzc2I9TcSPm3SgtOC8x4fjO2B2Uh6G8X6w1jRcGUHv
xX0s1zhYacXOKrycXLWOzqmbZyHVbXBbY9um0IZANuaPLjpgjBpfWM+obDXP
SeTZMGw6Msv4ZhkTLUZUklOWjlpiqSgOD45o40PGnZf1okNhHh9/wkL0CZVH
x6sEzBBzTu7lrKdZXg9bCd/K4IQV8uyNdn8b31P9NlO7XGYypHgJqbE30xwf
gVaSpZMsn/ypvtPi7iKUbCV25sV0a4H2xBa4MOXj2Dw5gdFd01VV1Xy8OTkp
RHaQts6647onyapdVjiGZEQlIbgmBUlsTW1Hns/xDHg7I9p5/uYMbhGcHg9r
ZpiZWbU84cjOlq+YrJFV/fla5rRDzI9eIeqL8iSGROKQA3IyQdmilRvzbSLb
CdlkM70gtcxxgYxVmc01OnpYIRTM/CVM+2yhLoWRGn5woE7DZv7XGBs5T3PE
oQyWDyfRdnZ8EudzX/GGTPzEdslIUtadQyekDvJDQ4x/YKFMpMi3XRlC6cBg
bpfXGMCjkpIUEq5oeE8qmNs5q2M2OFUvbaSbgUqGQjG/HnK8rX6uWXE5dcaL
5nxEshcQDVVCzkVzIV0ozb1d815zSA6GTWArGL7BlaAwqFcuulIvkm+TYpoS
4T2kHOKS/oUjmbs1Fv+BiS3Zt+FYctiPQklhkvOG75nW3FxjaAnv5aT2yHTU
h8zSoD/3f6i16j0tT0aqkggrdTZT3J1oNHCRxL85wtnlwBQoJm1lDpLrkDLc
SV4yICYzDvOFlrmF2wa8Ayp1yrokD4iiz9xRpav1BCXE3TVipWXSdtZz4QM2
KVBOeckQveMJ707hO0H2losyzIQvbOIlVxUrmvNhk8VZp1bV4RdVpy1EIfHX
M9RL4abO3ib3EpgvnGOugiuttupc3KzEZXUOx2At4ytxGaneIx5OaU4CkiK0
FSjxEOUJ+oqo1VYnIH3sjaRJjCSuPUbAFAzyMJ9XnOXjE6F3y8iYXSyeitim
mBn6Jt5tmkziLFulCYJ4YeP4QoLtyOxipKCtnQpaDpyDe4rjAII/U0u2O5q5
bK22LEMwCjyOoTq6H+F5vhXEleLNwNgpZnh/VCOsXQ5ceBBnCd46+IJLTMVY
6eKPjERDneMkcECyfE4rwipsSVTq5o7CzJgBFYaGVimtKfYVVhm5x25/WRRt
J3cnlx4zDeV6IrMFHgS6P+MHdB2OnYhMpXoM5nS/3MCo6eijfwmW68mKF4yH
4yxl4pDtphlBQ0/S3FK5TaSZVkwMQOpWvkX6IfJhq9/g4OAl6U6a0Y0JFJ//
gh+/h4/fw8dfkMAw5aGBKQ+wuynXpksxbWMYTzD4lJrBb6yvwqSHI4FzvWC+
rtygJ5BLXOFryJnV6wKPUksijfEjGpcWPmarLnsE2N/OFKf1iEVnI8FEDUmA
lskzd3LgcNIw2Qwr/Pw5iVZVEgpkfpSgIxusiboYFYuUSxFZXv8P+d0wHGn3
82f2zlTxi/TLlz2eZ/ZRZg2JNX6xzCJWbSOcqhzhJMqE+gNJ3LoArAh9I2NK
qA0x7GPqdpUNqGPqOzUXPF6ZpSVDslShh6ze4qQWWsBrDtnCUZ68PicGT1XE
b9k6p/7BLDnidvHCkkOJ9ldC1lIicpfOljEDLpB2p23b9iS7Bhvx/mqy8+F6
NeXQWzZPjZfRZFWFG8+kCuSeVtejUYr+X7PR30jSx3/6//Zv9uMq/yrf0B/V
l1jaza9NYtb1dkj0A8FVJcmWSr/t+N98i4Yr74vnvvUNCi5ERIWXPM7TrS6W
VVB14Sv60Cvp3n/69Bt/F6aVch/cBfaQbcLfe+BtuCD+gbej9fgPvA330fzb
TOMPvTQfTr7+JXMyv+al0SrJv8TOkD3PKyy6/2Lw3zvwKSZRfusVVpW+hk+x
2u+3XmHZ6Gv4FL5ufOsV1oW+hk/h6+a3XmEF6Gv4FL5ufesV5spDg6Ne8dvf
eoVZsc75+uTlj//d+db3/+p/WCUE43d5/swx+BLEG/FlokfKEaSXXnyLXTiU
/wFuFTuebXWADwycB0bDxXIHmhj894sKfZlp7KnvvurB6T2jrlOcx7dkdCSB
vp7fkTzWWvZzDKtHqy4xfFBDZuz+RVUCGpHw8rSGCh9F8WvsFIdG8MsahG61
ElgJ4G4+tNBtB/UajLp6cnh2Xj3rHx2a8ednj5MoTNgmagtX6hMjU/MoXg64
EnAEn58xJzyk4FN0vo1WYghLfmNdA82p0IjRdBVqw03WrvmD0nclovmvRSSj
im1n7iRWViiEzR+2m+vl1BQJwlyCvxq/rIDV7NR2xDHN4hhVJPR1r0aUibm4
kYpY6T1oTZ9I2ZhAK5lJmyg6UcEy17gF56wYEeHBKlZfySp+g0wZSdSvLeMr
rE2387d+9aeo+lu92ntf/eW/fv659sgHQJownuwdRxeFjHkkoFJXAjpACqPx
eIrzhxehFUfAcaDfjB2kdNcmUQakXyuShgosCgOhdRSKZL/FwCbHwoKKOqtZ
FX+lJTNCsUb0iwqYIfYSeSnyF1ZzYFczxYMLf55HV1cgyXSNn9KHF7B97sce
DTuzVCvRJd6/sjQucfIuleqbI64zIjlTOEfomPVpeYvxgxBYBvr2Sob2jf+X
dq0d7FKv/J12vofdwM1pLeOmDiSrxTaKFAjL55XNEFfDmU1qMwVP4juej6YL
DjKOJFSK8dv3g+sIr6dwFjEFKP2SD7VkxYpayLqimBJltNfx9AZNs2i3wlgZ
NgqMKA+I9UMy8mGD8/jOsVWoEUKuzWMMiiGvXjpap6nEfK84p+wjvn4FV54b
uQ0t47Va11w9TKwgcNgSFP0xu2GcUDb+/B6k/Wi6ToHqphxC6Q5LyZ201LlG
k4ldDsPYlisfg2BhNnAIcP1s5sILGcygbDBsJIhWDv7UnO7kS+JnE420Hy9G
6xkZHchKcIx2BLoDSdwgdnAqXtw3BKD6mi6ikqGgpZaHS6T8q0Ukxg10Sxkr
PVv/mE26HmGTkcmG5yndgWEKoCBP0VwoBwn18ErOFgyjj0fX88V0cXWfs9mS
fsuhEmSWgIszpsdZP07kjFPDcXUI1Zv18gaV7lsH7rXg6TU+CHrqnk1UnAjH
yRkaacXeBDHPksCiSxf0zh+RN2IxnyRXa6V3bMQqH1o+C68illpkBtB6kt8v
g0UL64UnDT8Q4kBreRpPbzFhDemNHKr6PFtuKyzh6EQSMFle7kYSsqnjmC4m
0CmNhsNuMB5pPWXrCAdYMG1QqBXeDLFtccDkuLBji3R3dx6vV0IcNe8MxALq
r6TqaIR3plfhIpFc78xWWQdTYX0oboDIhlwhm1bfZONgAzRlvoqJbZP4jxkK
G91s/N8Zw3DiIp3buZ3w3PTm5Vi/VcZSKIO1semNVu/uYv1a5OIMxQ7mBLvc
0P1PNAkT+8fU6lTrzDckwYJ2SW7Z3ZrtgAwGm3tJZ+jTi+FIjFF52tCHeVy6
oLUi5xRHi5ALm6Isa/n1kijSB9Yss142xCye3ybLxZwc4Rw+ebWMZjPsbhrN
r9YReXX+WGdwCm6ocWs8s96AvH393u2FDqjYTFwVgXSj7y4VgpuZfry0Fh+T
FGHUOHKmlrxifQ34AMU7kjU2ZRsej52SYQwFuIxYzCaE2cPmMoUGj53jnBE0
HJw7z8IhOWcVzeJDDKV1tExqIMMHCOpVg1deEumas/QKA2Rctqs55CSUjJMT
pRGtpJZFw/Ry8XKbEOBMyhtntNDyACfKYBqLb2uGeC3A3cZsezLZmmJLdnhI
PvRIo2phtqASVU1gjp2H2aWIU7SLz+TICR0QNze8kZJ+7+T16zrwqqCQw02/
Kx4uh9Zxjko61q+NPrGUE9I59sccBPGkU0yKFVRTsWOanBgzEeJBhXhsltF2
NPOFqlQZuWGD+qV3Oj5r7oO9cJmVdc6+RM2fxhLXfPiJLPyYxyKutRT9nzgM
vZBVDEAcjwvfjKZLTf3SqCTOTuB89UomspfAR1WikkDlsNhofBuh+m3okrVA
BMsysRZGy+W8Lo0TpHWeiZ83rxnAFF9PgNjQNYeTk+HT6cixNLasGk0A7ZYl
igAv7fCezacaIoNY/hIua9yOmTufbdeEy2hgbtGtmqpTSazK6IOYApEtlhEu
D1/Hl2qqlz8mGwacclgTnXk6UhQtJFcLgXcVByAHSW3UhJDRprnTJh7LghOS
Bzc4fWn0YeAPy4TceNVE1B00r4kBUYhhGTOCXUHBMxxbXKxYwHg+wRBNDYbH
+RsKodqnrIDjnw8MT24Ab6A3DIXBGA+x9srmsiWdrqPGLIFdYTjMPNGYT1H6
VibBEDUlk+fiqnzYsRy4G6dTlRspKzZi085yNsvInEtBhqspxB4tV1nzyniJ
N+CSZTR+MuhIWCIMcBIbfN5oVda5q5un6xuEpI3HDmNGwpuhXGJeXjIgN10x
Bo6Kbn/yqqFYWgw5D1J81LShGKaj3gYcv1BwnmAqusZ6ycpwJ7vY5uhKYLuN
qmMScetf+N/H93i3/xjfJ2O5y5vqHmS2QALBKxyrLlxiw0Q5wamD8dkCHdl8
mBvBPBPnTmZbKISwItcuDeBB08TTF2jGMFa7vdpjwfVExug4Z5bM8UaZvmC4
mRv9iuJ6bIYXsiHFFsi/qGhqxspCvr8RfoXUm97P4PUlf+BL0hNruRxYy54a
sUlQKBGpSekI2KUEXB1whkN/vpjfz5A23NIwuwf9PqyBd9o/P/P7SziTaOxE
5sAuq0ajmXF4K5SMhvFnoiod2kY7CUqhXLyor5Hc65QBHTJqAd3hl0QV02iU
9dyJI9uWnqGINqOiJSuSLLiMgunJJhyzmsWT61xo2Qi9MGF1hbZQ2CTmFFRE
nHKoD8r6KNWs3ZKiNjQNZ82XXAgom9G44jSkuVUKRBjtpntapjuz1Bif5MYL
CwWRrC0+L5tSEhXjnF9WQYhoCqV2RGVwViEvpZL5hqgeG/hayW+KbFMxIMcN
a86fGRIRqiFlNzM/4+nGJ4sneMP5zL5NV80U872T9JpvgxOh2cRGZRaoFTdH
777mNkEq8CyO2E40L+ywoFxkihntapMVc6YqueSJWq22x1wgg182rsYYmuHQ
oRT8oATRaUIBy1YmrAjNIBMOIQpsPpavuGSp1V+B713wUZdgKpVeekCXC6pE
aS59nDfljLw4YgyfjGMHrb6Ql8AudxiYjqsK46qmI/K+o/Eyu6mviEOnXjZU
Ak8C272MEsOsnHhVkTYQDs1c6EvWGWkghhO0uKdjjjLCRAXDpPFvZAPYqaC0
FHAGFDEhzsjcZckBSrORYjZcxIRk4ssMdOCmizhR+BTy63aEAatEs6ol+8eS
2ZnjNcKWbChthazs7qXGqPRED7SVlJvKQY7yWk0qT5DYvjxDZcLHJGUNwLCs
kl1zSDZw713J4Plxf/djMt5z2aOCzZiQDMn/gL87raD1BfPbsfVpHGkcbMYK
iB985LbhqMyrpB6SyBjZEg6Sck6RzotlFimm4gTx5yS+IzcjmsBBTFjIuFNH
Alvk735/cLRHD/fXeMVB+qfJOikU/e+PjdwoslekN45UPC87hLmTfqfGIZ71
k9RZDy7xQJi4sEN0RcC14y6/4215o9uSysryt58/4x+1H+D32gGGmchO0OXv
Mh5SiZ7IKiO8OUqtqp/ltx545KfWquJ/aq2ZFeIiqDiTWyqKrPuNt5x7NlFo
5rlSDdNdcS1VdcueAXPgTF8KLYKJu2W6EeUcS2NkkSjbuYo6gFxJQa5BsvgU
F0OsK+NsBLgibK1vTGh3kWGpgVyEmdXhXIBOWqeaLRHjD5yloc0uIwIQaEv2
9PAMiW7w7RP2umZ3xImlAuGZ7yVFQoLPaviZEhKtScqIy0qsguE3u4E+kJvT
jc/2T9YjCrdz0zQldSiT5SLvpE4MhC2nqL1aEShJCpwwX0avI6TXkdCrriUF
oOyT5cs92yPxpx0pAkJx4xBqTQylQk7LuGomk5FccQ5KiDaa4mY5S3zqPJqK
hrVSb192wTgfMkZuXuzFz8oSt38Nh1OsIWPVIq22RAUzcYPzhXumOPAop4TN
TAI55eage6HYJcLBZ3vFT9dzIXgOLp+JiR2hTNEslkScFsRhHkAUi6G5dTjz
Tk1hHufDxIzT3kglJqAiqJP0rQScSCip5JWQC+SN4h0RucOJ+tvfl/EMSPAX
59dnFNYQwwotls/QHIbXQ/6OdTGkQbpMYw9ZTSOj/2AFzrlNbLFTcuqJGgQm
ChhMFcKSmiAcy3k1EmElMRfCglABplOFPntxYeOpSGMnLQY3f77y1LdAsK19
OsvL+FqMW9AdTJTUTxsmi3ibFGB9eH5EZtrVMhp9jJdPUpXQZQ5uOH9HZcGP
oJVUw47nVf1TBjNQSAw4bU7RT9y/PubGjJNP/j4+/iqZQzdwRNiemXzCUnNV
vz8eO6wusaVaWUE6ePm6T88NqPl7yQHgTgngV6wWQa0BO1itVjkLOxmuYSXE
v4FXi48mk9jusPMkYy7jXH2pfWAcEZ6uyjPv/wKQyrt1WHoCAA==

-->

</rfc>
