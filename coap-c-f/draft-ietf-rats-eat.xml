<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="June" day="14"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string and every bit in the byte string contributes to entropy.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, {#swevidence}, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption.
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT.
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-18.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="14" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-18"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9aXPbWJYg+h2/AiFnRFpVJGUtXnsya5SSMkvZtuWx5Hb3
q1eRAZEQhTIJsAFQMsuT/dvf2e+5ACi7unsi3odxVFSKAO5+7tmX8XicNG1W
zn7LFlWZv0rbep0nxaqmv5r24MmTl08OkmnWvkqbdpYks2paZkv4cFZnN+24
yNubcZ21zTjP2vEia/OmTZL7+av0/fHVZfqxqj8V5Tz9pa7Wq+RROq3KJi+b
dfMq/X6TN9/Do2Z9vSyapqjKdrOCfs/Prn5OVsWrJE3baqrf0Y9Zvmpv4ckR
/m6quq3zmyZ80WyW8YNptVxl09Z9sb4Oz8oKH9U303zWtJtFrp+1RYs/rm7z
9KyEH5v0uMVlZS3MMb2qPuVl+vjs+Go3ya6v6/zuVQo/kqzOM5h82eZ1mbfJ
p3vYr2Je4uIz13x6XdWw6Bls1Kv04Mn+4Xj/SZKt29uqfpWM06KE6b+epK/X
5ex6kc1ymCFv9+tsXeflNI9eVTVs9GU+Xdc4TZhxVW/S169P4FW+zIrFq3Qx
X/zPRj5o6f0EdkBH+mWSvoGz32RLG+eXoi5mt1ntXtAo/2udLaDlMr3Kp7dl
tajmRd7AeqcT3Fc4iRz29Onz50/TN1Wd31brJk9P6+IOpzmFwWGeWZmeFvm8
wl3P57Abr9KTbFHcVHVZZHRc67Kt4csPl8fwc3VLALnzx/30xdMX6bOn++lz
AMedsLglT/F//ntbTP5d5ueX9+skvfj+tCqr+e067OSveZ0vN/Gbb1/iwfOX
6c9ZXcI5Vuv5bfq+yma2RPeC1jPDDf2wf5Q+f30ZLbAs2nyW/jNAx6xahrX+
8ego3T94epAePjvcf/EyrPRv1Ywm219qUlb1EmDrLscb8/7nk4P9/Zfy5/P9
p/bn0/2n4c9n8ueLl0f2AQwbPnge/rQPXjx5os32D6yH/edH+ufhS+3hxbN9
+/b5kXZ2+PJFaGajvQQE8yqBvz/+cvmC+oK7ntVz3Oyd27ZdNa/29vKsbm/H
RXlTTcp5NlkWi73V7WpvVt2XCziACfz4002xyH+YVlU9G9/PmxdHO9wV3+aP
F+9fn6a/nF2cnl2dn6SX/3Z5dfYm3X/54miUvv3leHJ59fZ08uTJ4bPf9idP
Jk9+o8lQB3o58e8xA8pbusvZIv0lr5oV/MgWY7z5i0Uxpzt6jP/ZpI+h511q
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
vr56vvDxarNYOFl/OfVeJaJiL+Gdl/vPYCDO3t4uIeB6henHJd9vuVulhf/m
FZvCBVvkQ1NyQPRmmj8RmiaLDLP3W0vy9vVbl+1/PQDXGg1bNsA6imcW0Ov+
ZXyZohnJ9fxiWyP5+d0NEMYl/V9vR3jNxCxJzd3tF0KruaAhnwPF0FHqrRuy
lnERWs0byfro6k2R3v779sTUraJbfkapaYrmuLVrjvM/faWKUrninM/ms+eR
pywZg5XTpH1Qdx9y4mROWfBHzdQNwRIr+UlIqe9a2VB3mGL6fUkuF7u9Zlwf
i3qRLDuRH7QbU6RM/vEGDZbIXaKvBkhCzznL5adPXDYGe6QsoPgHm9qylCop
LaT+CXmachVCoHOFboA8c8phTctK+arHESrRp7Gouguzk9Rzo7PD01MO78un
s+fEuTQfWkNWt241VKOLq5QtV8gjmIrxt49JWRNJo+5Y52GQnC4fc69aCWKF
wlHJ+0tOmqrTcKpDx0oOJ5+OJem884Lmxa5zj88COMHfkIeKP/q/FY8frwg8
zUPzb/B9l3zdf/PhJHFfcj+/+fmyEb9p3ePj0yOQSJ/vCNio992sFneCdN4q
hoAIwgrnc1cIPzr+gQY+kxeOBXpDaZxrkv01Xzas1vQ5czBVLWhT0lBYu/QC
63TwUjkQoLgprwwuor+hI1whvyvbAKxutNRRcXd/48Rz9K6oVb+l323HhFgA
hVMNZHDq95Gxi5MUy/aJAz/FN2IBG7SLVB6XwDUJsk7yfSyoQICIvfonhydn
fraMJgDa5lao9611BiRI9/K+CAbT0xHhGmg/yBnrlFxFfd0gMSVWnBG2PDjq
tUL4kGviOttesR+mnuFvHKbxEotcTm4KkRoA00t+Mck9B8hGRj6SpNlirRWH
H82XuQZJ/QOnxrxecDJoKXjCPvYeObqhVbVe8oMSHYKOyllNplxoiubToL1d
XaE4o8WYNEnCWtkJR6hy/MvQfcv3j9VX8RpH8qToCXnFYLZsQZ756mKZBpk8
yGRGtFJvs4g20DPVIUGgwWljfnwJpyDsQWWu6LetW41XYdt2j7gXKibAZaWp
zk5pM5r+aHGj6bMLgQeelKMnkSszJcXZDRUrTkhABkF15HrwyqGJ84+nzs5I
2zhcQUrhSM1ycy2kQrmeOOmEuK3H0IHJVIHKbKj6ALse8VllyXojG0MLv0rS
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
5X2NAgA=

-->

</rfc>
