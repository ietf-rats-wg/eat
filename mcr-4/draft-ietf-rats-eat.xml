<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="July" day="07"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>The hardware and software that implement a server or service like a web site may be an entity, but the web site itself or the organization that runs the web site are not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where otherwise explicitly stated.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Evidence.
Evidence is a claims set describing various characteristics of an entity.
Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Evidence.
The Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.</t>
        <t>EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Evidence.</t>
          <t>This specification does not establish any normative rules for the Verifier to follow.
They are a matter of configured policy.
It is up to each Relying Party to understand the processing rules of each Verifier to know how to interpret claims in Attestation Results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for Claim Keys.
JSON-encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a very simple free-form text claim for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the SW for the entity is needed, the manifests claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-count-claim-boot-count">
          <name>The Boot Count Claim (boot-count)</name>
          <t>This claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, Verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, <xref target="swevidence"/>, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Evidence or Attestation Results.
When these claims appear in Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are not a substitute for the nonce described in <xref target="nonce"/> and do not guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="claims-that-include-keys">
        <name>Claims That Include Keys</name>
        <t>This document defines no claims that contain cryptographic keys.
When claims are defined that include cryptographic keys, they SHOULD use COSE_Key <xref target="RFC9052"/> in CBOR-encoded tokens or JSON Web Key <xref target="RFC7517"/> in JSON-encoded tokens.</t>
        <t><xref target="RFC7800"/> defines a proof-of-possion/confirmation claim named "cnf" that can hold a cryptographic key for JWTs.
<xref target="RFC8747"/> does the same for CWTs with claim key 8.
These particular claims are defined for authentication and authorization.
Their semantics don't translate to attestation and they SHOULD NOT be used in an EAT.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-18.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="14" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-18"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines a message format for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9aXPbWJYg+h2/AqHMiLS6SMpavPaka5SSMktZ3saSK7un
XoYDIiEKZRJgA6Bktsf92+fs91wAlN3d1RHzItpRUSkCuPu5Z1/G43HStFk5
+5AtqjJ/nrb1Ok+KVU1/Ne3Bw4fPHh4k06x9njbtLElm1bTMlvDhrM6u23GR
t9fjOmubcZ6140XW5k2bJHfz5+m748uL9Leq/liU8/SXulqvku/SaVU2edms
m+fpD5u8+QEeNeurZdE0RVW2mxX0e352+XOyKp4nadpWU/2OfszyVXsDT47w
d1PVbZ1fN+GLZrOMH0yr5Sqbtu6L9VV4Vlb4qL6e5rOm3Sxy/awtWvxxeZOn
ZyX82KTHLS4ra2GO6WX1MS/TB2fHl7tJdnVV57fPU/iRZHWeweTLNq/LvE0+
3sF+FfMSF5+55tOrqoZFz2CjnqcHD/cPx/sPk2zd3lT182ScFiVM/+Ukfbku
Z1eLbJbDDHm7X2brOi+nefSqqmGjL/LpusZpwoyrepO+fHkCr/JlViyep4v5
4n828kFL7yewAzrSL5P0FZz9JlvaOL8UdTG7yWr3gkb5X+tsAS2X6WU+vSmr
RTUv8gbWO53gvsJJ5LCnj548eZS+qur8plo3eXpaF7c4zSkMDvPMyvS0yOcV
7no+h914np5ki+K6qssio+Nal20NX76/OIafqxsCyJ0/7KdPHz1NHz/aT58A
OO6ExS15iv/zX9pi8i8yP7+8Xyfpmx9Oq7Ka36zDTv6a1/lyE7/59iUePHmW
/pzVJZxjtZ7fpO+qbGZLdC9oPTPc0Pf7R+mTlxfRAsuizWfpnwE6ZtUyrPUP
R0fp/sGjg/Tw8eH+02dhpX+rZjTZ/lKTsqqXAFu3Od6Ydz+fHOzvP5M/n+w/
sj8f7T8Kfz6WP58+O7IPYNjwwZPwp33w9OFDbbZ/YD3sPznSPw+faQ9PH+/b
t0+OtLPDZ09DMxvt2UP35zNoBn//9svFU+oWrn1Wz3Hfd27adtU839vLs7q9
GRfldTUp59lkWSz2VjervVl1Vy7gLCbw44/XxSL/cVpV9Wx8N2+eHu1wV3yx
f3vz7uVp+svZm9Ozy/OT9OKfLy7PXqX7z54ejdLXvxxPLi5fn04ePjx8/GF/
8nDy8ANNhjrQe4p/jxlmXtO1zhbpL3nVrOBHthgjElgsijld12P8zyZ9AD3v
UkO7+kfjh0/GD5/ies+PXx9PTn67nJwssmLZxCvHhcO67+7uJkVWZhMYdy9r
ELks87Jt9qZ3rV/eyU9v3qW/5VeKqaDb3ZT73bYIHN7N7TpbNLlN69fOtKJ5
NfdN7G8yMZ3ZrxdvXvuZ/dqZWTS13ty6k7u8gQv5y9u3k/NXZ+f9HcOZrYBE
ZIvJ4Xy1osnN8uZjW62W1Wy9yJu9i1U+La6LKR1h5+dp3sLFayZZs/r0x8a/
OZ/9+OTgmd/xw3oGx1/mNaP4twCg8KO5KVbp27r6Wz5t/5FRCvSwSKNhmDCm
J4Ay09d5ewfkMgWkBp/XywLAqvnH9PV6eZXXgClGaTab1TlsMNIU+KiYwTZb
V9sO9xD2KAa8Z7h9P5+fvpkcv3tz9twvBZ+mx9AJ9gz9VnV6vFhUd4Cs3gEN
q4sp4q03K1orTOOsvC3qis87fVk07eA5XBezKoMbkcGFoIPADW3o8ViJ07jO
/2VdAGYm0KFXmZ/HOON5wHc6j3Gl8xjnbh7jBcxjfLs/ORhfz8YHD2HF+w8P
JjftcrFtj5DW89Jllm7DXle3OZ5Aij3hzp0dvx7vHw5DHN6FebPPi0S2Kqtn
zd5VViMtaAB3leP1aup3nDkGxSLHNSx3kcuhw/RgsL33b09S7WLbCn652B84
5JPq4rfzUxhkfDohTq3JpsvxtGruihm+h4Msz09PqrIEIEUgHF4V7HNZzCbA
18jJ8QPoiBrCf+t8vP/hYdhjWRz3n8oADOaAVIE6QxO4nQxEeQ1/ZGmTt+n+
0MY/JWw5sPLr9WLBNP31BNiLj8VyXWe9d8AF/FRns0W+6b16NUl/BcLb9F78
NElnefoqn+UAVv3XJxPkctpiCQvCfTx9+eZ4eOvmi+oqW6yAMQY2Z0lwcbfC
jWsBVPfWKyRZzR6s79He/sHeL29PPpwW8wKw1sscuMb6zfXxalVXt9niwy1S
o9Xs2u+vfJvyx2l1nernwwC8/yjB6b49e70FYeZlQOXwY+9tXkKPC0Exk1U2
z/34b4HBgzGQT87rVV00BrkPYIxdwBn/siaBQIkJsr/jNps3EdbBV0y3LuEV
tJrDDa43W2/YMBnUrsNfk08EkPAP2YWYTTraP1C24+go/OkYov0D42GOjh4b
i3L4jFgUFG8mx/X0Bji5aQu8ubtlJA9l7h02+KkAvmWWbUCYyKYfo/XrK5QU
4N3guuFk7oqPxSqfFbx2/LWnLT9wy8kgFT87O5s8BQy4f/wu3nZ4kV4Ilhql
O/RbPmSpAlj4/LYALuZcSE1e77ghTvOpQtbDZ0M8i6FA2JecUf91UYK4BTCv
7/ZkxDF2whgEOcDDkwmwVC9BAvRThkeLSkjn8dvzDjE9AKJ4NiuMGvIsf83K
dQZyEYD/060gdXdIs7t8tzcPQ4xhiL3viI8EYgxC3IcCAf06EwIxgIdB4F3M
ALvmxOgA4kMxtVgvCdu+P5/8soZ38ZLwyaIALJQCjKbv4Q7BPT77BAhiBrQW
RAW4Q+4AQPZ8f747St/U86ws/lUox2Iz9OUb+hJ5hRMUe8tNCtj4wcn5qWdF
j9dzEPRxe54Mbs/AISr+mmXLPXw4DrQu/HWXXwFXPl3z9WzXQMSBOwYiuC4I
j8mOvKyqj+tVHzAFC8hZ006TLB6u/OBsQbLEY5kMzNoewQUd4+xW66u92yK/
I6j7ruYBCyEHQ7fo3fG3zvNbdxKw9Ww9BXTR5DXetEYXsAf3JP8UKOqWS423
Zn/7rU5/BpCCS4SsBUDBq7ytq1W1AKIBc63zTJnOJn1zixPI7+g7j9eGr0x+
1cB55pOsbIoOt4Nro/+D6eHsavi/JxFzAj+JA317Md4/ehjN3pQZ7xw7SBfj
pN6s2mpeZ6ubYgrkl3j4wclNm3o6KeFQJvPqFg95YTz+jNh6QEKrZg+G3jtA
fJRt5QtNujsvG5jgmq6m7q0Hk1cZ4peH+8x0LZdAK09gGcC3Z9Hy+F2q72hh
50qbULukmodN2IkzIOfrwOIPYa8pdTuVXkXsoYs63fM3HUj0gi86zvPNxdnk
nx4B0j1FVZ6jX8Ag5uNP8IY+A7o8OcnrdvgzIrYg4gJzCgwhfAbUdjwep9kV
Xoop/Dwuv6JHS5FlASTYAKYSZRkgvikJhsgVJu1N1gI/1sACr+Ar7CInrDa9
yXAMWDQcz7TB04EuchptlGTQhqjXovgI37OSZZSeV5fyYpSWInMhsK0Q1uDc
02Y9vZmggFk0bhYp/Fo3MLEroNNJnS82yLuuQNjbjFK8vciA1anc47StYJCW
xLg8vanu0iX0mhZtelc0N7AIeE8K1hRkHJnxhPfq+BKHygt4UcOsB+V5GGhQ
mr6DVl7fOAZkBJ3ns4QXMoGvoc8FwhDMbw4iNNCHxQJmAWMqtoY/YIY4CaJC
CQxJ242qADneZTEDjjpJvkMBhnEYAmiCs7fjxKXNcrhhRJLpdECQAQKH2wm/
ZHPpeKdwcFd5usyAdGZX1bp1J5lmdmBNtYTm1XV7l9UEA3u45/gQQGGGDyfJ
wMHVwKkA78eHl0aHl97dVHiwDR4OndoUyXdxTUvGk6NDgz0i4g/gxruMiwP8
VLXh+M5bmP8GoLKCm4F9lVXbO2XqFl/E3RXtQHtu617hjAui9vpqRDgk/5Qt
VyA3kpCMSwN0AKiuxu8ARWd0OnA/Smi5XmHXAATFEnumI6NTkhOjy4x9wAnh
b7+TJYPj58+iPPzyhQEDYZEeosrxy5dJIlCMZ4gwhOp9HHUQmLm3w2cHvrcu
ZHPvj/ap9+SyMy/8D/KrM5wiLblwx9SA0JYuAbUCw9QswzV2cD3ChrS70zXc
Dp7omytU3qQXqsdH9hKwLNAhXM4DRKA6+/1H0ezjloiCu41/DY1RNwuN9e/H
uELTwSjEILTMiR7A9ULSjL0sEQayxV22afDyyMWbTRISzFDtmNuQuwRA2Yz5
Y4KhqAlu6cd8A18REVnwLsGZIb9FU5C+aLeV78ZupsBIIMbGb6g/PG34jYCJ
279ag6zPbK1DTQTTBYPcmt8SEormQKhhmQH67kDijtKJnRRYL8SU8GmZ/g03
hNABnCWcOnSD35d0s/nG+qsPMMA4CpGLXIUC2Y0pLR522OmgSAUnOreNwkOg
QP+Kjwq8hYhCmd8A3JIDmuo+RdTFYzYj6AGYkZGhr1GE3ZgWMUZDBI10rgTA
uq6rJQFCNa0WDRO4y5cXAowgrgI80d65+edeabgRktXwKMJ86pnkaGKAk713
vIvji5c8IArQXx9wBaPB6uX2AgZUmuC4AhibaNMITrWcExK6JSp4VVfZLL3N
gJzBuUErBJlp1uS6AGGWFvltvoAx/oT7TpuYXgNTK/ixCVQHhPh/ALbtI09y
CezLAl8uQVgE+a4lXILWSiCItRzWYIOMDhAJMmwPbCHIeyOHSGAT8RpkNkOj
yNQOujyPtLjceZ41a+Z9FQkbUNTrkpARfhrmBYLmdTFf16EPZpJogvaV09bC
3RpiniKOqQDO+5e3F6mKw9DDz8ipQlPg84Lm3KgrXyAQUQBprFfIhjbAYTWt
EBO4t+4AGCPC9y1ieebx8VAJa6OVdpF/ov9WgMvtvhD0eFaFKDfuEPNazDvT
JmaA0UVDTDw8HxlTOqITfyUdjtfT/A4XwJOBEdJ+4UwII+AkzxBhomkHR/Es
7bu8WS9anOJ33ynLq2IVA/3wrNMd5gx2EEnV+TUiM8ZWzOsrDPiLQps28XTQ
LSxm5hBqdMtjxooZTmFLmFrHqAo7G0BMsAlXFcjYneZGajP+m/cGVnPJy3Dg
52dLjgJe4oz6RaJ1xegfGLWFAgLOoWj1bYaW/WYDgy1H/gfDdPhJF6NKkfgw
pAK3ZKwi7PkV9ktqFZoaEr/1lZiLRgTKOcFs43oCQS0HNMgfNki7LwOvBz3c
gbh6g2gCR0kz1KYyc03bpd3jRvCXsCr4KM9qGLEKkFCtxoTbbL+v8Utk1Msf
tAV2koU+o32kWzmt6jpvVlU5a5gH3JGNoXtWwqc7eHgRKOXm1BBE0l8WVdMg
d8nonxhBXDfg/7m+ogGVrzQIx33TQe1ZQyQboBbwhFB8OVamGbgPlVN3YYu7
HDhy+C+st7MEQf42ZJkjCaF7Jase7lUIk8K7HLGAPE3LLgfh867EJ1LmHTCu
hLF0EUGMuVqzIGCfAIbNF9ep8EnREmlAQPZN3ALngsKDv8MXyO94CkdvAMqI
xh2rKveM506PLs/O6L9T1BER1KgkXAOGyGt6GT8a4bbdZKuGMXSeAaxqc+Ks
6CsPf9hJ6cRt/l2UswIwKDAYSjH5OYAwE7VmCfiXZHWaRfjJAy9RjRmuJaFk
pFT6nMGh4bZ284u4Zz4snDZShaWewBSwV5110c9Ndpuj/0cF4BkYDewAwBtI
F/Igc6A2wHoa8BTlbdYATRSVfmMSHF0L6hFwj3WH/N8tgn9ZMW8Nu2ND6SiE
WbDvBj8DYlcs18vwmTOgCi7zQAIk6QTFnF9F5jk9+8mrG1Z1AZtTLDaKqZjN
7hAMkt6JL8Y9FLJ0XYnQSeD2NQkPPvmafAfzWiyc4gAQoTcOj1jgUEbnNlsU
M/5J8DQDWG9GYVuQiQOCzWwAvCBjU+2Utg6ZM58LiyLmsgYsRuwn7CZsk7Ie
kTeAqEjwlqKIE71rUL7gZaC0YJKXbjAxhl4gGuhesKiqvtqYc053YMno7LIT
lCglzBsga0D3Qoc9StH/jiAUrivxR1fFQqXMa9ZzpKwn5SnqhIBpyeawxGkO
QxRVs32+sFRG6Z3Np+781uO0rtctYafjyzEIZ1lQ/Qk+jr0ceNkqiaS54uPG
lgciF8mDBIiqJxMF5UiAlTdyTj4bC5zkLY6BM3SqgRHru14i84IKF2Kq8hWd
dsU4z+ZBwMLkK2dYAT6SdyAT1ZKQgyuCyJYu6WaVg4Q+mU9G6avzV2f0YJea
VrSEbtv2hn3ORFymFZKdM0IM18WnfBbUHWk2rYEkk5bPhKZhWKZzw5uNdm3H
chCzSbOjK46+MdMb5oTSn9blDNiXB4BPdkdwi+G/dIMRwZCmoK3XxNXhLQIG
boYIBg5BNBiwjJl2F/AOX0nZSwbtJkeJvsWTMP1i0Ing55lXmTgliaghloSC
hZkX7eoQjMDWvMyadjRwg/hUwm4QGyd+KZPkzbVXIOFWGxsTmvBibAVwXNG0
kZYNKXpQsIbzi2QkUnOxkGXyP2vKKx2AfgvyPz19OeIFq5aqK0opswbC5BRN
+T8VJTJyost6l68AsZpk8AC72u1rAjOge4CsVq22e11pCxxz16sJg6qRUGHJ
NweRv4ACUm0mUa/eX1zS0k3IsLb5p2kOw7GqhY7oDmeff0K/haIFgCFZeGbK
jfBCzk5EdOHv5bBYGiCZuLgG3hF3SMecMM8ls3Qd4tUmuZPW3og03yDibAJr
i+sY6pZ1WKKDBT6aPKy2ER4SIfWoTtGB5jQA68usnK8RWz/Ac9djerz/EDad
FhsTWJZZjL0VKKzhwFtGldgLbskUlw3/lftDr3p3iDbovBSOinEVvh2hdwqg
z+JTeobP/KRI66Y36TiQypp4POSo5sBNkUD6+fPfgHsX8gVN+eBd16grAxp3
DVtVkDyAk1lWTSsIlRvYssi4iIsgBZueCR0FrSnjz8jDD6ggegCBDPPryf94
saM2IQUtJdQznie2+wDdfwBqYmprp3Tusgt3pLQiMyRSofwa0TANfocE7hZI
cna1YMlkVrAVAWEJPxmkxgWA0ZoMa9xNjM5oS+C/dyTbRGKfY9gA1otlQaqs
ERPBLWPYZn6tX9XiXxKf5cAwZc65t3OM3kXyMX9nxmvBF/EV6Xfw055GIUl+
uylQyG6ZRrbKUM74UiKGURWPWQ2olyEFkjvjn1Hplqf7srauT9CXLyTD5wi5
LEG2kSrJcX+jjtYG/jZNYQZkv5Sp0iQQlFA3sUSe/V/RhFcGbQuzNfDDNFWT
xHRWSLA8gy+rwf1D5Wq1bu41qrqeiNMj+GddMZoJ1MCGOnwjdGZWMusX/bQZ
0Vez9VTuudHDSc/KE6C5rErWARGPxXR5mWclCfhK/K6BXt0AUm/MHAWNeZaI
yoi/D1tE8R46qXmVi67gL7AP5EwTsAb2kRFLA13e8vuZkITYZmYCHxw6sDjT
j3iYIiq+ywnTwGB/yRZrke7CcLgJYWMG1IyqLmp4BD0Gf7rBoqFiRGf1g9rL
S1PdxePNK1VGvRMjyluxn8o8yJKzaAu03gTduezIOzaV+o7fqrjGY8a9moZ0
aCoZ6pXzmbMxKWcbtBRmCg3Sq3DtotcYuU9SdAMpSex2BlNzBkiS1zh5ZkRR
VVUsZXZ2XoR3ohUowlLOVUB/TQ2NW8d1CP9h0sT954No7zsci6kGWh+uYEU5
wMvXVNPp5+9q1w759HIjmsmt+mPiBlgRSH6aQLeQ3MN/RJQzJS3htcJNA93H
B5dwyaa4sIJgFijKwZmjDO6Q2DUgxIwNGQD0cxTTBfv0TsU/+KFJ31bArJHq
O2W3GYMdZkLqfg+oXuJmhF7yGh12+EKjNiJbIMsfVAmi1kJIIGISToVhpihX
61YQFV5v0pkhKkcdDq526x4QCQEuZ0ronXSGtyjCLtKbPFug64dYftaN3jvF
2z8HL4GRNzA10YHJQVKQXM2YoounxIzKMyIqT/ptNE2phIBYjjSzxFGCVNQ0
e9fAvGxZFzJorWGpFQirBXI5dtscZLQeSZNTxhUqoOq7rEZssC6BPBI6HkZV
28Yn1km6ITNug6pDEl+kHwdAHRMJbrnCVB+NNTfVejEjKZBNJ9fD8IjjfCyr
O2aaGLSQNN7ARgrAseJN96LV+ep1Mog1okN7QTIl4TQG2oHmtHpVMVROy82G
dHEloLOtb3nRcP2mzBWxdnH4/Nyk6KwQ7OOz3ArlyO2bFoq1kI6JUF4Kdwdh
dY0gB+tcVBWS2PWK9b0zkIpQY9mB/ra7W3g6NOOKppilf/otfXP2Cp1lKTzp
vtlebfR8mJDgFHACpinN0vdn6HXbsEdDSf7xuzh7c0pyN3BY1iN/LKQlOPzV
omjwpm8CKyxiUg95wYJYqiLQ3IhBfJlptMBUzMYwh5WAMJ8k+wiRjj+GZ3gK
mDevyd1TdWCK7XgWaIDAhn4WBNroS4XwpaLl/RifCJ0EQpFVNzEXFaDesybd
QZ3Azoj/m75+Q3+/O/tf78/fnZ3i3xd/On750v7gLxL48eb9S3mPf4WWJ29e
vTp7fcqN4WnaefTq+J93yJs62Xnz9vL8zevjlzvD5lZWHthCGR96wSH56eRt
un/E8hBGbKr/D8ZTskxbsuM2uWzxz5aOMFj6Fotkmq0wAASoEBrRYIPLFHmL
npW8zpmfcjZyUnUjFXcyGbuK6zOV/xK6BM+T5+lxuiryKWGxwnmtAn7Pa1ol
mwsUeU7QwsQXqOlSh1VW1OKuiCr8NfMs5vWIUjbeaJIkquBEQh5rfClfYygO
TWrNnu9t/qlFfaOZEVV1LESLpjJJz4MrZ+Ze8JDXfU2GDPfnfIOjXarKY5mt
aHbqJmVTFA7cGhLZ1Ka8VNTaiRDuJqabxd+IphLvOY2HyAyWz8YqmiJ9p8M0
6UXe9iaon1ZCzIi4sI7KLb1hFfgmMFCByftmUIqEbhSOBuVhYLtETuWjq9Gk
HwgcSo/Grj9oNytxMVPHlF10AmgcD0AecLhNq1WdFcJ/AnpgtANAKloqMtO0
wR4f+ScUjRkq8CzRsxJQTHuDjr3otZuRzqhk11Bi68TGwPoE1tiQz4BjD1ky
VfUBbKPiQ7dw9piSqfOBkDmrYB+nwDiqGc6mLHzmdumQUZA5LMdoHGYT/e5O
qWPm8HOK7n13WuyMKv5+RAmAyS+AYhHe4gGzEE8WTEvioDrhOBUAnr3IUW+P
3XXY1eB3FGtlZ3ji4QKY8kNByTZMLKIGJrQpeiSTNGaBRdNg9FGoMNzAmHcG
nEwWKJCBRiwnCa+M1GvgVPR+wrYhoxFP1mYzSgPg80yIJ71/44N6wujubQXA
69gCf4yOiUdYiFl83lVx0r5lrl/VFnx95CEaoQSBMLYywYEwfE0dhJMvKTwR
9h/4IGF7vUMVnEJP2EBYCBI3OXGIXFKolcxijHBQZDTK8byqZjLHEQiHC+i+
c24wbFlRiLV9hwIUmdfYlIsIrnEnAURuvdQVFo0YlshTkgz4dAAwAzqH3jqW
xfyGEBWZ1tTyiLfYyc3kwVDxroVxhBGqVuOXZI1jq3lQ9nszfpbuiLkBOZV0
h2wZOyNVZAj2VAMkNeADHF8MWPtVv8Y8q/csmeiYxHuJB7IRFt9pCGoQTlvM
bOZLriTK+R0xC8MqW+J6oQlcwjkacLtnjr1yOxrETCkGHnxrGtGFdUZhqYVm
/3VjImmLYwusI5NvnHFQxoTPyPVR1JMAVzO6M96DmzdF5wT737DdzpHcHgmO
XKvwJqNFtu2aZMUWi3BwxU/QBxPP0yyu4ZgaZf0aWVATWSoH7KlDvYgoah4h
zuqg/o5qVFa9snmAisqgmn7MTclBpsG1WI/9xsbbNknYB69jNdCJdkwf4uka
B7W8Dm6q5N8XDLtsbfEmjNdkJxzTPWQ7RhH8XE1J7RxfzQAsBhFv++MVDVn+
nItnbLfx4zNKJJLTWatT5TV8cniloEWZ33V2k/3RqQ1Lx6xKJ8+q2PtCXMWc
nVQQAOu47TySf4N/OBe8dGO85zLdH9Pvvw+PsvncFrLn37wHTOLeJcnWVj/i
QeqzV4z77vsa7kT362T7wNK9PR0YoN8Ch+i1wA3pbAuivc62hEfjn/lwdHb9
NzgUAG9nTsPf3TMlpC0IOJyHRbQPctWD4xECTcfRuGPAEmbWpN9sNgtqOJYp
O2lu1GUgvPvVv/OOWoVzWVGXiNgz6oa86Ugbisx+BlfLW1rVARp5EdK3kFmd
nSIw89lcZVESIrnbFdvlVFhsFeeK7yP2mGCULvLK4qpvUiMwlPaRt4FmZoud
Y+YXspN//qzNYNXoUia/RuFG08dww9d1yX7JJuHBwLg7IfQIxdg9ETNBxibC
F6YSlBA3NJUB0dmijTioJhKjUfwmqFcqLs775p5B6gpWcnMPZF1XARomQ/D5
1dZ+PqEHlPhJL4SG39dkAuQXD8geuJt+/o7+EA9CQuTUN/lbqtWQFO9okkVZ
drWwtAsGYXZopo1AfLxA362WlBJ+duy4ktV1Rnz1wCdiUuNPCjYrTsn0gFG5
IMEuWgBxdNZAWsj2RBcMwoa0FSNwpHMmzpJ/6axopmtKn0fKRncfzfxJCjZ1
jzjGWfYM5MPCOhtJTDkyS3doB3fYYRQE8mrdLDYBtmG2fF9JjqYLRZf4mlkK
doCmA0GuLmJ8xWmuDapOiSDh/VkRJ8iC1evKBpcT5SneZTFuOhHlhbR0kPD4
KL0qWnWVrqsVcvcYJwSHTS8Qi61L9KpabASdcXwh8L1w6z6R4y332oDcz/GH
pF2goEqhocuq3gRHA3Fxiq0H7O0kiuBaoNWpoz2gUKcyNo7Kfi14G0fiF2oG
foJChj4GPnMWltk+pU8EMn2n+BK3h9/iAIRUOv076FaNMYtH4qRAlim8y+ZL
EOv/RMuE/FWdPuE9V2sOwURT9dCAanqqMh83dH1vUkTceGb5NFPfsKfw+MpF
RqBQAghv3bLfEh/38KbsP7xvV56EXTEq/v33gfcdiyS8B+SWYu4ZKY0X2RUI
bT++4P0bkxPgXvrX9OAf/JPfdzGTn/0Eyn7yP9IWlp5OaAIP9h9OJk+OduEO
uYdPJ5PHR7svEiHl6ObHkzgNbh1kMiN5Lgqb7fCGRhi8mYXDE8R2MPSB6sFI
M11N4YZ0zb/2cFDDz2x7ZJJmtj3Gakjbh3Rc7C/sTcNqHX9f0n0CXkDisMyU
82CdFzOkFGiVIUdVMs84GpdFMQpRQKAsmyM9kmV1hRKqpBXIAAG1LOehPiZL
fwIS3FYg/KGaK/vIwSIWaJHPkuCiTmEHpJkm7ZNqknWn69xJ5FGAj0eYoRm6
po7YU4jEOTjyhvVxiQnwogbPPhYlO7pE9inEKCToFm4Awp2EDWHqwDWUGIoO
O44bGFDXWrd+wZI0Z8DCuHNmNcQd2e1r3SRM6NbMy0xS16OKFnHrEIpKFm8O
+RglqM9nliITD/dSmFBUPMDCZqJ5oGCRIIRF3SXS3QRYjBTOKtUcLaifIS3P
iD26oB+OUySvZOsNecI186yczgCxHXQThovWTjfRv05sI9R6zBuvjq9sTiyu
xR4kXia8zTR/OwG75HcZ+e7lZaQGLnIN3RQ8sWQkjMMllH0AuCJ1Re87hXl7
bJV+zPOVqYcscDhRz5RoybtMlyVCVw3MA7ECBAcaYYcXV76NPzXXSr7JZDCH
8VBzglDODAcFgaFL/DwXdxt2KA2RkNYceyevdVTIXAf2jzAzkVZ1VVVCRoTB
CUAubCGvEc2xXMI+42SElfYdEh9AJMDQaBBwSDXOltecr08rYUXIjS4kp+Ct
6vOFGAozAoIBK2TjYIzrnKxJGlwDSydVAU1aWiLxt/w36TGTDjFcHlDiAsIG
F7RIdCgkRmaRl3N0quzzM9x5pJGj9Bg2rg8H7IQlsmJowrx+N8S+y0gJiyWY
hc3bh4dycMhGTBL7Ka5sxFw0bU+bEtRwiN2KW5KO8SDQgUf5yWsOCL+i4Bq8
MoLA2B2RARrnMj4lpzzbuSYNVmmcv3A4pB7SCQLad5efvxhFTmXzNdxWwH5q
YTIO07gsx2Ci83xL8RFJ8n/SSwTynxDI5W8UuuDvONPa/4EvH356uA8v3h2/
PsVvJUVBlu4fPB2l+88OkPIcPHo8Rm4MZjOrlqpIDnaPSp3VKJuUHa1cytR7
pvhbyUE06AVVSgrJkqmVXToSsyhxBJw1arQBfEEoxmML2myZFbP87M5At2Cm
fJMbhBQcrPzN0mmUiwok6RvziDEqroSr+7UYDL6yJcxDX8H1lHB/xreL4jrv
4N6wewHbCfA0S8AzCj1wLLRSRqfUGV/LrMwWm4ac5ntAqQd9ACdMicXO3p/r
YZuHJr2YSoK5jsJQXQQnGOKJjZ1YTQ/GRwAt+N/HDxFg6K8jCeCf0emxnvjN
+/MR/t/48DFzQSfnpx41OsGzO5UcQ6k5xm9pjATQiLGyuQFV4/iMoavrNi8D
0c2IkWrYEx5h69XxiebjRY6FdoQIhCmA4QtaXIbhIE2FbELwMeCVT9IHwbH0
juwdRkI52NWEX4nFtQSETQhNtY+iOTmMQKIYxnURhRNBlBePoSFRLjk0GHz+
bKkKHQwcIgy8OjuPL/vReIZJSN0mMiEPyu8yfSrfED7BfMICHCfVjG9/lj6W
TyIulMjkNHMSo2cjRmKLZO8eZ1nKGi8A4xwE0vePXOwyfSIOIDT2D414Xjyg
tE3oIHBxcn7ey4dEH/9j+DM9lJHJAIkbNSKO7OGnw8PdCSlXadu4c52k+SSZ
sfnl+qYUz781OXlc/OW1t/oqHxQlvubz+fw8/Q7ZIxIem3HL2B1Tzv24Q2d+
Ink0cNfxFJqdL0pvlIE073CWv2r0F0GhGnb+Zr1Ee4CEKgIPVvLhlknrQnzM
RwMzRSAVQukdRag6jhwL2lBN5ORcxcVbjrBYi5yIPkFtZeLY7WqV4TUOZ8y0
W5NrLTlRy0YtdUXLFr4as/1ZTOIk7ToGmsemxtbgCuE2BGs23fKEcCJNzLv+
dEG044RLaQTzjI0sm0RGslHOXkF34gvER13ly2KGR8z+0lkjjHFCjEhWczwm
nyPzS4gUbpERuQYgWYhrDoV0+mmJVr6EA5pgD6+N34IJc3dKdTm3U2ejeBMQ
1p/wJsDXSeq+D+6PPkDDTyHiPBsA+2VOU7mMttCxuTHe8gY6dJcXxr6magpi
di2FZZc1EbtT0lQmaXc9fm7QA64eM9UySKBzQ7VqAfn/Kx1VYcl+8HY0gFOm
lLuCo8dlZzCVNe6z/CR2iPJEkGwmoB9EisJCGtDOwOhzjY6efBwYJxti0wJr
fEU6NmQZYiHRoWPCO6x7nVUdTcGNBVOyFBTPSZnoVhN8BacO0vDxFeTridlF
u5pdY8EaY1r0Drq4YHmD3ZAY1ks5nL5/95o9CI3E94RDfYdYcF0zP/1VNR3p
goKCzjDobpLY36yKQ3B+fDRe14sx6SRVKXcwmRwd7aaxVu7JZAKY/4XZ1777
Dia5LMYmlsqZPrig/+6ShwT9TUYZOxTG/KOe7M16dpcelSw52F407Mf/rBeC
NDsBcJgEVWVQZF3nYxCnke9AjSr7dchL7IaACnP9GBqGsXnamA+HGLkRJ4OQ
HCZ0vZLkzKUj6Y3CKYl4hhhWfSflEkYpXkHWmlP2CfJ/HV9V6pZf0hV2KUXw
3mZz8VYntY3qo6/yTSUeys20WoX8cia+tZJq43rj47YNDV4IeZRO+otgTXdd
zFlAQ6zAazLnGEnOQDsZIrK73t2mDMHPrhw7xzOYsPmOzXVeIc5wSy7YIcFe
CMaKsUghOdzofETDzR3gqMSWup5GkZdeVRsexW8u+Kb2XOq5O3W6YHhW/0Mq
rvCmtJN8a4kTNDxi5+fTNzv/ocNDKs+j0Qywe6YnjfN6X2Oq2sxl6GCMxTsu
z7wtSs8ObSDXA5z0BV83c6HFVKDi+4RWWYEadF5rUeI2dQTPceKuvOUCiGIq
vKiBEI8i1kvAjNAgMOyYNl2VX19Xpl38O7RpAQuXX0PDF38HPNzg503AxPJb
cLH7Bdj4MxlX/sDGEY+1ky8e4/5JM/FQIEcslD4gvgqNAMxgxXbf2Gn8DVxw
chM8sxTBrzwf8wD639WrEXLQYlydPGyRXydk7mMAYKXVnQIgO6O3qnMA/FKw
AcX5h2MayxniVuYFRZ+jF4M/6Wq9AB3NOCusnwUFTmMIIWsgpGLDT8SxERMq
8XmRguIqvI6c/vYfC+f9QBUMot2ljSdSRNyDYEiMUIAerjbCpHW0I+N7tSNV
LTf6jrCGelrTBsjNnOaqQ/KqEtUIwJaoooWRCyt2RShussKUB9FAzKFjNBri
SVQSl0gEWN3H8UiUtPSjJh9mHcNi0wMm2BLOcYWyEFJzACzY2YLpjGa/VHWW
CAiMSJAPy0vY4cUCYZjnqX4xYbclGBhRTaSXkpydfzoeHzx6zPipXpN2i+k2
eyTDBpmeiHNCaKwig3dz4yLaLGmb0EJWP7cgbWdNmz573DWyM3eyIo818gnX
odw320ZVTG154tiTNShVU9IUIjMg3tRT7JGkTwlSlfxsAFaYoQNJnjNwqxse
W48IovQyMe8HrJ/LEEP3h5By79rQU/b7J3W5GGZsGghpkaJGvDy0PoMG5PGN
FiUb6vAlmC0SOGHchqVD8elVywzn+zafW9O40exeHY9fjvD/X9H/X4gTC707
gXUIhXl3jKInKu64AcVoYEZTcrKWnEuklyNV0MERqXqJx0x8eM11UVNqNMx0
hwK0W/2EZqHEbrGRnp5iTwlzq7QDUU9BFHc9jYSgjy/CRBObKCsOUdA7fBxm
CYt7hZtudwluDyCrmejVgBkChg4WkoRsZ02OcTonbCjiZFfRwi2DGOOKZpVx
3G9WJryJeAVQRtJUPsTWRTvC50CBn2uK9YOdDEVCEl8kRHSiUuKDeAOnudMg
EcmtT6GJ61Wi+Qr5Wy6/wWFetg3hOnMmKNQf+z1ISSSN4Di9WlTTj00i5osm
xwxP1IhnwWlNsV/NP8MEIXiUJ1wcgdOM4CBIvfNPK7olxJr9CfhNjMHBFLSd
dETd+LqeVtMM3pQHE/XizF+eZGXFhdkYBUxScpJtvSNYYv5qiCkpuMgUTkJt
SP5T259Pgsqf81fJ9gV0FSx85xhn7RyfjE/PxkdPd5geJbEXvZqtSLUpgRkP
Px2fjOD/T8/w/4+eqmuboLng9X4YlsGOLuxRtA0zjr6CGlmby10HfxnGlugJ
tr1gVIRH6VtE0xpPIN6EY+ZCFFkaTnXn+bWSVJ8/w38I3OG/XtWvGgthVxC1
oZhzKT7bqhMmIYIDFLxwIYGambiP0GyDgxbvGiMI3TunrUaZ4W8qZT0010lh
CUIISrD/lZJQ6Wv9Mv/0TTw4sdXEDwc+nH+uyDub/8a6LvaDmbQEWPTw4Y84
fX1AX5MCJfweY/amkeuOSoi8SDoPoJnTqRwmnQ7w9aBO5kjHFg7Sjc5PovHl
kZ+BexTPYf9x0utn6zQOjpJBaYSTFIkrkooLY3LV2Y3EEFPaFMRHWGJR9uoZ
eacUzouecTSM81YiNsipNuByjcQ1zykI6TuJdicLoCqdo+mo951Yz5DuiY7B
TZP13+x2FAIU2xCBxsNEDM6Ad1HXZYiJpmXiRh/M++QfSo/LwVocn9npboK5
k+yZC9t1WyUz5+2ywYT1DVbh3K1KZH6di7DlINeU2KMLu+M0Ut3ACt4kskxh
f1aIxBLHXpHmeGM9hkw3IUaQlO2oX+ZYjWA66nXCAWihD8JeLuomJH/UQ5QF
OV1TRCMjtlRgAClSUQbvqpFxPmRRGiOvRaKq87cXuUOojpSdcPY3G9LZaWBV
nQ5Z+yVRY6x/bq1IhJ+S+FJ0FkLOJjXlZiB+jnxqiDMcF+UYu+uMF9TtPmU8
CFjOaSB2E1ClTREl8xVDJbm/0vIJGDRMHk+ObPrOh0G2GkdkqQ/9Y0l7HyLY
L507q4wAwx4eKDmJfZDvVymoI03LrhmRO/LXNBNs0Cs4XWv6VWOeutk5/RsB
eLbCGFP05MiW4oIfLHomDOONQpUHKtAWrYSBbzU/NOrElbE7UJwaAIWrolxz
TrCucL/h9NN0Dt9OaWPcH0hu5zkptoAyDDy+1zJxRIaJEVdOHvrHq1U7xmRy
eBBbLIxi/UXQiawgEC3BM2N2KN7tZE83LNRVW7fhdnt9Ner7gRARAvTGOD7Q
cFzsx1GzAVpZcQI0P4hcwKDYZW0Tjq3TZh0xZ1SgS87FcjGMkP5ACmipIq7X
i24aEwrUlc4adVgvKYZARnf6d0UkRH0XpMYb3q5pVprnEDsoEhXfPxT/iM+f
ufww1QgiPzmZtnagy2qGQzGuNJGx5RksndZWl0N90BCllDs20cnL/vfWLtZE
kFOR6vjSX2XoHzIjR+2v3pTuVdGj618WfdO7Lv4FXJi/Uofy8HlKSmS+JH+U
nYOH38cgkvweWfK0IgD5xdFkkyT4wzCO5rxXiH7GrKFE0GRUgtRP8BaJitqd
Wkqcu0ByTiqdgqs1jcixTwLHJdNO7S9GnXPOP5oM+fmR8RWAZl0264KdQlTt
wJlQ2e8I7UMgi1IiWZ4aWz30GdkbizkQUwq5EaQrxqDfjLkLhnk2ZI/UHaK4
zptWCcHnz/bky5dO4jhyjvgmFJo2d2PU4AVQIHPA7uBJRRgs0XRXH/PGG6aH
rxElXeG8zRXnpLKsZvqlLl9PEu8lVorWHnW5FA3BTIgY0+yN4AvZACZ4DFBt
Vcl432ZHuevfEfdM7Sl333ItvnIr0vhaIDKz8iCcp0CEHCt8ROxkLOS46llR
ltAfMOcXZ6XnqMu8DIkzJVovhQ7YajLNVuIqwjp9rtb2Md+QJpCqSLmSQ/oI
owM1xTynQ+ixtByOKAcvkkCxKsj3N63V4zSzGk26/vg2QGcSxhgKed0WmUES
XuxyLBF9eEcbLfmD7IsWtOKmLYGtlcPCeq2azEOt6VaTQqOiJDUE1xLiHdMO
rJFLDE+WYdLgc8gbzwALWlSLW8pkUZL+Cm5+VJiCsf1wGylpQSlyjOT1T9aw
Nqt5QljmG44L5S3PP60yjn2MylAhTw+y0VKyoXcrreLRkxU6blRQLryQsw6u
G8xiZVGN/cpiF/i+E5Hf+Uj1RdatGHBClNr52eXP5pUvI5G3A9sNtqxs4vPs
bR+A0oh8wyzvLDVhYAfI/iRyEk4UgafjrXB5s1Y9oOufIZMYLIRKCwOMB/Ut
4skXjbsQyORiCn4+cIcl1GFiPx2n78s6R3YPPcIpY433DUMBfS5JmTI0yIVv
OZeTCxFc5rno9nxZ3ixYcG+KOeJthQC6ibIcC76SrJxBVCmrfgL/ERcotM2R
+epEyPh5vTGS0hk3OYBVv4vWfKbewtShTYukrf6yXCTDhczrCNdI9+JYvOnC
AC63tivd1QAJxwaT43dvzqjUp7r6qCPr5dnZDxKYxX4Ywn1DF+gPKqcol1zh
A4MiBFLitRQO0zO+ILuxoAyCVyBJWfCR3pOqrEonrjZaXAfjIDBjlqKWtFmT
LzVs7SFsrYo892wsh5UFLQlqgLk8EFc7WSNHLJmGmgEMt7rZNGRsQF0PWkhq
+mUkTT7zTOB/aFu4QwqDoCwuMixG5BKxjKI4UULm/cDw/v5xvn3FpxnXkVLi
2bngRDzxXM1MrNB8h0GQuAdVwXJHmMLI1OtcZgk+6zgYFXGdSEy8VzQuMQ8d
shaq0zpbdd50iudxsjfKYgJQ6v13VMHJJWroCoiDsginRpEFuXuCXfHJBB8g
Jq+uxE6s5OpjY7YVdOqHEEUeWThXlFbcxUOFhKn4u0YNoVzzkDFMELrTTqK/
DhES3IPTl2+OjfFBiXC2qLKGkwfxU/Z/8GVfXRmWbmayLfUhv0Xo49DpNOYa
HTcbPyf+dTdNkqHnP8Zof2+LMuQbPlHQSpKoR/7Hsdo7/s3OiF/tv0h6n1uD
/udpevDCRFc3vDTQN+HzND18YbHf3+kF/akC8PTcNzBU8Eg0NOIDeo3+H4bM
ci2gnOKXFKRTItDOJtqpPE9cokT5hOmpmOeXVjqvUuKRWGFGyqow4wgRuOcL
04hvdZn3ZgqxoTo3+W69DbNcnEj/A1EjVrXMz5XUMkbspGRcKNhEVRskqdi7
N69G8ivyXOJ4Z1f8djZiHedVUVo8JbmD3VUulOjbxLpwiOEmwK/Frjv80/xq
PcfgTEz+Lac/w2djTgiukpdWoORsCHhl7tAvlTLESVw5P6HG6JGLgliRm2eJ
D4L/9fL4FylHks3LigIdDYCv1gXlMm+rhIockwneDc/p7kRI742mxcBQ5wwL
HyW9A6IQy+K2WOTzvFuqkWID5ENeDufjSAA/r5j3GVGAsyiQOW94qDGGIpkM
Yx3TigEv18mSApeCi2xIHdNhVcUQpS483TVqNSq5SBi8PSsa/sEZrDeobpli
ADdVXSWlor3n/NzmVY4fYZa/hAYrK+5X8pkrt02BeFouHsVFGcF/i6UXOZ8k
69tdDWwWmUL1FBlEzm9OqY/CAAkmu7P58dRljCsrvWDwco00j5aN4MJuTUpx
Eu+BHGqbqWE++5hLYiSMMF5j5HfMPjC3n3BoEKW/Ro6itzBStorHFqatx0zT
tPEbFzCYkF/OFJkQyvMprheZ1a1iviK7arwTJx++Y5Iky5qvSYMJb6gAEvnv
crb1W5dImufJuSTFxMm4kkGC6lz1shj1mZUsKpOSaR2Ee9kVnj6jEjKaRfbS
Tk58JRKNV6hoUuxshkkz29wsZSL/kiPgHUm7KyzzjVFMwqyI9VK7dRZPik1w
g4hlKaubwKj3F2BVHQbH405qE5ZmkaN+LJWFngN0W6y8YqLuF4lG83IX7ArM
pYHQs/T6mnJnXxSUreqG8+SgrEOwo70n1rsSFlLw/NDIaBiMta7RTsaF3AlE
RtygDQtINCcAC6VV1bFMFiX8KNpMIFlLV5JV1JUv5hQiawCeoiL8iA/jiKfU
d0vQKwnWfOFSaGLB64nJyaEOdhgklUHQzLlccYKT8C0lOwlVYnHwNRsUa1c9
lrl+V7/NktwIcCQBanKNwgv2TV+bDm5ZYlfScH3BOdsokcR1Gpdn9gohVYBY
UjmVMBk79PuI9qBXMDsOC6apJIHs8EJE971arGvNFNK79CyRIXuYhPrJuDwR
2JiGZ/N5nc8tVsRBjNwYX2LdkpASS4DfS2V35bcoT62kLYhmvgletSZSUkXw
KRWQ0Y6Ay7g21dW1JL5NmKaE4Gxf1xuJABsew9mI+OrS+y02CSNo25VQZIXm
MdZ58C8JUIpo/iZogNkPB3P7Z5vYywRRIhkaA9Xg0RRtuOLHjeKIofuqnndn
TB7IpkN5b6IpiZU94pGNJAe2rhkR928YRWiO7J5TTKggrZKFuUufCg5KvAIt
yB8BTzoGiQLFelgMGclEwMWrboUVaW9yK9khSUI6SRkMs2y45p4SUGm0ovqf
okXYbJtEZ1mCr1H4+s+vkFhBDr7D7DlNFU7aSjHDQPlsD0CjHtjk9K2yXYvN
PdNBNjc6+c7MVq4Xm1u4ocRjUnxELRcQSNlKYNidxiRFDX7Sk8UMRnTnvXDX
6wNXkXDZOVcDKSKx/+GNxd3kvezt5M9rTWX19T3dPp2OlbSzuR6qvsH66eW6
IBFGT1kzkiT9hz+ms2asED+s8bDduv/1mPaO5NKvfenX+pVP0Xi6GcN++0aw
kDDpoX+iI5FPdkbpw/RFANnhf9JGv4JG+66RX932Ru4raH/g2/s1b2/vvoIO
Dn0HgzvR62Dwq517XH+if0fpi64d96Xl52AtgubrwIA5/fsLU3ZL5cFXlrMh
tf5FrM4hvjFU4PAq3YoD7di/WeqGOhc8/Py3w5P0l7yyvo/fnqefP8PTCTyF
WUtR0RTTCbZA5kfkyiV/Zgt+yC7qmJYQ4ySJWmGZB3LTqLC7Xy6eHmlP1oi1
xpTbj+pRiUHYPk/zxQL4maqYSRD9XRUG0RIKNZGrgmQ69uBzvXK7mzzTCmRU
hh04K9WFFOwfS2q7EsuTaB4oZ/aSzcxqDqLw3b3OXqcPrhcV8ZVjVsIDEzfO
xlKSSjytVliQUBgUKmuCWf0X5K1XlWYmt0ER41OS/LA9SACaHDZVE3zYgRlv
Ssh3yunjpfghMrSUbw1LPWjxW4o6SKaSkqwv1LMoHLpcFuW6Zc8YYODqhlU7
dZ4E8rnIGqmBM23Vs/KXtxdpg8XFAVkDs3AWqhtT3YkWBoSeEvQlDWV4RHmj
cQMg04akCrI0XtQkpWtlXSWhD7JhaFGLjJQBlKZ4HE68WBobvXV408B2DIqh
ohx2k7AwIcFgKn04Q6ikSZ5iJA9x8vg9vkC/IlyD6v5I4uHIZmmzAyzix7ze
YQqIcxMrGHr/0dioXICLwMIHLqXQaoj8wopYZlMQB5vCYw8FIN45znaHGh8D
DDZn6Gdj1R1uiYYmZbF+vD0I+uuE2AY0GmxPxNcm+m3Ry4qgKC0sJ9zk54qu
ui/+GDBR/42ima1txts/UQTRe8F4oPc43Ad49W/4awwHaAPOaX5rDAEBCmHL
7BI/feEtGUh6w/q7DfSFa4G01nal20BfRLYSbKA70WsgL3yDIzeC28N4hLFr
+Qga6I72RpAXfoD0MTTgnU77DehF9HmaPoEG4Qw6DeyFa/QU1zDP0/ifrmGe
d/pP02epNynhZX2/IpSs+XPplxiTdvjXjvfyljIwVteNMILlgOJLb/7rCRMK
H3IId3dFngFdicdMFJTqm/A4C0HfluuFZuqyvQCQ7nZWypYz1B/rasnmQhrl
judaqHVDbxVT8cKSUCC4N3cM7CRaJXNPLyTROUsIOkLiMm6u0POuIR81zPSH
x1mpvoZUHt+y/rCSb9iDCwRJvwUNPIAdSOIvenshpes0X5AmZWHrIUFRsM40
UfCQYHvPEbK6RZSNIYkN9dXkDTteVx1NtOy35CrLyBSN0IhZKnZVN87TLELx
ctboK+NJEUTIwtSShMYnVQzF28uNRcOIvkqaNMJCqR+sFpFrJLVktj29wbel
8rAT0LQbuCfY+3+CmLmDdkbGAnnJMZLd3a6YgD4D6YNTdEsH6v0y16KiWOOr
gh3eNSsk+hKg8MBOBZRd5KttP3/Gb4CxJr1oyPvCulWt+pF1POU0akagAO9a
cD7wOYl6HgpRcvqMJ6geMFwQrGiaNb/+hQ1Eb4GMkdzAJmT8xtKeddwPmbfm
TtEbzbLQiArVAXBnQWT2qntT6DSq6nlWBve42ADkqsmF9q7aHIF7qCU3sUqF
TQB8aukNLetygVHfDsX5zWYmOPa0NF2PWOVxN+K5UrYQoR5x4Dl/C+KOKbXZ
Y4XvCZ3cKP07TNuZU2IIgYnS6blic5TGmSKdr3MuviVWEU1tJ/HulJy1YR3W
IAnRsjXG24eCM5b0FvNvvXtJl59GU29nmpQJyA4ibBKdLR6IEtbyJZwbU2Qf
9lJgj6fcPL4ubzQJgzwLOeKQUXh3bnouN754iWFGp24rQN16iRjnONMHqwns
PdJ8ORO8zCL60vojnwJvlzftNMFAHcZHpEK54HkQm07UWnM1XZLJGau3cWE+
ORI9gnDcsP5Rd0EUB8s66k2/c5LZffYpRXvfHkhGSDVg7L+mf6BHUlYCg2HC
T/X0xycfbN7PNaxkvK6L8F4X8oH6fs5BLMLo0wduNf6bgcAA9aB4ZcEgQhos
FgTJQwgMGWa1fJQom5GkW8EAyhS5ZIaND0Bh503gLihZQPRxkKCtU9LA2Mec
3GE6nAhRvjNn7Skl+T73TwuqHtDeWG1iAL/G+axUkTekAYzmw/MjsGaHdO7y
mDJgozcpBag4txSJlkurqI4cui5FKQVFFN9EaxQsbVPsB+VFocC41aG0SGYV
KSlkdME2riWhGHQQjNxtZPFWtzS6MvKyW772Ak2I4WjVdsgZbHnqRT08edMt
6Yox1xD5jhCdwHmL2wFlAiHmLQaiuAF9bMFONswPDU0nI6OnZEW5svTQs4EE
ehYPZMVCMw0iihY2vKwR7jujM8pRwdYvoGfSVnsyv1xeRRo5hbprJzy6EVwt
FqgIXmd770L4WDJKgjGWqE+eCOU4+adXL/UpTU5DpODyxOHx6uLQjZwqLJEJ
8TQn1fHb9IQzIUn5O8umwWXODx5RSXOf06+suJ1LmdpJcRetSbNyIlsSNjO0
8HH5fKk/oRqQnGPI75voJ0hiIIzyn+jok0swzjC19hXGJNkm8UcGlpIkMuwL
D729F6DvnpqzMpIb+W98W93IwU121S4cuVcdp2cSEFy5ro6AjyZJsapwVLfN
7/mIdJhUwUMT2ODRj6xfIFVTdZmLal9pphSFMsvv9R/sPCp8ReiB1bX0XJrb
IUjCsWhtcgtR78vXL0v7FfE6t8hn28Hk+CENWf+6IrjalQ1Yq2A2mrWmrFix
rwIZzaYfs7kYKqLiZ0JghRXqdy/Z2aIkxVZ391wcFTnklAKKggPDQACoeewT
HIYA1whXbVko7MlvSslDILdLe4QDkeXAcaDZZoHe+oqXRBzKtYoVP/92hswm
E5iy8EgDlOMnyJj9wb4SYP09fKXgq/ybJHujts/pd7Ya60NBUNGH/Ow5af2+
/966vapmG8mHs9Vc2P2cEuO8ACYvGXwD2yCpBejnWouOTqvmrpj12lASnb1e
Fp1v6/zi/fnlh7OSnQ6+vWsMhh5zhntgmMbCsI3V04dUvPvPOmox42Gtupl6
2N8ppCAPG359AxM7SrE2DLmlhYppvk65+WBFvs35J2w1wO1u5e/6yVooq1Xb
hLSBHdbPagt1+GRuiBlKkS8dmZVHKfcdBoz7sN54/gNzjhMX2iQlVblZhV1i
vWGONNptto1lUTIHQwyCg+9BCp27L4lrYkRxAUNqhV2XXEY6d9Y5SWnZY2jC
+LDfnqimPwuLQat1ueS6sfQkL7pw+m/HUQFMfaC4PVMs1XnEaMo9NETVe/b3
QlWu44Cs7sFV3e8ZW6WMrgZffhVhDU1hEK/ECONVuMdWsFCl3vBqXPMrkn/D
Y3n6pavKy0xUV+Er0EeOXFtJbhRyioXrz7AWIRX0lPu04ri5d1o+PP0LOSlE
GiqXO1KSHjRS+4u9FqvUeUTylFkf7wZHtfd6OqUMnddZsVhjgB7+Qc3XQHkm
E+TTWrUHi8QUT1pL/KXBcY/yXTg1KrbthoiMArJAodLcGjvV6yTFH0f1yKgz
bwyI4sNlCxC33UlLbcOjsDN39FiqFopGBbbizcUPzZbZWYZnSTVALirVFWlF
WdvQDbejaaB+LJoHTy6EJgfRrRel0k1gMOC0Q+pFhgeLoeofEGJZjVPtwBAH
eA/DD6ZAniqckIzEkDIwUOAnQxoT3m006miWKnJ8KDpwT/1TiQ0ZQbl6zaqC
k3Ipp4Ccwqazj39/iwU0PK2b9dXZmMbHSnuJ+B4pOkhxNazk6Dq7WK78cN2M
Q7A+5eqFAmZtxEgYLlO1xefPjmX5MsKp9HFCd1WWochVLYs8kSL40aIWmtID
wZCk5/WVmAexUIi6i6CWmI6SknAyZbUvO5tCUbzeCcgP4zqNeRBJmIGakjcX
UmpsE9p3lx9U2twCZQxObGeGplFkt9RoBRdRNwqyih6c5oizoJ+eb5NG+TZF
HbKvdfCtSHwDPCNVnlA0SK7p6OZWzNe1aBGDdlO3ZoQIueREgg4xiQIxCaXK
YmZSk/oF4kO4mIwai4guKJQqbsWqaIvNQOPQyJESWr+eza2C5nFcrtehJOmk
aLqaD9I9OXXPADojJ0E8XixMxXGIlAVIEH6Y40Rz5c9zScVJMDPQZVSSh8q7
huJMHpFyeh1XrChh5c5XVxnyYs/rCktcau1Ms6lRVbzQTa11mKl/btSvM8Ke
3tmSEO3IWROZWi+HsLSuAu+AXNxQfFrqSmuduKar1aKJaHqB284dFKjvHgzB
aiOFWZvnlCFk7IFHiMv1epE8x6oWGvVsj78OaQedLpGEQGcsxNhTslNJasOZ
xMZymkr+CD+uUfb0yu0ewj3sjEXxgetyeDh5KVUILcYlr+uKYq1nBVsD1A9B
bznyDsRnYWQsDHqEg0a3AEMYWxnUGRf9NzqB7Ba2w3KMhRl+U6a3B6x/GGCM
g3xiXD+auIa+ZAD+Hb3et79WucR/wSD63GWDw7f1Omr/nMYNt0eep7+jbNF/
rOPo6MWM+0/3vFPFyH3zPA1/k7g0IrHFPYBOw76OHeh2PerdV8Rq3/MeXYAx
T2n3E78/DAZpkgyPngaPNX5oPmXo09edi/2TNvjQO6EdxG10flEbeWjN0LNv
YMJRG34WRkLnvihdXFBKPmC6TUKZ/PlFTE4arMb3GG/5p5GmlyH0aqwKZvI/
jmrEiwBXVTOl8xaXxDlkxA8AbmxJuimMNQ796b1arkuz74mb02/F+OeC60jk
iwVe0d2o624vgCPHqwpTVWbrWVEx4QL6VKGIsrnKph/jmSnzEtJsVHXB3jKu
Z9F3I0vGRT3jhDGeBEg1P8cCCjtEl5T04MBC3XDmfB8zaUyVZp/h4xHbbqjV
vcxWe9XV3/KpWGpQpt6wZ7r2NQlxrlbWSbsLzUXvj4pzKSGQxKmzUYtmcih7
DGipARiPiy1KDXUJDuds1okKEMyDaZ4V55bNEaFMu9k6oV9xRhogfzfoa4hq
pyzigticx+RAl+QKWJIVQAwGKNgkZnCUydR4cE0h1YzlyzAyWcYpacS1f5oM
PiXxnkOq7IpxDdJEMj0vJBVAw3kZtDyouG1QDl8tyhYsB1T58thBRiAs9KJE
Xyazp6hdlNWCJYVkFGRp0i8oTT/sMFpjpAzlrJhLAqGMREHy8XHDBLJ2X2Ur
2v1AxT5j6SrkruDvsB9fgGaFXz+6UYBevKaljC/p2PbSU5nK2BqMT2mmTgMV
bbafcshUCjOrsBgbylluOIE3nzSRdAyZF2bi1qrNdRcyHlZSNXHqrStXdlJd
zlTBCQgc7j+nsuIrp4ICYZK4ccgCkalD13RRNdZWkSPfpI4FnbSqcUKpXRqM
Us5hnixk0poV+yZX3j8uvWT5zuVEG3XrjzBbd3x5EcU+s57Lc+SyxewR0qke
QoiluyGMACX628W3943wIYO7Gs+pveF0rRipB+vfBCueFX3M0ut1rcK4Hb2L
pNfoWte5gIRP4J4NA4g3EHuNtzWV37yGwos7MkjI1Gp+1OotEEYspD6f4HaF
LofQyQ9olsuogt65ImrOrru+ud41vqEp39DP3/kLqyrcLZOh4D0uWDQzsSGG
/SBw+TuEzsawA3gIwXGz20CTCrNGFkPPlIPpASwB67EP1P/8GZ9N/LMvX1D7
pjvhqPL18PXVy9fPlHSF36n8M3TtsWSzyFLlbb7hSeKCgUAt2FVxy5Ds2GHJ
LcuK5Z6rQlLklTOXHo91asiGYDQHqpyYQfO4QUoAMBGX7VN5NIpgpIwQIHVl
KAAHlVUSU6OQNBL9wymjfOMgvwvyHazmMghUkuWoe7ZawoDzL6nLFaZoqGdN
cDWTYRoOP/BuUwpQjSb77Dgx8DLUveG3SyKscu9/hZ9cesYvOYAKs5quDDJf
IaRX4STFd4wGPeNB5RoF1+8YPaCYnQc046l5PO1GJybMytDSrOhnvAidkXwr
zqWRLwEX+8nmIWoAHt8B3K8G3VMQceHXrkwgIKBWgw+7o9Nm907j9OynEZGF
UGnbu1sJzIXUn+wYxvTIIHPgfFXXxdEQtjIMJX1zqcW3t2+V33rnhxsCGMOu
RZn7A/+BPfAeUSGqovGrQL4LIZaGiTgkWWJJneZabeM3j9g5n6Q/C055Jwk8
xRoMjzjbPV+nbPte8Sx9d3Tm0i/mI71VO7DPY2V7NcPA2WXhGBTd7i0z9zv2
LTPv3wMLUx7TYbB6lKYSCnlhQGwTOd61chi9+xJY4egsfuTN8s+SpPco5ayP
1DE9GJ/T5RzTl8L30ifhQf8T6XhbB1rLiay8338PKEbesrlXurh3Dj+yBsez
2YN4izr5L8dbg+dw2b2JW5z/Rl0lLx6wWAqr2pIiirOe712hToqfqMa+Pxsb
OlQODMIeiG87QCp2notyURwGBQxj9IAkhZEZaVSn06oWei9OnY/2nwFnkuzg
7t3To2amIURppeuCax4XapPyeHj5vLKbCV1V93AvjAv//20L8XukYhwBzU9r
LtTbxIi6CIU6kI2YsSIXD4QE4k4eWOYKxcLa4NkNor626+MZbv2AS2jIbCJY
oF+SKYY4C82grwOOQjLCJ+SjMoaoBacPdZ30QoeCe+fgUNuH8YcnSDsuYTiE
sqMTZ/rVcN/RtimO7BLCYeQ+JuR+ruYp1tWL3ZQg0SgvU4GtCLZHAAWJdT4j
bTRN8XlKNy/dk33CPxCCSRfNkx/z5J/j1Ru/ypsGQ06H0rb0MW5AoIMNTHmB
+FegHrXc93bU97UJelvKfCo3Kag8VCFivHJP+sLo2ttsIdb3zAujTtGRf5rm
K7a3xuoMk0pUCkMF4rpV/ZcB3WSr+OetX5nqmpbZLB+ujM3lw+jbMBOBz2hm
nI2egwyUF4rkSZt6N+5ieP6xUsexZ21QkWGvqsY0TRm/U39w2yUbvrOhvfZB
h2hlOlxV6DBy/iljY5qwYGPPguUzC3WjoCyt9hLGtvotXi+ctZFOjLSrHAtq
DglqLAi5KP3Fb4S0R3thNfTqYonZJlHuM20FS3SSMUpLC3byarIChSrAse8I
6dc1tXmIPFjBY6rnFzkVoRZsSVUIOg3DMIAh31ycWQ0VQsRUuym9zu9Mga3D
UDED0xCZd1Xs6khgh1ZlOj5W/Mt2xBrd0O/hAVewsx41ugLLb6hnghkxfSR8
iM5rtJQFq9VREx0GoCyQ9H4k4MHxmWKu5cm1ErCZ2xMc9q4u2laTzRLc0HF0
drTxU8YukMj3VKBDLXm/zV0Yv2M93ZbtjaasFWNBaFePPSklL8lX9ZwZNQTg
eFtXV1iSXTNkugw1qm5Dj9XiEzTkCoKudM6cfMZcsQu9UnICog+/QMMB1aWS
mo2ZJR0nVQeFkom7ryTbDqmkMSVNSOyP6f+BHcTI6kUEe1ogmEekwa5yRXzm
xWf1NVwpmhy96qbuWcbOaJqq/AFbyd0yd1ODPcZFduRWv5FF8mu/GTI1MUWQ
vwNvQkeFi0yzdqiMHsIeWdgJRgSKqI6BpPHv4k7z3EOb3J2l64FfohoO1Te+
XYnalShwdwO8Aj8Z4phHXDkTC7G0N0vvAcMqZS8xD1KWLveqiohItxGtXM6C
+caGavDVQ0X4Wq3E1UQZ3nVRE1e6GXWILMJ0kL+0J2jBRs3AdHs1tFHyAgzf
LuT0sWRJlFNbLYCS2rgjzw2QFT8Nm/5l5esP9vuxneh0NhLnMR/jHQWGMcUl
flbVtMhyE0sJQMOsZGC9O/ruWFJ402rIACp7ET4tecw9cMMZIbpsBmaVQE1Y
pyYAPEO3Rh9nxHH1wIQM8RqNyb68T6ppLuoBag5YfYT+vog0R5ZGSzMqS4bd
DOeFpRQ3Aj9WfPa/aFbBT48jvQZslwwtbBMbuQnxDOQOisRMVQTVjZL9rimN
OoXwCo9ZY0WuNhJTtpopVRgJ58vO/sjYo1dim77A1wLb8O+595iJ6859l76u
0vOQ8tZskGahUjZN4kkkPW4IxrZ7EPBPItb+dFtf3azRyhuG7BFFnfDhqU+W
VJPFwFzyMCZfDj5e0qMLlplaAGgtVwatHhiAyKmMkYDjoBs2zN9WxUy9zT75
1L8JF4hkD0Ay7t8iw2kOh4rVLTN78DX8ziqJWCm/ZrDSj8r+GP6oSv7eVkmE
LAfpJleY85zSb2RkycRE8AvNKW2JNwIhCDx22D4pzsCZAX2G7/NWqjqixQfr
0onHRLBR4dicm1Dq9FEuYGV25TjoxoY2ku3dCGWnfIKy7lmCJLbTFUlzQqZx
zvgJWi3Fb4d5EOhfiPGbi11N8Wx5nXDfq5WYdwRdUAZI5WEioYOS620sqxG5
/jCWQGWwYzYiDmrrmuDpEhApajGlWW6uPB0fA6yGKmDCrg5c5jQPVc0dIfCU
gXxtROOGkr1wA75EqglmeNk7saPmtU22MxwRTUowO+U6T5kcaGeiIcF5hmwF
Ldd4mmr+hluuFwLIhvMNkgNEQL6EBivM+gaNib3fKHqx/PGs5Q1+EZyXHQXS
jHyazlzE37GzIb5Tl1yNVgtpFfqNRzwVSS4gXDWlwkdawcXzIgmfhJbB4SRu
idYH8pwEKsGOEOH5W1vsJgkqQFnXyNhsB17vqK/Rr92Xf3MvL2kdWEDJqV0K
zhFBXmvAWqCQyaW1VXXmqD5WO+BdhlZkYoRWMB9G0psuIe1UXTNanIRDRFFC
SVnmDcB2sSqmnRE3QQ+/fGEujI/cyhVgvd/mpkT8xkxaZw7oWmcbbSn8GAM/
KDKtz7QDf2o+PW/vkkXj4ouQIMjXHcTsmPm4uh5rWsxIkyNeIQU5vrgcvApd
cDjAAiw4LCzmNopGbMzyhvkGLzNcq/3RMB+dx02+oGAbl+lVa9ZwstckSvYa
DcixqEI/pYF0i9kgOW09LBm47tQye1FYaBTrRpVhMskaR/RgnqtOLeFsvCix
Fp/kUxbVGslWl4W0sJzNY0E+CSGn2KWla3Pud5aHEcvJN9W0IN218mzhRrdV
4s8P0LTkRaUS4akV4WSQsF4nfBXFLQ8/IEVSnNo3ziY4oauGKaOpUaKNUKiP
2hEtMLe4kEjL8eVFprWsizKh1mFIICnYw8aFrzmXQ8m2G4+YaBysdatZJKXW
S2v6cfSoTR8fja8KS+uRWOY2g/h8VSFoF5RyoAyp3TjtHte7/cPeOH308CEw
lnC2VZlsALM2JkaTeM1rotl3tjbk3ySdHaeTx2LZnJMwnRPoyvlVpdqEAiuo
vh9yJWC7Jy5b0tu6otgdwcEr/om+yPLnmLbpC+e8/fxZnjac58BkOgpv69Tz
yFL5mMQl+bvjAQX8iuQA45RjZA1M36A316VawxiXYLovEtpCrITL1DeLCa8N
fEyd4aCkPjSk79C9LsPaiNccBb4j687FqbRmAPTW1rn35y2rqKiM1ZFB/mAW
pkhJcDDxI2o4Sd1DFbIiHW2c5Mj2LETSV7KAhRWr20RfakChOvRSisbWLY6G
ky2RZDbZVVMtyBsJsG1JuUk0IfREj52LNlFcgB79G9HE4sGoNasft1U0sg87
AKYfZBo71IFSVlGcgFzTBgEpWwBczzY+Oc6OtbaAdPwSuxEUJ0nGNt8Umq7w
bc6yLi9Zume/QOjpJaM8xzhHvFDvG7s5hTwbA6YD4grX7IduwhETONAUTkU5
JRWfOUBGVd5YJPT9Jt1IaUt0KJmtJBMWojOMWBJmkpX7Ouc12teSyOyS9rMZ
0JTJtQrjVDkDaZRRju1GjLw5rXZJYoDXA2mS7bBAAjgAzrVkZ5lI7NQvuNvF
FO3a8mfk7OZycMaz4LvZis5b1524olhSKny9AiEOZXonWVIZp2bp0szzmJTh
jNlprP1COiiJYI8A2zrn27HYjHnX3PygX17lwRirKXMOPHwTlf01j1yFdinh
TiqsuxRTNqG5QaApTKZKrKxaGe1XJ2Vc7Qa2lHGpBnA5+GryVrThUY2RsDWW
X47VGwJSmqCWFInrNhpPw8ve4kyRYpE/hlu8ltbR98q8BKDRKEcUjGl+nICL
YD3RM4f19IoJR5p7q9mEoTNwBRhZY8UDuWkGPTgjVatlyqAItGiYsQERVazq
xLCvyGFaq97JojXk7cRSfQIiaUB4Rg3Kc/eYik2sWyyHQBv04OT4h2Y3jWYV
DqOx0YjPKqTHOO1sXOEStmWVFXWT3lSNZE52EiSwPSWirwh5dQDK9WxqCJwb
6tAenFy8w9zHj+TUQUSA/72tGsmiLNXTIzzV2fEtoIxvphStVaLWEIGfO19Z
5+mDt9XbXX8FJ+mrirM2TosmR24iS+Eb1iKy10rqrkHiahWKzS1wlz3P4vEt
CbtkJqHZhPvS5FR8Fm2RYXoJsUWw/3r7PhbsfeJXLPte5phAoEG2ACZCAxGt
T+4FPcz/GrggJv4f842RIF68359vCpj0WCJQzOip1gDqP/yRiSng9OFiPBF6
2htODuVv0rZvpk29ZYRVtUoSnYSP05NnVkI5xRrKbjZWPTk8k8I70YTkM/9M
yuvgnOyffAbPuon/YYK9z+CZ/+yRr52jCidyHjgXdPfnfNOoB2BgjFlLAkyq
D/+wkJDI64NrjJIyKAjqceVvRa39hrF+CEkBWvc/wKTYce7ZQ8yGSNqFnktr
o26I6W/5VWpNnjzaf8JNBlwUAXD5o6cPH8JHutAsjdACHMYepSLQJCbM5QhP
Oi2vXRGRm2ox63nC4OURbhWGpBGfPjnCaZFnvWkD8RsQlKU8K4+CbZ9qalif
dbu/uURC4wqxZLVkOqC5ti850Wi+xOovUzxmNAERKluQXF/FuJMVK3YoPqm8
5U0laXDIQbABIRANWii9zfzrK/akkhwrmhEomJQk0GQsgSZBiSOS+Wqxbobs
TqkUb9ClSJFQ502UuUAjIlHiLeaiA/ioqIGwsqw8pRzmZNugbsOn2knDH5r8
p2lHWJpvfAiK2v842chdBd9zvIg53bBJkwiXRd64ufvgis5TtvdwfANWYUXt
UAgWJTuweY0OeD8NdShsI8vZQ06/tuarXN3+ZW+Qm2OlJZkVu1uD6jX27h8b
lmCtNeB9ccaKo+fYIcdEBCVV5gYwHMjRmBYS+f2JWYjQ+TVssouj7dr3h4yS
IehO/HsHDNRmDZIDpGOz3G4IAr04DbI/xO5m22Myul3FcQwDXXU8SKl+M85s
2yK7KdjVHCIoC3VhEvpDB/waYLn4JM625qOq2XhJZ0CRGKY18WPR8qgb8i7p
+i4jhcjm6eVPp48fHnQLWpk2oxAnvhLHXKRsWkR+hdEw6RFrMnCZxZt8Vn+7
sVi9gRurgQqi8ghf4Iza2HuhaIc9NzretnrVnXtZdAqRPZ3cjmLl7OBxXW3Y
orXHxiXGephdpVLlASPcqu6N5zAzeRhZLiLOpjKsN9LWPoQ6CbWguWlWyzmR
qrIot40rHICcLBc/BurVBlc4RGQI/7Ht/uwndfttgPfBnxImYc7A9PC9JsuT
x9yy8ylyT989ngCQPRhqs5sMPcVR+67CzqvA+Q9bSg9AL+a57N2fOcuGbg+r
T5sx7uxzKciF//7A0R3ARAOvh0n+xoIkXIMtqQcxpmTga/JjSL+gf/OW/gZc
m5MtncUBLN0wdDJ6ggQ/q+pGTB9I5NnyJ9wLMqPAQAALVMykfqNZBonEiVQk
cE1JaohhupOLDDBD6ev4g4gncwIhQt+tH1fisFleUvyPnOjer+psSjn/dtVJ
VSyxQcWkajnCFB41YU/RWCjIeT2wUGpNO8dlHDS1UKeh5iUyssvKYXxFYdKb
JTSvhQEVUxY7kZAHRlzJVn0VMk2FRAzRKWWdBWG7KjfLCngub4x9cHp8jGL6
N4biuv3RPITqRF16SAgRo6ScdD7UdvrKv6jjAL7EnHyGQgHDIXyETNjBdouv
LTSeOgpZ4Yp20o14JynY9pUISHQOGkpsqfPFx5LY4k5fvUxtsC42bFoS/5Cp
Jav7SpNo5FC4IR6FfG6MeiBGDRWfarO3hzoGURY/3Kxhg3sEpBsqNLUJgMr0
/UGzq4re6EDflMYqWJKvuDSV/16O/p8mjx4+83qiSeI/IjsuAWlvW8kkEO2C
UhQ03IsPGHd/e5gCEgNSx0VzzsW5AmY26h69AENvWugAWWn5tO4dJRtdP5cu
QUhnxYutX/YxxhZ80Pe0xoOEFTQ3pqOmm1EYkIbQOb0Tnj0HZsKF6S7zrBRn
qO4JE7vGeFjqrjbpg2Nz9A/FmyJoG00mk92BkmizcV7GMe0h8SIId6gt27DF
gDOoEnMmsWhsIBc/Lk50s6Ecp0M7GdsSJ8l7RigjhgLxx9bdUguZaUakEmyY
eX/G5HmUdqpDvCKs3uCmaS4Zkj4wuzbuhjl+M/onrNY/3wmmk9FEPgN7RRZI
uAUVV98KUY3M/+JvvMo4aCwVhQw3gCrWCNkxna4HLkEj7nHqLMNQhUK6Jg/A
xgTTtebLoex+sRU1GgiLABDcaWr+9PxacsLF+CJkphYvjBEZPULflo9vyWdK
4K3ZDK4skTi7iQmp/+2CtEjnp7wpHGei6A5rY6JnbFZnVESY+ufP0wcfi9mu
R3Fa9A71PvukwcLdUfXUIwwFpd5BUtdy1EE/IyjgI/cN4F6OSTfK6glNGoFF
vDDMlOu5VpKGClEksmvIDYRwrIhLcBQ2S/98+jN7wIvpYBNBHazywfGfzw3D
9xFhKIdyOXRdOnfyTvXcvDasP2OrpiAPOgw8B3Kewh3iIf/Em/9WN7+R/eO3
nz/jj8k/wd+T0zq7bmW/TTd4UcxhFGFT9AgUJpVz6x4wYLNPj0AM+fRozUiL
c4Ay4SFht2avMPx74HbQDbwWau9hg6Grv5fK1MWQbtfKxspCkO0gr2SJ0aAz
dmAYODkrIuFxemq6l/5mmDxXlOz3T4mNNZFYkDYH0BLmh52bYtHxdFWIPOV9
0uuI6iZv8qLDHgICID11TtwNr5DgBlu/5trU8YnUUSRyd5QGAQmeTfCZApLz
DDRgJQaUGLaWcDZJ5mF8vA/sLtY1i5edmE5p4/PcUOF2BhEZNXZ8ac1XdgBe
pwivU4FX3UvkhsY/UdARoauIojAVJ4LfPzhKq8JKaQGnOh8HG3+MKTqVz8n7
BuPuuiqEIq46298wija5yxFn90dJY4oRVfVhIcJSOc9uM5TYhQ8eYJbM3l9W
/k5xqv0Ou8Ru2/qEwuL6Q6LzWjwqObGVzIKI1sNC/NGfE8GJHSBytVJEedTD
ukOpYfewsHkGWVVKQIzE2E5vGVQa5kzesEY3qr9KVYgwNoCzldOBxMkIKBu6
LmmQp2LJ1NZKRN/CypnoEicK59veSGWNgVORflDqIK8ijg4UCVFIOZfTcrzq
ukXTzRWdlGmNfXaYcMGY6+nBalAzMKRrJmpVvAG5RffMDu1D9TFx0LiQbu50
wX7ZDLaADYFUPvfNdUtBUsPUtIP9WXppXK1RwujDIkKceHxoAJeHnO27CKms
HwSYE41MZwquTT8LsKii4/iRkdF4B6sKTea5J2GKubFWzMMQ2y1lTIjza7VI
wFeTdJEArpqEAtM/lXnIw+Xc7eit6nAep6x46rLsYkBUBkJkfcdA4HVSV8gm
+D5aSQzCFMKti0eScsbzbC0e2by6KIaaOECNNvMiz0TSTdeFJpC3yIBoGLo7
qCgQNwDyf1hWMw3ZvoNjWWwo3gb5CatSQJ6PEgZMfFwJ0KcOvPEQkhtVZRHt
gnqA3rNF1A+tJHihhzXxMizmXBwXmWqytdWnBxD3MS+YqRN65AIfO6F+iTxJ
p+ILRhvjQxyGww7wDXI7jDqllBzx1OoDeyq8rh8kGNIl3o5jQCqRLDuVkdUp
OXBtEhjN4WZBh0dI4JpNHJxptVpeUSwyeWTEVcwo+5QiM6mapHXuUUkmXygE
KSPv6lhTDRbkrsQjXhbn71EXkZpTK5PgBQYszPI4VhvfkMxihvURT0XOXcPX
bbIuvUvcLtxtGwlIObreIzZZMT3nk3spcraeGvpQ9dO7RiI5RU6SWRMEkhFR
WPgTSawxmZVUepXa6rpDGlE2m9WkrWNG7D1rWxGnhFyuCFsx9Etj87r32dYk
LpahMFR2xM5G0jGx5ngm6NPrFDnB2RYl6v7zkbvO4YqrEoXOJ6ahbDNDJzks
K8IHi5W/XIoaQ0LKKIUpy944m2DXAI2brC6CHQtap8CG7hwTKvMIwyj+KN0F
3z/V3kaJDM2xdZVGtnYnjrzKVjSnYwoxPpOW33Z2oqXKx5yYQEKx95bZqsFw
0nteK4xILW9JaHfMGSChXSaFFSzTIlnb7umQy1HAfUHX2zaP2tJA2pZVqvfN
TQu6IedaG9BPKR0NU3lU39JbuSKqf7kuqBIyG/soxUSoe1QTeFBSLxQalDJG
uRYQU1AG6t70nE85QZyru+2iX4LufWRRSyfMPNfBKBtT5QgYLjgE8D8HBWzO
H4QAefX3OX3pDBqKn9FSQJmj5R0GMDy4dUKCo6/yEj6YooesRUyJUNRlZqJ9
e0v6E2SqLwR1iBT6LfuXKywRK4nnv7LuGt/d5BuPw3cncIsuAlt79bpChJa3
lmhD1FGkdMI/omT5SiU4PJrj2V8dn4iTE6wKudp8Zi5Fk4QcjLKNZV2lPl+/
f/nSpzDhbnuZQxDS7dKUlWsxotEJRmgC8hc9bJGPl6mkrqLOMSU8MC4juHKg
/sQoIpJIzPrJEY8eWvE7dhcbOBKitMLNtZpZna1FJiS7zK+IJ+zQbI296J3L
mzyASms5AsKmcCxl3lrRrKJRlXiITuL23gmB8+8jn9Xh1skSd1ORya2SPa5p
gyVqUPaVFCvqoNbDL+ki2xD7ZUHF4iLNfZENly8fvaTL1lh+6IqEyjxrRK/G
GRGGb6SPsg4L5CAgv6soI3H1o06Wpo6PvMgCwRzKi49CiUj1fHdTSGobtyOF
7L+r5esV1mG8TjvT3lC4foCg/jU91iwOTXKvltrAke+ytVL2LvZEsK3iGZp9
mWSdhmrdOwPM0jnIWABYmc+rtpBaV7HqQHBWgFnSe9iMBFxjKxWxduZh49zg
VHU7GlxdxzmrCLmvLDNCU/VtYrrP6IN2wdeUHBxh/LabNFJynIjzJ3KZGaua
zBeTttgyLzE0m748CFZ41eDvm4LiK1uy2upEuo4kPU3nhSDOz5/Zv8S7J2Rp
uV5ecaEtNcHhhvgcotmwH8dXrR5DZrhB3RR3V6FDcidTv3fO5iK1cFm0DkCn
/bbpzKuQEYwcEzkEU7fPq3x6O1csC5RU24p8PBVlGB+dNV/b/VEkteMx3lHO
nyqy1/aMjiIyO3PtnziVDW6c7OL2iRNiFDFwJFFfMNUhpSOdhGjMf9Yg+ST5
lVgDiofjrGOq6NCoUpY1iP9hUznabUvmolRbXHA0dtlqpjMKmST/WA65F68k
dCR3GQ07xNLyNuBGhTh+vFLTmyK3VKCq1oL//Ry+Kr/qoOMTgRkzQTGeTJYr
HYfAUaHmnaaEYm+vviKHkKomOyO3FKpyNA110mBuEfBIYU0d4a1c93/XGBxP
/e2DuLy1MshlB1xt+xFuKHVhaekG1Vk/djyxbFlVpIyQbWMrFIeBnpoTQ9Ib
F7PKwVW+K60PAGEM5WMtYaegTlc4lhqNQSYWNckWNUxVd1vQDfvTb7h5jfB/
qnwPKEqjOl+P9w8jdv8ymzeDnF8wCHeVG05FQLwkdMGuu5ZojQW1wAcXjSNu
XxmH2rYwK+eeKp2HEOR3P5+kTw+fHQQWIzTzgRA0P059Kzp9zT6/LktVv2qq
NMKVLg+3Nx5rcquuiUzc0tly6ELwX1mRbcQkW8q+f23j0SqtLtqeYVcWeBkN
YtU24+KszaQHsMQtzCvxNmsyHYtFa0rXuTItN9NEPw0+Sp0Mfr4yBDARD1KX
mfzE8oGQiurzdyrNfklUmQ3ncQ2bnhEDvFD52MAW20068U+iCMsbVoBVIk8E
VZjEI2lIhDJ39Ayvf6Q4JeWtcJFkUYAvfmjV5xTBapcU0OquJ40pnECiWWHW
8jk5ekMD4yNpCJqU8hTdktMdj/yJCwWjAAHaR+xAopE0iQsItfhUqye6zDVo
V+mEzfRrLIqUg6koJtsCzGxY0nK4sbsnYpYTNO7N83hdVR17z1jmNLulOlFg
JePICDJZwQAUUY9a6rhYueqAw7QwUywQamKbubX4cGpeU1/v3E4k1IZyUp3z
sNtWyVv2OqiiJcJGq0to5RSNfxA9rfnEYb7+sF4FGQnklDH6a/zG2xBlpO7d
CKpAzOdEGaplOv0MxF4Z/SlkBJBLaptplQQvfjs/hQsglY3rKFOy6g2K0seu
DAQxjcS6nGHkihS+MmCkQyR5WA7XOY2wTxdQh45P1zMWbyyttTjXJd85hHWK
AGZ15YpGvArWIXcHx4y4nEo83ON9DFY8Xq1yIB6f0lPYBHVLewu8CAyozh6U
U8ANBBgxysKRUDqjcVG6qlJTTXCXc2IayVCLH3I+25CUp5NmJs5s4/KEBJSD
MTESyfnsIe8RIRKFXFo1UE0Rv4YDPclLl1CnwA2MIVQrrjOi2TJoFzSb9k5Z
Tvh/k8kOTPJ9SSoDzo4oZlTJ3j/CxCSNZd0iJ5Z35zTB3qE8O3qGtsVLzTjJ
hvkwm07QLKaqOY9CWOwkKPhkH5OB7CaJTyTJMb2d8IsRBVm8gC/j51r7Y1Ln
c1hbuvPX4/H/zsb/+nD87MOP49//sCPBzJyeRPqmoA/4OUr/DR++kDAQ/qDT
HXT0/02ifjDpyY8uM+a/4YMXWIQ1W42lsLsW+fkxXeNaJ4B0Hj96dPjIlQLk
oz3vWIUBdHEuYiz+wjUDHH+oIIIVMwevydkkRa8WYe2JP0yCrY9JpqWldeiC
xokqNf8Dx7Vg6WFBML2IOviG8jm5b6xWRJO+xoQFxfSUKsZ76V6ltQMEVIdL
JtAfg9G4qmmfhztmQ8SbGqH0mzvudEeQyd8cPnv6mL9BCIBv3FCZ3rJghScv
LfM3p7xFWABlPAOCgUZquENRfA1ddgTVnf3JweTg0cPJ/s6uoA06D42230GY
erFj2AIrg1ca3tGEBC5Cz9gnAjkwTR5DuF59QH3NkKyer9X/3ti5aw0kVxdF
iRItHIdCnoEMri+JB0uSVxXlnl0JUzZSSvRnCmxnx7vXHAxHin6tB84JDiRB
CSdmo0xhjQ3UDXQnOilYRSfbw5GDvjj0B2xnSvvJdnaNB/RZ+uboLWn5nGVC
btxQY9yku+6F5RIZmvQtpNgWLU5sLA4OTZVEinQ9VfhU85bUI85HxUKFzITs
nT4a9sv5riMZiC5B/Ir4CXUUOKY88HQoNpx06l5mM/HPY+GoKDt8lnBDygx9
/ow9f4CFfQDeCifVZzzVzUn47pElt1pViDnZM1CCSS1A2u1AYJxjaNf4YL4d
dDdoloOXg28l3LcX8RWM6F13LW7vMCmTsAni7CJMa1TdJdQMjmI26ISb4YnZ
ZaS56bRYdooTaeJoyAHHNdZEhoZ3LoJfVPmcNp2+U2+jgdJVzhPB1wPsDtMt
XNerFvzfVN9R/a35YigS9QGlLw3JYvgn4cu99K/pwT/4J7/DxrmfMieafgN4
Jn2w/3AyeXK0O5KwVH74dDJ5fLT74p6ZPFjnxSzMgX7hCDCc/c2jdQ9Dxz2Y
TI6OdtN44CeTyeEhDnxPKWbo3lVilt8ytvsFo3NUcIgItpklX+4ZgRpV+dKv
j3+uqHIz/13keW4/aoD/apnABMKHPyKF0Af0NW1H+D1GgBq57sYYE/wi6Tyw
iGHaocOk00E/9li+PNKxeXJ+dH4SjS+P/Azco3gO+4+TXj9bp3FwdA8UyWZb
3Y9bVqGGfe+9odODfR58YTHk8vB5SkfP4d5/lBBeePi9NuInGNl9PzTYaEB3
88XA9Ph5b3Lh8b134YiuwpaodPzH/vZ6c+COHNx7R9LmboyuoWGidAN277tW
d/3Nd8/0et19y35/ZbvTe/abEZwlgWNvNzej+DlnxkqTZOg5oNUSmB8M9Uaq
NZy/CnNkffUTPU5Abb7HKKeUf2NJrzDnVedza9D/PE0PXhjouOGlgb7xqasO
78WUpFEbY8rksIPwa3EfHAClvlrPx+jiu3ZYNnqqCcn6D39MAfnmJarNtm0n
Kkq+4fWYgjlo8l/7ErjrZVayBvgrn3L6JMBavhEsJEx66J8cgHwC+/8QSLmt
Y/iftNGvoNG+a+RXt72R+0pyow2ueXt795VkTbt/J3odDH61cw+iiv5h/rXt
kKaGtQBk9kSwTfTbyDkm0CUDHbI+pBHj+aBP8+CLPwabXv8NZqbKppvtbcbb
P8GYDEpS133RrNCJs/c4ZJyGV/+mTK4NOKf5IS+I7Ikts3u6+sLjAYStsP5u
A33hWiAw2a50G+iLCNNgA92JXgN50U2+N7CH8Qhj1xLT8OmO9kaQF36A9DE0
4J1O+w3oRfR5mj6BBuEMOg3shWv0FNcwz9P4n65hnnf6T9Nn90L8ekVnHphm
lmu2M0eEuhtYiMPfQQi6D41TS6om/c3D/Xcuyv9HclF+hRedLarMUea/gnyD
j0TcQ/Yz/FT+DJ980PXVz31G7vB+BZgFRdIP1Pdz1kIKcqIPXHJT/8297PO/
Jxn4VxZu1vbQWXikrHf8BDfgD/aVCNy/h6+CCM77pJI5tn1Ov3vi+ij6kJ9x
5avvv7dur6rZRsSrrbSy+znJWS94MwfewDaIFEA/15ppa1o1d8Ws14Zksr2B
vFTf0vnF+/PLD2clsNIV7Oo3d92si3Y8o9xIxW0+lkw841mOxoa8JPS//+xr
x9zcqf+El0TsmR505xGftHtoZ9179vc6bddxOO97jrv7PR+4SEODL7965kNT
GDyae7A+361QbWUs/mBh921NiGuGvpzX1XqV/o6EYftry+/mvuDw3+dOSse3
9Tpq/5zGDW5c8hxw3e9J0n+s4+joxYz7B2zjiOfIffM8DX8TMIzoUNwD6JST
TxWoA2zWVGUCmOMeJXJfofvcfe9LoND1ul9f2+8P+QECEk6GR08Du8MPjZQg
jevOxf5JG3zoac9B3EbnF7WRh9YMqd/AhKM2/CyMRGLBvRo+qigW4O8zqvBI
j/vC1Sr7AtAWfv3oXRz2YsX6Xrq1iiFO5L+wxOF/52D8/1cORtWVM+i5f6oC
yNoP9AVC8z6qAZwafOB7fGuAf/CIJBavv+414LfS5OARSixeE91vQG91iINH
KLEMKiuDJHVHj7nJwaNnvkFHA6gN5DE2OXiMi+5rlqI15FNRWeAIj0lv0Vcq
uQazqzm+0gaHJMxGyoHOovUttTh4fMScuuMzh85Ni9yMDh4/onPwWKZ/DvRW
p4QH11UydvYV3tJzagI3FGHDy3t92KC3cnTcoCvv/d/2vrW7bSNZ8Dt+BQ7n
7lqaS1IE+Pbc5ByKkhw5tuxYUpzHZnxAEpRgkwRDkJIVx/vbt57dDZCUqElm
7uw91pmJJQD9qq6ud1flG+DbTLVabrBBY3MawFt4nhvBVR7Wp0RvFZm4Qd6S
vAamW3yZG2HNkFxo4CATNyiK9fkG5q1tsCYgFkbQt9BCRtgu3MggKHTEWckv
uxvhqs9rG0Ev7ZzcSB0KTjjXAFP2aBrfJhJb+oBZ01cgF9pHTLeVaTlvDE3n
d8g8t7T6Cr3kBb5x39frXCbXeWFg6X6NWd3bYjN7y7uIv2Kouc84VKKS/4zY
AEV20IPKKfmiXYiyOGUfrH8iHW/rIMcctkCOA63u6YL4XzF8616ksB0apHDG
4Kwame7N+hsE9HPYmvyObP5utw2htvkNWXukAgPJyE+lfPiBX0JY0C9URhy/
4NgBI1M4U91ozVnfIQc+mxpskmZQWri3ow0ig83CfNo7662lgKJ7KRKMmo/E
wBQ43OueEyi8rzEyUqIqwbjWfj5iVoKobYpbJ2MaZ6nFwZyYc6lv6NYSXRul
7H/6hCuoYnlVfmuicen5c+d5WWpkSV7Gs5Qu7hAAtPKbZ9NIYoj4xE0QkI/u
KN7Ds+mGKQ5nYabIN6dxpA1d0fXjX1fslrABjfd05n36ROt51wd5JhrixdsM
o93Xb3ANc5vKebE54AZLFjtXltyCMG9svbzBHdcYsmltLtYTDEWjUVaIdbkx
6Y054CyHNoIVJQPxXNDg4C4XRa1hP3TQHNTLo8FdydvUB0dmV/1jLIKAcf14
AwczI3CCYQ0GpZC0PJD9PY5T9/LVdSXRDF1hoZS9axUGpc5L2ZS9KLwDJNUY
x5Le9zIlL4HLlvp8pQGO43KBQWuLEsGgdJ6DuW4IQFEO01QT/tqcgjp3p/5w
Do+cSXwb38k4/Ddl9OKg8b1snwcx9RpsN3d09zTXE4Y4UqhmlD/3xZZlE1P9
3HkqXZmDbrvL50pcrg0429CXTXnI4XHH0QLOWC/DaxeEzni56xiQIF08NQFb
Cd6q4yvnUhTRzfFuDygnQohtnVyL/55+HWUmdZfNRcSFuWxCLrdwhN5bxC5j
mm1kZotUJEvLhaOGGR8pB5ozNZAA0xuTW1T6LNYNp6wUAwy025O6a7JTBxT+
OdtfmwAFZC601Amf0iCsmbh32yO3gf5ubEJu5yBIJoR1UGsxdyWrGL2YTLTY
sL3WI5djnDKGehUoma13q5U77F0aSbpwR1vDOJdHucwcGHM+7EWA9WE539YI
k4T6lVqLrqMw8CbmVuWtG5FtbspREVfNOYQZkzY149spUuFAso1O4iV3g2ej
2IjhnzkFENk/m9mjSJfTaG0cr7ytK0JevNixmlLWbR3bTgcj4i3kngJTxXKE
f/XXyJt9lQf2U7S2oRrj722nqPumR9iLp6SMOHhLeOYHNfuVpWBAwJ66JXPw
kyKRfeqfHp8/gzebySx18enTq3k8Oz2CVnB+l/0U70yX/Xfvcij77p3n/e/Z
IJv/rQgXTIC6GSyIC5ezhCJKJ1zWkhJPbwAU2VmwFxc1t4AjbLb+mfDYeeHn
uPJs89LP42liQy58/XJt3WIu2nnl7a0rn0bzf/qKv9HYplfHL7dtuvvNls1m
k9c9iG+W29llozmnJpch/5dB4CXa4DZDgF4VM8CbELQN8FCL3g6kIGx2/y1w
38BB7sw/gAvylUldQTu1AQ5qW9oFEq3tVJFyfv3zzz8ZUf3DNF1uXv7ppvSG
FDKG3I9tsBuJgthf81AIW+G29cIUJnE0+6ev+AitwHgtc7naQvfMktlUjPyf
TMf+OBri/RlUnzesWA3IxRXXt61Y7+7greh/Dca/EMlhO6u7ik0Zpon9eG2t
xva9E5I3/lsJvmQSvX+vbcpwTZHAYjzdF1xbvmvJ3wkCza0QwBt9gACvmBX9
c8+6TTQlGZa244FqIk6lRZunarMQwL6KncCxXfb5cxECdcwLutPWU62HVU7P
2zsualDQFiuo5hWupZMvpuqbhHIorjsJUIg/kNLCKeZw9vv3klyUIl+gp2bz
Fljr0W/5UlbalhMRmVxmSEJ0e7ZQY/YLrW3Pvw9xuiRX1GZ4mHfrQjc7sHZe
12omiPCvkraQtWKRmdEWAmQzyUTMV4d3w82baFxvOy+W4nb+6Ss8Ff8fJk5+
iMqqr9DNpQBUd9NyxXH4b4yxRy9e9bbIELZaCVl3Ma0Y6JB0PfsouUqWoEu+
iJdERwAKvTnGc0aTjWIFuUN3hsK/SGx8S79s5x/okdX9hY8Xq9nMyfsQkxq9
kVCxL3fn5f4rBIjzt/drCLheEfpxyY9b7lZt4b95xSZ11Rb90CSdEruZZhqA
psksW3LxyPSh9VvH+r8fgmuWri0AsO78zCJ62Z/G03RxZ6qS2Gp/VCLjQYA4
gQP/fhDhNZOwJFUXth8IzecHoJFwPkAQ6GPqwo3KEGilErZHbwaK9PbfBxOT
uZRO+TldISy645auO87/9Bc1lMoR53uHnz2PXJqUa1IlTYIDf4wJTuNbkZSF
fpRM5jhMspefhBR4Ka076vopJmCSJACx22vGGVKpF7kNGflBvTJCzuQfrzBX
BEqXWPgCNKEzzvjz6RMnDsQeKWMb/mGqY2IuzZlkwKN8E5yHGvhcoRtgz5Qh
hP1iJIKj5BOhEX0Ui6m7MDtJEdA775+echBmPqERV4Gg+dAasrJNeUpZWjlP
7XyBMoKpE3T/mJR0hSzqd9aNBIPkbPmYm91qEFTNfK1kkew05SeUfH2rcUSp
shZOGanIfUHz4pxMz84D2MHfUYaKP/q/F7cfjwg8zWPz7/B9kyISfvdhJxEu
uZ/f/XzisN+18gXWAbt8c7YjYqPdd7WYPYjSea8YIiIoK5zRRzH86Ph7Gvhc
Xjge6NUMqxaUjmJK7ZBPHFty6jd2a3VKmwNrl15gnQ5dWg/XKALFVk2iv6Ej
XCG/W/cBWNvoWkdF6P7OCQLoXdGqfk+/27YJqQAqp0dukXaNqD1liBrwSaQF
RaFiCkP0i2zcLsHruJB+CVNqESJir/5J/+Tcz+bREFDbnAo5ik7EBWG6l49F
MJSetgjXQPCgFGinlH7GVwCJK3HDHmHLw6NWLYQPuSqCA/YN8DAZrX/neJrX
mOZ8eFcIqaGaUPQiH5WB1T9BkMfj6USHuMUC0d8NmvoHTmFyO+PE1JLyjqvm
eUutmldeS/AuNgQdle+ejTjVKM2nQrBd3KA6o+k49SrLUsUJR6nCUCarVlV9
/5gJUebf4kiepL2jfP2YlEeIZz6/bKbRQE8ymRGt1FvNsPooZ6JDpMFpY6ok
qVdH1IMSndJvW0GNR2EbuHvcS2Lrh1OmxTVgVP0elrjm2gBu3WI0zkpBIlK5
MlNUBh9eYxT2TPIcEVYXqhvTpkltYU8TLyJvs5lvTRZWeyykRo2pk4g2IW7r
MXZg0hvgMiuqIYKEXku6ZclyJYChhd8k6QQVZe8qBbIw41Soun481KuJFBg+
1Qq8ax1F3BWuwkPoDfI5Y4eC0bCzoxWmJ6ZC3QOsH2bqv1CSKRnVxNlg3WdA
ei5bSjAy6d+dJFbovmcwmSzxGHzgyaysUW0BkiDn3AFp4ly3nYSJh/bez1fQ
4lTIHsU4jONbOkcMsISqR3H6KpkAnx5yuc046gp3DBNm4lmlBxySYErPmwLr
XFqUa4XQHU2gsbFmD8wThWwp9akVh+arpUceVHtCmPsRrCh13YXRDEQm0NSH
MB9kGAkfV4N1uBd62EWjWKamFAmOcEDjVH3JYXnHW7Xg3OaIANO5LWem1QPk
Aw8LbA1hbrCGq0UsdWfztUPNi8xWlwGZDtM8DaLZByRadBwWsMgFYSnuICaG
4xJQGlIwRGRXk1DkTl3hYh+ZXGgkPJLg5JxguiQH8mG6cJ/C9x5VvdMiuKb9
gLP+5yqfVwub4RI9FuFyn9OGKrLg6QN6hrYez5kzpZwca+5gZ2b5gf310qzy
gcdDcVFppMkaeMMuWny1VnLRZBXG99TbzLMPclPeMMn8Ggd3VKWasjnjNYd0
DBDMf0IkRyQCSrsm4+R20ybvdtLYZ4bW+HLKpbitPWNyrS6ZeVP4N8Gie2un
aR4rBZewwg1Ig/ji2dAbQZeyLReQmnKgOV296ks9g7I5f95NApKsnL8cKMo2
pxvBFDHMMEcmLkQfvKtJOqCtWhkpMBou0izLKQnCXtV5t52xKhffxlyfrTv3
cC6kjkm6eG3D6TqzlHP8ahwAEbNkxjdQE6pptMEjYqSZSXRr4suEbwFZJcam
5iLY4VmmlM0VROjyGoFa2Q6cK6YdSF5Zq2bDitCUBybDyTBN/wBgIEhcot64
dWEGY6v0xD6X8yTn1wac0BOka3HqMheUQGL403SAfsX5NWmkTHwtHR9zuQ4F
BfEhicXLhF/lYMM4YZwL25FCvQbbkAIJne2Gw84w2AwgQTeoUUP3ybZg1u2E
heCJJxpMcYnswKDcxEDLLhy51yTNxuvZ1BcumEvD5Qtai2nFpHPcwP8lAp4q
ctjSXoQMCgZUUvH9tlWjOE+bnfkhDjHFgE9TkVhi8SiaWSp/OHUM9ohTUrVP
TNfhGdMHNyiZmh+lfcxFhaLRMjl4v0wEuho37cQtM7Ty33maFP2AEokjmQaQ
T6Q4qHBzrTVBrFAyWhcqYnOJXclx4AlzUkwmyZUPFn7F4dMOilNjKX+NohDP
0424hi8oDbWHOyAWJk2nrnKcDorBr0vEqL10taT8jTnxZZ+7XyvQgZTboyqn
KE1zHnzY0Zv4ziFSFbcCkEOjNKl4MotGQDOWHMyPCTnvWHFicZo4Ly8VdFsQ
W6yuli7cymER7pJZYT70OaKzPONKO1k6JJhZrihwlhy7GLG7mi29SXqVzHDp
p1rbUtJVwmwkmBVrqvn1xagyJ067tPljnXUO1R2tMqgChDc6XS2GsZe6Y3AV
a5nHxhnzdzLhhNvq97RMJzEtb7LF7H2W09MFvMDdi24wbSUdB9o7SgMM89ED
vognEWf2tGuyOeHdY0SVQGxpi7LIEHQ6Ms/65RXtmPQDFYsmklg0XSRXWCkP
CI1ogcvFKhZeNWE+JxkLJd+50Pp04UupU1K+PAYrLoM/pyI+XCOLy3iQHjCN
Y02gvriCX4Wb5ApdI8VZozVUudoEDKzRdg0HGFpSbiIECvdLjB4PINX6Wh2T
ctrJk68vg8DLJ6R2qjH3qLABpoh1r//gtpVRUpsr52AMMIm9PedIrTPonJWQ
aTyWp3rtZLrxvNe2TJ2ta1fUvbCwH0zqwNahU4KIdRm8wucO3n7AUPKVFrvV
ChD5rphanM48EmCVYojFOWfbzdE2JiF0d0mH8swCshivChBllEIqvGT90i41
71GEHYgnYyHKxbERSWVspVbDaE6oTacOtX/W0LgAOm/HEusRDqWkF2h/pjoG
1cLeBP1B7AlTN5iL0uMi4VrduexFW9bjKbex60mY+mt5I4KcyIjFDqIZtAdS
AJu4l6k1uEFZ/2kf8+mfS/Jtab+s4YtFIXRtlkbl1nFyqhXTF4/rlS/SOWZx
jk2tIK62iXwKjeFC89hqug5MLxHDhpZE4BkCGUlJf4ZxmUXvce1TBPo+a7IO
WlyjS4VSccg9m4vCAvFcvdQhvTfxVSRXRwrfPQIIZW8NalQDMCJ6yCYHqq+3
4IziVC1gGo+SyFx4Woi4667fFbtK2DslUsCkV/sqAjnFqy+KGgUjlH4Jm4D9
AnZS1ccF4CRpynwjjArOg2TnIefAqaLOu4JThZwVJrlgaobLnKDEuiCFUXU9
y3WmgGxTgCuAZ0aV2VM6RJvwSiDIoxCXtVVmPSzUSKeVXcrITl8CfFJSQm0z
Pbe4bGyyTl04GRKgiLVXMlbpRnKW/oRDek0J+hQ15RjvP4lkvqWRkFNzzslg
pkhHM1IG5mFhYxT072dDZb+U42QCOb6hhkWivdWc6+bxMbIlaR31DSuBlQBk
WhExzw69HC8jZSsTxwWJ3NDQ6PvM7ZZEL8X+M0TpY770yFrFosjSFPD1oyu0
3S2Fm9Mc8Auhs4KLCubBnWe9BUayZ01pbvaTxHRyaSEwDGANiKLMk3mRQd5x
AZQLJ03HN0Xv0Ba+SEZXMabdma5mJmZJc707hE4EbxoD1tXLqDIiWmZExfPe
HPdfvXx5fHZ0fMSrMZUKzNyECQrgykYdEuI1IQPrlSNIwqlMgTiRUEoF3gp6
mlNrllm1p5wbL4FZlsuF2TYjhBVuRCNnl/IFY8RzwojeBCvhXF2zb8uNxCTx
RyfOKGLu1R7b2e09f3u8n7usDbPRYrzw8nw/f303K7vWIvRowA6xp0crB/NM
PdX3CF58/F6qnYxqJKinhvyDZI4g03m5UN6BvFy6URswhVKxelRd9S6HGI7p
w/E5qbfJrX5oZoJbJ8n8YdiMSmaZt1zTtVg0UTz3M/FtYfkEaw+0bfkeucwa
O8qVg2X/HB8NwlmQSpHUsgpH1BszXOdUSCXiKBOhZdE5BCAJ5irX+LljZE7R
hmkaliGpbGDfckpoXjQWY5JxL2oxcjKBcUgr0TKAkAMTCVz2e/ltFeeYsRPs
gaqYLjk+EbG7xB9QLWtph/LSKGZpGiV/qYlR9gUb8JkpLU0c1SM9lSQAU+mO
C3pzWBBvKUZAkIaX3/sYLQl8/2CvhGU1syWc5Kn9qrTvUFam9y4lEB+e3rf1
xKK3vq5Nm6azM9NFZji78zbMw9SkVrIVKaM0xSKJsWstYQ/LcFgSXuFi4kpN
ACWrcdW/eHG+X/Y8w4IAhKup3S0jQMY3SbrKDGoApbgGOSXCyrFYKwwdWoyu
zmKkCvimpdjsCrZEBolhXuScVFY3ZpvYkMsyLKRxGpt20JgEKQX5xNQyRSvT
GS4cusECYOXNrZn5mmnpRoiiaxgz7OqvK3bFCviWWgiM+2Jts1Kp+INo+IEK
Vyr9+vQXAS1q11RESP9mX+C1GP7Iyp+rsueYALhOulNBJjI1ZMpUlBsejVdc
htAtHsOuKh6DjD23Ub5KqfaZFGscii6K8yXmT0IcXUdn2xn2STXfsLi0OGu5
wl2ypEt+HJiUXYvbW6gI8E4UzQ0IYAPcHtgrnnGFIrRcvO29OTs9e/ZUbHqm
Hc0/4rKgnNhIb0AjNtzFS3tHHU4tRa9wEgytCqT7w8rNOVkV/IvjY7kPIbWw
TfkhIEv0hWtmJuTBJqwaM5/KOAiLIlKNzmz3jgPq2GQgNYYROtDLk8zUXZUS
Mt6Bb8ZnuU97oX7deuaZmX/VP/A8TmB3INh74AS/BLWn/vWTbqMz7nRatVFQ
jxqtevykLA3ymcHgQdgKnvphGX5bKy8gX2tqe3wUtsKnZAXT/tx0afRJ2KpL
f9vz4x8gADkwWKcetqHZz/dla7/3Ja08DHDYftp7TaGcKKqjX7tHb7dVTMj/
4MyALKzmJOisQG6Z0G87N6e8GYKXlC6E0QG27MGmigp4H6MiF34lI6C/2xIO
ClhInuwrjm9hHNylD1McGG23TCU06hEP407zwEa58H66LcdyaoLS3w59fAJM
LtWjsLGWu1w/ebgPQIqnfrCl/a59+HBCSr3hlCH46rw4n53mUcfFVIPqltXs
NA9Yy8+f6uuzqUPnAWjEO3WCP9s6CT//smMvraf+p/s+2XUmQXtrRzv3gT9h
4ykm95/G75Zx/K5ejT/Gpcf08fmeT3bq454Oduzj/h526OP6iR+1arVWo15v
BfWw3qgNa0EtaA12oF2NoFVvjVrNsNZsNJoN+LcxbtZr8KReD+N6sEMX8Fmj
FnbCKAw6wbg1KHa5Sxc0atAJYdqbutllIWby1E1Ya0VBEMD/O0GnFbd2WQiP
1xy3G60m/osQaDXbnVbzyb2tf9n69hfvM73TpG3C/HtFqcHae4honr8Fyjsb
paBB9kh2o2hcdpZiBe0DjxgO0Vkl8Hi9BLUsl2RPEmS1FKswE1JMAgb+YB9S
uHiunZCIEdS7nTDs1oPWnkoblywly2SRreFzS6blMxDbNLGmPaNMiFWuEBZD
CTstLSjSpOLXbqcuQZXvxMzgkgWfieYuzNvmBNae8rMzP+u002m5SCex/avY
Eum0AIi2Ot1WIKLw83mnOjb/ohWE7pY8bhkPffSLbqWei7UJtJ7mllmtVgmd
174jvpIbjj/ONoFkE/P4U9bz2fu872TWdO7Wo2x4mGLJbzygfG0hrxSovo4K
lqkqbq/XmyqvrgmKTnM00ErcoOHPy/7ADJNSVOpEQgyqa9PF1v/4zwHNXML6
XDWKZeK1sAGcnf0LW/dfX7J3XW5GmiDBV+calHnLAdqZ9cSSTIqt567xndTN
9RVun/kfXzfDmWJoRzFHY9gYQqbjbEPVxVe19et4cR3NM7Xjov6sxWFO0wvu
ePNa/pyZa2iPjG3scFRFhSIwVM+1S+PWmxfoRmPgJqeaEMZZxx+f+TdSNdpB
cFmIc0qARmGFWUKJuzkZvLi1BFnEs5tkkc44uiJXclt48JvexblPxjJ026D9
hdYtl1jYKWhsRRTalIzWT2vVmfmjlfeOVd8pQDQn9zZb2KQWdDvjZi1qjMet
Ya3ZaQVD7aFV78SR6eCbt5KuSnsJmx3soAODhvUnqECfHiNTuDz1pQaJfm97
4LxP2kfY7GIPzUZ3NIyHw86g22kP2/X2oNGIG7Vxe9iqN4dx537ZiXqOsmuy
qiLOUKIoFm0OnMl/n5MrwhYA7OdSUK2TXhWg9iI+jWixnHGZdiMK6QrkXrqF
Y9g2DNERO87XRmujLAFCR7Pa5NH+oJmkjtM1t7wqYjDxzURtBbA9oJ372BB2
O2iGrWYjhB17nFHn1bm163AeFvqywFF7FmuRxVynGJ9EtyjYEu9wl2QxXCVL
OX5WACjRg5L/1F/jwHnsE9TrDuJxp91px4MoqMfhsDNuxe3hoDEIxo1W0FXc
zfXiYKCgXxx3auNm1GoNg/Gg226E3W436oxH0aBbr3W69YfQbx0NeV0CChcR
czNxUESwMazWIizK9Qtakwq4+J/ZajxOPjrQAtHuAeivAT7Pxl3I85NdQd8K
QEdEJHl9fOaf5A+7v8tKGzXsoUn/aWFdPFyyXLEV4rE3ANoJm7XvLlkqZHzW
FNYoG6H18zVzcKK9jpXWZlc7nKRofF+3nbp+LzGQz53OIpz/ABvnVoVCw2ox
TzM4u6tkIl6PnJfylUbNuNGsnLsn0z4oYgI1K1foESfxDO+ZiLiyoNorwhyH
eKbsPNbDL0x5VbT8ywgVqtIAK7taRNOpE/dBfXBsSOSPgf3sV/1GW0oyxTPc
AXLXUNbQvQ5n0BPXetDiP6kPZDD7f8zE/Id5FOVcdHtgbG2EDSJpGt13jF6L
+SLJzK3xg3vpIVFbA1V+ZZxSf9TiXc9ZvNfrvNIJutnAvEiJpZqreHgwNQHJ
WUUedoCFNk3Gd4l6PKD/ni/RO5/zanxxLnxxLuSbfnEu5Pv44lwozuOLc2Fj
H/jzxbnwxbnAC/niXPjiXHB/vjgXvjgX7MdfnAtfnAv/pHV/cS58cS58cS58
cS74X5wLX5wLX5wLX5wLX5wL/PPFufDnOhf+Ad/C2pUJLt1Ht5j13ib+nlFn
ipT5LJcsBMrlWJa7OfkSCq5VEiTdLjZ0wBlsIrs/6SKJKZMvaFzDVSG5K3bg
iGcmuYJzRJKra9njV+dlvm4mhEAFVLJm5KemSYil5sY9SsIfk1F1BppCjLho
YSM2rILuIFmR5YATUSI+/m8pX8S4pxpR7rqS5R5ywYh2gTUmzBxpb6jJATAK
iYGPBZdZAj1/khW306YnoCw1oIc6TOqbF7iYLPVlBjhTSaFobpMud1LQ/pRd
6BlUx4xAXMbC2QNK3eXkB8RXnAkL5su7gAlNnOUqzDDBJN2TIrBxnUcnOWZk
z4Jec2fqRbl3fXKNsWEvMdfPru/meJNyKdqKLsFkIaNsmngHjE4yXjIdoaSi
9xQ3AvVPQmWeZyZXrwEMvdlogemAkBL1cpxzvYP/EW7LJOe3fNhtST8/P+Cc
3NG96N/joHxMF1uclDt1cf2EfAydersFUK3X6406/t7aafTasFarBa1uo94K
2tC8BaJ+q4t29tqoVd/Jy0B+hrAW14KaeBraoHlCN412E5TORjvcqZNWtxW0
hmGtEUCzBsxjBDNqwFOYEToOdltOuINWsd0rYH6APA0wE6jIsiKu6a74O23M
wYYayZx8UT/YpQ9flWPQh/vRYpDOkiU50h7bByoL0EdQDUvFD3buo8+25acb
PtitD/gpnc5GKyQQWMBgtUzZUPqwa9Do9vHHeSLVP5ReNUAHbwHegzzaJv0p
rIVBJahVguZF0HnabD9tNn4yNMNkPELZnftoSQdBu9apFTtoPQVpt1b7afME
Kx04QTVQ8ErjBCtdUymE0kb3AH0a+OhfPTA8vVIBkoN37N8hxS7qeTzjD44T
RanscR/+iSeYgX/oA3XFxDGIbx9BKrnbMFXoJbHm+xCJe73VajfhyLXGXSAc
rWF93AzGTSDz7UG3AYrak/VVHMhQ1E9F58LP4LC8roBqsXHwj5Vhmi5oAhUa
vNWMR1EzCsJmuz0MB1HcCYEKtcdxvd5p14Jol/Me1KIoqrebcTAYNAfNURzU
OqO4Ue8Oa51mM9i8gDtnJnWcSRA3w3gEVKcWABKM2+Nu3KiNRuPuuN4IBvXR
LjMZdgcRsMlo3I5rw6gN/4u7cTwc1WqdxijoDgtkSW0MruFHfsJWizDkvlFL
KMuVBJG4By4j6wqu7jZsYvAPsHjTcjOnJ+a5mq3x+nyze1i++XALC78XAPTz
P4iHWy7ertfbO47Zatbb9UZr0O7UO8LHOzs2bQBXBsbaBRXehBXs2LQZ1sMw
bjSI5deZ5e/YNDghyeDYSgat7q5r3SAb7NrUiBAgHTyMVTvJB/cLCLvs+Fbp
AJnrbh24osERyfxIFPjl7h2IXPAmrB6Fj5Ir7hcKdu1gq0DwYAf3btNWR/Bn
L/cKf3etOKYWl60/hmWX0gvjEV5LfiGpRSjBGOXeH3AKZlRtsaH4dinriGbD
EEQRk+zUVP9yCp5xzj35kO00m+IQRYnlSZA2TSmUKbcJvBsl0dUszVBGwMEK
OTTcANckk1k7k9Z6TsZm4xpLJNbFteqaaBVjYokcA4hWu8D+gT3tUUgiR7uQ
R1nX7oyvXk5UsE1RbLXewkj7PC22iZiBpLRu5tZcsQNzE4yzIFBJ2bTMFy+k
nSBll1xJnE6uupoA3YyYU67/BwQDb7b3kk+yGY2sT7IPX1GKatPyHzc1+0Yg
ystDRYfYpp+SSEOO32YNktzVVmhugegGqG6BrL8jdGUgU43QXWm7sWNo1E4f
4c+fEYJtZ/2HQrFtN/9wSLa0tyR4E0XcNTDcbIATmo0GVHm/Yy9YuyM2ZJso
GcY/0ZPde3Gp0+MERtBaWxJcWm/WhrtKYqDrtEZOIGcYjkAyA+UP/h3vKgk6
0agcairmnxA73lU6o/EbcDLbdfoNBDs0P6F8uLNM2g45QrVWx9DSTj2qY3Bp
O2jRAncWp5sw9SZKxeN2A/4dt02YabCrsBlEtVqjMag3urV2J6wFTfhPDfoa
1MP2cDcbFiynPmgE3XAwCof1eBg2OlHYDcOgGUeDRnM3ux5KzMFg3I5AOYjD
5jCA2TTa3W6tybDZeXdARoe9AFg04bc6/h7GbdDQWvVHwaQ2rHcGgYXJMGiE
g240iHbtJAQVpzEYdIZt2KWgFTXqw263Cbyh2xhGOxkL4GcAmn632Q7GzWar
Oxi0R0NA+HG38ziYAMciFWSEegVgyBAwJgwauMxwV7Svj+oDC42oFXVHw9F4
UO90GqNoV7QHGaIRN+Ig7sSdVgjg6AzD0WDYrgEj2Xl3GvWoG9Th+I7ibr1e
H8St3QIzHtaS7v9ie6jmZ+tZ1bDsWZFam8Bsle04WOhNBahoBaUBJ3BbxTr+
5BBrEamrseTvURrdcYJ5jlccuZ1RfYWl5jvMREjdWJbY30slsk68dpH0DO/2
NZGyLxEFEuT52FBuQPCw0Xw4mDskl7curYK8CMVgKie4Qte8FRzvj/Y2UPzT
4r0fDIS2AdD5/XkwDvrxEdyfzWzXJTDscJd4Zgxm3k0G2znk2Yl5XrxL0uW7
NKOw52KEE3SQYRZd31/rAJCl0axh7M+GRiiobGjk77wS80MS5fk3vS223nt/
QBMw3JDZ3OPawyoLbPGx7ZWNKn98bPsiP901jM3fzbC069WCxyIWKDxUUCWr
LrLhI5GqU6t1/8k49QeRyooTLCc8dlOLcsWjkVLkEBUwHtu+KJD8f4JUXGm8
OkkGj8SosA4YVf93JlP/oEhmfoqy2WPb52W5xq5ypfn5x4Q6+tkRo/6w/Gdu
4pDl1Q0vfUOVD8jORvn82U7q2l7xcUXMp7kr+sYES3G5q+V8JVE531Om+lhq
cEoS9HhkVG93fJP2e0rVHbh8ENr7qzIHp86o6ReL1WFoJ9eANWFXNnsy5352
K9diAnexUVKp4EIomAlB1TIvEuVUqKmK5kwzC7Jp8lT4Uy28/j3Wj7O2UBFn
RyjDwjGepzO+cMFl7XSGw+uYK3BPxX6NIN9UqZWrE+Oti9uY8n8vcOrGUHq7
kB3lmnxe6WKxytBy9r1TPyAraSSge0/dFLalIbjegFwpcqeek8/VzM3krARS
4TsyxaKRsPT+w6jz7YtK56vvJr9dqexaAtAT0OkTax10XqMNjwK5rSmwNBpc
Ic7Q49IGm582T+NpwgH48Edy+da8wIrd8hzk35/eB/0P78Lbk+vru9Mfz45b
P9r53SJQ+NONUjp8IdI5fpSnlSKmm2cSS1FCmMFa8w0KTXWnXLdIgdqvE+af
QZKdACzLMK0VReiVCuTA/MW//JKPPafjrV61C/JtkCvifCXXd7ZtMGze5LRC
sHvzvvUqB2aF8vN1KLeuvvqquNWbdzq30U5UsbZO+Bv8KV4LsThWQDFfXnMo
QMlVQEoaztebz/2TNN1wkyDXreuRt/vtXmkonbMT5ZgDR/1jRt/CrmNYemGX
S+FR/fz6+NV17zy6evssSvsfksv3jeur2sX82evrD4e9k97h9PXltxfvBr23
z745pTfv3//67Lvj/rPx4g7+PTk8/HB4eHP5U++74RH8fXw1ffnbi/fHh/D7
t+nbs8s3l2/7L4Krq+aw8v2784vW8uObZ6N+/fv3l6+jxg/vJz9Uvm1+N382
//ZNv/+u8/z926vlj9+9jr67u311+lO9Mn3+7Vn9h+74xUeY5iybHkaVlzfz
b9789uq28uPtrNJqD26eT96vADy/9V4fNYKs9a63bJ8Nzr+v/3r7fPLxdPXr
s/Ft3Aji7KvcebHwe5HMVh81zLJUdE08ejdWA6lZ+Ly0FvVQev72orgL8d3z
WvxDL3mVPP/2++C75EX/+fXg2RD/Pr387TQ4S553q/DRfFh/SR+9uDypjZ59
/xv8/+40uU2itye10/fpx7P3lx/PfhvWXh392IBOJvE30Om0GQye3Wan05Pg
p/5p6zQ5zU5nZ8GPCf4OHV+9v23MTl5ev5g/v1y9/uHm5evfvg2evXx/fff8
1/Dm7Q9XQSNo/fBt9tvtdw74eFW5+yX+CRY44KOdrzpwGGXJkGpSyfMNPtfj
/tF5T4uzwKcqCvAl0/V4ey6nUPxQ3ZtAN++0ZxYmJlUMxHJuz8IurviyIZbi
Qu6oHk6ueimFtDCMCwsPBWTG91rBnh909uRwXT/pBbUgbD25J/uJf+BU+ruO
oxEWbxDp9dPn+xvG0zmWzJutdyBBZTCBsHbYaNXCRq91WOu2O0fHtV6ji6Ej
tbBWrzVqzVqr1q51eIrOrW9p3z3sHoYnzeNGG4PeTlrQX7/TawTN9mGz3aqf
9BvNw+N2U6Xdbq9ZpxQUzaDdbnX6YdA7OTnsNJq9Zqt32Gy2j6F5t63Cba8G
sm673g3CRr3X7vYb7U6zFR5B81YQHoOy32+FYdBSlb93GNbr7U77yT1QsdAx
FXQQGr/4+757D/woXkYg63C5k8PVbIRYdyrVQbCSCCGBqR+7dpPJ9YvTrSaW
ykbarXMhYK05eaJZ7JrgFVhTFXxo69g5lThsnRQWSNWZPUquKIiKaofa4bDn
cRyPBFH5K+1W72BVabERVplBKVXFX2vP5JUVXf3mCpdTjkXLli6vV5keUK4l
Plwt1ptWvXMJuI+dHRqmVIMcH8qEzQ0TU1kkD1KOeuAxqlyvFbdNqhRKIT0Q
t+MpMm6cxWq2RMmGJOBNFGPkosSAUMLfgz730dRYZYvuWbqUGAU4U5yYCcuv
uPWSI56HrcCyiK+wXOVCL95jFRaiFbVw72eNCjxJFplcKbDkiyrsWLrlKg5S
zW2Wd8RXfaqsY6pwYT3GJFeTxbnbaIqyaA8GALIFXB5TJPRruZJJdnXYk5JO
B+sgaQ8i/dONu0zK7hJJpZJStnAPhj9lufgh7eGT+Y1+TPTECQYPHAX1XqNV
P35Szn3lRBycNIG8nZy0+hRx0NdGrXrnuLfWyrnR5j7HkIFG2S881IiAwmO5
d5Z7VuMryoFeh869pKxNuTX6PgMUhYHiC/ypBK3yxhew5uNm/6TbPDkKGyCK
tYNGo9VuhEdHzc5Ro37UOw42t/P9due42Tw5Dg+7jbAb9Lrwn1onPDnpw4qa
vdrhk7WGv+SefHb++uwbbnHUqR8B9W4ANSfG18NtaPU6sCmd4iYG3ZpazWrA
hR7aPfy8Fgbdk96JsgN61Kw16N/WSZP+bdfq9G+jA0up18PjOsyEnvSUiwSw
RkqH1AmBtXXC2v1QlGbHwUNAa3YawCG7tf5hrd5R52Kr3T7ptYD/1tttGKLd
P+w3juHD7nG/2wlah8f18KTXaDfa9fph7aSrzfph++Swd3x0eNjvdlv1w27/
sHnc79fq/fpxvXlY7530a4ftQ/i10W0eHesk+7Vutx2E4XGv02qf1NqHnaPm
8aFEGxm5Fe9iobxvFK5NURVUv5BJLhxxCpY4sB0UI66kbLEEwhHR3vBjOmAK
gqc2whihTjE+SraWt3KDA3ysmx3iv5RZKgw67W6z0+xoAq71VvmUXJvzba23
KsY8bEqvtd7K7XNbNq0dWq0lz9oUZ3F/rqzPnv/LvufnHay5/DZmMzdxhwJX
KPvMCTcyh9xFSC5NjyY5rLzIkpXkhMEOXrluVB5MemMH64b75FxffiYzcAWV
TXfL7/35crv6T79dfX370O1q7GLDtWqZGBtDHhUGiD+Wd64JMHJRYjdXALPZ
R/oPrp/EzeG42xyPwsY4Ggjv2NHyHo5Gzc6oUR9FMfCWGI5uvKtzc0AsKBIW
NB4PkQXt2DaqDR72DTxoyve2Wu/uVa1Erl6SMo1ourxNN2lNWdkv9c+DEom4
8FtYYsUHqwNHUsh5KRdwKQER93tN+YOkN6teONmISJK2MXzrg7w6evWUCwIv
dbzhckUZ/wbWzs1maeJ4WNFYoMFq/895M87/bwacXwrSgl/qrUZJ6lvDFW8T
2rvi2/TqtN9z/58Mpt3Vj+ElrESeTT8+/7Y2+eniw2V4OU3Di7vTrJ/0Cu2e
z3/84Tvb5ug4ePn+x+Ds6LTx6uK7b91vx9+lXzk2stIzEFiAGWX/4ASfZ+fn
y+dvL5snZ5Pnv5596CQveuttZAsemNxhtyQs9xdzPJhdHMWIjf4bYlcRYM2n
v+DzCj//TAayPuhFVPYds7AMokEyoULvxKqH0QS9T5rDgQpnYi3yZCYFTG0L
5phD01k69nCoTG/T0+WBZTTx52nGli2J4pmncx1CE1JwNVHsgr5JYkkf4bjD
pDHnoSADM15qwSBxUssXceykKEMP8ch8kJnSsViaGYvVXrhjSvxU5gG3wRxN
GUyM3GJwFCk3FerYswq/iTQZD0oxIJlEVBl4jDnUJughxNK38p6se+mCfUp3
eHViDs/K/jgaIgATfXGbLj7QctGakfrprOzFCEGdMErLTl3tCTsiV5NBhuHW
cqEBS0RfRzexZ7+caJFvpFGKs1k+eQYCWOryDgHIKFR703SAgUnz63QWm9QT
VM54ZNxxbFHK7CZw9WacAQzqUSHboPa/lGzCEiejJ5m79RbuVcfcYbbMW3L6
PyK3tuI5iGgLGAg7wNrqixFKlwkZnkbRnRho9JMKf2LnSIEDsqV4uyrK7irL
tJJMoytEcEy4ikcBjUTWwDCKh9EIZ4ld/7qKRtt6x5StgjYRVdKGrZomxDpu
VfKkkYicS1VfqX8Mh4oJfzSk2IcRupCZFQW1mjssjTfSAfFiJjTEPH4EWAD/
XFMMzm7SCVZz9mbRLIUh0qXW6UazNKNzGeZ4A/uIMm00g+lNOLteiunI0H2K
dbgTzOV3Khm9ycRDleVhsZhpUtzRcC4nd1mCLlK7nfgiQayTSMERW7eH8QIV
AUpuS/YrwpvT1340Gi0w6wbWn6a85OnSzyE0nIkZm6BN1qUlnh/anTs6BcQ9
5SuPcpAAAcNzO8A63mX/JsG0NHQrbJLMPsCTw8kqXqYp1amXI0gVs0lV8HAO
JAeg7xi3agKUH+8MJb/hybSzxgrQ3u/+6zidSzzh73K5C+Xb10xYfrfsA5/y
e/xQseh1uqDz4Tw6l3gX+fnd+73i/PxnZe1nw6OKv+uH8gZWEtT8gSDd74SG
uR96v/bzOx37wiNzZveC2t+DcN9Zydog5Zo70CMGcc8IjdPc10Fw7s4gOIQ7
zCMGKR5GGqi9D4NYZ9IQFb25yHJOAhVEosNksbwGSkWsFxHplg7EVHRSzzIl
wzUH0gQQNZrcwr9+vdUsE6p+MHENhn/OCfsM2Ubr9U7z6S1Bmv3A0/EMUzcB
yTbghXTw8WpGVtc1zsoEGE4J8lJ0iQFVMqEhVlbIixnGazn3vwL9reLHf/9U
+fD38GAvnO1/dt76W2QX+QA19ou8yGEZjn6EunuPJG33pfdNeot0sWwmS0SS
uBxm+lzFSlCFhpVZz9AlLuJfVwmy+vEkjbB0uzdPgfAAJOIhzxcptRoiOLwN
+cRNBLuBE00sUNIFh8ucv0VahMN4Wg59DpD9mEyNfAYUDUjzOcg+nz7pVvJO
fv5czYEVwIn6O6z0hBaYl/WeukB+CMYKYsPK+aYe/GKxd5BwlBVKhA7kX9tG
JN8p70S6uZXc+UHYqUCHLOHCn93Q/RO0aOfPPG28j9g98Kd3D9nyQ/+vQAr+
Xgma9GdH/qzzn035s9lk8rOdNJmOat1cR2E311Gj6yux3EJ+bEf5GYX5GTV4
Rt4ZCDZlisMSHHhYuh8OVwsRRely3l0cLZ5kHh50J9mcbmhZE4EV5ca8LEYS
hYeZreJodEfpzmJRCqKcAGmaaUJGpC84hSqmszQJs7w1+dARUEnWIknD5Qc0
ptvfMWj1Hg2bZrG+1jzU5Bu1UBvdAzIN6SMQzE16bJSFs2VlyDBAk2CyFDCJ
KzXGCTAoiqsn7oIrpchBkIzieTxDp6D1YwLFuaEbJ9RDFS0iItea5GOrGfr2
kPzIVwaqJMRLjCNINQlv7AJUGhjSbPI4vlXpWwi+zTRA1vnMKUVDuXBIBgMy
Kpc7l/YWdx5+notyhqzw54MY+0fUw8um13m+V9xGLyowRqMuiO/QUR75UC+J
9xz4e3sf4L9BbR+OzHzfvvUvcCE8f2eW3gay6a4J2QlRJsR3zxDCI/cYPIL6
+X8e/ftjFLDFEhTCOhPJ6O9hQ/+mPxv2z3tpYAeNxelslFkh6+9Bvqt6rqvt
VLDjT5PhItX+uKsg35X90/P6E/gVvdcAZOFZJtJWBYEZfAICDxn4KPhgSQle
id+THYIOLZk+PIpUmCagSK2miHTaLR8TxvlZmmuNw6AhmEYnLRaP5T16ZmY0
o/jjnHUh4w+3M6VUkpwYUlwimE8WlF2LuQVbj4QrEXnykTyBDtTT7lbzkUOP
TCJC0Lc8oGFAYLJ4HS6pWViZJRlz6ovg8/L5JjM3mBmWH6Ne6+I5AvQvf/HP
Uv+S869fXoKc4fX4EGheB3oKktGbk34jCMPPnzE8A4XVIRHI4XWKupfus6Fh
Hi4HvoIxsAOWcUmVZ7XT4Ar7plDnxOEGsYs5lAKUgefhHiBACQ1wh8v+cHE3
X2JuXzQpVmC3iVgsAKxAxplo8bhWQiQKz5Kj1399yTKiumGqrK4ar8xthJRu
aeJqQEuO45kf1kDTwXZ4P7TqvWLmDWRVNVJ8l5sbLHywiBaJ0PRcWkwQTO34
fYAY7GrM0SBmr2FdS0yqHcuVysJGo4KOO0JRcGxREyCI0E2rZmcOVsjgq0bC
FBIg7LfIZzVfdcPnDRulksQTRzQZ+qHvjWD38mDnRP/QBaDsAE0K8zmLPaIy
aU5uQjkbvodHAzkEQZB8hLwC2Rn7YUJK1Sz16D0bRDB+B/itcvePMCtS4Tj6
iCx+wK5BwdKqF46iyG4DwUj0OsS473M1ho3YIixnxLUvZaKUCfQNe1/xhVEJ
NsLYfzo200EyM5JeFhMUnI9EeNHUvda2I7ddfcqHPsQswDLCDBCpSjZjkBo+
yHRuEhAuRFpkXdrOjonnJMVseIRR8aiMtM+xEivJ2+F8ceENUbcWZP0bJa5O
RjcTNs1Mkb5sC+hBxweAa9NothrjhpCkDCunw2JwXsjTzMabkrGNbmPAkcUt
8zg/+pt4YpKLY0aUaqcWVoPeG1+CrMVudDoSs/gePDg92heRU2KinLKSul+j
JIPzzqORLMQ0DJPzYN6VU+oGSKY7JtDNBU6HK9HA7MoOxPESScrrIp2VwsM8
b60Hzv+MkCarIYlg8Rg4pcG7WTHpMPAnDKmL/BLP6iWnxCnhttiVXcMx52kz
9Xqhv6M/Ds3vgCM2cJUSGREJi7F2hwTSud17PRef2LtNtupxPMMsv1cYwbBE
y3pEN1gQ569NmOLwOolvmE2QLMBdJxkvVk26CedL0SDfTdOXyEJU8CWaeHan
xk6T/xft9aA2ZNFVLFeZquwBxXzE+pHk7859xhjNkwNkWXCsIw0GMyeCEUnA
AvIyazPCwyzqgdT5cVIrc39o3OWrN+oG5c3mZFXeIbHg5SLCGA9EdYYMSgX5
ORLxJuKBagWGVMLagSjMhP9E+ZtCpnwl6TlUUsimeBLoI8IXMbPqncE4VGQN
Z0NMDl27yYTYDKIXFh8qc4ZVMhCT38eg1xbsqnrYHSm4S9TRCLK0exocjlyV
tUbruAJxT0v0FCQioF1XuCxmiAnb6mVoPUIw7tKkrCaDE2AqoXBm3jttiMDR
yi2MCM92PwBIf0l5FzLPBwqHISYhQSFqIOSlABIgaKQaFmIM4zoSWASicMGE
Fo8S6TVILoKbVzEF7aCfij+LSXwRzEQ2E5kaR0ob5aIXi4w84iX29hb3AWYC
cqMk5DYlgYqYuXbwcPJrNA5BOXsCZ/B7HB+DVCLpiF8YECOx27jNDlCwDUz5
m5gqN1CUHIPJ8XrY+RCyO+TG0A0mOLmTDjwynQpTc4ObMGlsjgTAoJnbnoLJ
8a6dPeFoOcAEctQl9XiMxaGyWPL4z0xIuF4krNogjaFqDYoOloiwyE1GCiSl
6JvZssEkoGg9DPHrMIPfV2JI/SdLNZYTs9oDFDrnEhj6FY+8RyCIJP2iWcu+
sWiZ0lPuWNYxZlO4vUeuDtMD1rCNQPLlx8x6ACP/Kk1HuLSIe+K9VCVlKozF
+KPyk0gXRpthsUq4kBtUrajgtOOT8Q1QOinNwtlJsFA1qGkgpuI2bhY8WMbE
wcoMTq4+R4fUjSOXYjO4rbHtU1BDsu8Vzy06HIzUvQbPaBM0L4jz2ZBSOjOL
eL6ICRUjKq0poKOemDmKrkGHSE4ZD75pFJ0KE3jQwScg1aJ4TpI/rBBj6u8c
4uEQethKeCuTEzrIqzfC+E18R3XYeLsyU41pQP59qZU31RsQkghGQCd3IIqH
mgioOQeZCr7Ko1jJgP7EZJaaMnBsxRvD7K6J66pUjoqOc8HCTpK4os2/xp5m
Yqs6ZJljHoZUm4GLQxC71mu4SPDZ/47KFOHOs9fnIPTzVV6AmaFlBmpFxJGd
3QwxgZGV1FmLcvoh2kdNCPuiIoohkjjogIRMcgIR5EYs/OcHIdNlbhTElhkC
yBhf2USiswcIIVfml7Ds81Qt74Zs4kSdjs36rzGyepYVkEMJLB9Owu38/CQu
5a7sDRj5ieyS4WLTcA6ekFTIHw3QXc8cmVCRlVOZwsaJwdreXmPAiXJKkka4
MuEdyV/u4CyL2ZA71bFIMAN5DOXHIjzkeFsxXe8MFWQZL5rxEcnzZA2tQcpF
ayFBKCu0rnqvOIQEvfzYC0YbcBUmjEcUvVTqPrLyJ+Yi4d0Dup64YXyhSEYV
xiI6sLAFuwCsCUjcDXTpRe70YDvTm1uRE3pCNZpkHlmO+kyZG/Rm/g/VZq2r
1cJIThJmpc5Vig4TiQb0SfybgzNdCkyBTdJX7iC5fhtDnaSRSbYw5UsC0DP3
cFOHNiBPZyxI8oQoWsqdVbZcjZFD3F5jZqfcFYTVTOiAvfQkp3zDFL3TMe/O
2jvJzyz6MqyE9TbxCquEFc34sAlwVpkVdbihCrRrQTP8eopCKSjs7JRxdcFi
BZu8IEjleqz+ZjkuS3M4B2uNXopnReUecQRKdxI/E6HJQJGHMG/OOSJEprYy
AcljryVueyghuTEmd8CgBvO87IAvX2cmMlYSm/tBTElMDH0TnzVJxnGerNIC
gb2wQTqV4DDytRsuaGugjvASdXpHcQuA8OdqPXZnM5Ot1Z5lCkaAxzlUhndD
PM83kiNiXTMw5oopKo805SRzwIGAB3aWoGWd5CImKsaoFn/grBk0OC4CJyTg
c3oRUmFLm9IwtxQVxQRobWpojtTaXI8wzogSu7umKNJOQSGXEXMdbVCJ6CCQ
xoMPSBeOnQhCxXq0T7svtxBqOvroyQFwPVkywHg6DigTB223rQg6epIVQOV2
keV6Ma7yzK1gi/hD6MPGv/7R0QvOXSv3XTEy/NNf8PE7ePwOHn9GBHtz0u/U
u+jTQFM/1XjLrsnSP8ZgSeoG31j/gbk8iwjOdX9ZXZmjw4xrTWEzpMzqzYVP
qSfhxviI5qUFjNkIS6gpbmnGOK0rLDIbMSbqSAKSzC1c5x4PLppj3NmVwQE5
OMrZqwsiZ1T7+oZNUuqBygMfJ8fdUAlEWo0EJGW0pS5UFzFfviZZRvu2/Umw
PXbi/c3c3wVlYsJxkWyJGS2i8bIC8v24ApubVVbDYYZ+RbOsryTC/a/+f/yH
fVzhX+UN/VF5gRXF/Oo4ZsmmRIwOwFuR63FUcazkf/U12mi8z57b6isk05it
EBp5fMOuki4qINjBK3robRjePzj4yt+DZWU8Bg+BI+S78PfvaQ3q0B9oHa1G
f6A1aF/F1v+XFIf7Gs0G48c3SqLl4xsNl0mxEdfp3Pe8NaD7z/v/VYKneIfp
a28NqvQanmK92a+9NbDRa3gKr+tfe2twodfwFF43vvbWIECv4SlWdv3aW1sr
Ty1awuvW197aqljCenX24sf/an/t+3/z3y8TSrH19uKpY9uk5EtEhQgf6TIP
NXr+NQ7hYP57kKFLnu21jx/0nQ+Gg3RR8uBYHqI6vuAKukj+h6PRxK9VO9Ww
60vdmliNInyfAbmIB+t5XqZec7M48N0x3VyxQgV6RDjUTo2iJ5d4jeD5OVOe
YwrlA2qIIhObWZLfmJOhXRs6MXKUXlR3rzOiI3VTW4kP/dt6Fo+y7WfmXEYq
UxyRP2g1VouJKSSCgdV/M046SRRRqpbES8nEHhkwOj6Xw2vy+czl/l92Bzz5
I7GyMfSSW7QJZRIGn1MSUo7gNyTZAyhWXgoUmT751UV8BQjql37uVX6KKr/V
Kt13X1V++c//U33oASACzCYvPytIyFBE7MC4YGh/7IVjxBhcPTSEXhx2wrFW
U/bBkR5HjAPwpbqOGKZeIppBCYoig7FBvG+vkwE4RVTSAPO/EcAMC6r6wNt9
ZO4muncDdxJuB7DsW1hmeEzgz4vo6gr4hkL4gB5ewua5jz2adg5US0mh8O6l
xXCJOXZxVFsOOe+/3B/BNcLALKtJK87cgUkZYGxvw9S+8v/SqraCPRqV3+ng
+zgMSOUrmTcNIAH+tlPEPwCft2mFCA1nNZm9K0Vr8fugOsNJg3OGdx0yFLPw
+bvC88/FGDfWHNBKdLVKRmStQwrD5d/g/Sy+dZTZoreUwgpZNd+UsgN29KWr
I5gh1HCXDNnSSMYMkqcGbgg26zk8P52MIxYZ0yPobaeo2ZFUKsFq2G8+/d4r
Ug0kRlqr0A4WiC9XaSTqJvoJjN2U7TFMWty+zJ0uNgVOSCsBAIAQN0EDjqDf
8m4OpCtvnQPiHQ+vZ+kkvborWNFIBmMfNimKoMrgBRtrWY+ceWocoU6hIiXB
5ZalqNJFx5uxCtNXd2w04Js0HB6u4Tps3xWDGe0nicEwOj/iXZuNk6uV6gHY
iWWQWpsGQJBVndxUtALoPSnul8lkCPAiDIYHYkFB+2UWT27wxguSF/Jv6feM
GmXmCkShKJFOkVdFErim85ikYxiUZsNxCxjQsZqwvsqeb8YNilXBCC/sW0zi
BdrlWIfc3Z3Fq6UgR9U7B2KKMhZpGxqamhtVjmEk1drNVlmT/xp8yI1LaEPG
6W3QN/cBsANaMqsLYm3iQ6ZT4eNko6nO+XooAunCru2M16bagWOPVM5EnmVr
9dA4P9WmxB6RFqK2xDLhRCHMSUcR7muCpxhbnVJ+xY4k2sqC5IYdYPkBlORs
GSWbopclhiMxQoFjyxjmcxmCYEXuAnbek0+RYtaqRXhJrN09MMvBC69RuLXF
OajgahFNpzjQJJpdrSKysP+xYQD/59S5NWRYy2zR1nnnjkJHU5x6LkslWeKb
t1IE3DALq32bOG4j9pBja0MTa/fFDyhUjCxjGdtTeO4Uv2/23iXBEkpGyRzY
dKHFyWPnIBO7GqXDFcGZo6Ly6TWcU4omykFMnMpIZdRBjgLgsTrXKIIXhLTm
FL3ESAWX4Or9U2JHxuGEfIggqZV08GqqeBxNuCTf+5NYLg7CJ/AADcoltRQ/
wxQzAgBdG7HHy2ROE57tUI9iDIgGJMJqQZiomAgJuw6zSxHf7lz/poBOaAye
z3kj5equcydY4cBQQfaGm367fqwcXMc1OqKJeGvQP5HxZVYOwjAHQbyaFB5g
WZTWLzdh/PkkxOR2t4dFQ0btbGZovR1OVlmeY9igZhmdjs+Kx2CPSA6yztkX
sedNLCGhxx/J2oqh9+LmyNAXhdNQ9aVsEg/xvLBlNFnobRWyQZm75nzVtZwL
iqQ0ecpLiZVyRGE0uolQXDV4icHcAIwstn5vI1CyzKihWwTnqfjcijIBLPHV
GJAN3SS4OJk+nY4CSWPPjJEB0Kq2QQRg0A7IjWvDFTD784Itf8YFlNOR3CAu
dr+mRlhcE7HEvC9R4WgNngCKpYsIgcOq60KNpvLHeMt0M44voRNPB4riNkRt
kDSE4oohqG+XgJDMZoWzJr6jNXcQT67/5oWRg4E6LBJyqFQSEXPQ9CPGLUGF
Rcz5kNYEO0OvxdmFBUFnY4yZ0yjinMJBBQVZ8MY/75lelXOkvobRMCgBve1i
iZRQgIkm+HbENWwsR2buNDSqRJ4cWerjyPA5UqR5lmiV6z1aakkHGleaE9DJ
ZiFBXTCncWzSP0bLTYO7onS2mmPOwnjkUFPElykyEybAGybkXouKgQyi35Tc
EshL0gHftxInH+0DxjmoARvnL4hX3OeyglV1ohxJUWg45018BBIwQJLUa73v
dYSW6GyDrgqCe8LCP6Zvn5l4g/UrY2TMzvTuO7WiC/CzCrobQbdaioVCrhdP
Y/FWXceTuY+9xLd4OLPYCVDAfZstPZUshrGQ4RNrPifLOeBypRZ43l/9HkmO
5IwTAX9h8plQBMEo+VjsAjZwdBdNna5qruoyjhJUvlkEFjea2P5Tq+Ia5VKE
GLoKAOsnJVq2g0QMklwinGYVJ3wu9jTJY2/9VsQVKOGEBBuz/Qta4DWfmYoH
kaOhw0u804LBGXP2ZeuRX4oI9s5ek9SwGJlcESjWLWGBC8fdyYwvSiklGzIa
KecNoy6hwctkhrR2Hk8mSmvYqz1OPsYZb5cTEELNiG2StoymYO7p/rmFOLc3
gLYUpHV8eQqcHgOsiRFi1AsHtIFyhh9yohkhtfiWNg5zwEzi2dXyOqMbXWW8
KsfXXZqtqsUsxSESHcSt5WIb21F/i3lvpY465UyF82OznM44tUqsWZ81gudO
J4YGbza5+iLdyAvNZ2KnHk9xrBcpS/4EWQ2hIQujmfuWmFrvAfDWaSmgsC1d
FCLgupnajHBfkRRsBrH+6h+R0K/PEwmQxOxqXO4CtgbPqbnkfpimE6APD06t
QVjJR/L05fFphQVG3mK2kxnrNR6VoFFxOCk1RnvrEAdDuj5n5o8wNi+Fr4mL
kbH+st8/p4Xh2RNpxUnghaKlM47mq6SdyPWmeOB4F29M/K/zOY7n75n4E/g2
2ze+SHgsMUmMSvak3pGVc0X2TLI64HAcYaUf4gHUKx8S8kdISrf85L1RdTR3
nt1YvLjKHgWCFRnwb7HY6IRWVZUUigxlSyrodLyJyauTxxkSCm1yv78ZYsAh
+cZHIMLNYBIzEc3VKGFdceOXpyz85r3MeG7y5JDD8fnE21dzzHo4vFOAKXyM
zLHSaMaH8LZpsEuQJ8kyDDPDgliYJoJBS+CKUZ/SeikAnRc6mdfFydw/ZMvS
ATyuoOSomMB7QRESHHJWlCjzy+VbC1xP1sLKfHPvJNrYx4liB6eZtkwhcxmJ
TcOBcXGI+GyCGYsB/tv4jj+8BeYCZwAl+yXGPyty3j+TjkM5ZDlqYmCyoc65
yzcvfC5B/gqovEuk0PhIMVZMS+4fr6vIcs63feUvw07I60fE4lTDuzhuziHe
ekg1qPtYawUiCDeUKlJgq7SCh1uirJ3o9MzonMMoWbKurdv9Jp6mFDTBlnHn
eKgdCWMaIkm/zv1nawPYRYCklYwpI3zOamKKHlrCQnSJqSd5ijmPGg8uD9Qe
QqoA6Y0cyu+8nsbGvJ4/3/s4xnHvrBLU0eYlhC0Ts6neE4yMt1NqBPlnHFLK
1gOQlCVqn5iLVMlUIpkNgTPH1QcQI6jhTL4pUlgUkLGuNccXwgCLRcQ2+9s0
h4T4t0uOrTSGEIZDTRqqqPy83az+ugQzs4SA4J6vjKSPR5M00iNfqfhHgBNL
9FC8YAUFJtfDHDM30QTTDRnFweqSLGxYwsdeZu7QAp2vOCrcgau6CIk3hdG2
NFuq+sMZBtlKTlrJm97FOcBreJ2gr5suB4hIvmMHbpyPNs3c02DM0iydGw16
hFHlf2NyTY7ftxdlzs6JvrG1acntJ+JfKHUs4nRxBQfkN8OTzuXMk/D9Mr0h
bsQZNFQfKotMidOhIXrOEGWOwRwb97DZSpN/1GRT1lINLMbJa5RPOW1pRnUG
Mjo3ZzADDkNeiCqLhrxZQlLLRBCfb2w7RQdyJhMy6YrwQ8IIrRAxHmUxqYeW
Nwrh8SClfgoS7igvz6hVgMxSUvxWe5U8DRalDPpxt2jdwMgNY5K35jgWXclE
dfk8J4GhJLiv0DQdWgelE8SlNjCU4crUTzmPGULmL4xzPxfHJ1ITucXGFPqW
kmcam8jNGDdobiJWj2/esgUVfz9/SzTmrX6PmgSKaeQMf318ds9bTSCSu/1M
tPPjXC8FGBN2QSxyLzgXREckmJhB0T+QTZhQnj2KU8D1ESV9iHKqvo9z55No
yJUwdis4ETQRnZCJU284DgZLdGvdmkM6Ofo/WqoMKebA2FQDQjT9QI4SzRzA
7tGZyg8uda77e2xUKoPQhSGHpDJfJ/N9h56IcDwV6kwkCB9RtnAeEQ/YUPBY
bKYlvqBQMhY2NFXid+JFLYQO6FVLzCfMUyrxFNCAyh2jomPlYYKWsFIO0JlE
ss5RMsLYVxO2aVDU1UMXsTIfwhMMyo8pqGA1l/udlrRpm43sKjESCSb4zi1K
TGNCyG2oizrmXIHf9D1zNTXpudAvXRxJ5cL71SrJrtm1q/ERTMScLSwkO6c9
LAJVsZWU5RSzZC71opu+Uv0ir58T8pKcdedcwH3odIQGVZXPAWI/7//X1yYS
hELc55Qz01AcuraTo4u8SuFMjssOWjeMxF6Anx5yU29SLtOQUmUeGgp9RsYf
3SAQLTJKiyKBK2LZHzmKgosfrra7kMwHmfgkrX/RSJiUFIaFG9pMWPRttNDt
1I5y9ucMBMzhtTH0ECbojqFxz5HMJUhL0IB5Ehk3jN8yz2qUudknEkWn5Yds
ZybenPPaStQPbqiDh/k4CbIakLmCmA6L6nQGlhqDz8MBnZGqTAhSaa1pi8wi
MmsHypF9wgU3jtCGqalti9ZD0zHLILbopBPO6PY4UbC90yXFn8/oXqL47O7S
lcQtqYVYh7S7nCzJxI7Ej3NjUiMakdYL/JQIL1Y/QsuI3r/N/IvDvG6HJg+f
DEdrmhr1hMqIpTeOAGAZf9kVJLGXvRdkQV4X81yzMYhbyYTBqO7vnAMDs76j
skrrQGNvP+29Vte/WhNYfXTJlypeEishh0G9gg5zILKPAXdWZ0sdN3WZKURO
MhM7lbEAgQKQjMS5pJceMKzDYaGXM1bpoXuyAeAZZ+nTYXS4J5pxTaGzx4mL
bjjhst7OI3cbnEV0YqHrRVoZAMqE+K4TfrSfMwXlibehyAU1SI1bTk1Xf01P
wlzZ6DtNKOjH5s/Z3uj/AeYarPdHhQIA

-->

</rfc>
