; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp [A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+


; This defines the JSON equivalent of a UCCS message, an token
; with no integrity or authenticity protection.

UJCS-Message = Claims-Set


; This is the format of a DEB (Detached EAT Bundle) in JSON It
; contains one token that can be either CBOR or JSON format. It
; contains one or more Claims-Sets that must be JSON format. Each
; Claims-Set is base64 URL encoded because it is input to a MAC or
; signing algorithm.

;DEB-JSON-Message = [
;    main-token : Nested-Token,
;    detached-submodules: {
;        + tstr => tstr .regexp [A-Za-z0-9_=-] ; text content is a base64url
;	                                      ; encoded JSON-format Claims-Set
;]

; This describes a nested token that occurs inside a JSON-format token
; when the type is "JWT", the contents are a text that is standard JWT as described in 7519 (TODO: CDDL for this?)
; when the type is "CBOR", the contents are text that is Tagged-CBOR-Token that is base64 encoded
; when the type is "UJCS", the contents are UJCS-Message
; when the type is "DEB", the contents are a DEB-JSON-Message
Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : text / DEB-JSON-Message / UJCS-Message
]




X-Nested-Token = [
   type : "JWT" / "UJCS" / "DEB",
   nested-token : text / DEB-JSON-Message / UJCS-Message
]




; This is the CDDL definition of the labels for a JSON format web token, a JWT.
; The CDDL for the claims is in web-token-claims.cddl

iss-label = "iss"
sub-label = "sub"
aud-label = "aud"
exp-label = "exp"
nbf-label = "nbf"
iat-label = "iat"
cti-label = "cti"
; The following are claim names for JSON encoded tokens.

ueid /= "ueid"
sueids /= "sueids"
nonce /= "nonce"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"
manifests /= "manifests"
swevidence /= "swevidence"
dloas /= "dloas"
swevidence /= "swresults"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

