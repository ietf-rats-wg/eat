<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="June" day="18"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string and every bit in the byte string contributes to entropy.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, {#swevidence}, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="claims-that-include-keys">
        <name>Claims That Include Keys</name>
        <t>This document defines no claims that contain cryptographic keys.
When claims are defined that include cryptographic keys, they SHOULD use COSE_Key <xref target="RFC9052"/> in CBOR-encoded tokens or JSON Web Key <xref target="RFC7517"/> in JSON-encoded tokens.</t>
        <t><xref target="RFC7800"/> defines a proof-of-possion/confirmation claim named "cnf" that can hold a cryptographic key for JWTs.
<xref target="RFC8747"/> does the same for CWTs with claim key 8.
These particular claims are defined for authentication and authorization.
Their semantics don't translate to attestation and they SHOULD NOT be used in an EAT.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-18.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="14" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-18"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9a3PbWJYg+B2/AqHMiLS6SMp6+NmT2aOUlFnKti2PJbe7
tzbDAZEQhTIJsAFQMsuT/dv3vO+5ACi7umcidmPHUVEpArjvc8/7MR6Pk6bN
ytnHbFGV+cu0rdd5Uqxq+qtpDx4/fvH4IJlm7cu0aWdJMqumZbaED2d1dtOO
i7y9GddZ24zzrB0vsjZv2iS5n79M3x1fXaYfqvpTUc7TX+tqvUq+S6dV2eRl
s25epj9s8uYHeNSsr5dF0xRV2W5W0O/52dUvyap4maRpW031O/oxy1ftLTw5
wt9NVbd1ftOEL5rNMn4wrZarbNq6L9bX4VlZ4aP6ZprPmnazyPWztmjxx9Vt
np6V8GOTHre4rKyFOaZX1ae8TB+dHV/tJtn1dZ3fvUzhR5LVeQaTL9u8LvM2
+XQP+1XMS1x85ppPr6saFj2DjXqZHjzePxzvP06ydXtb1S+TcVqUMP1Xk/TV
upxdL7JZDjPk7X6Vreu8nObRq6qGjb7Mp+sapwkzrupN+urVCbzKl1mxeJku
5ov/3sgHLb2fwA7oSL9O0tdw9ptsaeP8WtTF7Dar3Qsa5X+sswW0XKZX+fS2
rBbVvMgbWO90gvsKJ5HDnj559uxJ+rqq89tq3eTpaV3c4TSnMDjMMyvT0yKf
V7jr+Rx242V6ki2Km6oui4yOa122NXz5/vIYfq5uCSB3/rSfPn/yPH36ZD99
BuC4Exa35Cn+939vi8m/y/z88n6bpBc/nFZlNb9dh538La/z5SZ+8+1LPHj2
Iv0lq0s4x2o9v03fVdnMluhe0HpmuKHv94/SZ68uowWWRZvP0n8G6JhVy7DW
Px0dpfsHTw7Sw6eH+89fhJX+tZrRZPtLTcqqXgJs3eV4Y979cnKwv/9C/ny2
/8T+fLL/JPz5VP58/uLIPoBhwwfPwp/2wfPHj7XZ/oH1sP/sSP88fKE9PH+6
b98+O9LODl88D81stBeP3Z8voBn8/eHXy+fULVz7rJ7jvu/ctu2qebm3l2d1
ezsuyptqUs6zybJY7K1uV3uz6r5cwFlM4Mc/3RSL/MdpVdWz8f28eX60w13x
xf5w8e7Vafrr2cXp2dX5SXr5b5dXZ6/T/RfPj0bpm1+PJ5dXb04njx8fPv24
P3k8efyRJkMd6D3Fv8cMM2/oWmeL9Ne8albwI1uMEQksFsWcrusx/meTPoKe
d6mhXf2j8eNn48fPcb3nx2+OJycfriYni6xYNvHKceGw7vv7+0mRldkExt3L
GkQuy7xsm73pfeuXd/Lzxbv0Q36tmAq63U25322LwOHd3G6yRZPbtH7rTCua
V/PQxP4qE9OZ/XZ58cbP7LfOzKKp9ebWndzVLVzIX9++nZy/Pjvv7xjObAUk
IltMDuerFU1uljef2mq1rGbrRd7sXa7yaXFTTOkIOz9P8xYuXjPJmtXnf2r8
m/PZj88OXvgdP6xncPxlXjOKfwsACj+a22KVvq2rv+bT9h8ZpUAPizQahglj
egIoM32Tt/dALlNAavB5vSwArJp/TN+sl9d5DZhilGazWZ3DBiNNgY+KGWyz
dbXtcA9hj2LAe4Hb98v56cXk+N3F2Uu/FHyaHkMn2DP0W9Xp8WJR3QOyegc0
rC6miLcuVrRWmMZZeVfUFZ93+qpo2sFzuClmVQY3IoMLQQeBG9rQ47ESp3Gd
//u6AMxMoEOvMj+PccbzgO90HuNK5zHO3TzGC5jH+G5/cjC+mY0PHsOK9x8f
TG7b5WLbHiGt56XLLN2GvanucjyBFHvCnTs7fjPePxyGOLwL82afF4lsVVbP
mr3rrEZa0ADuKsfr1dTvOHMMikWOa1juIpdDh+nBYHvv356k2sW2Ffx6uT9w
yCfV5YfzUxhkfDohTq3JpsvxtGruixm+h4Msz09PqrIEIEUgHF4V7HNZzCbA
18jJ8QPoiBrCf+t8vP/xcdhjWRz3n8oADOaAVIE6QxO4nQxEeQ1/ZGmTt+n+
0MY/J2w5sPKb9WLBNP3NBNiLT8VyXWe9d8AF/Fxns0W+6b16PUl/A8Lb9F78
PElnefo6n+UAVv3XJxPkctpiCQvCfTx9dXE8vHXzRXWdLVbAGAObsyS4uF/h
xrUAqnvrFZKsZg/W92Rv/2Dv17cnH0+LeQFY61UOXGN9cXO8WtXVXbb4eIfU
aDW78fsr36b8cVrdpPr5MADvP0lwum/P3mxBmHkZUDn82Hubl9DjQlDMZJXN
cz/+W2DwYAzkk/N6VReNQe4jGGMXcMa/r0kgUGKC7O+4zeZNhHXwFdOtK3gF
reZwg+vN1hs2TAa16/DX5DMBJPxDdiFmk472D5TtODoKfzqGaP/AeJijo6fG
ohy+IBYFxZvJcT29BU5u2gJv7m4ZyUOZe4cNfi6Ab5llGxAmsumnaP36CiUF
eDe4bjiZ++JTscpnBa8df+1py4/ccjJIxc/OzibPAQPuH7+Ltx1epJeCpUbp
Dv2WD1mqABY+vyuAizkXUpPXO26I03yqkPX4xRDPYigQ9iVn1H9TlCBuAczr
uz0ZcYydMAZBDvDwZAIs1SuQAP2U4dGiEtJ5/Pa8Q0wPgCiezQqjhjzL37Jy
nYFcBOD/fCtI3R/S7K7e7c3DEGMYYu874iOBGIMQ97FAQL/JhEAM4GEQeBcz
wK45MTqA+FBMLdZLwrbvzye/ruFdvCR8sigAC6UAo+l7uENwj88+A4KYAa0F
UQHukDsAkD3fn++O0ot6npXF34RyLDZDX17Ql8grnKDYW25SwMaPTs5PPSt6
vJ6DoI/b82xwewYOUfHXLFvu4cNxoHXhr/v8Grjy6ZqvZ7sGIg7cMRDBdUF4
THbkVVV9Wq/6gClYQM6adppk8XDlB2cLkiUey2Rg1vYILugYZ7daX+/dFfk9
Qd13NQ9YCDkYukXvjr91nt+6k4CtZ+spoIsmr/GmNbqAPbgn+edAUbdcarw1
+9tvdfoLgBRcImQtAApe521draoFEA2Ya51nynQ26cUdTiC/p+88Xhu+Mvl1
A+eZT7KyKTrcDq6N/g+mh7Or4f+eRcwJ/CQO9O3leP/ocTR7U2a8c+wgXYyT
erNqq3mdrW6LKZBf4uEHJzdt6umkhEOZzKs7POSF8fgzYusBCa2aPRh67wDx
UbaVLzTp7rxsYIJrupq6tx5MXmeIXx7vM9O1XAKtPIFlAN+eRcvjd6m+o4Wd
K21C7ZJqHjZhJ86AnK8Diz+EvabU7VR6FbGHLup0z990INELvug4z4vLs8m/
PgGke4qqPEe/gEHMx5/hDX0GdHlyktft8GdEbEHEBeYUGEL4DKjteDxOs2u8
FFP4eVx+RY+WIssCSLABTCXKMkB8UxIMkStM2tusBX6sgQVew1fYRU5YbXqb
4RiwaDieaYOnA13kNNooyaANUa9F8Qm+ZyXLKD2vruTFKC1F5kJgWyGswbmn
zXp6O0EBs2jcLFL4tW5gYtdAp5M6X2yQd12BsLcZpXh7kQGrU7nHaVvBIC2J
cXl6W92nS+g1Ldr0vmhuYRHwnhSsKcg4MuMJ79XxFQ6VF/CihlkPyvMw0KA0
fQ+tvL5xDMgIOs9nCS9kAl9DnwuEIZjfHERooA+LBcwCxlRsDX/ADHESRIUS
GJK2G1UBcrzLYgYcdZJ8hwIM4zAE0ARnb8eJS5vlcMOIJNPpgCADBA63E37J
5tLxTuHgrvN0mQHpzK6rdetOMs3swJpqCc2rm/Y+qwkG9nDP8SGAwgwfTpKB
g6uBUwHejw8vjQ4vvb+t8GAbPBw6tSmS7+KGlownR4cGe0TEH8CNdxkXB/ip
asPxnbcw/w1AZQU3A/sqq7Z3ytQtvoi7K9qB9tzWvcIZF0Tt9dWIcEj+OVuu
QG4kIRmXBugAUF2N3wGKzuh04H6U0HK9wq4BCIol9kxHRqckJ0aXGfuAE8Lf
fidLBscvX0R5+McfDBgIi/QQVY5//DFJBIrxDBGGUL2Pow4CM/d2+OLA99aF
bO79yT71nlx15oX/QX51hlOkJRfumBoQ2tIloFZgmJpluMYOrkfYkHZ3uobb
wRO9uEblTXqpenxkLwHLAh3C5TxCBKqz338SzT5uiSi42/i30Bh1s9BY/36K
KzQdjEIMQsuc6AFcLyTN2MsSYSBb3GebBi+PXLzZJCHBDNWOuQ25SwCUzZg/
JhiKmuCWfso38BURkQXvEpwZ8ls0BemLdlv5buxmCowEYmz8hvrD04bfCJi4
/as1yPrM1jrURDBdMMit+S0hoWgOhBqWGaDvDiTuKJ3YSYH1QkwJn5bpX3FD
CB3AWcKpQzf4fUk3m2+sv/oAA4yjELnIVSiQ3ZjS4mGHnQ6KVHCic9soPAQK
9Dd8VOAtRBTK/AbglhzQVPcpoi4esxlBD8CMjAx9jSLsxrSIMRoiaKRzJQDW
TV0tCRCqabVomMBdvboUYARxFeCJ9s7NP/dKw42QrIZHEeZTzyRHEwOc7IPj
XR5fvuIBUYD++oArGA1WL7cXMKDSBMcVwNhEm0ZwquWckNAdUcHruspm6V0G
5AzODVohyEyzJtcFCLO0yO/yBYzxZ9x32sT0BphawY9NoDogxP8DsG2feJJL
YF8W+HIJwiLIdy3hErRWAkGs5bAGG2R0gEiQYXtgC0HeGzlEApuI1yCzGRpF
pnbQ5XmkxeXO86xZM++rSNiAol6XhIzw0zAvEDRvivm6Dn0wk0QTtK+cthbu
1hDzFHFMBXDev769TFUchh5+QU4VmgKfFzTnRl35AoGIAkhjvUI2tAEOq2mF
mMC9dQfAGBG+bxHLM4+Ph0pYG620i/wz/bcCXG73haDHsypEuXGHmNdi3pk2
MQOMLhpi4uH5yJjSEZ34C+lwvJ7md7gAngyMkPYLZ0IYASdJhm3Pyp4hBkVb
Dw7rX7zLm/WixTl/953ywCpn8S0YXka6w6zCDmKtOr9B7Mboi5l/BQp/c2gX
J54wupXG3B2CkZ5BzGkxByp8CpPvGHdhZwOYCnblugKhu9PcaG/Gf/PewGqu
eBkOHv1seYPdsUT9EnhNq7rOm1VVzhpmZnaaDfS8ZIAp4dMdHDTagtys80G2
+nVRNQ2ySYzHiKPBTQRENtdXNKAySHYyeNY6qD1riPbAbgPAC+kiKpsJ8sON
qpzeBlvc58Bawn8BRXSWIFjMhixzxIUED7Lq4V67x8DtMiekZIrxo09lsrhT
wBMv9M5hg8ItpVlf80xH/gejj/CTcFCV4mwYKQBjalw5TP461znT+SCfsb4W
y9yIsEZO6KFxPcG55XBS/GHDJ2VsNfRwf1uAjJXxKGmGimuWYwgQtXuEBv4S
VgUf5VkNI1bhjlWrMZER28Ib/BJlovIHbYGdZKFP2MdL5Do8naHWMAGiNMeq
UD3j20SPrs7O6L9T1NRQhyqP1nAt85pexo9GeOa32aphPJlnsAxtTvwNfeWn
hp2UTujl30U5KwBtAZlXusXPYXVMWpolYEGSmGkW4ScPvERlYjgxQoxIL/Q5
Q0HDbQ0oirhnJjM4bcTNy1T4xSmgjDrrQuZtdpejF0YFdyuQe+wA7iYQEOQE
5oDzgQFUDAXj3WUNUCZRrDcmR9Gdph4BLK075MLu8O6WFXO4sDs2lI5CQId9
N/gZkJxiuV6Gz5wZU8DcY1egAycobPwmksfp2c9e6F/VBWxOsdgoEDOz28HS
JEMTd4p7KLTgphLRj8Dta3IWfPI1KQvmtVg48R3uiDfRjpjtV3bjLlsUM/5J
8DQDWG9GYVuQlQIqycQYXpDJp3aqU3fPmduERRGLVwMKJiYQdhO2SRmAyCYv
igq86ChoRO8a5PJ5Gcizm/yjG0zsmRdLBroXEqAKqDbmX9MdWDK6nOwEVUYJ
8wbIGtCA0GGPUvSCIwiF60pcynWxUFnvhrUNKWsreYo6IeAUsjkscZrDEEXV
bJ8vLJXpUWfzqTu/9Titm3VL2On4agwiUhYUcMKux74GvGyVB9KccRpRMVke
CD4klREgqrZK1IQjAVbeyDl5Tixwknc4Bs7QCegj1jq9Qo4B1R7EyeQrOu2K
cZ7Ng4CFaW/OsALcHO9AJgoeoWLXBJEtXdLNKgc5eTKfjNLX56/P6MEuNa1o
Cd227S17fonQSiska2OEGG6Kz/ksKB3SbFoDP0G6NhNdhmGZzg1vNlqXHTUi
Do9mR1ccPVSmt0wk05/X5Qwo2yPAJ7sjuMXwX7rBiGBIXm/rNbFSeIuAts8Q
wcAhiB4BljHT7gLe4Sspe8mg3eQoV7d4EqblC5oJ/DzzigunqhBlwJJQsLDU
ouMcghHYmldZ044GbhCfStgNovDiHTJJLm68Gge32hiX0IQXYyuA44qmjbRs
SN2C4i2cXySpkLKJRR2TwllfXekA9FuQ/+npqxEvWHVFXYFGOU0Q6aZoUP+5
KJELFY3Su3wFiNXY8UfY1W5fH5cB3QNktWq13ZtKW+CYu15ZFxR+hApLvjmI
/AUUkGoziXr9/vKKlm6cvbXNP09zGI4VHvln9BkoWiRkejCiWei9EflYOD45
I+YPSSAtboDfxY3RoSbMasnkXId4o0nooyU3Iko3iC+bwI7j9Ie6ZQWSKECB
9yf3pm30hsQ1PaFT9F45DTD6Kivna0TSj/C49XSe7j+GvabFxnSVuViTswT4
ajjnljEk9oJbMsVlw3/l2tCr3tWhDTovhZFiFIVvR+gaAliz+Jye4TM/KVJ5
6TkdBwpZE2uHjNQcmCgS/r58+StIHEK1oCmft+saFVVA2m5gqwqSYXAyy6pp
BY9yA1sWWfZwEaTd0jOho6A1ZfwZudcB8UP3G5C7fjv5bz/tqEFGQUvp84zn
ie0+QvcfgYiYzthpfLtcwj1pjMgGiMQnv0HsS4PfI127A0qcXS9YyJ8VrMJH
WMJPBolwAWC0JqsWdxNjMdoS+O89wmURiaqOTwNYL5YF6ZFGTPu2jGGb+bV+
VYV+ReyVA8OUGebezjFWr4njSc3ZmNFZcAR8TcoV/LQnvSfJh9sCxa6WSWOr
fOSMLyUiFtWvmMqeehnS3rgz/gU1Xnm6L2vrOuT88QdJdTlCLg0EE/B6HMf0
jToaEvjb1HQZUPtSpkqTQFBCaXWJrPrf0H5WBs0GczPwY1BDBLdrSG+E9Mvz
+7JK3FfUeFbr5kFL55ZeiQmkO8LKXNTjqwUMlexGA83uY+Yp+mmzo69m66ng
AiOVk54ZJkB8WZWsOSD2i0n2MgdSiQhM6eINkLJbQPyN2YugMc8S0R2x/sPb
eGXapM6i51UuupF/gb0iL5iAcbDvjLggGOqO38+EnMTGLpMRAWCAK5p+QkAQ
6fJdTlgKBvuXbLEWgTAMh5sTNmxAHajKh4ZH0OPxEBDsZyJ4PLAppmTs7okO
N69Us/FOjB9vxe4p0yALzKIt0OoSdN6yIe/YxOk7fqsCHo8Z92qKzKGpZKiM
ymfONqS8cNBrmAkzyLvC54smZOQ+SdF9oyRB3Rk6zYifJG9w8sy6omauWMrs
7LgIZUUrUFynvK7ciDU1NP4e1yGsi8kfD58PYszvcCwmOGg1uIYV5Xn5d2mT
0y/f1a4P5PLLjai8tqp8ialgHSj5WgL5Q64B/iOCoGn/CD0WW6aE7uCDS7ti
01pYWVDzd/rSVcBebcOFN4BvMzZSwL2Yo/AviKt3cv7BD036tgJekLTYKbvE
GHwxj1P3e0ClFTcjzJTX6IzDdx51HNkCBYmgoBBlGUIL0arhk2MYK8rVuhV8
h9iAtHJINVBLhLuwdW+IWgFDNSVKgn3hJiDfeJtnC3TxEAvPutF7qqTgl+AN
MPKGpN5B2Gzl4CkwrmYs00VxYjrl2RFzQYpWNEepPIIIkpTYxMiCDNY0ezfA
M21ZI/KFrWG4FYjGBTJXdlMd9HSRiU2cnDKuUfVV32c1YpV1CRSasPowyts2
F+LepBsy4zaotCTBSfpxQNaxiOBRKNz10WFzW60XM5I/2VJyMwyzOM6nsrpn
vo3BDynvLWyqACWr/HRfWp2vXj+DaqNdtBckzRJuZMAeaE6rV+VGFdYnhnRx
JaBzru940XBFp8yYsV5z+CzdpOis8DpsP9cI+lHgMP0X6z8dj6LsHO4Owu0a
wQ/WuagqpNTrFWuaZyCYoa60cyva7m7h6dCMK5pilv75Q3px9hqdZSk86aHZ
Xm/0fJgg4RRwAqajzdL3Z+h127BHQ0n+8bs4e3NK2nIz+WDFjm0qpdr07eib
5PgcQU1bWE+PhwbvwAcRGOD40X+wNOeMDn0vZ3lNzp4MqtFmkt+YvULUis6m
04I5RyKBEtpEdtrEnE6Ars+adAf1Czsj/m/65oL+fnf2P96fvzs7xb8v/3z8
6pX9wV8k8OPi/St5j3+FlicXr1+fvTnlxvA07Tx6ffxvO+QfnexcvL06v3hz
/Gpn2F7KGgkTzBnbeWkk+fnkbbp/xEIWxmCqRw9GSLKgXLIrNjlh8U/YvI03
KC0WyTRbYUgH0B60JsIRlynCQM/uXefMaTmrN6nNkaY7QY+dv/WZCpUJgfXL
5GV6nK6KfEp4qXB+qIC985pWyaYHRYcTtFbxlWi6uH+VFbU4IKI5YM0cjPkx
ouiOd5REjyq4hZAPGl+zNxhcQ5Nasy97m39uUXdp9lRVQwtJoqlM0vPgnJm5
FzzkTV89IsP9c77B0a5Uj7LMVjQ7dXyyKQprbg2JKGpTXireGZHs3cR0s/gb
0XqihYzGQ/QEy2fDF02RvsNhPlzt4UFycGR6mbe9iWqTSsgUkQ1WgLktaFit
vgnsU2D9vhmkIokepadBYTtJVAjmI6zRghxIF4qdxtA/ajcrcR5Tl5NdtDkD
nxbYEnTlwu1areqsEK4U0ARbggBYRQVGpp82mH8jR4OiMeMHnin6TAKqaW/R
ZRf9cTNSSJXs9ElMndgtWFnB6iAyUTvmkEVa1U3ANir+cwtnXyiZOh8ImcgK
9l4aZhvVzGfTF45zuyjJaMnckmNcDTOLfnen1zGj+PlFuKA7LXY5Fa8+4geB
9S+AghIu4wGzEDUWTFfihjrhaBQApL3IHW+PnXLYD+P3STKo1uBFhIthGhcF
Mds8sb4a+NAG6VFN0u3MsKgxEHKcUxXe1pijBvxNli+QnkYsYQnX3HTmLqel
dxi2E9mMeOI2s1EaLgfPhDjShw8k6DiMFt9VAOB5kHr88Tp2HmEkZvZ5h8VF
+475f9V98BWTh2j8EiTDmM1ECKIGNXUQIKKk4EQ4C+CChOm96QiUxvmkfREE
4SXI8OQFI9JKoZY6izbCCSA3XY7nVTWT+Y5AlFxA950zhCmUFQVb23coYpGJ
j83JiBAbdypAHNdLXW3RiHGLfCbJiYAOA2ZAZ9Jbx7KY3xJiI/OeWj/xpjvp
m7woKt7BMI4wUNVq/Iosgmy5D5YH70qQpTti+0AOJ90hw8rOSFUjgm3VCEoN
+DDHlwMeB6rIY+7Ve7dMdEzi2cQX2QiR7zSENwjPLaY+8ypXkuYct5j1Yf0x
6mSwCVzIORqRu2eOvXI7GsTsOgYefIMa8fPtjMLyC83+6wZNUl3HVmBHVi+c
gVLGhM/ICVL0oABXM7o/3pebN0XnBPvfsO3QkegeyY580/BWo1W47ZqFxR6M
cHDNT9AbE8/TrL7hmBplGRtZUBNZSwdsukO9iFBqXinOBKKOjmrYVmW2+YKK
IqGafspNDULmybVYsP3Gxts2SdhFrGPC0Il27DDi8xqHt7wJDqvkfhaMy2z6
8faUN2S0HNM9ZKNKETxeTRvuXGDNCC3CljdE8oqGzJDOtzM2IvnxGSUS+ems
1SkEGz45vFLQoszvO7vJnunUhuVk1tmTd1fsASLuas5oKwiAleZ2Hsl/wD+c
C166Md5zme6P6fffh0fZfG4L2fNv3gMmce+SZGurH/Eg9dlrxn0PfQ13ovt1
sn1g6d6eDgzQb4FD9FrghnS2BdFeZ1vCo/EvfDg6u/4bHAqAtzOn4e8emBLS
FgQczsgiJk256sH5CYGm42HcsaYJ82tSczabBYUcy6KdhDfqthDe/ebfeWex
wrnNqFtG7J11Sx59pC9F4QA1Gd7sq57PyJcgFLONnx0zMAfaXGVYEj652xUb
CVXIbBXniv8l9phgvC7y0+K0b9Jmmp7ZR94gm5lheI45YMho/+WLNoNVo1ub
/BqFG00fww1f1yW7zZpECAPXhehfiI6i+Lsn4inI5kT4wlSC8uKWpjIgclvc
EYfXROI3iu00tFJxceM3FxFSc7AanHsgU78K3jAZ7+6zvbWfT+gBNQVkUkEr
9BuyNfKLR2R43GXnRcLf1CW5eqpVkjRhaBZGkXe1sLwLBlh2Vqa8QDS8QLex
lnQYflLsM5PVdUas9cAnYpvjTwo2T07JPoFhuSDoLlqAbHQYQRLIdkkXDcIW
uRXjbSRvJvWSa+usaKZryp9H2kZ3Dc28SgpGddE4xln2jPTDMj1bUkyXMkt3
aAd32FcV5PZq3Sw2AaRhtnxNSdyme0R394Y5iRGwHy0fCDJzEb8r/noSe0r2
Nw4h4f1ZEQPIstWbygaXE+Up3mcxSjoRHYe0dJDw9Ci9Llr10q6rFTL1GCgE
h00vEHmtS3ToWmwEi3GAIbC7cNk+k88v99oUf8s5AJGUEBRVKaRzWdWb4Owg
3lWx+YAdrUQTXAu0On20BxTqVMbGUdm3Bi/hSFxSzZmAoNDdYkSHG1yaqrL9
B8itAyZYt2w6lx1hoDX/Zlnlc2opEO0ngy9xW/ktTozud2de7lao2w5LU+Jg
QaYuvPrm7xCrGUWJhexYnT7js1IzEMFSU/WwhiqSqjIfN3Ttb1PE83k9vMT9
xw+t8VlYo5Hw778PjO9YROI9oLUUes8YabzIrkFi+/En3o0xeSHupX9JD/7B
P/l9FxP62U8g6yf/LW1hIemEJvBo//Fk8uxoF26Se/h8Mnl6tPtTInQc/Qx5
EqfBkYTcOEmYi6JnO4yhUQVvbYFNzhc3tB2bwQ9UaUbq7GoK9+QhC/LgB2aG
YP49snAz/x7jOSTyQwoxdl7eZl1WI/z7km4bMAgSlWWWnkfrvJjtpl++Q6MN
edCS9cYRviwKnojiBWU7ON1AsqyuUWyVrAMZoKeWhT9U2GTpz0CX2wokQtSP
ZZ80MEecHPJZEnznKR6C1NyknlK1tJ5AnTsxPQpK8eg0NEOf2RH7MpGMB6DQ
sCIvMaledOrZp6Jkd5rIfIX4hqTfwg1AmJVwJUwdWIkSI9Vhx3EDA2Jb69Yv
WLzmBFkYls78h/hJu32tm4TJ4JoZnEnqelR5I24dIlXJUM6xKKMEjQPMZ2Ti
el8KZ4raCFjYTNQRFMUSJLOou0S6mwDfkcJZpZrCBZU2pPoZsc8Z9MNhjOQu
bb0ho7hmRpazHSBOg27CcNHa6Yb614lthBqXeePVI5etjcWNGJfEmYW3meZv
J2CX/z4j78K8jPTHRa6RnYI/loxqcbiEkhMAz6Q+8n33NG+urdJPeb4ynZHF
FSfqABMteTcyfKr9eSCIgeBAo8Lw4sq38afm/Mk3mezpMB6qUxDKmR2hEDn0
1Z/n4tXDLq8hLtKaY+/kTo9ampvAHBLGJrqqzrRKrohgOKnIxVMgEboUYYWd
2cnFTtp3GIAAIgGGRoOAQzp1tQfT9Wkl3gl51YWkHLxTQ4CEtgmrAtICa2zj
KJGbnExTGvUDSyf9AU1aWiKJt/Q46TGTFLGCHlBeA8EGuEh0bSQ2Z5GX8/Z2
gskXe6HyXX5IOCXpxrb08FA2mQS4R/vuMHDxB0+eEq+wS8wjHSRzAKxtsdZi
PyZuj7Rt/zO9wo5+xo7kbxQ94O8489j/hC8ff368Dy/eHb85xW8lZD9L9w+e
j9L9FweIamEiY+TCaphVtVR1arAEVOr4RdmVLKpPoDD1nhoeDDmcBb2FSkmp
WDJ6Nigjzo4SKaxXpNeF8wLREKEm6HRlVswBs3cVHftMGQg3CIn5rALN0mmU
mwnkyVvzEDGypZi6+7Wozb+yJcwaXgM8Svg7I5hFcZN3kE3YvXC90fSPh7qE
i6WHDsdCK2X8QZ0RHEIH2WLTkB87wC4Cy/iUPDABfvWgD+CEKdHW2ftzPWzz
fKQXU0m41lGbqbvdBIMtsbGTMunB+AigBf/79DECDP11JAHtMzo91pZevD8f
4f+ND58y2T85P/W4wMlh3ankGO/K0XZLo5yAFMfK7wXchOPzba1u2rwMVCYj
zqFh53SErdfHJ5qfFkk07QhdQlODwhe0uAwjNJoK6WKw0PPKJ+mj4LB5T1p/
oxkcdmqyoETFWkK+JgSJ2kfRnEbBfZMkDIywIkwgchkvHqM1otxqqDb/8sVS
9zkYOEQYeH12Hl/2o/EMk3K6TWTKFVTAZfpcviF8gvl1BThOqhnf/ix9Kp9E
bBfRhWnmBCFPN0dinWPfGGdfyZpI3IM5CKTvH7koYkaWkrQJx/6hEb+FR5TG
CM3qlyfn5738QPTxP4Y/00MZmcxwuFEjYkEefz483J2QipG2jTvXSZpHj5lf
X61vS/GEW5OLxOW/vPF2UCX8USJoPp8vL9PvkB8gKaoZt0w9MAXbjzt05ieS
VwJ3HU+h2fnDkyacrnlds/BRo5cFaqZg52/XS9SKS9AgMB0lH26ZtC7qxjwb
MFEC+m+hUIoyQx3HcAWdoCY2ci7Y4j1GWKxF0qtPUGeXOP6yWmV4jcMZM0XT
ZFNLTlyyUXtV0bKdq8bsdxYdOEm7jnLmwajhLrhCuA3Bvku3PCGcSBPzjjNd
EO04q1JavTxjU8MmkZFslLPX0J140vBRV/mymOERs79x1ggnmBAbm9UcGSm8
ATEmiBTu0OP2BoBkIQ4tFFzppyW66RIOaII9vDHGBibM3SnV5VxHnY3iTUBY
f8abAF+D8B++D+6APh7CTyFitRoA+2VOU7mKttDxdTHe8mYqdEMXTram6gJi
fCyFR5U1EXdZ0lQmaXc9fm7QA64eM7cySKC5v1q1gPz/RkdVmPMh3o4GcMqU
UmBwHLfsDKZ2xn2Wn8QOUXoJEkaIw+4lm03fv3vDnmZGzHp8v77D+76uyQz3
dc0MiflBJ2O4YjdJ7G/WvuDBPT0ar+vFmJRKqoc5mEyOjnbTWBHzbDIBHPeT
2VO++w4muSzGJnEIMD26pP/ukkX8EmgfCRaa6kdoIhoDSTOP37LqFJDr6+N/
09MluTxQfManpMORHD43+RiEISSiqPXCKBuXnqKlADB+wylhuFeMsL2X/PWj
FGGAtZiUiIDcF8fXlfpJlwRDLrsEAk42F/dhEpQnLo8DTp5INGaLMUwGnfJ+
YN4P4oVGnNmAjbYMoSoSYhfXjsZzywlbNrAVWzO8ApCPGbtymchC9Esl4uh8
XTSk0WAcgaOan7KzwHJvOA1iXly3o8jrCWcvtw2/oXlCD+pFouyIObEDyoFv
ThtRYQ4Fmtxw9iWaAWk2LbpcMlwad0kzlVyMmJmA5muqO1Se8b45/3TqlaIp
bwY4pUsGwuBbWWNlEvLwQNuTSAvootPigsx5j7sdcMDmbVTDPHVvfmyUiv+i
NDB7awH+NFkKMSBsvPPL6cXOt2oLLv8OdUHAReXXkNHl/wJs1ODnTcBH8lsw
kvsFOOkLaZX/xFphj7uSPzze+bPmQCFH9lgIeUR0FLWcTFBjs1fsYntRA0+H
zlFnliL1tadbj6D/XQXykIMTY5LkYYv8GcGu95iGlQIUym1m191WZUzASQVr
i503LYrkM9XZq8HEsgbyJ11tAdyOGWfF9LOg2FUMxWKJUzLW/0wUmpgOiWeK
BNLr8Dpyddp/KpzWIxUoRX1FG0/YmlgAoZPozw09XG+EKHek4fGD0nBVixL+
nu6B+qPSBshNneaKsrxorBIgbIkK1kxqWHMlQlCTFSYsRgMxR4aROYjxkFiV
YlGyeAxK2vhJk6+yTLnY9IAJtoSzCyHvi6pCACzY2YIZVc3+p+oLQU6MWNDk
ABLoNaAXhGGep3oDhN2WmEpEPZEeQnIW/vl4jMogwlf1mrQZTGTYJxM2yPQC
HJavMVwM3s2tw5iW60sUUaxfa0G6ygD7vXjatTEyDV+Rnw55y+pQ7ptto8pF
CenF2H+PN5ptvI3QXvEnnWKPJG1IgJ/QCAArTJKAxMvZ6dT5iNXjBFF6mZgD
AgbI5eag+0N6jt61oafsHU36QNE82zQQ0iLBXIzcmp9eA5L4RotSBZWUEswT
CRgwbsPSgHgyKmvD+Y7N09A0LDS718fjVyP8/9f0/5diw6d3J7AOUQG8O0ZR
AxU13IA82TGjI7mWSrYb0sOQ6H9wRKo9YsMSH4xwU9SUlGpxwwKTW/2EZqF6
lMVGenqOPSXM0NEORD0F0cv1xBodXE2YaGITZUURMvaHT8MsYXGvcdPtLsHt
AWQ1Ez0KsDXAX8BCkpBnqskxquGEGVZOMxQt3HI3Ma5oVhnHQ2ZlwpuIVwBl
SU2iQtxatCN8DhT4hqnbG3QsDEUSEl8kQXRgUuIAJhVpakJCWo5JX1ClgUQz
dPO3XH6Ag2JsG8J15hw8qC/0e4BgmsZwnF4vqumnJhEVcpNjbh1qxLPgLI7Y
r6YAYYIQ/GgTTg4vrGHD/Ez+eUW3hFTBfwYOCiMVkAnsJILpRiP1tFhm0aP0
iagH5ejZExABuTAVo4BJSq6BrfeDScxLBzElhWCYgkH9CZAbUeOGz/nIn/NX
yfYFdAVqvnOMs3aOT8anZ+Oj5ztMj5LYd1iV96TKEtf0x5+PT0bw/6dn+P9H
z9WzR9Bc8PU9DMtgCz87VGzDjKOvoEbW3nHXwVGAsSU6wmwvmBPhUfoW0bR6
UYsP1Zi5EEWWhlPdeX6tJM+XL/AfAnf4r1ftqmebsCuI2khgEU9V1QGSdovd
sq/UwCjJksk1nu3jNNvgn8K7xghC985pJ1GG+KvKS4/NYUxYguB4f6g7Kmcz
+mq/zD99Ew9ObDXxw4EP558r8knlv7Guhf1gJi0BFj18+CNOXx/Q16RGCL/H
mEBn5LqjEgo/JZ0H0MxpFg6TTgf4elAzcaRjCwfpRucn0fjyyM/APYrnsP80
6fWzdRoHR8mgNMJ5YsTXQsWFMfki7EZiiOk1CuIjLKUjuy2MvNWd80JnHAPg
3DGIDXLJwOByjcTDyBlg6TuJ9iWLjyoZo+moQCvWEqR7ojpw02R9J/tVhNCt
NsTg8DARgzPgPtH1iTDdD4fZoAvaQ/IPdiYhKhzF1ulugulr7JkLcnRbJTPn
7bLBhPUNVsDcrUp0ADoXYctBrimxRxd4xJl8uu7kvElkicD+rBCDpey8Jk3h
xnoMGUNClBQpV1GfyB7qwVTQ64TDbkIfhL1crEFIu6eHKAtyKqSIRkZsqcAA
UqSiDO4jI+N8yIIwRl6LRFXnZSxyh+r/OO2+s7fYkE4vjyqduENWakmsDOv8
W0uS76ck6p7OQsiBv6bYdOLnyGmAOMNxUY6xu854wdrlU2aDgOWMxLFZWJU2
RZRGVQxTpAKj5RMwaFAxnhzZcJ3NWrYaR2SpD938yJYV4n29H5+MAMMeHig5
iV0wH1YpyHf8Sccb82uaCTbgFKLW/arxRv2InD6OADxbYZQdWu6zpXggBwuO
CcN4o1DlgRraRSvBsmrycQkhjacVg5H4UESB1ChcFeWa/UO7wv2GE//SOXw7
pY1xfyC5neek2ALKMPD4Qf38EannR1w5dugfr1a1+ZPJ4UGstzeK9S+CTmQF
gWgJnhmzJ+UuH7/RKcNCXW10G263V0Ojeh0IESFAb3zhAw3HxXb7mg2OyooT
oPlB5AJK5C2mxGh0bJ0225g4/pwuORcLxeAp+gMpoAXW36wXlqEEtceYrht9
s6UzVVqjRxBlTKXRnVpdEQlR38VM9fn97ZpmpXmKsAcWUfH9Q7GHf/nC5Vep
Rgo5IMm0tQNdVjPsiX6tKWQt1VvptLa6HOqDhiil3KuJTl72f7B2q+bim4pU
x5f+OqupLjh6on71pnSvih5d/7Lom9518S/gwvyFOpSHL1NSIvMl+SfZOXj4
fQwiye+RPUtz/pMfFE02SYL/A6KcMWslERwZfSj7wykgOgUt9KWLNA0OrMd6
vHAlipu8oUxWQsrEuGJvfJ2Ggg3LjDs7xI089EXWwTIC09b7m4tJM7388PDM
vgHPpc39GJcczot09ruD2xmhmURz8nzKm1AcJ98C65RHgtPaVpw4x9Iw6Ze6
FN113FksZ/v3b293Z2lPKxnv24wd931Ads/U6HH/LbD7FdBNY9hFjGOlHziE
WiQRq85CPF8siXjQ8JkSf8DERJy0mwPC8jIkCZSIohQ6YNPGNFuJ/Z4V71xS
6lO+IXUdlbpxdVH0EUYwaQZujtTu8Z0cKSUHL+x6sSooOjit1Q0ws3un63eQ
XdA8JcIqVBu6KzKDJGRdy7FEHSEr1GgZEuQxtOoON20JbK1mDxaV1JwDamG2
lP3X+TRDAJeoda5vwjumHVgjlzebDLGkZuewHJ4B5vuvFncUZF+SkglucZS3
n1HycBvJ+E/ZPowu9U/WUCvrYkLo2AWHrPGW559XGcdnRbVykPEGAWYpyaK7
5SDx6Mn4GTcqKGFXSKwF1w1msbLIq375o0t83wkW7nykSh3rVqwsfB4tafKv
fjHfYBmJPABYub9lZROfDGz7AJTh4BtmeW/50wLNJiORCDOtGLqjvLh41mtV
1rn+GTKJC0KotJCjeFDfIp580bgLgZwoZijnA3dYQtPC7Kfj9H0Z6tVTYg3v
sINS9Fzyy2RoNQvfcloaV3ZkmeeigPO1Q7NgZr0t5oi3FQLoJspyLAREUgpG
/gW9/OYjrqJmmyPz1YmQhfJmYySlM25yAKt+F635TF04qUObFolE/WW5kPVL
mdcRrpHuxbG4OIUBXA5iV06oAaYOG0yO312cUT1C9XxR78Krs7MfJDyESIWm
aIAu0ElPTlEuucIH+uoLpMRrKRymZ3xBxl1BGQSvQJKy4Li6J6UjlU5cb7T2
CHpxYMIfRS3AdJCDK2ztIWytyiUPbCwHtwRVBqppuXoKF4NYI9sqSVCaAQy3
ut00ZBFAhQyaMWr6ZSRNPguw8Z/cFu6QfNMpwYQMi9wYEcsoxgzFWN4PjDzu
H+fb13yacZkdJZ6dC07EE8/VbLkKzfcYioV7UBWlBUvmUoZUdeBchQY+6/i1
FHExO8wlVjQuZwgdshbPupaUhnXedAp6cd4qSrAAUOqdblQLyRU86AqI16hI
kEaRBbl7gl3xyQTHHSavrgJJrInqY2NW6HfKKxBFHllQSZRC2eUzCVkd8XeN
ajy55iGxkSB0p0JEpxoiJLgHp68ujo3xQbFttqiyhvOa8FN2UvC1KV2Vim4C
pS1F7L5FMuPAzjTmGh03Gz8n/nU3TZKh5z/GaH9vi8biGz5R0EqSqEf+x5Gk
O/7Nzohf7f+U9D63Bv3P0/TgJ5Mv3fDSQN+Ez9P08CeLTP1OL+jPFYCn576B
oYJHokYRX8YbdNIwZJZrldcUv6TIiRKBdjbRTuV54nK+ySdMT8WGvrTympUS
j8RKmlHk94zd9uGeL0xtvdWP2dsSxNDpfJe7dQnMvHAi/Q+48ltRJz9X0p0Y
sZOKWqGeDWW3l3xH7y5ej+RX5F7EUZeuQudsxIrI66K0qC7y2bqvXHzHt4l1
4RDDTYBfi113+Kf59XqOIWKYuVhOf4bPxpzNWCUvrd3G4eh4Ze4x95AXwfkJ
NUYvVRTECvNsTXwo7m9Xx79K2YZsXlbodhQY/Ot1QYmY2yqhSqxkJ3fDcyYu
EdJ7o2mtJFQMw8JHSe+AMFNeXdwVi3xO4enSE6u3F1R9jD7k5XDOgATw84p5
nxGFWYqWl5MbhxJMKJLJMNYxrRjwcp0sKZokeKSG9BYdVlWsRepn012jFuuR
i4QhpLOi4R+cZneDiugphpFSJUjS/Nl7TiJsDtD4ESYg46LuZcX9StJl5bYp
OkprWqO4KCP4b7EyHae9Y6W4K9TLIlOoMiGDyPnNKStLGCDBPFw2P566jHFt
eeYNXm6Q5tGyEVzY90gpTuIdfoNzrlrPs0+55GzBoM41xp/G7ANz+wnHa7TE
B9wMLIw0ouJWhXm2MXkubfzGRXEl5DwzRSaE0hGKf0RmZX2Yr8iuG+9pyYfv
mCRJAOVrd2BSDioUQ062nBL6zuXG5XlymjuxQzKuZJCgwrS9TCt9ZiWLSkVk
mtD9QXaFp8+ohCxbkVGzk7hbiUTjFSqa5zebYT6/Njdzlsi/5K13T9LuCmsR
Y2iJMCtavV26dWZJ8nZ3g4j5J6ubwKj3F2Dp6QfH405qE5ZmJvqyYt1LZaHn
AN0WsauYqPtFoiGW3AX763IJFXT/vLmhdMCXBWXUueWcHCjrEOxo74n1roSF
FDw/NDIaRsisazRmcbVpApERN2jDAhKNTGahtKo65sOihB9Fmwkka2U/Ml26
wp+cyGANwFNUhB/xYRyGkvpuCXol95Ov6whN5mvAoQCKeWJycqjNGwZJZRC0
RS5XnGYhfEspF0IRTRx8zVa/2hXXZK7f1bkyP34BjiRATa6hUcEI6Ut3wS1L
7Eoari84nRSFs9+kcWFTrxBSBYjlu1IJk7FDv49oD3qlZuNYTZpKEsgOL0R0
36vFutZ8Bb1LzxIZsodJqI2LyxOBjWl4Np/X+dxCMxzEyI3xdaAtPyKxBPi9
lJ9WfotSaDJsxzPfBNdXEymplq5WCZda8ylHWdDR3EhOzkRqiVvErK+Ii0SA
rYPhbER8dZnHFpuEEbTtSqgQQfMY6zz4lwTtRDR/EzTA7CyD6cqzTewKgiiR
rIGBavBoijZcbdhGccTQfVX3uDMmDwlhbcy+EU1JTOERj2wkObB1zYi4f8Mo
QnNk95xiQgVplSzMp/lUcFDiFWhB/gh40jFIFDzVw2LISCYCLl51K6xIe5tb
XQFObNmNlDfMsuHaZEpApdGKyiOKFmGzbRKdZQm+RuHrv75CYgU5nAtzeGDV
d6MGcs9RGshnewAa9cAmp2+V7VpsHpgOsrnRyXdmtnK92NzCDSUek4IYarmA
QMpWAsPuNCYpavCTnixmMKI774W7Xh+4ioRLb7kCLhGJ/U9vLO4m72VvJ39Z
a0Kdr+/p9ul0LJ6dzfVQ9Q3WTy/XBYkwesqakSTpP/wxnTVjhfhhjYft1sOv
x7R3JJd+7Uu/1q98isbTzRj22zeChYRJD/0THYl8sjNKH6c/BZAd/idt9Cto
tO8a+dVtb+S+gvYHvr1f8/b27ivo4NB3MLgTvQ4Gv9p5wD8n+neU/tS1476y
pAmsRdAkChjVpn//wZTd8ivwlUUlZCMs6zTSegjYE98Yigl4lW7F0XDshCz1
FZ2fHH7+4fAk/TWvrO/jt+fply/wdAJPYdZath4TnLVA5kfkbyV/Zgt+yH7k
mCgNgxmJWmE2evKrqLC7Xy+fH2lP1oi1xpRhjIrmiEHYPk/zxQL4maqYcUPU
8tggmum9JnJVkEzHbnauV253m2daJomqVANnpbqQgp1YSW1XYqUFjSd1Zi/Z
zKzmSAff3ZvsTfroZlERXzlmJTwwceNsLHVzxB1qhUGxwqBQhQZMOL4gl7qq
NDO5DYoYn/J3h+1BAtDksKmadcEOzHhTQr5Tzmwtld6QoaWsT5iFXouEUmhA
ouXQ+0I9i8Khy2VRUq5FKuGzrhtW7dR5EsjnImuknMe0VffHX99epg3WXgZk
DczCWagCSynxWxgQekrQ4TNUFvFOMXAuINOGzAyyNF7UJKVrZV0loQ+yYWi+
/YyUAZRKdRxOvFgaG711eNPAdgyKoewVdpOwMCERWyp9OEOopHKdYrgNcfL4
Pb7Auom4BtX9kcTD4cjSZgdYxE957cq0ixUMXfRobFQuwEVg4QOXUmgpN35h
FfuyKYiDTeGxhwIQ7xzn3EKNjwEGmzP0M6uzviVkmZTF+vH2SOWvE2Ib0Giw
PRFfm+i3hRgrgqKklZz2j58ruuq++KeAifpvFM1sbTPe/okiiN4LxgO9x+E+
wKv/wF9jOEAbcE7zW2OcBlAIW2aX+OkLb8lA0hvW322gL1wLpLW2K90G+iKy
lWAD3YleA3nhGxy5EdwexiOMXcsn0EB3tDeCvPADpE+hAe902m9AL6LP0/QZ
NAhn0GlgL1yj57iGeZ7G/3QN87zTf5q+SL1JCS/r+xWhZM3iSb/EmLTDv3a8
K7bWCtdSVYQRLDEPX3pzMk+YUPi4QLi7K/IM6Eo8ZqKgdMSEx1kI+ra0JDRT
l5gEgHS3s1KynF3MKiJkuuBKfuuS9feO8+AWs++3LDgUSu0tCwMziYzJstJL
ydPMwoMqOROXEnCFTnkNua9hZjY86UpVOaQN+Zat0RV9w+ZcIqzKxpA9qoEH
sDNJ/MWWndGUPZlmMGGzIoFXMNs0UeiPkAHPKrIeRrSQIUsL9dXkTRPqTzgV
tey2ZJbKyEaNYIo5JnZVac7TLEJlZ1b1K0dK8T/I29SSscWnwAvVr8uNxbKI
IkuaNMJbcaXeUCirkUSA2fbkBN+WiMNOQJNm4J5g7/8FKucO2lkfC2Qyx0iP
d7vyAzoTpI9O0akcyPqrnMwtWJlrhSaHbLFr5kl0MkCpgr0NKDfIV9t++YLf
AMdNmQ3Sf339KnivieZVyxVkHT86DXwRUMDrFlwTfAKfnv9ClCY741mqfwxX
MiqaZs2vf2Xz0VsgciRVsIEZv7FMVR3nROa8uVP0VbOqXqJgdVDcWRAZxere
FDqNqnqelcF5LjYPuZJYob0rmUUwHwpiSX2T2FF2uGXRhmhe5/s4sPvMM8eO
maU5psRTprwfQmLiEHL+FmQi03yzWwvfGTrAr03KJuTsKjEwwGTooDzcaWZZ
ik2+yblIkJhINPmYRKhT+syGFVqRJ7SiSi2vYYx+KIxhaUkxvdO7V3ThaTR1
faaJmbTsAMAm0dnKgbherbfA2QtFEGKXBXZ/ys396+pW0ybIM+sQh3//7tyU
Xm58cRmrMPqu0wrQtd4ZxjPODsI6A3uPDICcS8irxOuPHAy8kd5U1RRhVofx
EZFQemoexKYTtdZsS1dkf8YqU1xATI5EjyAcN6x/1F0QRa6ywnrT75wEeAsr
IiGFUd23h34RIg1Y+i/pn+iRZMDH8JXwU93+8clHm/dLDeAcr+sivNeFfKS+
X3IIinD99IFbjf9mIEpA3SleS/iDeatoPASRBPsRp1Cye+LjOtmmJN3KTVc2
SN0orygQz3oVT86m5fD+6OMgTlunpI6xjzkdgzEzoSIfy7P0nXluY+4+DKt3
T4lybdpbq70K4Nc4B5Yqco00gNGEcX4EVvOQAl4eU45idC2laBXnoyLxbWkV
1btCP6Yow7jI5ZtojeJIZVPsh9FFwbu41aEKQmaV8yjIc8EGryWhGPQWjHxv
OkXB4yszVHkcZX+0J4ajVUMi5xjlqRf18ORN0aQrxuxA5EhCFA7nLT4IRPaI
YYuBKG5AH496Xmc/NDSdjCygIRW2sBCzgSRuFhxkRQ0zjSiKFja8rBHuO6Mz
yirBpjCgadJWezInXV5FGnmIumsnfLkRVi1qpgheZ/vgQqQcOKWtGEucJk9k
JJycPqXJabwUXJ44oF39HbphVCH1CDEiJ9Xx2/SEcxdJmS7Lf8FlnA+eUMlm
n5WvrLidyzHcSUoXrYnnyzkVw2aGFj6Sni/1Z9QJkqcMOYET/RxPAYDH/Cd6
/eQSmTNMrX1JJMnlSHyQgaVkbAz7wkNv7wXou6fmrJnkRv4b31Y3cnCTXQJ+
R+5V4emZBARXLvUh4KNpTcbKk1ChKb/nI1JoUlEBTTmDRz+yfoFUTdV/ziVn
DnlnFMosI9d/svOo4g6hB9bd0nNpbocgKcKitcktRCUwX7+M5xdV7urcIp8f
B9OXh8Rh/euK4GpXNmCtgtllVqGylsW+CmQ0m37K5mK1iKo1CYEVVqjfveRT
Q8eoTgFGTi/D3h/o2s7RRcGbQTBEFGaq7vsEhyFWO8JVWxYKe/JBKXkIvXaJ
inCgSCJAhcFmga77ipdE+sm1yA4//3aGzCYTmLLwSEOK4yfImP3JvhJg/T18
peCr/JukZ6O2L+E36m5GafSKW7wkpd/331tH19VsIzlrtloLu59T8pqfgK1L
Bt/AwiX8n36utRzitGrui1mvDSW62etluvm2zi/fn199PCvZ5+Dbu27WRTvm
rOPAIo2FRRurow9pePdfdJRfxrVauSV1sL9X2ECuNfz6BrZ1BPeqackrLZRw
8hWUewHdxCzmn7HVAH+7laPrJ1ShzFNtE1L7dZg9K3DS4Yy5IWYRRU7UanYb
rb7HpFi9gG+b/8Cc4+SCNskZBziaUdglvxvmQaPdZtNYFiVcMFQgWPcBNNC5
7ZJcJkYNlzCk1v50CWCkc2eck7STPRYmjA/77clo+oswFbRal+8toFgXqBPk
pL9DTAxg6uPE7Znipc4jRkzuoaGm3rP/PHJyXQX09AB26n7P+CllBDX48qso
amgKg5gkRhGvw821mmkq2YZXYykOTzJueCxP/+hq5zITx1XACjSQQ9VWkrHE
1UxHptijEXSN+7ziQLlu0fRIC+UyOkqWg0ZKDrGbYpU6F0ieMuvZ3eCozl5P
p5Q38yYrFmuMyMM/qPkaaM1kgrxYqwZgkYriSWtlsTR46lGVeqcZxbbdmJBR
QA8oOJofY6doliTe4zAeGXXmlfxRQLhsAWKze2mpbXgU9t6OHkuxNNGawFZc
XP7QbJmd5V2W3ALkk1Jdk4aTNQrd+DqaBurAonnw5EIschDPemEp3YwFA146
pEJkeLCgqf4BIV7VwNQODHFE9zD8YGLiqcIJyUEMKQMDBZ7RQiJlt9FYo7mj
yNOh6MA99Y+WFh1BOXe5UzQplwiKqq0X7NTf32IBDU/dZn3VNCbXsQJLIqJH
ygxSTg0rMrreLVMVKMN1M57A+pSrF8pItRHrYLhMVRMRkzLCmfRRQndRljbI
lY6KPI8i8LkVeqUpPBAKSUBeX4vVDwtmqXsIlVDFk6TMmExK7cvOnlDUrnf6
8cO4TmOmQxJkoDLk4lLqPW1C++7yg9aaW6AYwdnmzHQ0imtyS3SCi6AbBXFE
z00Tt1mQT8+XSaN6m6IOKdE66FaEugEmkWoRKBYkV3R0ayvm61oUhUGBqVsz
QnxccnY/h5dER5iEelEx96iZ9gLtIVRMdotFRBYUSBW1YmmqxWagcWjkKAmt
X8/mTkHzOC4S6jCSdFI0XeUGqZecRmcAm5FTIB4vVgfiuEPK+iP4Psxxogns
57nkxySYGejSDYhJNPPGVcjxeJTT6biKMVJL/KurDMmqqXI5T1bipNg8RqXJ
Qje1VoKl/rlRv6YHe3ZjFXCAypGzDzKxXg4haV0F3gG5uKEUrlS51WJdTVdx
xXXXJy482d1BgfruwRCsNlIOsnlJGUHGHniEttysF8lLLDWhUc72+OuQdtDp
EikIdMZSiz0lU5TkG5xJLCznjuSPcpcKy9B+D+EedsaieMB1OTycvJRScBbT
ktd1RbHVs4IV/upeoLccWQdiszASFgY9wkGjW4Ahi60M6uyH/hudQHYH20F4
6qaq3Qy/Kf3aIxYBBvjiIJAY049WrKEvGYB/Ry/37a9VEPFfMIi+dCna8G29
jtq/pHHD7ZHn6e8oWvQf6zg6ejHj/tM97ysxct+8TMPfJB+NSGpxD6DTsK9j
B7pdD3r3FXHaD7xHl19MHtr9xO8Pg0GaJMOjp8FDjR+aDxn68HXnYv+kDT70
TmcHcRudX9RGHloz9OQbmHDUhp+FkdCZL0oPF/SOj5huk0wmf/4hViUNTuN7
jLf880jTyRB6NVYF0+sfR5WpRX6rqpnSeYtD4pwxYuqHG1uSMgpji0N/eq+W
69JMeOK99KEY/1JwcYd8scAruht13e0FcOR4RYXds/WsqJhwAX2qUELZXGfT
T/HMlHkJaTWqumD/F9ezqLSRJePKinGCGE8CpKSaYwGFHaJLSqruORc678RI
GlOl2Wb4eMR8GyoEL7PVXnX913wqxhgUqTfsiR4SC171ai9pd6G5qPapKBXn
9U/ifNaoNjMxlJ0CNP8/jMcV76RyswSDc4rpROUH5sE0r4pzw+YIUKbdbIDQ
rzgDDZA/6DYhPVNcKp0tdkwOdEmuiiAp+sUmgHJNYjZFmUyNB9cUUlJWvgwj
k/GbkkTc+KfJ4FOS7jmEyq4YF4JMJP3yQkL/G87DoDUaxTODEutqgcBgHKDy
g8cOMgJhoRcleieZyURNn6wHLCkEoyBjkn5BufNhh9HgIrUAZ8VcEgZlJAmS
G48bJpC1h8pN0e4HKvYF60khdwV/h/34A2hW+PWjGwXoxRtayviKjm0vPZWp
jK3B+JRm6hRQ0Wb7KYf0oTCzCmt+oZzlhhN480kSScXQ3ub+6rjLFw8haZg4
rZaapJFJVIcx1V4Csoa7zmmqpOabCAWENXweXWofkjxk6i47XVSNNVdcyBen
YxMnrWmcL2qXxqOMcpgGC3myZsWux5V3cEuvWJxzKc9G3RogzMUdX11Goc2s
1fIMuOxoVJ5cNbqER7p7wvhOgrtd+HrfrB6yqKs5nNobCtfahopM/Ztgl7Mq
gVl6s65V9jY4cYHyGjzrOheo8EnUs2EY8SZfr9G2pvKb11B46UaVESETqzlD
qwNAGLKQonmCyxXCHAIn155ZLsMSOv9BemJtYNxeLxdfyZSv5Jfv/A1Vle2W
2VB0HpcNmpmcEF+AIGH5i4ROw7AHeAzB97LbQMv6ZVZ2N9fyel2QJXA99pH4
X77gs4l/9scfqG3TnXBk+Gb4Duv166dCusbvVOAZuvtYKFeEp/Iu3/AkccFA
kRbsfrhlSHbWsOyVZcWCznUhOfDKmct/J3UNge/AcA3UMTFH5rGDJOJnqi1x
+yqARiGKlPIBxKwMJd6go0pi8hOyQlKBybayursE+12g7+A1lyKgkjRG3bPV
QgKcYEndqDAHQz1rgvuYDNNwEIF3hVKAajSbZ8cxgZehLgsfroiSys3/DX5y
ARi/5AAqzFu64rN8hZBAhZMUfzAa9IwH1Xtu3tsxgkC5Og+IxpPveNqNTky4
k6GlTRJ1GY0WoTOSb8VhNPIP4JI72Tx4/8Pje4D71aDLCeJH/NoV6wMM1Gp0
YXd02uzeaZye/TwiwhDqG3sXKoG5kNuTnb2YIhlkDpyvKrc4qsFWhrGiF1da
8nj7Vvmtd761IUIx7FqUPz8wHNgD7xGVgyoavwpktBBiaZiIJZIlltRprjUv
PnjMzgkjo9rslNNOMnSKvRcecc55vk7Z9r3iWfru6MylX0w4eqeWXp+oyvZq
huE1y8KxKLrdW2bud+xbZt6/BxaHPKbDYH0oTSWU08KI1yZypmvlMHr3JfC+
0Vn8yJvlnyVJ71HKaR2pY3owPqfLOaYvhdGlT8KD/ifS8bYOtKISWXW//x5Q
jLxl86508eAcfmSVjeerB/EWdfK/HW8NnsNV9yZucegbdbW6eMBiGaxqy3oo
Dni+d4U6KUGiTHl/NjZ0qN8XpDuQ13aAVOy8FG2iOAEKGMboAUkKIzNSoU6n
VS30Xhw1n+y/AM4k2cHde6BHTT1DiNIKyAV3Oy6XJkXq8PJ57TYTuqru4V4Y
F/7/2xbi90jlNgKan9dcLreJEXURymUgGzFjzS0eCEnAnUSvzBWKRbXBsxtE
fW3XbzPc+gE3z5C6RLBAvzBSDHEWbkFfBxyFZIRPyEdaDFELzg/qOgl5YFSA
M5fNwaG2D+MPT5B2XEhwCGVHJ870q+G+o21THNklhMPIfUzI/VztUaycF0Mp
QaJRXqYCWxFsjwAKEut8RupnmuLLlG5euif7hH8gBJPymSc/5sm/xKs3fp03
DQaODuVl6WPcgEAHG5i2AvGvQD2qtR/sqO9bExS1lNpUblLQcagGxHjlnvSF
MbJ32UKs7ZkXR52ZNv88zVes7Yh1GiaVqBSGGsN1qwovA7rJVvHPm7syVS4t
s1k+XJ+ai3jRt2EmAp/RzDjdPAcOKC8UyZM29W4sxfD8Y82OY8/aoBPDXlVv
aaoxfqc+3rZLNnxnQ3vtg9LQ6nC42sxh5PxzxtYzYcHGngXLZxa+RoFWWs4l
jG0FWrwiOGsjJRipUzmc0zwQ1DoQkk36i98IaY/2wirZ1cUS00mi3GfqCpbo
JCWUFvjrJM5kFQrVYWNfEVKoa+7yEE2wgsdUVS9yIkI92JLKDHQahmEAQ15c
nlmRFELEVEEpvcnvTWOtw1C1AtMRmTdV7MxIYIdmZDo+1vTLdsQq3NDv4QHX
kbMeNWIC62uoK4JZLX08e4i4a7RWBevRUfUcBqA0j/R+JODBMZdin+XJtRKE
mdsTHPa+LtpWs8kS3NBxdHa08VPGLpDI9/SgQy15v80hGL9jTd2W7Y2mrHVb
QWhXDz0p6C7ZVfWcGTUE4HhbV9dYGF1TYLoUNKpwQ5/U4jM05Dp+rjbOnHzE
XDULvVJyAqIAv0RLwX1BaeU4YsmyipOqg8LDxKFXsmmHXNGYcyZk7v9ERe8p
OHoRwZ6W6eURabDrXBGfee1ZAQ1XayZHL7qpe5ax85nmIn/EZnG3zN3UYI9x
kR25VVFkkfzGb4ZMTWwP5ODAm9BR4iLTrB0qo4ewRyZ1ghGBIipUIHn6u7jT
PPXQCHdv+XjglyiHQ3kNBvRv0aJ2JQrc3QCvwE+G2OQR16/ESivt7dK7vLBS
2UvMg5Sly72qIiLSbUQrl7NgvrGhSnj1UCm8VkttNVEKd13UxBVQRh0iizAd
5C/tCVqwUTMw3V4la5S8AMO3Czl9rEkSJc1Wk5/kLu7IcwNkxU/Dpn9V+SqA
/X5sJzqdjcRbzMdtR8FeTHGJn1U1LbLcxFIC0DArGVjvjr47lhQuWg0KQGUv
wqdlh3kAbqijHpuB2SFQE9ZJ+g/PsE6Fjx3iWHlgQoZ4jcZkX94n1TQX9QA1
B6w+Qv9eRJojy5OlKZMlhW6G88KChhuBHysB+79pVsExj6O3BoyVDC1sFRu5
CfEM5A6KxIy18FL1m2Q/a8qTTmG5wmPWWHKrjcSUrXZJFUbC+bJzPzL26IbY
pj/ha4Ft+PfSu8jEheW+S99U6XnIaWuGSLNRKZsmESOS/zYEWNs9CPgnEfN+
uq2vblpo5Q1DVoiiTvjw1AlLarpisC15FJPzBh8v6dEFy0wtqLOWK4NWDwwq
5FzFSMBx0A1b4u+qYqbuZZ99bt+kpomyyx9Z8++Q4TQPQ8Xqlno9OBd+Z6VC
rFZfM1jKR2V/DGlUJX9vqyTqlQNvk2tMat7QvMiWiZneF5o02hJqBEIQeOyw
fVJ9gVP/+RTe562UbUSLDxaeExeJYKPCsTn5oBTio2S/yuzKcdCNDW0knbsR
yk59BGXdswRJbKcrkuaETOOc8RO0W4qjDvMg0L8Q44vLXc3hbNmZcN+rlZh3
BF1Qiker7OmFDsqet7HsROTrw1gClcGO2Yg4qK1rgqdLQKSoxZRmufnudJwK
sCapgAn7NsD0yBnUaos7QuApAznXiMYNJXvhBqTAciyY4WXvxIOamzbZznBE
NCnB7JTrPGVyoJ2JhgTnGTIQtFzEaao5Ge64IAggG04oaB4Pxm8AKse0btCY
2PuNohdLEM9a3tZYK068jgJpRk5Mx85ueObi+/zzd+qPq7FpIW3Cwx2NeIqS
SEC4bcqBjzSEq+ZFkj8JM4NDS/wSrRvkPAlYgp0igvTXtthNElSMsg6SsdwO
vN5Rp6Pfui//6l5e0ZqwclKsjiGAYWJZcHYIcmYDBgRFUS6DrQo2xxtg0QM+
C2hFhkhoBbNjVL7pkttO8TWj2Ek4ahQ4ONE5slLTNpALQtamLlZDO76RqI2E
ojaoPqhWLMAavc1tiRiQ2bjO+OhtZ1tuWfwYRz8qMi3RtAN/anY5bxGTBePC
i5AWyJcexASZ+bi6GWtmzEjXI54jBTnHuDS8CnNwTMAkLDhQLOZHCqZCVSNv
mLPwUsWNWigNN9JZ3OYLCr9xyV61bA3ne02ifK/RgByPKhRWGki3mBCSM9fD
koEvTy19F4WGRtFvVBwmk/xwRDHmuWrdEk7IizJt8Vk+ZWGukbx0WcgMyzk8
FuS1EBKHXVliNueRZ6kYsex7U00L0m4rVxfueVsl/vwAkUtqVCrlnVodTgYJ
63XCl1I89fADUjXF2X3jrIETumaYNZoaJdoIxf6oHVEL85QLKe4c515kWn+6
KBNqHYYEooM9bFxAm/NClIS78YiJxsJat5pIUsq9tKZBRyfb9OnR+LqwZB6J
pWcziM9XFYJ2QYkGypC/jRPsccnbP+2N0yePHwPrCWdblckG8G1jgjYJ4Lwm
mn1na0MKTtLqcUb5FcIEZR9M5wS6cn5VqVajwCyqd4hcCdjuicuR9LauKJxH
sPGKf6J7svw5pm36g9PefvkiTxvObmBSHwW8dUp6ZKl8TAKV/N1xkgI8J5m/
ONEY2QvTC/T4ulJ7GeMSTPJFYl0In3DFZGcxabaBj6kzHJQUjIbwHarXZVgb
8ayj4Hdk7rk+lZYNgN7aOvcuvmUV1ZWxUjLIQczCFCn1DaZ4RB0oKYSoSFak
xY1TG9mehWj6ShawsHp1m+hLDTFUH19Kxti6xdFwsiWSwia7bqoF+SsBti0p
I4nmhJ7osXPdJgoV0KO/EF0tHozau/qhXLg/tA87AKYfZRo71IFSVVGtxDQx
WwBczzY+Jc6OtbagdPwSuxEUJ6nFNt8Unq7wbf6zLhtZume/QCzqpZ08x8hH
vFDvG7s5hTwbA6YD4grX7IdumhETSdBYTnU5JQGfOUlGhd5YaPT9Jt3Y6dJX
nmLnUsojBc0xiEnYTVb/65zXaIFLIsNM2s9oQFMm5yuMXOVco1EeObYsMfLm
zNolCQpeU6R5tsMCCeAAONeSk2Ui4VS/4m4XU7R8y5+RO5xLtBnPgu9mK1px
XXfi6mJJtfD1CsQ8lPqd7EmVnJqlyzTPY1JeM2a4sfwLaakkpj0CbOucb8di
M+Zdc/ODfnmVB2MsqMyZ7/BNVPnXvHYV2qWKOym57lNM1IQGCYGmMJkqscpq
ZbRfnURxtRvYEsWlGtPl4KvJW9GXR2VGwtZYVjlWgAhIaSpaUjWu22g8jTh7
izNFikUeG27xWl1H3yvzEoBGAx9RdKb5cdotgvVEzxzW06snHOn2rWwTRtPA
FWBkjUUP5KYZ9OCMVPGWKYMi0KKRxwZEVLSqE9W+IqdqLXwni9YouBNL8gmI
pAHxGnUsL91jqjexbrEiAm3Qo5PjH5rdNJpVOIzGRiM+q5Ae49yycZFL2JZV
VtRNels1kiPZyZjA9pSIviLk1QEo17MpKnBuqGV7dHL5DrMcP5FTBxEB/ve2
aiRfshRQj/BUZ8e3gDK+mVIAV0lS0Uo7X1nn6aO31dtdfwUn6euKczVOiyZH
biJL4RvWM7JfS+quQeLKFYpVLnCXPd/j8R2JvWRIodmE+9LkVH8WrZVhegmx
RbD/evs+Feyf4lcs+17mmFKgQbYAJkIDEa1PHgQ9zPoauCAm/p/yjZEgXrzf
n2+KofRYIlDM6KmWAeo//JGJKeD04Xo8EXraG04Q5W/Stm+mTb1lhFW1ShKd
hA/dk2dWRTnFMspuNlZAOTyT2jvRhOQz/0wq7OCc7J98Bs+6uf9hgr3P4Jn/
7Ikvn6MqKXIvOBd098/5plEfwcAYs74EmFQfImJhI5FfCJcZJRVRENTj4t+K
WvsNY00RkgK0/3+ESbFr3YvHmAORtAs9p9dGHRXTD/l1ak2ePdl/xk0GnBgB
cPmj548fw0e60CyN0AIcxh5lJ9C0JszlCE86LW9cHZHbajHr+crg5RFuFYak
EZ8/O8Jpke+96QvxGxCUpUIrj4Jtn2tCWJ9au7+5RELjIrFk12Q6oAm1rzi9
aL7EAjBTPGY0EhEqW5BcX8W4kxUrdig+fbxlSyVpcMiFsAEhEE1eKL3N/Otr
9rWSrCuaIygYnSQUZSyhKEGJI5L5arFuhixTqZQz0KVInVDnb5S5YCQiUeJP
5uIH+KiogbCyrF6lROVk/aBuw6faScMfmvynmUhYmm98kIpaCDn/yH0F33NE
ibnlsNGTCJfF5ri5+/CLzlO2CHEEBBZiRe1QiB8lS7H5lQ74Rw11KGwjy9lD
bsG25utcAwNkb5CbY9dBMjx2twbVa+z/PzYswXptwPvirhVH2LHLjokISqrM
UWA41KMxLSTy+xOzIaF7bNhkF1rb9QAYMluGwDzxAB4wYZu9SA6Qjs3yuyEI
9CI5SOEcO6Rtj9rodhVHOgx01fExpRLOOLNti+wmXleDiaAs1IVJcBAd8BuA
5eKzuOOaF6vm4CWdAcVqmNbEj0XLo27I/6Tr3YwUIpunVz+fPn180K1pZdqM
Qtz8ShxzkbLxEfkVRsOkR6zJBGY2cfJq/XBr8XwDN1ZDGUTlEb7AGbWxf0PR
Dvt2dPxx9ao7B7ToFCKLOzkmxcrZweO63rDNa4/NT4z1MOFKpcoDRrhV3RvP
YWbyQbL0RJxgZVhvpK19VHUSykFz06yWcyJVZVFuG1c4ADlZrn8M1KsNznKI
yBD+Y+v+2c/qGNwA74M/JZDC3IXp4XtNnyePuWXnU+Sevns6ASB7NNRmNxl6
iqP2nYmd34HzMLYsH4BezLfZO0hz4g3dHlafNmPc2ZdSkwv//YnjP4CJBl4P
0/6NBUm4BluSEWLUycDX5OmQ/oEe0Fv6G3B+TrZ0Foe4dCPTySwKEvysqhsx
fSCRZxugcC/IjAIDASxQMZMSjmYjJBInUpHANeWtIYbpXi4ywAwltOMPIp7M
CYQIfXd+XInVZnlJ8T9yonu/qTsqZQHcVTdWsdUGFZOq5QhTeNSEPUVjoSDn
9cBCqTURHRdv0GxDnYaaqsjILiuH8RWFUm+W0LwWBlRMWexmQj4acTFb9WbI
NDsSMUSnlHkWhO2q3Cwr4Lm8WfbR6fExiunfGKzr9kczE6qbdekhIcSUknLS
eVnb6QdD59qSPWGWPkOhgOEQPkL+62C3xdcWPk8dhURxRTvpRsWTFGz7SgQk
OgcNNraE+eKFSWxxp69e8jZYFxs2LXV/SN6S1X2lSTRyKNcQj0JeOUY9EKOG
2k61Wd5D9YIor1/XiB9M7xGQbqik1CYAKtP3R82uKnqjA70ojVWwvF9xESr/
vRz9v06ePH7h9USTxH9EdlwC0t62kkkg2gWlKGi0Fy8x7v7uMAUkBqSOy+Wc
i/sFzGzUPXoBht600EWy0jJp3TtKNrp+Pl2CkM6KF1u/7GOMLfig74uNBwkr
aG5NR003ozAgDcF1eic8ew7MhAvkXeZZKe5S3RMmdo3xsJRebdJHxxYKEOos
RdA2mkwmuwPFz2bjvIyj3kMuRhDuUFu2YYsB51Ql5kyi1dhALp5enPtmQ1lP
h3YytiVOkveMUEYMBeKxrbulFjLTjEgx2DDz/ozJNynt1IR4TVi9wU3T9DIk
fWCGbdwNcw1n9E9YrX++E8wwo7l9BvaKLJBwCyousRXiHpn/xd94lXHQWCoK
SW8AVawRsmM6XQ9cgkYc6NRthqEKhXRNL4CNCaZrTaFDCf9iK2o0EKb+J7jT
hPzp+Y2kiYvxRchOLV4YIzJ6hL4tRd+Sz5TAW/MdXFsycXYkE1L/4ZK0SOen
vCkciaLoDstjou9sVmdcfhH758/TR5+K2a5HcVreDvU++6TBwt1R9dQTDBal
3kFS14rUQT8jKOAT9w3gXo5JN8rqCU0rgaW7MBCVS7pWkpkKUSSya8gNhICt
iEtwFDZL//n0F/aRF9PBJoI6WOWj438+NwzfR4ShCMrV0HXp3Ml71XPz2rDq
jK2awkDoMPAcyHEKd4iH/DNv/lvd/Eb2j99++YI/Jv8Kf09O6+ymlf023eBl
MYdRhE3RI1CYVM6te8CAzT4/ATHk85M1Iy1OC8qEh4Tdmj3C8O+B20E38Eao
vYcNhq7+XipTF0O6XSsbKwthuIO8kuVKg87YgWHg5Kx0hMfpqele+pth8lxR
cmQApTrW3GJB2hxAS5gydm6KRcfTVSE2lfdJryOqm7zJiw57CAiA9NQ5cTe8
QoIbbP2Gy1PHJ1JHscrdURoEJHg2wWcKSM5H0ICVGFBi2FrC2SSZh/HxPrC7
WNcsXnaiPqWNz4RDtdsZRGTU2PGlNW/aAXidIrxOBV51L5EbGv9MYUmEriKK
wlScCH7/4CjxCiulBZzqfBxs/DGm6BQ/J+8bjMzrqhCKuLpsf8MoHuU+R5zd
HyWNKUZUy4eFCMvuPLvLUGIXPniAWTJ7f1n5O8XJ9zvsEjt26xMKnOsPic5r
8ajkxFYyCyJaD0sCgCl/EJzYASJXK0WUWT2sO1Qbdg8Lm2eQVaUMxEiM7fSW
QaVhzuSCNbpRpVWqPYTRA5y/nA4kTldA+dF1SYM8FUumtlYi+hZ4zkSXOFE4
3/ZWqmsMnIr0g1IHeRVx/KBIiELKuYiW41XXLZpurumkTGvs88eEC8ZcTw9W
g5qBIV2TU6viDcgtumd2aB+qj4mDxoV0s6kL9stmsAVsCKRCuRc3LYVRDVPT
DvZn6aVxlUQJow+LCHEu8qEBXGpytu8ipLJ+EGBONDKdKbg2/cTAodiqizAZ
GY13sKrQZJ57EsiYG2vFPAyx3VLKhDi/VssGfDWNFwngqkkoMEFUmYdMXc7d
jt6qDudpyoqnLssuBkRlIETWdwwEXid1hWyC76MVySBMIdy6eCQpZzzP1uKR
zauLoqyJA9R4NC/yTCQDdV1oTnmLHYiGobuDigJxAyD/h2U106DueziWxYYi
cpCfsLoF5PkogcLEx5UAferAGw8h6VJVFtEuqAfoPVtE/dBKghd6WBMvw6LS
xXGRqSZbW30CAZeCMXZy7ITcxU6of0SepFPxBaON2RYEMRyMgG+Q82E0KsXk
iL9Wf9hT4Xv9gMGoLtF5HDFSiZTZKYWsDsqBg5Mwag5OC/o8Qgg3bO7gRKzV
8poil8k7I65jRrmqFLFJFSWtAo8KM/lCoUmZele4miq0IKcl3vGyOH+nukjV
HFyZHC8wv90sjyO78Q3JL2ZkH/FUBAY02N0m65LBxO3CPbeRgKyjGz5ilhXT
dj65VyJz66mhP1U/+2sknlOcJZk4QTgZEbWFP5HcGsNZSa1XqaiuO6TxZ7NZ
TZo7Zsres+YV8UtI9YqwFd8EaWwe+D43m0TRMhSG2o7Y2Ug6JjYdzwT9e51S
JzjeonTdfz5yVztcd1Wo0PnE9JTtZ+gwh0VH+GCxEphLaGMISZmmMGXZG2cf
7BqjcZPVXbBjTevU39CdY6Jl3mEY8x8lx+D7p5rcKO2hObmu0sju7kST19mK
5nRMAcln0vLbzk40VvmY0xhI4PbeMls1GHz6wGuFEanmLenvjjlfJLTLpO6C
5WUky9sDHXK1Crgv6Ibb5lFbGkjbsnr1oblpgTfkYmsD+iklr2GKj6pceitX
RHUxNwXVQmbDHyWkCFWRagIPSgGGAoRSySgzA2IKSlDdm57zLyeIc5W3XSRM
0MOPLILphBnpOhhoYwodAcMlBwz+16CATfuDECCv/tecvnQGDcXnaCmgzLH1
DgMYHtw6IcHR13kJH0zRW9aip0RA6jI20b69JV0KMtiXgjpEIv2W/csVloit
xPNfWXeN727yjcfhuxO4RXeBrb16vSFCy1tLyyGqKVJA4R9RLn2lEhxMzdHv
r49PxOEJVoUcbj4z96JJQs5G2cZytFKfb96/euUTnnC3vTwjCOl2acrKtRjR
6AQjNAH5ix62yNPLVHzBnWNKj2BcRnDrQF2KUUQkkZgjlCMfPbTid+w6NnAk
RGmFs2s18TpbjkxgdnliEU/Yodkae5E8V7d5AJXWMgqETeGU/3lrJbWKRtXj
IVKJ23uHBE7Pj3xWh3Mnq9xtRea3Sva4pg2WCELZV1KyqLNaD7+ki2xD7JeF
IIu7NPdF9ly+fPSSLltj6aQrEjDzrBEdG+dPGL6RPiY7LJADgvyuorzExZE6
OZ06/vIiFwTTKC8+CisiNfT9bSGJcNyOFLL/rpqvV16H8TrtTJNDwf0BgvrX
9FhzPjTJgxprA0e+y9ZK2bvYK8G2imdotmaSexqqdu+MMUvnLGPBYGU+r9pC
SmHFagTBWQFmSQdiMxJwjS1WxNqZt41ziVM17mhwdR1HrSJkyrI8Ck3Vt4/p
PqM/2iVfU3J2hPHbbopJyYgijqDIZWasdjK/TNpiy9PE0Gy68yBY4VWDv28L
irVsyYKrE+k6lfS0npeCOL98YV8T76qQpeV6ec11uNQchxviM45mwz4dX7WA
DJnkBvVU3F2FzsmdzP7eUZuL1sJl0boBnfbbpjOvQv4wclLkcEzdPq/+6e1c
sSxQUm0r8vdUlGF8dNZ8bfdHkQSPx3hPGYKqyHbbM0CKyOxMt3/mxDe4cbKL
2ydOiFHEwJFEgMFUhxSQdBKiPf9FA+aT5DdiDSg2jnOUqdJDI0xZ1iD+h83m
aMMtmYtSzXHBkdllq3nRKHySfGU5/F48lNCp3OU/7BBLy/KAGxVi+vFKTW+L
3BKHqooL/vdL+Kr8qrOOTxtmzATFezJZrnQcAkeFmneaQIo9v/pKHUKqmhqN
XFSoCNI0lFGDuUXAI2U3dYS3ct3/rjE4tvrbB3FZbmWQqw642vYj3FCiw9KS
E6rjfuyEYrm1qkgZIdvGFikOCT01h4akNy7moIOrfF9aHwDCGNbHGsNOvZ2u
cCwlHINMLGqSLWqYqu62oBv25w+4eY3wf6qIDyhKIzzfjPcPI3b/Kps3g5xf
MA53lRtORUC8JHTBbryWlo0FtcAHF40jbl8Zh9q2MCvnqiqdh3Dkd7+cpM8P
XxwEFiM080ERND9OlCv6fc1Vvy5LVcVqYjXClS5rtzckayqsrrlMXNTZiujC
8V9b0W3EJFvKwH9t49FCre7anmFXFngZDWLFOOPSrc2kB7DELcwr8TxrMh2L
RWtK7rkyjTfTRD8NPkqdDH6+MgQwEW9Sl8f8xHKDkIrqy3cqzf6RqGIbzuMG
Nj0jBnih8rGBLbabdGKhRBGWN6wAq0SeCKowiU3S8Ahl7ugZXv9IcUrKW+Ei
yboAX/zQqv8pgtUuKaDVdU8aU2iBRLbCrOVzcvqGBsZH0hA0KeUpugWpO975
ExcWRsECtI/YgUQmaUIXEGrxqRZXdBls0MbSCaHpl2AUKQfTUky2BZvZsKTl
cGN3T8SsKGjom+fxuqo69qSxPGt2S3WiwErGURJkvoIBKLoetdRxKXPVAYdp
YV5ZINTENnNr8efULKi+GrqdiJSTQttlkOqct922Ot+y10EVLdE2WotC66xo
LIToac0/DrP7h/UqyEhQp4zRX+M33oYof3XvRlCBYj4nymct0+nnK/bK6M8h
O4BcUttMKzR4+eH8FC6AFD6uo7zKqjcoSh/HMhDQNBJLc4ZRLFIoy4CRDpHk
YTlc50DC/l1AHTr+XS9YvLEk2OJol3znENYpApiVnSsa8TBYhzweHD/i8ivx
cE/3MXDxeLXKgXh8Tk9hE9RF7S3wIjCgOn5QfgE3EGDEKCNHQqmNxkXpilBN
NR1ezklqJJ8tfsjZb0OCnk7KmTjLjcsZElAOxsdIVOeLx7xHhEgUcmnVQDVF
/BoO+iSPXUKdAjcwhlCtuCqJZs6gXdDc2ztlOeH/TSY7MMn3JakMOJeimFQl
1/8Ik5Q0lm6SHFrendMEe4fy4ugF2hmvND8lG+nDbDoBtJi25jwKZ7GToECU
fUwMspskPu0kx/d2QjFGFHDxE3wZP9dKIZM6n8Pa0p2/HI//r2z8t8fjFx9/
HP/+px0JbOZUJdI3BYDAz1H6H/jwJwkJ4Q863UFH//ck6gcToPzo8mj+Bz74
KZQq4TM775h+ASZxELEI/8GlAxzjp2ePlTIH4f9skqLrivDsxPglwYjHtNCy
0zo8QONEFZr/gYNXsOSwYI5e2Bx8Q0mb3DdWMqJJ32BWgmJ6SpXivdiuYtgB
QqBDEhPoj+FjXNW0gcMds4Xhokbw++aOO90RyPE3hy+eP+Vv8GjhGzdUptcn
mNrJFcucyik5EdZBGc+AEqD1GS5HFERDtxhhcGd/cjA5ePJ4sr+zK/iAzkND
6ncQWH7aMTSAFcErjeFoQpYWIVTs+ICslWaIISSujp6+dEhWz9fqZG982o1G
i6sfooSCFo71IPc/BtdXxFwlCdr6mNEauVT7QmcoXol4JvKyoySUI1Hla0Fw
Tmcg6UiYu+aENpwerOHYpWArdetS5NH7whYse1M6wkrou2CVlWSx9Po/n745
LqGqcZhXweFRxpc5+UPUw2IHg3mBbsyWMFqWJpk4bb8ZsuRhI9perkReAoUt
xNOADCZWJhzFcD0e9AcSlhW3qItMuIqHZp0LWcBFdRRbqINHVSWhKlY4RrJw
ULqhjEmHKeolr14tjDsbB6zmn0suP+jk0nPV4Y0rYX6LrPyUt7GXEsybXXB4
vZEJilXtMB5NU1MGsaGTN8ApBOgbBAxgyIlD9h2ZaGAFRYkFJeGN5X+qIC6J
MLsGBNoZTikQ+ypRCBC5DVYP+P6IyXK6yLMaWD2VSQfWSwDaVWhOhjPMBc+N
Th/k6sFzHnBAmFAKLgsC0QxNwqVY1ihxXZUgMsWTnVxH5lWXh1yVCjx7oeTJ
zVDbDKBrlU0LDL/DPE5oPe8EjojNKl5eDDykRjdn2hsVK01tyWbfPBzOzLJy
2SG+V37UeXjYNDEAYbnkbE68OyqvjCwHgGq+er5lCFnEJoXUfO3tQPllKSvN
VxXAA1Ncr9vOZFh93WhaYBznxO2/lBzt2Jn/wZmgu905jbvO42iyb2SWGT5F
X2GNV6LmVUcIb07O+BA4w7OwuAOmamwuJkuz+6LfC6Eh8goEIowr5aLQ20YL
Zvs08tYQb2bK+zm8zkOk2p2Vbp/a18cpbv5L01Ya9NB0D/8L0zUa153mZVW3
4g9E67jeqKvzN5w5f0JmYhBqqSPq9FRcojFzwDSQ9GhllwZw3WPoDw5d/pw1
0BUVEEesNLhJTyaHfehV1pCvnF+K7ZouBSliOluL/x05jWD2nj1mjNhzl0uY
v7/6Zfw8uJkwsY4Uc6LKFxdffkJkKygs8qBSoavcKVOdzcRVnnWTRdlRc4gy
QnURX75gzx/hAn08+XCF0NHX+6jHsai9RpZnclW1uTrpS14Hy1XSBG/joLeK
eVJN1cF8GnGwNMtBFpZ5Z+CKf4oZ5Ujc7K7F7R1SeZHSxddUdEZRKTbVQnfC
J3FuyMMNTcwIGM1Np8UcUJzPGkdDBVRcEFVU2PDOJdMRSzrXOKHv1PF3oM6k
cwT0xXu7w3SrzHaJSfP/D6F7a042yvbwiFKHh4Rs/JOklL30L+nBP/gnv8OO
uJ8yGM2rAVY6fbT/eDJ5drQ7ktQP/PD5ZPL0aBcmsj073DovZmEO9AtHgOHs
bx6tu8s67sFkcnS0m8YDP5tMDg93H9iBRw1234SR5beM7X7B6Jx5I2TdsJkl
fzwwAjWq8qVfH/9cYVFC+bvI89x+AP81q5YJTCB8+COyYvqAvqbtCL/HCCkj
190Y8278lHQeWFYO2qHDpNNBP7+HfHmkY/Pk/Oj8JBpfHvkZuEfxHPafJr1+
tk7j4OgBKJLNtupbd2yaDPvee0OnB/s8+MLytMjDlykdPadU+SdJkwEPv9dG
/ASzpzwMDTYaiOH5YmB6/Lw3ufD4wbtwRFdhS+YX/McxbXpz4I4cPHhH0uZ+
jOEXYaJ0A3Yfulb3/c13z/R63X/Lfn9lu9MH9psRnCVaZS9yN6P4OWefTJNk
6PmP6boEsRDTqSA5Gs4RiXkov/qJHiegNt9jlLfRv7HEkphXsvO5Neh/nqYH
PxnouOGlgb7x6SEPH8SUZKkaY1mCsIPwa/EQHAAJvl7PxyjMrh2WjZ5q0s/+
wx9TQL55ieaobduJBohveD2mgEma/Ne+BFl3mZVsWf3Kp5yiELCWbwQLCZMe
+icHIJ/A/j8GGm3rGP4nbfQraLTvGvnVbW/kvpL8o4Nr3t7efSWZSR/eiV4H
g1/tPICoon9HD7Eyj9RhJQCZPRFsE/02co5J6snxBVkfEsN5PhgrNPjin4Kv
TP8NZn/MppvtbcbbP8G4R0oE233RrFAZ03scqjrAq/9Q7tUGnNP81sg1AHti
y+yerr7weABhK6y/20BfuBYITLYr3Qb6IsI02EB3otdAXnQT3A7sYTzC2LXE
VLe6o70R5IUfIH0KDXin034DehF9nqbPoEE4g04De+EaPcc1zPM0/qdrmOed
/tP0xYMQv17RmQemmQWW7cwRoe4GFuLwd5BuHkLj1ayipALfPNj/yfb8/5Js
z1/hRGeLKnN0+S8g3eAjEfaQ+Qw/lTvDJx91ffVLX/MivAfJvkUd5Ufq+yWb
AAU10Qcufbj/5kHm+e8pt/GVhZsPW+gsPFLGO36CG/An+2rMLlO/h6/kie0T
VekoW2oLbCtdmVEaveIWXG/y+++to+tqthFxaitt7H5OctVPvH0Db2DhwvXT
z7Vmr5xWzX0x67UhGWxvINfjt3R++f786uNZCaxzBfv4zV0366IdzyjfYHGX
jyW73XiWo20/Lwnd77/42sE29+qH6CUPe6ZH23nEZ+se2un2nv3nz9d1FU74
gQPufs9HLPLO4MuvnvLQFAYP4wHMzvcn1Cwbiyd12G9bE+KToS/ndbVepb8j
8t/+2rKkui84icZLJ4fj23odtX9J4wZ7pzwHfPZ7kvQf6zg6ejHj/gGjOPI4
ct+8TMPfdPwjOhT3ADrlFI4Fqu+aNdVqAva3R23cV+h4/tD7Eqh3vS57n/j9
IQ96QLTJ8OhpYGj4oZELpGPdudg/aYMPPX05iNvo/KI28tCaIYUbmHDUhp+F
kYjxf1CHR5U7A/x9QSUdqWB/cjVB/wBoC79+9M6Be7FOfC/dWi0YJ/K/sZTw
/8lk/P+tTMaqDWfQc/9UyM/aj/QFQvM+CvpO0f3/tPelzW1bWaLf8StQ7Hlj
aYakCXB3JqmiNkeOt1h2nKRf2gWSoASbIhiClKw4fr/9nfXei4US1Un39ExZ
1R1LAO5+7tmXiu/xrQH8sEsyiauhLjXgt9Ik7KJM4uqayw3orQ4RdlEmqVRH
Wlnpmh5zk7A7dBsUdHzaQB5jk7CHiy7rjnJriCeilMAReqSZKKuNnAbT8Tm+
0gZtEldz4n9h0fqWWoS9DnPjDi9ZdW5aKq4e9rp0Di6WKZ8DvdUp4cEV1YiF
fYW39JyawA1F2HAlujJs0Fs5Om5QlOjyDfBtpnIrN6iQypwG8Bae50ZwBYTy
lOitAhM3yOuKS9t0jS9zI5RUxYUGDjBxgyLrnm9g3toGJZawMIK+hRYywnbm
RgZBpiPOar62KAjIxTsnb52D8BxXWHJrPtPQDDZGGrMkIlv6gEnT18AX2keM
t5VoOW8MTud3SDy3tPoaDdwFunHb12Uqk+u8MLB0XyJWt7aoJm956+7XvGvu
M/b3a+Q/IzJAFTHoQeOUzMjujjI7ZR+UP5GOt3WQIw5bdo49mW/pguifV/CP
vhUobIcGKJwxOB9VpmdTfoMb/QSOJn8i1d/tdiDUNn8gpUfKMBCP/MivwQxq
ALk13Av6BYZihTCb/Q1P4Uy1UmNTPiFnf6oaVHEzyC3c2lEFy6C1DCgA7XT0
fFTKpUhBnRLJkfejwFxy3PGeE2Wzrx4uUusxwaCQw3y4iUQg2VzxTupRTveO
gzkBW1Io2C3KXRql7n/6hCtoYo1yfmtCWej5E+d5XYpNSoLj5ylFvdIGaAlV
z+ZjxviquZtdJ++bUQxit3n7yYtmZabIaUdwpIquKHfHrxu2PVh/zls6M+Fu
/iHwNNEE01agK1ZV+i9JW3u+Sabkdo5HwHXL4X1+RnUnhxsVJ5AEIGNbnVMT
SdK+et4zTG2onpVmCPxdK5liwflczgWtN83elguZn07GqU2l4ZiEVkoRF9hx
vgDAi1Wi/ryeqZk1XqE/1HmKAUEUWj96bcKZRVPDUVBuX0ksjuSimSP/X9gB
YB8pzsYJbaqjYm0ziyigi5I/ruPJxSKdp+c3tkwNOftQ4JApB4+FLZJzTEIT
2wpfdp7sbAWTVOWglkfOJWyo9GLG1WnJRI4twiOHIwUUxJYYWoHJl8gH6uaw
yOTYOHdoZHP92LqksqaC/5isgMK4C+elScrcqEZTlS++zOL5Fd5kdNMjf1qn
PAVlcordGNmSCzllWfececzTGfo242woVgAmjnC9dqP+CTbmGhnO6WhWMeob
8o54Mk2CCOd0F/FmLcDR9M6QU0LbiUl5ifHk7qiaPloS/ZmjsmXTS/tD0jWB
DWVq2Lb7kkCC/e5oycADgmArGXD4lulU5D69WKrT95nkd4Vdem0X95wXZxC4
RUsWa2lW07XGi5GPpROqi1EJZhwtK0DRZY7Xei5y8xJmmGCiSAbXi+T8QlLo
FTvKeGOcSrkxZc3ID6BIZ8sonKkthjtBvphbxjCfyxAcGYNHYmJyxd+wWdwv
iaK4Zc9y++WfvXUDGCgzyQozxV5ecszJ4nwDnMQfHgYuwJI6tyk7bTakYlLh
G3eU9+Jty0GJpC0mUKWQ12/f+iz6GnJhA2Q2C02IZKrERtVNTApM+mCMDp5U
jx4zVpm5o3usPXsXB0t4DzkVcJgQiORSL9be5DLtpugjWjX37lxTzIw9pmLe
BeKfQwF0r860QO1TglpzjZ5pjWhFuZQh8CpmgmQL+Zhc0Iz+KDiJtRA2V2Au
ewGnqKT9wSgS+vJ47lSmAhhfUQbmqUQPaqVoIdsO/pDcArna1uxuDvj0umGK
79p1uPly6LKWvinnc4a7yCd5mY4pCCY2Fb51H3hXOI02ZokvAbwD7LhGhzuR
KkamqJKTj+NG0zEgiudckIZIzaWUAAcKpwtb5JrQD4Xr2tuikVJ2NgtMLTuZ
b7I8zXByZTghtbmCcrmddS6/cj6GBz/+iInWORLaiElvCwErk9w2UdTFHJi9
qa14RJFjNqqsnqs2IilKmZxyRU0K6LYJ4bXk8sclJuTGxDSbNWdhMkwl840m
BQbXNFqlV3FWFU7GiUZiXpymvHEi0Jw7Fy0KGRLKXADvrabok0SCJj7GendH
BZFGWptqK5rVripWbJq64QsYzjXH/FqryBSO1K00uf1mW6abFZMcmwQ3lJJy
vebcd5pu5RYmCBFtMVeOVJ6trOox9Q9fPS2Vl4qyRpJV1OokUFhheNKifIgW
Y0tFqitEGbNVlM88YeBDUqAg77216AhPz8mYtIT5rTH9jKaCITGSQwSZyTYs
G7aWO7N0Ghp5opBs1+Afh4/PIaNI3PZpmeUeLb6kK10qtIZ5Hin+LaHS9LN4
pTUwonXV4C47bbNFWnyKAHOJ5IRRcMWElP+kI8EEihmTQqIm6fiKIvIkppEO
AtMEXEgaMooBYcgrHnRdt1XlohxO0d1wLpxGzrgSuy6fFmlTjVdElUbTaVYI
gLgy5efweS2vjRAaUTOCfC7ee3yTy2yhsSCkwnE0Gnntwk3Nq+qDs2U0/WMs
Uou5VvC+YrZajmLWOH6SnfOyu7/HIc6eZuUgK4sm/ybhkEJfGWc7dE3qcLsh
ibl3IDhreHpNc3BhCNVS7Ae1Q04zcwhM2wojmVY12oPaWW7P9UBgF0VHc6kF
2WzNF527Rheh0O6qJ5xJfBffyDj8N1Vc4EQee9k+D2Lq6dpubugu5XrCqHSK
so/y6qRiy7rJc/HEeSpdGf2R7S5fy2ZdGnBR0ZctScOo/Zj0JaMMES6BMybc
OgYgSFePTBRPgkHgnAZUIpbdGpyWleDktKpoycG/p19HVs60+eEp6MgpmOAW
9jWYATNK02wjM1tUTmVpvXDVsCIP1ahwpgZyZXplaj8VuGmdG7G1xC7vIYmM
TRrahxQnvtgvTYBKO6y0FDXf0iBsmVwktkduA/1d2YKJzkWQ7LTlrVYVlQ24
fkuZW9eFovISmYjczYST+mh6JlhlqVutrGzzGxmZC4+GYS4Pcpm5MOZ+2OQs
5WEZ20+xiJPfaPWIA+LNm5tMd9duTKnJXqbUlVaOIkJVM84YJBVopRoU8DLc
Dd6NYiPe/8wRvVSjZK4iJQyjtXFY5bauCHhR9bG5pKqIOradDoaF2p175D9H
VGmeOejNvspv9iP040ADmb+3HaPumx7hLB6RmcuBW4IzP2jZrywGAwT2yGWT
8JMikn3knx6fPcY43Eo0S118+vRiGS9Oj6AV3N/1YYp5LOv+u3c5kH33zvP+
fTHOll8V9wULVFVvC8LCm0VCYYZz/5gD/unj0kaRBR97cUFzy3aE3d4/cj92
XvgZrjyrXvpZfJlYd31fvyytWxwRdl55f+vKL6PlP3zF36oO4MXxs22H7n6z
5bDZmeIWwDfLHexy0Bw5TclS/nk78Ay9O6p3gF4VK3Sa8KWK/VBfkR1QQdgd
/kvAvtkHyWN6ByzIVyadMJ1UxT6o18IuO9HbjhUpe8I//v6zuusgTdfVyz+t
KjlDmkGkfqxXq0QK4tmT34WwF25bL0xhHkeLf/iKj0iZeUYa0zuWLGpVNCNQ
IxAvUYhDq2zFitU1qbji9rYVa3IkVGz8cyD+qXAO20ndeaxV1UwQVdVajVfV
TkDe+W9F+FLd6faztiUdNS2NJsOoWr7rI7bTDnS37gAmYwMAeMGk6B97123y
L8kssh0OVBKRRIX53GHVTAB7we20Hdt5nz8XIFDGfE3Wq5FKPar72jsuSlDQ
9vmL135e4Fo7Obybvinygey6Y4ATMwLVv7gRuWP/VpRr7BvVR2B9En7LVYM3
Wm5ODm/qS1BKNDmeLdiYPQ5Lx/Ovg5zekJNj9X6Yd2Wmm10jd17XZiGA8M/i
tpC0YhHw6RYEZLN7R0xXJzeT6kM0Tp07L5YiQv7hKzxV5e2b7E4saxS9Tn5b
wLpVyxWX1H9hiD16+mK0hYew1aTJ3iH53iiz5lFynqxBlnxKGmJiL0ZLNO5E
80q2ghxtd96FfxLb+JZ+2U4/0NdXzxc+Xm0WCycXL+fNq0RU7CW883L/GQzE
2dvbJQRcrzD9uOT7LXertPDfvGJTTmCLfGgKAYjeTJMfQtNkkWFOfWtJ3r5+
67L9rwfgWjlhywZYR/HMAnrdv4wvUzQjuZ5fbGskP7+7AcK4pP/r7QivmZgl
qYS7/UJojRU05HOgGDpKvXVD1jIuDatJH1kfXb0p0tt/356YalJ0y88o/UzR
HLd2zXH+p7+oolSuOOes+ex55ClLxmDlNGkf1N2HnDiZUxb8UTPVPLDwSX4S
UoC7VjbUHaaYFF8yw8VurxlXraJeJJNO5AftxhQpk3+8QYMlcpfoqwGS0HNO
UfnpExdzwR4phSf+waa2LKX6RgupSkKeplwbEOhcoRsgz5wvWHOqUrLpcYRK
9Gksqu7C7CRv3Ojs8PSUw/vySeY56y3Nh9aQ1a1bDVXO4tphyxXyCKaO++1j
UspD0qg71nkYJKfLx8SpVoJYoXBU8v6Sk6aaMZyn0LGSw8mnY0kF77ygebHr
3OOzAE7wd+Sh4o/+78XjxysCT/PQ/Dt83yVf9999OEncl9zP736+mMPvWo34
+PQIJNLnOwI26n03q8WdIJ23iiEggrDCydgVwo+Of6CBz+SFY4HeUA7mmqRu
zRfzqjV9TvtLtQTalPET1i69wDodvFQOBChuiq1qT39DR7hCfle2AVjdaKmj
4u7+zsnl6F1Rq35Lv9uOCbEACqcayOBU1SNjF2cYlu0TB36Kb8SyMmgXqTwu
gWsSZJ3M+VjmgAARe/VPDk/O/GwZTQC0za1Q71vrDEiQ7uV9EQympyPCNdB+
kDPWKbmK+rpBYkqsOCNseXDUa4XwIVeqdba9Yj9MlcHfOUzjJZaenNwUIjUA
ppf8YpJ7DpCNjHwkGa/FWisOP5rscg2S+gfOa3m94EzOUoaEfew9cnRDq2q9
5AclOgQdlTOXTLn8E82nQXu7ukJxRkskaVqEtbITjlDl+Jeh+5bvH6uv4jWO
5EkpEvKKwVTXgjzzNb8yDTJ5kMmMaKXeZhFtoGeqDoJAg9PG5PYSTkHYg4pP
0W9btxqvwrbtHnEvVAmAiz1T9ZvSZjT90eJGc18XAg88KRJPIldmCn2zGyqW
i5CADILqyPXglUMT5x9PnZ2RtnG4ghSokUri5lpI3XA9cdIJcVuPoQMzoQKV
2VDpAHY94rPKkvVGNoYWfpWkcxSUvfMU0MKCy1Pp+vFSb+acIhqLXXAa2lJH
EXeFq/DEA9Ct4zURiIaTnW6wZBx6FaMn/3VmanKjl4GOavxsYnYKW8HY4jhh
SnKSL3OUqfmet8m4IKLzgSezskq1FXCCnIgVuIkzPXZiJu46ez/n8Cf+fh75
OMzia7pHvGE2zftCt4VvD5ncxLEfTwyLGOFdpQfskmA8ipmBWkklBKnfTBl+
AMfGTsiIgxSytTiQKQwtN2uPLKj2hjD1o716pOmwBYiYJ9ByNDAfJBgJX1cD
dXgWxpmUJQrH0RFHeEjjNH2pK3TDR7XiepMIAJfLNZ2mqdFmP/Awdf4E5gZr
OF/FXNXW9/Oef/oisxW/gadD79BxtPiASIuuwwoWuSIoZR8+mExyfrE2TloT
BHZVCUXu1HVf7CNTJUS9f3M3mBzqP64LnvnwvUeefz67s9r2Y67EmguDahYO
w0V6zMLlo6ZwiQosGXlDrlDX4zlzJp9lk3jfmVl+4ML2OkN5PBTHgZEnsDje
sIkWX2ENZDXe0O0x5RzW5HiIi/Dsg9yUKyaZX+MYXYgyitWIMIA+ncXF4DFC
OcIRUC5uGSd3mragouOjnxlc48stZ2Lk3DFTesIzoSSl27SMFYOLW2EF0CC8
eNb1RsClbmshIBhzOE9OVm/6xsVf7593lQAnK/cvtxXq2w6DciDWIrbEkZEL
4QfvfJ6O6ag2hguMJqs0y3JCgpBXNd5tJ6xKxbcR18dl4x7OhcQxqUXjhBbC
dmYp111TPwBCZsmCHa8TqjNfYREx3Mw8ujb+ZUK3AK0SYVN1EZzwIlPM5jIi
NnBLyY44+pLWgGthZOrETc/vmAzXMTL9wwYDQiJu1Zp1877FcSmaKQ8Tt9T9
KAiBRPAlVmN5QRIpI1+Lx2dcQlm3guiQ+OJlQq9ye8MwYYwL24FCrQbbgAIR
ne2G3c7Q2Qx2grJxzcn3ek1HL+t23ELwxnOcJ/olsgGD6sUBLnvt8L2mwg+m
+qK+nMgYt+hJJqoVk+O/gv5LYDVVSX5pa74iMOg2oJCK77etGtl5OuzMD3GI
S3T4vIzRdJdkwgCzy7pUY3Zqy+4Rpcw0XNEzqg9uUDN1mGv7mMcYWaN18vD9
OpHdVb9px2+Zdyv/naeFKh9ScUeqQJTEWA4at0aoudb/JVIoVQZFpibvfi5r
BU/E39wT4qSQTJyreNAnCxtba446Y3UuVj5AVojn6XpcwxcU8eNRQBJrmLTE
pfJxOig6v64RovbSzZqS+ufYl33uvlQ0GTE3sjaAqdEqqqG1V/GNg6QablV2
B0dpocdkEU0BZ6w5Rhw99G9YcGJ2migvLxVkW2BbrKyWrsSsm1Klajwls8K8
63NEd3nB0VxZOqE9s1RR9lnKo6HH7max9ubpebLApUvRqbXWMIDZiDMrxT+0
V9PGkijtmmtJ0Cd2nRM1RysPqhvCB51uVpPYS90xsD7SQudROWP+TiacSIki
+Z6WqXSVwoLwkC1k7zOfnq7gBZ5edIW1DNYc9QhnR3HuFGDCF3wVzyMu92DX
ZOt0uteIqjPbcsN14SHodmSeG9/GYMeoH7BYNJdqEyZwPFMpcL3axEKr5kzn
JNu9FOgRXJ+ueNekBojH24rL4M+psLoUXKLSyiQHXMaxFrVcncOvQk1yVZoQ
45RwDaI66zBQwu3qDjCxqNx4CORRnpXjnboyA1sIxtYu1ZdB4OVrCVIE8I0U
h8VuMLLQzSqBx1ZHTm2plIMhwNRk9JwrVSbQOS0h4/jvYkLwJk+q5xF+Bxby
A/larCl+qyR7UZD4YvoQSfCC+GJFiFgr1yt87sAtlrLh5yTOSFKFfFeMLU4X
HjGwijFE45zPZODiNkYhlBJDh/LMArIYQwUIM0pkFy9Zv7RLzVsU4QTi+UyQ
cnFsBFIZW7EVFhMbzzWsC6R/ltDoQOU4MFiRgvi5pm9mKhZjd8uq3R/HnhB1
A7nIPa4SIqH5ZLxb1uMptbHrSTIJ7ecIQY58Yx6x2EG0gPaACuAQ9zLVBne4
tBGlXMilIqjJt7X9urovFpnQ0iyNyK3j5EQrxi8ex+VSKBnukdZv5yqQSKdQ
GS44j7Wm5c1Emk9wpWVqJXA5gxuD8jOMyyR6jwPEcNP3WZJ1wAKDrSNK8ihx
Nq8LC8R79UyH9F5RWg46nsJ399iEulfaNYT4ZUT4kFUOKAeR+Wcl5f8u42kS
mYCnlbC77vpdtquGvVOKPkyZvK8skAnY4cCN3BoYoPRLOATsF6AzxjJUK4BJ
kpQ5IgzBDTk7DykHThVl3g3cKqSsMMkVYzNc5jyi4D4UGMtxzFjU6xL2FWs2
Is+yTOkSVcGV7CCPQlRWsQwwPBi1SLeVTcpITp/B/qQmTwU303uLy8YmZezC
iXUxrtLoKxmq9CC5ZF/CLr2StofYGeAWMf5JOPMtjWwqGL7npDBToKMZKQHz
vFHGaQRuJUN1v5ajZLJzHKE2RwXvZonwuZBrpBCSE98OX5wd12DLzpLLRBRD
bmqmHC0jYSsTwwWx3NAwH9KP5mPAl6L/mSD3sVx7pK1iVoQxHc7Ej85Rd7cW
ak5zwC8Ezwos6jaPbzxrLTCcPUtKS3OexKaTSQs3w2ys2aIo82RepJB3TAD1
wk3T8bVyHOnCV8n0PMaErpebhfFZ0gJgDqITxpvGgHWNcLdYMyMinvfq+PDF
s2fHz4+Oj3g1phSsmZsQQdm4uhGHBHnNScF67jCScCtTQE7ElOKxFuU0S5iF
VHtKuTWkPjYGEc+rBgjL3IhELoVUGSKeEESM5lid/PyCbVuuJyaxPzpxBhET
V3tsZ7f35O3xfi4HGMzmHK4X3it4ebafD9/N6q62KFdlE1OwIKXmmXoq79F+
8fV7pnoyrYFJlppC6HO9UP2WrFx6UBWQQmU8PE2N5ACGo/pwbE5qbXIK0Bqb
EZkVpMIb5qpA1sy+pYN1mznBl3yRYBysqWf1gbYtpyeTWZeCydk+x1eDYBa4
UkS1LMIR9sbqSDkRUpE48kSoWXQuAXCCuaLjfu4amVtUMU1DMiRJqsTVGyE0
zxq7mVUWlkywCoxdWrlk7frC2RNxXPZH+WMV45jRE+yBqJiu2T8RobvGH1BC
J2mH/NI0Zm4aOX8plFjXRFn4LFNoJorqkZxKHIDJnUOJ2ta51FWp2LHyZx+j
JoHjD/Zq0/Qaa7jG0aX9qrbvYFbG9y4m0AB+ibf1RKNXXlfVoenszHQpE9ON
VzEPPUWDtiIllMoAMmHH24UI0eMKzIrCG0AhqPwrYxMAyWbc9F8/Pduvezar
DGzh5tKelmEgY85DoKCRYAYZmMVqQiYAMmgxuDqLkbLIVUuxSfts3URiw7zI
uaksbiyqyJBLMuxO4zSqTtCoBKl8lckiRlqm57hw6AaTxdWrWzPxNdPSgxBB
1xBmONVfN2yKle1bayYZ7oulzUaj4Y+jyQcUuA3++vQXTfUD0vUzVJOb1D8R
83ys+CMtf+SmFXdUAGPKb+KUFY1MYdE65tdEvDfbrBm9OBVF2VTFY5Cy55rw
scmGY/pMbJFURyHCan0i/sTEUTg6686wT3yA2FyNtZeUpCZZU5AfOybhZ06v
SDuRNXezH7k9sFU8S1kVDF+/Hb16fvr88SPR6Zl2NP+Ik5hw0lyNgEZouInX
NkYdbq2kSfScUrF6PpIvirQK/uvjY4mHkPyFTgoQ/sJVMxPwYBMWjZlOZeyE
RR6pRma2Z8cOdZKIjmLFaXeglweZySYldUW9h74ZX8pdSy+Ss4Q7cGYH3TT9
h57HqdEfCvQ+dJxfgtYj/+LBsDOYDQa91jRoR51eO35Qlwb5nNPwIOwFj/yw
Dr+VStPJ11oWDR+FvfARacG0PzcRN30S9trS3/baag9xA9kxWKce9qHZX2+r
9HXrS1p5GOCwh+noJblyIquOdu0Rvd1WbS//gzMDtLBZEqOzAb5lTr/t3Jzy
ZghcUroQBgc4sjubKihgPEZDAn4l17y/2xIeFqCQLNnn7N/CMLhLHyblGepu
GUuo1yNexp3mgY1y7v0ULcd8aoLc3w59fAJIrrWjsFOqe6Wf3N0HAMUjP9jS
ftc+fLghtdHkknfwxVlxPjvNo42LaQbNLavZaR6wlr9+apdn04bOA5CId+oE
f7Z1En7+Zcdeeo/8T7d9sutMgv7WjnbuA3/CziMsDHcZv1vH8bt2M/4Y1+7T
x+dbPtmpj1s62LGP23vYoY+LB37Ua7V6nXa7F7TDdqc1aQWtoDfeAXd1gl67
N+11w1a30+l24N/OrNtuwZN2O4zbwQ5dwGedVjgIozAYBLPeuNjlLl3QqMEg
hGlXdbPLQszkqZuw1YuCIID/D4JBL+7tshAerzvrd3pd/Bd3oNftD3rdB7e2
/mXr21+8z/RO04EL8R8VuQar7yGkefZWUqECESPejbxx2ViaAlJ/6BHBITyr
CB7DS1DKclH2nLJ6kq/CQlAxMRj4g30wWwdETzohFiNoDwdhOGwHvT3lNt4w
lyyTRbKGzy2als+AbdOSDfaOMiJWvkJIDJWCsLigiJOKX7udughVvhM1g4sW
fEaauxBvW21Ge8rPzvyUcafTcpXOY/tXsSXiadkgOup0W3nBws/nnWqg/pNW
ELpHcr9l3PXRL3qUei9KE+g9yi2z2WwSOJe+I7qSG44/zqq2pIp4/Cnr+ex9
3ndqNjix9cgbHqQgRdEF5bCFvFCg8joKWJkqG214PUoY55IB0qig6DZH43TD
CmFM4Vv3x2aYlLxS5+Ji0CxNF1v//T8Paebi1ueKUcwTl9wGKMGw+QtbH758
w9Z1iYw0ToIvztQp81rzBBtLLPGk2HrpKt9J3CyvcPvM//i6eZ/Jh3YaszdG
MWs261B18U1t/TJeXURLzeBMpi3N63+avuaOq9fy58xcXXtkbKOHo2ze5IGh
cq5dGreuXqDrjSEZsNe6QU1n7D82829jzqfgALgsxLklgKMWD8St4mZJCi9u
LU4WbiJg303wpjT41ej1mU/KMjTboP6F1i1BLGwUNLoicm1KpuXb2nRmfm/h
fWDFd3IQzfG93R42aQXDwazbijqzWW/S6g56wUR76LUHcWQ6+PatpKvSXsLu
ADsYwKBh+wEK0KfHSBTenGquXv3e9sB5n7SPsDvEHrqd4XQSTyaD8XDQn/Tb
/XGnE3das/6k1+5O4sHtvBP1HGVU5IJghhJFMWvz0Jn8Dzm+IuzBhv21FjTb
JFcFKL2ITSNarReoAgQwNmyDdCNx6XYfw74hiA7bcVYarY+8BDAd3WaXR/uD
apI2TtdEeTVEYeKbidrq0XuAO/exIZx20A173U4IJ3Y/pc6LM6vX4Tws9GWB
oo4s1CKJuUjRP4miKFgT71CXZDXZJGu5fpYBqNGDmv/IL1HgPPQJ6A3H8WzQ
H/TjcRS043AymPXi/mTcGQezTi8YKuzmenEgUMAvjgetWTfq9SbBbDzsd8Lh
cBgNZtNoPGy3BsP2XeBXBkNel2yFC4i5mTggItAYNlsRlnT+BbVJBVj8z2wz
myUfnd0C1u6O3S9tfJ6MuzvPT3bd+l4AMiICycvj55Lp3H6zy0o7LeyhS//p
YU11XLKE2Ary2BsD7oTD2neXLLUXP2txJOSNUPv5kik44V5HS2uzqx3MU1S+
l3WnuYoCrCBfOp1FOP8xNs6tCpkGLvfSGG+SuVg9clbKF+o143qzcu6eTPsg
jwmUrFymR4zEC4wzEXZlRVU9hThO8E7ZeZTdL0wZAtT8ywgNqv+npSocvw/q
g31DIn8G5Ge/6Xf6UuyXU6WTuYayhu4NOIOemNaDHv9JfSCB2f9jKuY/TKMo
56LbA0NrJ+wQSlPvvmO0WixXmBtfosYf3ooPCduaXeVXxij1RzXe7ZzG2+D0
+Y1LN68qiBcJsUhNfLw8mJqA+KwiDXsIt8XUEvuLeD0+pP+erdE6n7NqfDEu
fDEu5Jt+MS7k+/hiXCjO44txobIP/PliXPhiXOCFfDEufDEuuD9fjAtfjAv2
4y/GhS/GhX/Qur8YF74YF74YF74YF/wvxoUvxoUvxoUvxoUvxgX++WJc+HON
C3+HbaEUMsGl+yiKWeM28feMOlOgzGe5ZCZQgmOZ7+bkS8i4NomRdLuo6EDr
6ZrzSVdJTJl8QeKabArJXbEDtwK8JldwrgiW2eaDfHFW53AzQQTKoJI2Iz81
TUIsNTduERL+GI+qM9AUYkRFCwdRsQqKQbIsy0NORInw+O9OAfdNphJRLlzJ
Ug8JMKJTYIkJM0faCDW5AEYgMftjt8ssgZ4/yIrHadMTUJYakEMdIvXtU1xM
lvoyA5yppFA00aTrnQS0P+UURgbUMSMQl7FwzoBSdzn5AfEVZ8KC+fIpYEIT
Z7m6Z5hgkuKkaNu4zqOTHDOyd0HD3Bl7Ue5dn0xjrNhLTPjZxc0SIynXIq3o
EkwWMsqmiTFgdJO18LCJU6zc1D8JlHmemYRewzaMFtMVpgNCTDTKUc5yB/8r
zJZJzm55t9mSfv56h3FyR/Oif4uB8j5dbDFS7tTFxQOyMQza/R7sarvd7rTx
995Oo7cmrVYr6A077V7Qh+Y9YPV7Q9Szt6a99k5WBrIzhK24FbTE0tAHyRO6
6fS7IHR2+uFOnfSGvaA3CVudAJp1YB5TmFEHnsKM0HCw23LCHaSK7VYB8wPo
aYyZQIWXFXZNT8Xf6WAeVtRI5uSL+sEuffgqHIM8fBitxukiWZMh7b59oLAA
fQTNsFb8YOc+Dlm3/Kjig936gJ/a6WK6QQSBBQw265QVpXebBo1sH39cJlL9
Q/FVB2TwHsA98KN9kp/CVhg0glYj6L4OBo+6/Ufdzs8GZ5iMR8i7cx896SDo
twatYge9R8Dttlo/V0+wMYAb1AIBrzZLsNI1lUKoVZoH6NPAR/vqQ0PTGw1A
ORhj/w4xdlHO4xl/cIwoimWPD+GfeI4Z+Cc+YFdMHIPw9hG4kpuKqUIviVXf
h4jc271evwtXrjcbAuLoTdqzbjDrAprvj4cdENQelFfxUIaifho6F34Gl+Vl
A0SLysE/NiZpuqIJNGjwXjeeRt0oCLv9/iQcR/EgBCzUn8Xt9qDfCqJd7nvQ
iqKo3e/GwXjcHXencdAaTONOezhpDbrdoHoBN85M2jiTIO6G8RSwTisAIJj1
Z8O405pOZ8NZuxOM29NdZjIZjiMgk9GsH7cmUR/+Fw/jeDJttQadaTCcFNCS
6hhcxY/8hL0eQchto9aQl6sJIHEPXEbWZVzdY6gi8HeQeNOymtIT8dwsSrQ+
3+wWkm8+3ELCb90A+vlfRMMtFe+32/0dx+x12/12pzfuD9oDoeODHZt2gCoD
YR2CCG/cCnZs2g3bYRh3OkTy20zyd2wanBBncGw5g95w17VW8Aa7NjUsBHAH
d0PVTvzB7QzCLie+lTtA4rpbBy5rcEQ8PyIFfrl7B8IXvAqbR+G9+IrbmYJd
O9jKENzZwa3HtNUQ/NnLvcLfXS2OqcVl649h2aX0tbEIl5JfSGoRSjBGuffH
nIIZRVtsKLZdyjqi2TAEUEQle2mqfzkFzzjnnnzIepoqP0QRYnkSJE1TCmXK
bQLvpkl0vkgz5BFwsEIODdfBNclk1s6ktZ6T0dm4yhLxdXG1usZbxahYIkcB
otUusH8gT3vkksjeLmRR1rU746uVEwVsUxRbtbcw0j5Pi3UiZiAprZu5NVfs
wNwE/Sxoq6RsWuaLFdJOkLJLbsRPJ1ddTTbdjJgTrv8XOANX63vJJtmNptYm
eQhfUYpq0/LvVzX7hiHK80NFg1jVT024IcduU9pJ7mrrbm7Z0Ypd3bKz/o67
KwOZaoTuSvudHV2jdvoIf/4MF2w76z/kim27+btdsqW9RcFVGHFXx3BzAI5r
NipQ5f2OvWDtjtigbcJk6P9ET3bvxcVO92MYQWrtiXNpu9ua7MqJgazTmzqO
nGE4Bc4MhD/4d7YrJ+h4o7Krqah/Qux4V+6Mxu/Azey36Tdg7FD9hPzhzjxp
P2QP1VYbXUsH7aiNzqX9oEcL3Jmd7sLUu8gVz/od+HfWN26mwa7MZhC1Wp3O
uN0ZtvqDsBV04T8t6GvcDvuT3XRYsJz2uBMMw/E0nLTjSdgZROEwDINuHI07
3d30esgxB+NZPwLhIA67kwBm0+kPh60u783OpwM8OpwF7EUXfmvj72HcBwmt
177XnrQm7cE4sHsyCTrheBiNo107CUHE6YzHg0kfTinoRZ32ZDjsAm0YdibR
TsoC+BmDpD/s9oNZt9sbjsf96QQAfjYc3G9PgGKRCDJFuQIgZAIQEwYdXGa4
K9i3p+2x3Y2oFw2nk+ls3B4MOtNoV7AHHqITd+IgHsSDXgjbMZiE0/Gk3wJC
svPpdNrRMGjD9Z3Gw3a7PY57uzlm3C0l3f7FdlfNz9ayqm7ZiyK2No7Zytux
s9CrBmDRBnIDjuO2snX8yQHWIlJTY83fozS6swTzHG/Yczuj+gprzXeYCZNa
WZbY30vFs06sdpH0DO/2NZGyLx4F4uR5X1duAPCw073bmTskk7curYG0CNlg
Kie4QdO8ZRxv9/Y2u/in+Xvf6QhtHaDz53OnH/T9Pbg/m9mWOTDscBd/ZnRm
3o0H29nl2fF5Xr1L0vW7NCO356KHE3SQYRZd3y91AMDS6bbQ96eiETIqFY38
nVdifoijPPt2tEXXe+sPSAKGGjKZu197WGWBLN63vZJRpY/3bV+kp7u6sfm7
KZZ2DS24L2CBwEMFVbLmKpvcE6gGrdbwHwxTfxCoLDvBfMJ9D7XIV9wbKIUP
UQbjvu2LDMn/EKDiSuPNeTK+J0SFbYCo9r8ymvo7WTLzU+TN7ts+z8t1duUr
zc/fx9TRz44Q9Yf5PxOJQ5pX1730FVU+ID0b5fNnPamre8XHDVGf5kL0jQqW
/HI36+VGvHJ+oEz1sdTglCTo8dSI3u74Ju33JVV34PJBqO9vyhycOqOmXyxW
h66dXAPWuF3Z7Mmc+9mtXIsJ3EVHSaWCC65gxgVVy7yIl1OhpiqqM80sSKfJ
U+FPtfD6D1g/zupChZ2dIg8L13iZLjjggsva6QwnFzFX4L4U/TVueVWlVq5O
jFEX1zHl/17h1I2i9HolJ8o1+bza69UmQ83ZD079gKymnoBunLopbEtDcL0B
CSlyp57jz1XNzeisBlzhO1LFopKw9v7DdPDd08bg6+/nv50r71qDradNp0+s
dtB5jTo8cuS2qsDadHyOMEOPaxU6P22expcJO+DDH8mbt+YFVuyW58D//vw+
OPzwLrw+ubi4Of3p+XHvJzu/a9wU/rSSS4cvhDvHj/K4Uth080x8KWq4Z7DW
fINCUz0p1yxSwPZlxPxX4GTnsJd1mNaGPPRqBXRg/uJffsn7ntP1Vqvaa7Jt
kCnibCPhO9sOGA5vftqgvXv1vvcit826y0/Ku9w7//rr4lFXn3TuoB2vYm2d
8Df4UwwLsTBWADFfXrMrQM0VQGrqzjdaLv2TNK2IJMh161rk7Xm7IQ21Mzai
HLPjqH/M4Fs4dXRLL5xyLTxqn10cv7gYnUXnbx9H6eGH5M37zsV56/Xy8cuL
Dwejk9HB5cs3371+Nx69ffztKb15//7Xx98fHz6erW7g35ODgw8HB1dvfh59
PzmCv4/PL5/99vT98QH8/l369vmbV2/eHj4Nzs+7k8YP785e99YfXz2eHrZ/
eP/mZdT58f38x8Z33e+Xj5ffvTo8fDd48v7t+fqn719G399cvzj9ud24fPLd
8/aPw9nTjzDNRXZ5EDWeXS2/ffXbi+vGT9eLRq8/vnoyf7+B7flt9PKoE2S9
d6N1//n47If2r9dP5h9PN78+nl3HnSDOvs7dF7t/T5PF5qO6WdaKpol7n8Zm
LDULn9RKXg+1J29fF08hvnnSin8cJS+SJ9/9EHyfPD18cjF+PMG/T9/8dho8
T54Mm/DRctJ+Rh89fXPSmj7+4Tf4/81pcp1Eb09ap+/Tj8/fv/n4/LdJ68XR
Tx3oZB5/C51edoPx4+vs9PIk+PnwtHeanGani+fBTwn+Dh2fv7/uLE6eXTxd
Pnmzefnj1bOXv30XPH72/uLmya/h1dsfz4NO0Pvxu+y36++d7eNV5eJL/BMs
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
JpSLAGexThi2dXuj/w+zY5VY4YgCAA==

-->

</rfc>
